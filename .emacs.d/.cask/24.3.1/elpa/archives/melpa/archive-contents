
(1 (zotelo . [(20130428 604) nil "Manage Zotero collections from emacs" single ";;; Commentary:
;;
;; Zotelo helps you efficiently export and synchronize local databases (bib,
;; rdf, html, json etc) and [Zotero](http://www.zotero.org) collections directly
;; from emacs.
;;
;; Zotelo can be used in conjunction with any emacs mode but is primarily
;; intended for bibtex and RefTeX users.
;;
;; zotelo-mode-map lives on  C-c z prefix.
;;
;;   *Instalation*
;;
;;   (add-hook 'TeX-mode-hook 'zotelo-minor-mode)
;;
;;  See https://github.com/vitoshka/zotelo for more
;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar zotelo-minor-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map \"\\C-czu\" 'zotelo-update-database)
    (define-key map \"\\C-cze\" 'zotelo-export-secondary)
    (define-key map \"\\C-czs\" 'zotelo-set-collection)
    (define-key map \"\\C-czc\" 'zotelo-set-collection)
    (define-key map \"\\C-czm\" 'zotelo-mark-for-auto-update)
    (define-key map \"\\C-czr\" 'zotelo-reset)
    (define-key map \"\\C-czt\" 'zotelo-set-translator)
    (define-key map \"\\C-czT\" 'zotelo-toggle-auto-update)
    map))

(defvar zotelo--check-timer nil
  \"Global timer executed at `zotelo-check-interval' seconds. \")

(defvar zotelo-check-interval 5
  \"Seconds between checks for zotero database changes.
Note that zotelo uses idle timer. Yeach time emacs is idle for
this number of seconds zotelo checks for an update.\")

;; (defvar zotelo-use-ido t
;;   \"If t will try to use ido interface\")

(defvar zotelo-auto-update-all nil
  \"If t zotelo checks for the change in zotero database
every `zotelo-check-interval' seconds and auto updates all
buffers with active `zotelo-minor-mode'.

If nil the only updated files are those with non-nil file local
variable `zotelo-auto-update'. See
`zotelo-mark-for-auto-update'. \")

(defgroup zotelo nil \"Customization for zotelo\"
  :group 'convenience)

;;;###autoload
(defcustom zotelo-default-translator 'BibTeX
  \"The name of the default zotero-translator to use (a symbol).

Must correspond to one of the keys in `zotelo-translators' alist.

You can set this varialbe interactively with
`zotelo-set-translator'.
\"
  :type 'symbol
  :group 'zotelo)

;;;###autoload
(defcustom zotelo-translators
  '((BibTeX \"9cb70025-a888-4a29-a210-93ec52da40d4\" \"bib\")
    (BibLaTeX \"ba4cd274-f24e-42cf-8ff2-ccfc603aacf3\" \"bib\")
    (BibLaTeX-cite \"fe7a85a9-4cb5-4986-9cc3-e6b47d6660f7\" \"bib\")
    (Zotero-RDF \"14763d24-8ba0-45df-8f52-b8d1108e7ac9\" \"rdf\")
    (Wikipedia \"3f50aaac-7acc-4350-acd0-59cb77faf620\" \"txt\")
    (CSL-JSON \"bc03b4fe-436d-4a1f-ba59-de4d2d7a63f7\" \"json\")
    (Bookmarks-HTML \"4e7119e0-02be-4848-86ef-79a64185aad8\" \"html\")
    (Refer/BibIX  \"881f60f2-0802-411a-9228-ce5f47b64c7d\" \"txt\")
    (RIS \"32d59d2d-b65a-4da4-b0a3-bdd3cfb979e7\" \"ris\")
    (MODS  \"0e2235e7-babf-413c-9acf-f27cce5f059c\" \"xml\")
    (Bibliontology-RDF \"14763d25-8ba0-45df-8f52-b8d1108e7ac9\" \"rdf\"))
  \"An alist of zotero translators ids.
Each cell consists an user friendly key, and a value is a list of
an unique identifier used by zotero and an extension of the
target file.

Not all of the listed translatros are the default zotero
translators. You have to search and download them yourself.

Standard BibTeX (zotero): '9cb70025-a888-4a29-a210-93ec52da40d4'
BibLaTeX (downloaded from https://code.google.com/p/zotero-biblatex-export/): 'ba4cd274-f24e-42cf-8ff2-ccfc603aacf3'
\"
  :group 'zotelo
  :type 'alist
  )

(defvar zotelo--get-zotero-database-js
  \"var zotelo_zotero = Components.classes['@zotero.org/Zotero;1'].getService(Components.interfaces.nsISupports).wrappedJSObject;
zotelo_zotero.getZoteroDatabase().path;\")

(defvar zotelo--get-zotero-storage-js
  \"var zotelo_zotero = Components.classes['@zotero.org/Zotero;1'].getService(Components.interfaces.nsISupports).wrappedJSObject;
zotelo_zotero.getStorageDirectory().path;\")

(defvar zotelo--auto-update-is-on nil
  \"If t zotelo monitors changes in zotero database and reexports
  collections if needed.
  You can toggle it with  'C-c z T'
\")

(defvar zotelo--ignore-files (list \"_region_.tex\"))


(defvar zotelo--verbose nil)
(defun zotelo-verbose ()
  \"Toggle zotelo debug messages (all printed in *message* buffer)\"
  (interactive)
  (message \"zotelo verbose '%s'\" (setq zotelo--verbose (not zotelo--verbose))))

(defun zotelo--message (str)
  (when zotelo--verbose
    (with-current-buffer \"*Messages*\"
      (goto-char (point-max))
      (insert (format \"\\n zotelo message [%s]\\n %s\\n\" (current-time-string) str)))))

(defvar zotelo--render-collection-js
  \"var zotelo_render_collection = function() {
    var R=%s;
    var Zotero = Components.classes['@zotero.org/Zotero;1'].getService(Components.interfaces.nsISupports).wrappedJSObject;
    var print_names = function(collections, prefix){
        for (c in collections) {
            var fullname = prefix + '/' + collections[c].name;
            R.print(collections[c].id + ' ' + fullname);
            if (collections[c].hasChildCollections) {
                var subcol = Zotero.getCollections(collections[c].id);
                print_names(subcol, fullname); 
            }}};
    print_names(Zotero.getCollections(), '');
    var groups = Zotero.Groups.getAll();        
    for (g in groups){
        print_names(groups[g].getCollections(), '/*groups*/'+groups[g].name);
    }};
\"
  )


;;;; moz-repl splits long commands. Need to send it partially, but then errors
;;;; in first parts are not visible ... :(
;;;; todo: insert the check dirrectly in moz-command ??? 
(defvar zotelo--export-collection-js
  \"
var zotelo_filename=('%s');
var zotelo_id = %s;
var zotelo_translator_id = '%s';
var zotelo_prefs = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('extensions.zotero.');
var zotelo_file = Components.classes['@mozilla.org/file/local;1'].createInstance(Components.interfaces.nsILocalFile);
var zotelo_recColl = zotelo_prefs.getBoolPref('recursiveCollections');
zotelo_file.initWithPath(zotelo_filename);
//split
var zotelo_zotero = Components.classes['@zotero.org/Zotero;1'].getService(Components.interfaces.nsISupports).wrappedJSObject;
var zotelo_collection = true;
var zotelo_translator = new zotelo_zotero.Translate('export');
if (zotelo_id != 0){ //not all collections
    zotelo_collection = zotelo_zotero.Collections.get(zotelo_id);
    zotelo_translator.setCollection(zotelo_collection);
};
//split
if(zotelo_collection){
    zotelo_translator.setLocation(zotelo_file);
    zotelo_translator.setTranslator(zotelo_translator_id);
    zotelo_prefs.setBoolPref('recursiveCollections', true);
    zotelo_translator.translate();
    zotelo_prefs.setBoolPref('recursiveCollections', zotelo_recColl);
    zotelo_out=':MozOK:';
}else{
    zotelo_out='Collection with the id ' + zotelo_id + ' does not exist.';
};
//split
zotelo_out;
\"
  \"Command to be sent to zotero request export.\"
  )

(defvar zotelo--dateModified-js
  \"var zotelo_zotero = Components.classes['@zotero.org/Zotero;1'].getService(Components.interfaces.nsISupports).wrappedJSObject;
var zotelo_id = %s;
var zotelo_collection = zotelo_zotero.Collections.get(zotelo_id);
if(zotelo_collection){
   ':MozOK:' + zotelo_collection.dateModified;
}else{
   'Collection with the id ' + zotelo_id + ' does not exist.';
}\"

  \"Command to get last modification date of the collection.\")

;;;###autoload
(define-minor-mode zotelo-minor-mode
  \"zotelo minor mode for interaction with Firefox.
With no argument, this command toggles the mode.
Non-null prefix argument turns on the mode.
Null prefix argument turns off the mode.

When this minor mode is enabled, `zotelo-set-collection' prompts
for zotero collection and stores it as file local variable . To
manually update the BibTeX data base call
`zotelo-update-database'. The \\\"file_name.bib\\\" file will be
created with the exported zotero items. To specify the file_name
just insert insert \\\\bibliography{file_name} anywhere in the
buffer.

This mode is designed mainly for latex modes and works in
conjunction with RefTex, but it can be used in any other mode
such as org-mode.

The following keys are bound in this minor mode:

\\\\{zotelo-minor-mode-map}\"
  nil
  (zotelo--auto-update-is-on \" ZX\" \" zx\")
  :keymap zotelo-minor-mode-map
  :group 'zotelo
  (if zotelo-minor-mode
      (progn
        (unless (timerp zotelo--check-timer)
          (setq zotelo--check-timer
                (run-with-idle-timer 5 zotelo-check-interval 'zotelo--check-and-update-all)))
        )
    (unless
        (loop for b in (buffer-list)
              for is-zotelo-mode = (buffer-local-value 'zotelo-minor-mode b)
              until is-zotelo-mode
              finally return is-zotelo-mode)
      ;; if no more active zotelo mode, cancel the timer and kill the process
      (when (timerp zotelo--check-timer)
        (cancel-timer zotelo--check-timer)
        (setq zotelo--check-timer nil)
        (delete-process (zotelo--moz-process))
        (kill-buffer zotelo--moz-buffer)
        )
      )
    )
  )


(defun zotelo--check-and-update-all ()
  \"Function run with `zotelo--check-timer'.\"
  (when zotelo--auto-update-is-on
    (let ( out id any-z-buffer-p z-buffer-p)
      (zotelo--message  \"zotelo checking for updates.\")
      (dolist (b  (buffer-list)) ;iterate through zotelo buffers
        (setq z-buffer-p (buffer-local-value 'zotelo-minor-mode b))
        (when z-buffer-p
          (setq any-z-buffer-p t))
        (when (and
               ;; zotelo buffer?
               z-buffer-p
               ;; exclusion reg-exp  matched?,
               (not (delq nil (mapcar (lambda (reg)
                                        (string-match reg (buffer-name b)))
                                      zotelo--ignore-files)))
               ;; collection is set?,
               (assoc 'zotero-collection (buffer-local-value 'file-local-variables-alist b))
               ;; auto-update-all?, auto-update?
               (let ((auto-update
                      (assoc 'zotelo-auto-update (buffer-local-value 'file-local-variables-alist b))))
                 (if (and zotelo-auto-update-all (null auto-update))
                     (setq auto-update '(t . t)))
                 (cdr auto-update))
               )
          (with-current-buffer b
            (ignore-errors
              (setq id (zotelo-update-database t))))
          (when id
            (setq out
                  (append (list (buffer-name b)) out))
            )))
      (if (> (length out) 0)
          (message \"Bibliography updated in %s buffers: %s.\" (length out) out))
      (when (and (not any-z-buffer-p)
                 (timerp zotelo--check-timer))
        ;; stop timer if no more zotelo buffers
        (cancel-timer zotelo--check-timer)
        (setq zotelo--check-timer nil)
        (delete-process (zotelo--moz-process))
        (kill-buffer zotelo--moz-buffer)
        )
      )))


;;;###autoload
(defun zotelo-export-secondary ()
  \"Export zotero collection into  secondary BibTeX database.

Before export, ask for a secondary database and zotero collection
to be exported into the database. Secondary databases are those
in \\\\bibliography{file1, file2, ...}, except the first one.

Error ocures if there is only one (primary) file listed in 
\\\\bibliography{...}.

Error if zotero collection is not found by MozRepl\"
  (interactive)
  (let* ((files (zotelo--locate-bibliography-files))
	 (bibfile (cond
		   ((< (length files) 2)
                    (error \"No secondary databases (\\\\bibliography{...} lists contain less than 2 files).\"))
		   ((= (length files) 2)
		    (cadr files))
		   (t (zotelo--read (cdr files) \"File to update: \"))))
	 (collection (zotelo-set-collection
		      (format \"Export into '%s': \" (file-name-nondirectory bibfile))
		      'no-update 'no-set)))
    (zotelo-update-database nil bibfile (get-text-property 0 'zotero-id collection))))


(defun zotelo-set-translator ()
  \"Ask to choose from available translators and set `zotelo-default-translator'.\"
  (interactive)
  (let ((tnames (mapcar (lambda (el) (symbol-name (car el)))
                        zotelo-translators)))
    (setq zotelo-default-translator
          (intern (zotelo--read tnames \"Choose translator: \"
                                (symbol-name zotelo-default-translator))))
    (message \"Translator set to %s\" zotelo-default-translator)))


;;;###autoload
(defun zotelo-update-database (&optional check-zotero-change bibfile id)
  \"Update the primary BibTeX database associated with the current buffer.

Primary database is the first file in \\\\bibliography{file1, file2,
...}, list. If you want to export into a different file use
`zotelo-update-database-secondary'.

If BIBFILE is supplied, don't infer from \\\\bibliography{...} statement.

If ID is supplied, don't infer collection id from file local variables.

Through an error if zotero collection has not been found by MozRepl\"
  (interactive)
  (let ((bibfile (or bibfile
		     (car (zotelo--locate-bibliography-files))))
        (proc  (zotelo--moz-process))
        (id (or id
		(zotelo--get-local-collection-id)))
        (file-name (file-name-nondirectory (file-name-sans-extension (buffer-file-name))))
        (translator (assoc zotelo-default-translator zotelo-translators))
        all-colls-p cstr bib-last-change zotero-last-change com com1)
    (unless translator
      (error \"Cannot find translator %s in `zotelo-translators' alist\" zotelo-default-translator))
    
    (unless bibfile
      ;; (setq file-name (concat file-name \".\"))
      (setq bibfile file-name)
      (message \"Using '%s' filename for %s export.\" file-name zotelo-default-translator)
      )
    
    (setq bibfile (concat (expand-file-name bibfile) \".\" (nth 2 translator)))
    (setq bib-last-change (nth 5 (file-attributes bibfile))) ;; nil if bibfile does not exist
    (setq bibfile (replace-regexp-in-string \"\\\\\\\\\" \"\\\\\\\\\"
					    (convert-standard-filename bibfile) nil 'literal))
    ;; Add cygwin support.
    ;; \"C:\\\\foo\\\\test.bib\" workes with javascript.
    ;; while \"/foo/test.bib\" \"C:\\cygwin\\foo\\test.bib\" and \"C:/cygwin/foo/test.bib\" don't
    (when (eq system-type 'cygwin)
      (setq bibfile
            (replace-regexp-in-string
             \"/\" \"\\\\\\\\\\\\\\\\\" (substring
                             (shell-command-to-string (concat \"cygpath -m '\" bibfile \"'\")) 0 -1))))
    (when (and (called-interactively-p 'any) (null id))
      (zotelo-set-collection \"Zotero collection is not set. Choose one: \" 'no-update)
      (setq id (zotelo--get-local-collection-id)))
    
    (unless (file-exists-p (file-name-directory bibfile))
      (error \"Directory '%s' does not exist; create it first.\" (file-name-directory bibfile)))
    (when check-zotero-change
      (set-time-zone-rule t)
      (with-current-buffer (moz-command (format zotelo--dateModified-js id))
        (goto-char (point-min))
        (when (re-search-forward \":MozOK:\" nil t) ;; ingore the error it is  cought latter
          (setq zotero-last-change (date-to-time
                                    (buffer-substring-no-properties (point) (point-max))))
          )))
    (when (and id
               (or (null check-zotero-change)
                   (null bib-last-change)
                   (time-less-p bib-last-change zotero-last-change)))
      (setq cstr (format zotelo--export-collection-js bibfile id (cadr translator)))
      (zotelo--message (format \"Executing command: \\n\\n (moz-command (format zotelo--export-collection-js '%s' %s))\\n\\n translated as:\\n %s\\n\"
			       bibfile id cstr))
      (message \"Updating '%s' ...\" (file-name-nondirectory bibfile))
      (setq com (split-string cstr \"//split\" t))
      (while (setq com1 (pop com))
	(when com ;; append to all except the last one
	  (setq com1 (concat com1 \"\\\":MozOk:\\\"\")))
	(with-current-buffer (moz-command com1)
	  (goto-char (point-min))
	  (unless (re-search-forward \":MozOK:\" nil t)
	    (error \"MozError: \\n%s\" (buffer-substring-no-properties (point) (point-max))))
          ))
      (let ((buf (get-file-buffer bibfile)))
        (when buf (with-current-buffer buf (revert-buffer 'no-auto 'no-conf))))
      (message \"'%s' updated successfully (%s)\" (file-name-nondirectory bibfile) zotelo-default-translator)
      id)
    )
  )

(defcustom zotelo-bibliography-commands '(\"bibliography\" \"nobibliography\" \"zotelo\")
  \"List of commands which specify databases to use.

For example \\\\bibliography{file1,file2} or \\\\zotelo{file1,file2}
both specify that file1 is a primary database and file2 is the
secondary one. 
\"
  :group 'zotelo
  :type 'list)


(defun zotelo--locate-bibliography-files ()
  ;; Scan buffer for bibliography macro and return as a list.
  ;; Modeled after the corresponding reftex function

  (save-excursion
    (goto-char (point-max))
    (if (re-search-backward
         (concat
                                        ;           \"\\\\(\\\\`\\\\|[\\n\\r]\\\\)[^%]*\\\\\\\\\\\\(\"
          \"\\\\(^\\\\)[^%\\n\\r]*\\\\\\\\\\\\(\"
          (mapconcat 'identity zotelo-bibliography-commands \"\\\\|\")
          \"\\\\){[ \\t]*\\\\([^}]+\\\\)\") nil t)
        (split-string   (when (match-beginning 3)
                          (buffer-substring-no-properties (match-beginning 3) (match-end 3)))
                        \"[ \\t\\n\\r]*,[ \\t\\n\\r]*\"))))

;;;###autoload
(defun zotelo-set-collection (&optional prompt no-update no-file-local)
  \"Ask for a zotero collection.
Ido interface is used by default. If you don't like it set `zotelo-use-ido' to nil.


In `ido-mode' use \\\"C-s\\\" and \\\"C-r\\\" for navigation. See
ido-mode emacs wiki for many more details.

If no-update is t, don't update after setting the collecton.

If no-file-local is non-nill don't set file-local variable.

Return the properized collection name.
\"
  (interactive)
  (let ((buf (get-buffer-create \"*moz-command-output*\"))
	colls name id)
    ;; set up the collection list
    (moz-command (format zotelo--render-collection-js
			 (process-get (zotelo--moz-process) 'moz-prompt)))
    (moz-command \"zotelo_render_collection()\" buf)
    (with-current-buffer buf
      (goto-char (point-min))
      (zotelo--message (format \"Collections:\\n %s\" 
			       (buffer-substring-no-properties (point-min) (min 500 (point-max)))))
      (while (re-search-forward \"^\\\\([0-9]+\\\\) /\\\\(.*\\\\)$\" nil t)
	(setq id (match-string-no-properties 1)
	      name (match-string-no-properties 2))
	(setq colls (cons
		     (propertize name 'zotero-id id)
		     colls))))

    (if (null colls)
	(error \"No collections found or error occured see *moz-command-output* buffer for clues.\")
      ;; (setq colls (mapcar 'remove-text-properties colls))
      (setq name (zotelo--read (cons (propertize \"*ALL*\" 'zotero-id \"0\") (nreverse colls))
			       prompt))
      (unless no-file-local
	(save-excursion
	  (add-file-local-variable 'zotero-collection
				   (propertize (get-text-property 0 'zotero-id name)
					       'name (substring-no-properties name)))
	  (hack-local-variables))
	(unless no-update
	  (zotelo-update-database)))
      name
      )))



(defun zotelo-mark-for-auto-update (&optional unmark)
  \"Mark current file for auto-update.

If the file is marked for auto-update zotelo runs
`zotelo-update-database' on it whenever the zotero data-base is
updated.

File is marked by adding file local variable
'zotelo-auto-update'. To un-mark the file call this function with
an argument or just delete or set to nil the local variable at
the end of the file.
\"
  (interactive \"P\")
  (save-excursion
    (if unmark
        (progn
          (delete-file-local-variable 'zotelo-auto-update)
          (setq file-local-variables-alist
                (assq-delete-all 'zotelo-auto-update file-local-variables-alist)))
      (add-file-local-variable 'zotelo-auto-update t)
      (hack-local-variables)
      )
    )
  )

;;;###autoload
(defun zotelo-reset ()
  \"Reset zotelo.\"
  (interactive)
  (delete-process (zotelo--moz-process))
  (kill-buffer zotelo--moz-buffer)
  (message \"Killed moz process\")
  )


(defun zotelo-toggle-auto-update ()
  \"Togles auto-updating in all buffers.
Note that once toggled in your firefox and MozRepl must be
started, otherwise you will start getting error screens. \"
  (interactive)
  (setq zotelo--auto-update-is-on (not zotelo--auto-update-is-on))
  )


(defun zotelo--get-local-collection-id ()
  (cdr (assoc 'zotero-collection file-local-variables-alist)))

(defun zotelo--read (collections &optional prompt default)
  \"Read a choice from zotero collections via Ido.\"
  (let (reset-ido)
    (when  (and (require 'ido)
		(not ido-mode))
      ;; ido initialization
      (setq reset-ido t)
      (ido-init-completion-maps)
      (add-hook 'minibuffer-setup-hook 'ido-minibuffer-setup)
      (add-hook 'choose-completion-string-functions 'ido-choose-completion-string)
      (add-hook 'kill-emacs-hook 'ido-kill-emacs-hook))
    (unwind-protect
	(ido-completing-read (or prompt \"Collection: \") collections
			     nil t nil nil default)
      (when reset-ido
	(remove-hook 'minibuffer-setup-hook 'ido-minibuffer-setup)
	(remove-hook 'choose-completion-string-functions 'ido-choose-completion-string)
	(remove-hook 'kill-emacs-hook 'ido-kill-emacs-hook)
	))))




;;;; Moz utilities

(defvar zotelo--moz-host \"localhost\")
(defvar zotelo--moz-port 4242)
(defvar zotelo--moz-buffer nil)
(defvar zotelo--startup-error-count 0)
(defvar zotelo--max-errors 10)

(defun zotelo--moz-process ()
  \"Return inferior MozRepl process.  Start it if necessary.\"
  (or (if (buffer-live-p zotelo--moz-buffer)
          (get-buffer-process zotelo--moz-buffer))
      (progn
        (zotelo--moz-start-process)
        (zotelo--moz-process))))

(defun zotelo--moz-start-process ()
  \"Start mozrepl process and connect to Firefox.
Note that you have to start the MozRepl server from Firefox.\"
  (interactive)
  (setq zotelo--moz-buffer (get-buffer-create \"*zoteloMozRepl*\"))
  (condition-case err
      (let ((proc (make-network-process :name \"zoteloMozRepl\" :buffer zotelo--moz-buffer
					:host zotelo--moz-host :service zotelo--moz-port
					:filter 'moz-ordinary-insertion-filter)))
        (sleep-for 0 100)
	(set-process-query-on-exit-flag proc nil)
        (with-current-buffer zotelo--moz-buffer
          (set-marker (process-mark proc) (point-max)))
        (setq zotelo--startup-error-count 0))
    (file-error
     (let ((buf (get-buffer-create \"*MozRepl Error*\")))
       (setq zotelo--startup-error-count (1+ zotelo--startup-error-count))
       (with-current-buffer buf
         (erase-buffer)
         (insert \"Can't start MozRepl, the error message was:\\n\\n     \"
                 (error-message-string err)
                 \"\\n\"
                 \"\\nA possible reason is that you have not installed\"
                 \"\\nthe MozRepl add-on to Firefox or that you have not\"
                 \"\\nstarted it.  You start it from the menus in Firefox:\"
                 \"\\n\\n     Tools / MozRepl / Start\"
                 \"\\n\"
                 \"\\nSee \")
         (insert-text-button
          \"MozRepl home page\"
          'action (lambda (button)
                    (browse-url
                     \"http://hyperstruct.net/projects/mozrepl\")
                    )
          'face 'button)
         (insert
          \" for more information.\"
          \"\\n\"
          \"\\nMozRepl is also available directly from Firefox add-on\"
          \"\\npages, but is updated less frequently there.\\n\\n\"
          (format \"zotelo Error Count: %s\\n\\n%s\"
                  zotelo--startup-error-count
                  (if (not (and (>= zotelo--startup-error-count 10)
                                zotelo--auto-update-is-on))
                      \"If zotelo auto-update is on, press \\\"C-c z t\\\" to turn it off.\"
                    (setq zotelo--auto-update-is-on nil)
                    (setq zotelo--startup-error-count 0)
                    \"Too many errors. zotelo auto-update was turned off!\\nUse [C-c z t] to switch it on.\")))
         )
       (kill-buffer \"*zoteloMozRepl*\")
       (display-buffer buf t)
       (error \"zotelo cannot start MozRepl\")
       ))
    ))

(defun moz-ordinary-insertion-filter (proc string)
  \"simple filter for command execution\"
  (with-current-buffer (process-buffer proc)
    (let ((ready (string-match \"\\\\(\\\\w+\\\\)> \\\\'\" string))
	  moving)
      (when ready
	(process-put proc 'moz-prompt (match-string-no-properties 1 string)))
      (process-put proc 'busy (not ready))
      (setq moving (= (point) (process-mark proc)))
      (save-excursion
        ;; Insert the text, moving the process-marker.
        (goto-char (process-mark proc))
        (insert string)
        (set-marker (process-mark proc) (point)))
      (if moving (goto-char (process-mark proc))))
    ))

(defvar moz-verbose nil
  \"If t print informative statements.\")

;;;###autoload
(defun moz-command (com &optional buf)
  \"Send the moz-repl  process command COM and delete the output
from the MozRepl process buffer.  If an optional second argument BUF
exists, it must be a string or an existing buffer object. The
output is inserted in that buffer. BUF is erased before use.

New line is automatically appended.
\"
  (if buf
      (setq buf (get-buffer-create buf))
    (setq buf (get-buffer-create \"*moz-command-output*\")))
  (let ((proc (zotelo--moz-process))
        oldpb oldpf oldpm)
    (save-excursion
      ;; (set-buffer sbuffer)
      (when (process-get proc 'busy)
        (process-send-string proc \";\\n\") ;; clean up unfinished
        (sleep-for 0 100)
        (when (process-get proc 'busy)
          (error
           \"MozRepl process is not ready. Try latter or reset.\")))
      (setq oldpf (process-filter proc))
      (setq oldpb (process-buffer proc))
      (setq oldpm (marker-position (process-mark proc)))
      ;; need the buffer-local values in result buffer \"buf\":
      (unwind-protect
	  (progn
	    (set-process-buffer proc buf)
	    (set-process-filter proc 'moz-ordinary-insertion-filter)
	    ;; Output is now going to BUF:
            (with-current-buffer buf
	      (erase-buffer)
	      (set-marker (process-mark proc) (point-min))
	      (process-put proc 'busy t)
	      (process-send-string proc (concat com \"\\n\"))
	      (moz-wait-for-process proc)
	      ;;(delete-region (point-at-bol) (point-max))
	      )
	    (zotelo--message \"Moz-command finished\"))
	;; Restore old values for process filter
	(set-process-buffer proc oldpb)
	(set-process-filter proc oldpf)
	(set-marker (process-mark proc) oldpm oldpb) ;; need oldpb here!!! otherwise it is not set for some reason
	)
      ))
  buf)


(defun moz-wait-for-process (proc &optional wait)
  \"Wait for 'busy property of the process to become nil.
If SEC-PROMPT is non-nil return if secondary prompt is detected
regardless of whether primary prompt was detected or not.  If
WAIT is non-nil wait for WAIT seconds for process output before
the prompt check, default 0.01s. \"
  ;; (unless (eq (process-status proc) 'run)
  ;;   (error \"MozRepl process has died unexpectedly.\"))
  (setq wait (or wait 0.01))
  (save-excursion
    (while (or (accept-process-output proc wait)
	       (process-get proc 'busy)))))


;; (defun inferior-moz-track-proc-busy (comint-output)
;;   \"track if process returned the '>' prompt and mark it as busy if not.\"
;;   (if (string-match \"\\\\(\\\\w+\\\\)> \\\\'\" comint-output)
;;       (process-put (get-buffer-process (current-buffer)) 'busy nil)
;;     (process-put (get-buffer-process (current-buffer)) 'busy t)))

;; (defun zotelo-insert-busy-hook ()
;;   \"Add `inferior-moz-track-proc-busy' to comint-outbut-filter hook \"
;;   (add-hook 'comint-output-filter-functions 'inferior-moz-track-proc-busy nil t)
;;   )

;; (add-hook 'inferior-moz-hook 'zotelo-insert-busy-hook)

(provide 'zotelo)
;;; zotelo.el ends here.
"]) (zossima . [(20121123 1635) ((inf-ruby (2 2 3))) "Ruby from Emacs" tar ";;; Commentary:

;; Jump to definition, driven by a live Ruby subprocess.

;; Explain to me again why doesn't this exist yet?
;; If you tell me \"tags files\" I'm going to kick you.

;;; Install

;; M-x package-install zossima (j/k not yet)

;;; Usage

;; (add-hook 'ruby-mode-hook 'zossima-mode)
;;
;;  - M-. to jump to a definition
;;  - M-, to jump back
;;
;; Before using `zossima-jump', call `run-ruby' or `rinari-console'.

"]) (zoom-frm . [(20140101 56) ((frame-fns (0)) (frame-cmds (0))) "Commands to zoom frame font size." single ";;; Commentary:
;;
;;  Commands to zoom into and out of text.  They zoom a frame or a
;;  buffer, so that the text appears larger or smaller.
;;
;;  Commands `zoom-in', `zoom-out', and `zoom-in/out' do both kinds of
;;  zooming.  They can behave like command `text-scale-adjust',
;;  zooming a buffer wherever it is displayed, or they can zoom an
;;  entire single frame (all of its windows).  Hit `C-u' at any time
;;  while using these commands to toggle between buffer and frame
;;  zooming.
;;
;;  Because it is a more general replacement for `text-scale-adjust',
;;  I suggest you bind `zoom-in/out' to the keys bound by default to
;;  `text-scale-adjust': `C-x C-+', `C-x C-=', `C-x C--', and `C-x
;;  C-0'.
;;
;;  It is also handy to use a mouse button or wheel for zooming, hence
;;  the mouse binding suggestions.  For example, binding `zoom-in' and
;;  `zoom-out' to mouse wheel events gives you the zooming effect you
;;  are perhaps used to in a Web browser.
;;
;;  User option `zoom-frame/buffer' determines which kind of zooming
;;  (frame or buffer) is used by default.  You can customize this
;;  option, but (in Emacs 23 or later) you can also toggle it just by
;;  providing a prefix arg (`C-u') to `zoom-in/out', `zoom-in', or
;;  `zoom-out'.
;;
;;  Note about saving changes made dynamically using the commands
;;  defined here:
;;
;;    Some of the commands defined here change frame properties.  You
;;    can save any changes you have made, by using Customize.  To
;;    visit a Customize buffer of all unsaved changes you have made,
;;    use command `customize-customized'.
;;
;;    Frame parameter changes, such as font size, can be saved for
;;    future use by all frames or all frames of a certain kind.  For
;;    that, you must change the frame parameters of the correponding
;;    frame-alist variable.
;;
;;    There is no single variable for saving changes to parameters of
;;    the current frame.  Instead, there are several different
;;    frame-alist variables, which you can use to define different
;;    kinds of frames.  These include: `default-frame-alist',
;;    `initial-frame-alist', and `special-display-frame-alist'.  The
;;    complete list of such frame alist variables is available using
;;    function `frame-alist-var-names', defined in library
;;    `frame-cmds.el'.
;;
;;    Example: Suppose you change the font size of a frame and want to
;;    make that the default font size for new frames in the future.
;;    You will need to update the value of variable
;;    `default-frame-alist' to use the `font' parameter setting of the
;;    changed frame.
;;
;;    You can easily copy one or all parameter values from any given
;;    frame to any frame alist (such as `default-frame-alist'), by
;;    using the commands `set-frame-alist-parameter-from-frame' and
;;    `set-all-frame-alist-parameters-from-frame'.  Those commands are
;;    defined in library `frame-cmds.el'.
;;
;;
;;  Commands defined here:
;;
;;    `toggle-zoom-frame', `zoom-all-frames-in',
;;    `zoom-all-frames-out', `zoom-frm-in', `zoom-frm-out',
;;    `zoom-frm-unzoom', `zoom-in', `zoom-in/out' (Emacs 23+),
;;    `zoom-out'.
;;
;;
;;  User options (variables) defined here:
;;
;;    `frame-zoom-font-difference', `zoom-frame/buffer' (Emacs 23+).
;;
;;
;;  Put this in your init file (`~/.emacs'): (require 'zoom-frm)
;;
;;  Suggested key bindings:
;;
;;    Emacs 23 and later:
;;
;;    (define-key ctl-x-map [(control ?+)] 'zoom-in/out)
;;    (define-key ctl-x-map [(control ?-)] 'zoom-in/out)
;;    (define-key ctl-x-map [(control ?=)] 'zoom-in/out)
;;    (define-key ctl-x-map [(control ?0)] 'zoom-in/out)
;;
;;    Any Emacs version:
;;
;;    (global-set-key (if (boundp 'mouse-wheel-down-event) ; Emacs 22+
;;                        (vector (list 'control
;;                                      mouse-wheel-down-event))
;;                      [C-mouse-wheel])    ; Emacs 20, 21
;;                    'zoom-in)
;;    (when (boundp 'mouse-wheel-up-event) ; Emacs 22+
;;      (global-set-key (vector (list 'control mouse-wheel-up-event))
;;                      'zoom-out))
;;
;;    (global-set-key [S-mouse-1]    'zoom-in)
;;    (global-set-key [C-S-mouse-1]  'zoom-out)
;;    ;; Get rid of `mouse-set-font' or `mouse-appearance-menu':
;;    (global-set-key [S-down-mouse-1] nil)
;;
;;  The first two of the mouse bindings mean that in Emacs 22 or later
;;  you can hold the Control key and rotate the mouse wheel to zoom in
;;  and out, just as you might do in a Web browser.
;;
;;  (In Emacs 20 and 21, Control plus mouse wheeling zooms in, but to
;;  zoom out you need to use `C--' before wheeling with Control.  This
;;  is because Emacs 20 and 21 do not have separate events for the
;;  mouse wheel directions, and it is the prefix arg, not the wheel
;;  direction, that determines the effect.)
;;
;;
;;  See also these files for other frame commands:
;;
;;     `autofit-frame.el' - Automatically fit each frame to its
;;                          selected window.  Uses `fit-frame.el'.
;;
;;     `fit-frame.el'     - 1) Fit a frame to its selected window.
;;                          2) Incrementally resize a frame.
;;
;;     `doremi-frm.el'    - Incrementally adjust frame properties
;;                          using arrow keys and/or mouse wheel.
;;
;;     `frame-cmds.el'    - Miscellaneous frame and window commands.
;;
;;     `thumb-frm.el'     - Shrink frames to a thumbnail size and
;;                          restore them again.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (znc . [(20130811 2058) ((cl-lib (0 2)) (erc (5 3))) "ZNC + ERC" single nil]) (zlc . [(20130427 43) nil "Provides zsh like completion system to Emacs" single ";;; Commentary:

;; 'zlc.el' provides zsh like completion system to Emacs. That is, zlc
;; allows you to select candidates one-by-one by pressing `TAB'
;; repeatedly in minibuffer, shell-mode, and so forth. In addition,
;; with arrow keys, you can move around the candidates.
;;
;; To enable zlc, just put the following lines in your Emacs config.
;;
;; (require 'zlc)
;; (zlc-mode t)

;;; Customization:

;; To simulate zsh's `menu select', which allows you to move around
;; candidates, zlc arranges movement commands for 4 directions. If you
;; want to use these commands, bind them to certain keys in your Emacs
;; config.
;;
;; (let ((map minibuffer-local-map))
;;   ;;; like menu select
;;   (define-key map (kbd \"<down>\")  'zlc-select-next-vertical)
;;   (define-key map (kbd \"<up>\")    'zlc-select-previous-vertical)
;;   (define-key map (kbd \"<right>\") 'zlc-select-next)
;;   (define-key map (kbd \"<left>\")  'zlc-select-previous)
;;
;;   ;;; reset selection
;;   (define-key map (kbd \"C-c\") 'zlc-reset)
;;   )

"]) (zencoding-mode . [(20111230 2020) nil "Unfold CSS-selector-like expressions to markup" single ";;; Commentary:
;;
;; Unfold CSS-selector-like expressions to markup. Intended to be used
;; with sgml-like languages; xml, html, xhtml, xsl, etc.
;;
;; See `zencoding-mode' for more information.
;;
;; Copy zencoding-mode.el to your load-path and add to your .emacs:
;;
;;    (require 'zencoding-mode)
;;
;; Example setup:
;;
;;    (add-to-list 'load-path \"~/Emacs/zencoding/\")
;;    (require 'zencoding-mode)
;;    (add-hook 'sgml-mode-hook 'zencoding-mode) ;; Auto-start on any markup modes
;;
;; Enable the minor mode with M-x zencoding-mode.
;;
;; See ``Test cases'' section for a complete set of expression types.
;;
;; If you are hacking on this project, eval (zencoding-test-cases) to
;; ensure that your changes have not broken anything. Feel free to add
;; new test cases if you add new features.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (zenburn-theme . [(20140104 1137) nil "A low contrast color theme for Emacs." single ";;; Commentary:

;; A port of the popular Vim theme Zenburn for Emacs 24, built on top
;; of the new built-in theme support in Emacs 24.

"]) (zen-and-art-theme . [(20120622 737) nil "zen and art color theme for GNU Emacs 24" single nil]) (zeitgeist . [(20131228 1009) nil "No description available." single nil]) (zeal-at-point . [(20131210 503) nil "Search the word at point with Zeal" single nil]) (yaxception . [(20130430 1527) nil "provide framework about exception like Java for elisp" single ";;; Commentary:
;; 
;; This extension provides framework about exception for elisp.
;; The framework features are the following.
;; - try/catch/finally coding style like Java
;; - custom error object
;; - stacktrace like Java

"]) (yasnippet . [(20140106 1009) nil "Yet another snippet extension for Emacs." tar ";;; Commentary:
;;
;;   Basic steps to setup:
;;
;;    (add-to-list 'load-path
;;                 \"~/path-to-yasnippet\")
;;    (require 'yasnippet)
;;    (yas-global-mode 1)
;;
;;
;;   Interesting variables are:
;;
;;       `yas-snippet-dirs'
;;
;;           The directory where user-created snippets are to be
;;           stored.  Can also be a list of directories.  In that case,
;;           when used for bulk (re)loading of snippets (at startup or
;;           via `yas-reload-all'), directories appearing earlier in
;;           the list shadow other dir's snippets.  Also, the first
;;           directory is taken as the default for storing the user's
;;           new snippets.
;;
;;           The deprecated `yas/root-directory' aliases this variable
;;           for backward-compatibility.
;;
;;
;;   Major commands are:
;;
;;       M-x yas-expand
;;
;;           Try to expand snippets before point.  In `yas-minor-mode',
;;           this is normally bound to TAB, but you can customize it in
;;           `yas-minor-mode-map'.
;;
;;       M-x yas-load-directory
;;
;;           Prompts you for a directory hierarchy of snippets to load.
;;
;;       M-x yas-activate-extra-mode
;;
;;           Prompts you for an extra mode to add snippets for in the
;;           current buffer.
;;
;;       M-x yas-insert-snippet
;;
;;           Prompts you for possible snippet expansion if that is
;;           possible according to buffer-local and snippet-local
;;           expansion conditions.  With prefix argument, ignore these
;;           conditions.
;;
;;       M-x yas-visit-snippet-file
;;
;;           Prompts you for possible snippet expansions like
;;           `yas-insert-snippet', but instead of expanding it, takes
;;           you directly to the snippet definition's file, if it
;;           exists.
;;
;;       M-x yas-new-snippet
;;
;;           Lets you create a new snippet file in the correct
;;           subdirectory of `yas-snippet-dirs', according to the
;;           active major mode.
;;
;;       M-x yas-load-snippet-buffer
;;
;;           When editing a snippet, this loads the snippet.  This is
;;           bound to \"C-c C-c\" while in the `snippet-mode' editing
;;           mode.
;;
;;       M-x yas-tryout-snippet
;;
;;           When editing a snippet, this opens a new empty buffer,
;;           sets it to the appropriate major mode and inserts the
;;           snippet there, so you can see what it looks like.  This is
;;           bound to \"C-c C-t\" while in `snippet-mode'.
;;
;;       M-x yas-describe-tables
;;
;;           Lists known snippets in a separate buffer.  User is
;;           prompted as to whether only the currently active tables
;;           are to be displayed, or all the tables for all major
;;           modes.
;;
;;   If you have `dropdown-list' installed, you can optionally use it
;;   as the preferred \"prompting method\", putting in your .emacs file,
;;   for example:
;;
;;       (require 'dropdown-list)
;;       (setq yas-prompt-functions '(yas-dropdown-prompt
;;                                    yas-ido-prompt
;;                                    yas-completing-prompt))
;;
;;   Also check out the customization group
;;
;;        M-x customize-group RET yasnippet RET
;;
;;   If you use the customization group to set variables
;;   `yas-snippet-dirs' or `yas-global-mode', make sure the path to
;;   \"yasnippet.el\" is present in the `load-path' *before* the
;;   `custom-set-variables' is executed in your .emacs file.
;;
;;   For more information and detailed usage, refer to the project page:
;;      http://github.com/capitaomorte/yasnippet

"]) (yascroll . [(20130320 1134) nil "Yet Another Scroll Bar Mode" single ";;; Commentary:

;; M-x global-yascroll-bar-mode RET.
;; M-x customize-group RET yascroll RET.

"]) (yari . [(20131207 511) nil "Yet Another RI interface for Emacs" single ";;; Commentary:

;; yari.el provides an Emacs frontend to Ruby's `ri' documentation
;; tool. It offers lookup and completion.
;;
;; This version will load all completion targets the first time it's
;; invoked. This can be a significant startup time, but it will not
;; have to look up anything after that point.
;;
;; This library tries to be compatible with any version of `rdoc' gem.
;; Self-testing covers all versions from 1.0.1 to 2.5.8 (current).
;;
;; The main function you should use as interface to ri is M-x yari
;; (yari-helm is a variant using Helm input framework). I recommend to
;; bind it on some key local when you are ruby-mode. Here is the example:
;;
;; (defun ri-bind-key ()
;;   (local-set-key [f1] 'yari))
;;
;;  or
;;
;; (defun ri-bind-key ()
;;   (local-set-key [f1] 'yari-helm))
;;
;; (add-hook 'ruby-mode-hook 'ri-bind-key)
;;
;; You can use C-u M-x yari to reload all completion targets.

"]) (yard-mode . [(20130402 1727) nil "Minor mode for Ruby YARD comments" single nil]) (yaoddmuse . [(20130225 1711) nil "Yet another oddmuse for Emacs" single ";;; Commentary:
;;
;; Yet another oddmuse for Emacs.
;;
;; This mode can edit or post wiki page *asynchronous*.
;; So it can't hang your emacs.
;; You can do your work when get or post wiki page.
;;
;; Below are the command you can use:
;;
;; * Edit:
;;      `yaoddmuse-edit'                     edit wiki page.
;;      `yaoddmuse-edit-default'             edit default wiki page.
;;      `yaoddmuse-follow'                   figure out what page we need to visit
;; * Post:
;;      `yaoddmuse-post-buffer'              post buffer to wiki.
;;      `yaoddmuse-post-current-buffer'      post current buffer to wiki
;;      `yaoddmuse-post-file'                post file to wiki.
;;      `yaoddmuse-post-file-default'        post file to default wiki.
;;      `yaoddmuse-post-library'             post library to wiki.
;;      `yaoddmuse-post-library-default'     post library to default wiki.
;;      `yaoddmuse-post-dired'               post dired marked files to wiki.
;;      `yaoddmuse-post-dired-default'       post dired marked files to wiki.
;;      `yaoddmuse-post-screenshot'          post screenshot to wiki.
;;      `yaoddmuse-post-screenshot-default'  post screenshot to default wiki.
;; * View:
;;      `yaoddmuse-revert'                   reload current wiki page.
;;      `yaoddmuse-browse-page'              browse wiki page.
;;      `yaoddmuse-browse-page-default'      browse default wiki page.
;;      `yaoddmuse-browse-page-diff'         browse wiki page diff.
;;      `yaoddmuse-browse-page-default-diff' browse default wiki page diff.
;;      `yaoddmuse-browse-current-page'      browse current wiki page.
;; * Navigation:
;;      `yaoddmuse-navi-next-heading'        jump next heading.
;;      `yaoddmuse-navi-prev-heading'        jump previous heading.
;; * Update:
;;      `yaoddmuse-update-pagename'          will update Wiki page name.
;; * Insert:
;;      `yaoddmuse-insert-pagename'          insert wiki page name.
;;      `yaoddmuse-insert-file-content'      insert file content.
;; * Misc:
;;      `yaoddmuse-kill-url'                 kill current wiki page url in yank.
;;      `yaoddmuse-toggle-minor'             toggle minor mode state.
;;      `yaoddmuse-redirect'                 redirect page.
;;      `yaoddmuse-delete'                   delete page.
;;      `yaoddmuse-toggle-image-status'      toggle image status.
;;      `yaoddmuse-save-as'                  save special page.
;;
;; Tips:
;; \343\203\273 Get page around point:
;;      Command \342\200\230yaoddmuse-follow\342\200\231 try to get valid page link around point.
;;      If it find, edit this page, otherwise show \342\200\234No link found at point.\342\200\235
;;      And you can type \342\200\234C-u\342\200\235 before call this command,
;;      then it will give you page name completing for edit.
;; \343\203\273 Reload or switch edit page:
;;      When you use command \342\200\230yaoddmuse-edit\342\200\231 or \342\200\230yaoddmuse-edit-default\342\200\231,
;;      it will prefer to switch edit page if already have one exist.
;;      If you want to reload edit page forcibly, just hit \342\200\234C-u\342\200\235 before
;;      execute command.
;; \343\203\273 Smart display edit page.
;;      Default, edit page buffer popup when current major-mode
;;      is not \342\200\230yaoddmuse-mode\342\200\231, or use switch edit page buffer
;;      when current major-mode is \342\200\230yaoddmuse-mode\342\200\231.
;; \343\203\273 Revert edit page:
;;      Command \342\200\230yaoddmuse-revert\342\200\231 revert current edit page and don\342\200\231t
;;      need input wiki name or page name.
;; \343\203\273 Browse page after post successful:
;;      If you type \342\200\234C-u\342\200\235 before call post command,
;;      will browse page after post successful.
;; \343\203\273 Post buffer to wiki:
;;      Command \342\200\230yaoddmuse-post-buffer\342\200\231 post special buffer to wiki,
;;      or use command \342\200\230yaoddmuse-post-current-buffer\342\200\231 post current buffer to wiki.
;; \343\203\273 Post file to wiki:
;;      Command \342\200\230yaoddmuse-post-file\342\200\231 post special file to wiki,
;;      it\342\200\231s useful to fast posting when you don\342\200\231t want open file.
;; \343\203\273 Post mark files in dired to wiki:
;;      Command \342\200\230yaoddmuse-post-dired\342\200\231 post mark files in dired to wiki,
;;      this command is useful when update many files to wiki.
;; \343\203\273 Post library to wiki:
;;      Command \342\200\230yaoddmuse-post-library\342\200\231 and \342\200\230yaoddmuse-post-library-default\342\200\231
;;      will post special library to wiki, and not need input file path,
;;      it\342\200\231s so lazy! ;)
;; \343\203\273 Remember last summary:
;;      By default, yaoddmuse remember last `summary' string, if you input
;;      same `summary' as previous time, just hit RET.
;; \343\203\273 Pick up file name:
;;      By default, when you use command `yaoddmuse-post-library' and
;;      `yaoddmuse-post-library-default', those commands can pick up
;;      file name around point, if it's library name you want, just
;;      hit RET.  ;)
;; \343\203\273 Pick up page name:
;;      When you use commands `yaoddmuse-browse-page' or `yaoddmuse-browse-page-default',
;;      it will try to pick-up page name around point.
;; \343\203\273 Encode special file:
;;      If you post special file, such as picture or compress file,
;;      it can encode file content before post it.
;; \343\203\273 Redirect page:
;;      You can use command `yaoddmuse-redirect' redirect page.
;;      Just input page name that you want redirect to.
;;      You need input redirect from page if current buffer not
;;      `yaoddmuse' buffer.
;; \343\203\273 Delete page:
;;      You can use command `yaoddmuse-delete' delete page.
;;      Just input page name that you want delete.
;; \343\203\273 Insert special file:
;;      You can use command `yaoddmuse-insert-file-content' insert
;;      file content.
;;      This command will try to encode special file content, such as,
;;      picture or compress file.
;; \343\203\273 Save page:
;;      You can use command `yaoddmuse-save-as' save special page,
;;      such as picture or compress format, and it will notify you
;;      correct suffix to save.
;; \343\203\273 Toggle image view:
;;      By default, when got image page, it will decode image and view it.
;;      You can use command `yaoddmuse-toggle-image-status' to toggle
;;      image status for view different content.
;;

"]) (yaml-mode . [(20130310 2101) nil "Major mode for editing YAML files" single ";;; Commentary:

;; This is a major mode for editing files in the YAML data
;; serialization format.  It was initially developed by Yoshiki
;; Kurihara and many features were added by Marshall Vandegrift.  As
;; YAML and Python share the fact that indentation determines
;; structure, this mode provides indentation and indentation command
;; behavior very similar to that of python-mode.

;;; Installation:

;; To install, just drop this file into a directory in your
;; `load-path' and (optionally) byte-compile it.  To automatically
;; handle files ending in '.yml', add something like:
;;
;;    (require 'yaml-mode)
;;    (add-to-list 'auto-mode-alist '(\"\\\\.yml$\" . yaml-mode))
;;
;; to your .emacs file.
;;
;; Unlike python-mode, this mode follows the Emacs convention of not
;; binding the ENTER key to `newline-and-indent'.  To get this
;; behavior, add the key definition to `yaml-mode-hook':
;;
;;    (add-hook 'yaml-mode-hook
;;     '(lambda ()
;;        (define-key yaml-mode-map \"\\C-m\" 'newline-and-indent)))

"]) (yalinum . [(20130217 243) nil "yet another display line numbers." single ";;; Commentary:

;; fork of `linum-mode'
;; Overlay scrollbar on line number.
;;
;; linum.el\343\202\222\343\203\231\343\203\274\343\202\271\343\201\250\343\201\227\343\201\246\343\200\201

;; \344\270\273\343\201\253\345\244\211\346\233\264\343\201\227\343\201\237\343\201\256\343\201\257 yalinum-update-window\343\200\202
;; Installation:
;; (require 'yalinum)
;; (global-yalinum-mode t)

"]) (yagist . [(20131025 140) ((json (1 2 0))) "Yet Another Emacs integration for gist.github.com" single ";;; Commentary:

;; If you are using Emacs 22 or earlier, install the json.el from following url
;;
;; http://bzr.savannah.gnu.org/lh/emacs/emacs-23/annotate/head:/lisp/json.el

;; If you want to save encrypted token to ~/.gitconfig , install elisp from
;; following url. Or Melpa.
;;
;; https://github.com/mhayashi1120/Emacs-kaesar/raw/master/kaesar.el
;;
;; (setq yagist-encrypt-risky-config t)

"]) (xterm-frobs . [(20091211 1555) nil "manipulate xterm when running emacs in tty mode" single ";;; Commentary:

;; Commands for tty-mode emacs when running under xterm, to manipulate the
;; parent xterm state.  Some of these commands may only work with post-1996
;; XFree86 xterm versions.

;; Color defaults and algorithms derived from the xterm-189 (2004-5-16)
;; distribution from http://dickey.his.com/xterm/
;; In particular see XTerm-col.ad and 256colres.pl
;; These values may differ from those of earlier releases of xterm.

;; Updates of xterm-frobs.el may be retrieved via
;; http://www.splode.com/~friedman/software/emacs-lisp/

"]) (xterm-color . [(20130904 1826) nil "ANSI & XTERM 256 color support" single ";;; Commentary:
;;
;; Translates ANSI control sequences into text properties.
;;
;; * Regular ANSI
;; * XTERM 256 color
;;
;; xterm-color.el should perform much better than ansi-color.el
;;
"]) (xmlgen . [(20130219 219) nil "A DSL for generating XML." single ";;; Commentary:

;; Generate xml using sexps with the function `xmlgen':

;; (xmlgen '(p :class \"big\"))      => \"<p class=\\\"big\\\" />\")
;; (xmlgen '(p :class \"big\" \"hi\")) => \"<p class=\\\"big\\\">hi</p>\")

;; (xmlgen '(html
;;           (head
;;            (title \"hello\")
;;            (meta :something \"hi\"))
;;           (body
;;            (h1 \"woohhooo\")
;;            (p \"text\")
;;            (p \"more text\"))))

;; produces this (though wrapped):

;; <html>
;;   <head>
;;     <title>hello</title>
;;     <meta something=\"hi\" />
;;   </head>
;;   <body>
;;     <h1>woohhooo</h1>
;;     <p>text</p>
;;     <p>more text</p>
;;   </body>
;; </html>

(eval-when-compile (require 'cl))

(defvar xmlgen-escape-attribute-vals t
  \"When non-nil xmlgen will escape the characters <>'\\\"&' in an
attribute value.\")

(defvar xmlgen-escape-elm-vals t
  \"When non-nil xmlgen will escape the characters <>'\\\"&' in an
elements content.\")

(defvar xmlgen-escapees
  '((\"&\"  . \"&amp;\")
    (\"'\"  . \"&apos;\")
    (\"\\\"\" . \"&quot;\")
    (\"<\"  . \"&lt;\")
    (\">\"  . \"&gt;\"))
    \"List of (find . replace) pairs for escaping. See
`xmlgen-escape-elm-vals' and `xmlgen-escape-attribute-vals'\")

;;;###autoload
(defun xmlgen (form &optional in-elm level)
  \"Convert a sexp to xml:
  '(p :class \\\"big\\\")) => \\\"<p class=\\\\\\\"big\\\\\\\" />\\\"\"
  (let ((level (or level 0)))
    (cond
      ((numberp form) (number-to-string form))
      ((stringp form) form)
      ((listp form)
       (destructuring-bind (xml attrs) (xmlgen-extract-plist form)
         (let ((el (car xml)))
           (unless (symbolp el)
             (error \"Element must be a symbol (got '%S').\" el))
           (if (member el '(!unescape !escape))
               (let ((xmlgen-escape-elm-vals (if (equal '!escape el) t nil)))
                 (mapconcat
                  (lambda (s) (xmlgen s in-elm (1+ level)))
                  (cdr xml)
                  \"\"))
             (progn
                 (setq el (symbol-name el))
                 (concat \"<\" el (xmlgen-attr-to-string attrs)
                         (if (> (length xml) 1)
                             (concat \">\" (mapconcat
                                          (lambda (s) (xmlgen s el (1+ level)))
                                          (if xmlgen-escape-elm-vals
                                              (mapcar 'xmlgen-string-escape (cdr xml))
                                            (cdr xml))
                                          \"\")
                                     \"</\" el \">\")
                           \"/>\"))))))))))

(defun xmlgen-string-escape (string)
  \"Escape STRING for inclusion in some XML.\"
  (when (stringp string)
    (mapc
     '(lambda (e)
       (setq string
        (replace-regexp-in-string (car e) (cdr e) string)))
     xmlgen-escapees))
  string)

(defun xmlgen-attr-to-string (plist)
  \"Convert a plist to xml style attributes.\"
  (let ((res \"\"))
    (while plist
      (let* ((sym (pop plist))
             (val (pop plist))
             (treated (cond
                        ((numberp val)
                         (number-to-string val))
                        ((stringp val)
                         val))))
        (setq res
              (concat res \" \" (substring (symbol-name sym) 1 ) \"=\\\"\"
                      (if xmlgen-escape-attribute-vals
                          (xmlgen-string-escape treated)
                          treated)
                      \"\\\"\"))))
    res))

(defun xmlgen-extract-plist (list)
  \"Extract a plist from LIST returning the original list without
the plist and the plist.\"
  (let ((nlist '())
        (plist '())
        (last-keyword nil))
    (mapc
     '(lambda (item)
       (let ((item (pop list)))
         (cond
           (last-keyword
            (setq plist (append plist (list last-keyword)))
            (setq plist (append plist (list item)))
            (setq last-keyword nil))
           ((keywordp item) (setq last-keyword item))
           (t (setq nlist (append nlist (list item)))))))
     list)
    (when last-keyword
      (error \"No value to satisfy keyword '%s'\"
             (symbol-name last-keyword)))
    (list nlist plist)))

(provide 'xmlgen)

;;; xmlgen.el ends here
"]) (xml-rpc . [(20130423 1356) nil "An elisp implementation of clientside XML-RPC" single ";;; Commentary:

;; This is an XML-RPC client implementation in elisp, capable of both
;; synchronous and asynchronous method calls (using the url package's async
;; retrieval functionality).
;; XML-RPC is remote procedure calls over HTTP using XML to describe the
;; function call and return values.

;; xml-rpc.el represents XML-RPC datatypes as lisp values, automatically
;; converting to and from the XML datastructures as needed, both for method
;; parameters and return values, making using XML-RPC methods fairly
;; transparent to the lisp code.

;;; Installation:

;; If you use ELPA (http://tromey.com/elpa), you can install via the
;; M-x package-list-packages interface. This is preferrable as you
;; will have access to updates automatically.

;; Otherwise, just make sure this file in your load-path (usually
;; ~/.emacs.d is included) and put (require 'xml-rpc) in your
;; ~/.emacs or ~/.emacs.d/init.el file.

;;; Requirements

;; xml-rpc.el uses the url package for http handling and xml.el for
;; XML parsing. url is a part of the W3 browser package.  The url
;; package that is part of Emacs 22+ works great.
;;
;; xml.el is a part of GNU Emacs 21, but can also be downloaded from
;; here: <URL:ftp://ftp.codefactory.se/pub/people/daniel/elisp/xml.el>

;;; Bug reports

;; Please use M-x xml-rpc-submit-bug-report to report bugs.

;;; XML-RPC datatypes are represented as follows

;;          int:  42
;; float/double:  42.0
;;       string:  \"foo\"
;;        array:  '(1 2 3 4)   '(1 2 3 (4.1 4.2))
;;       struct:  '((\"name\" . \"daniel\") (\"height\" . 6.1))
;;    dateTime:   (:datetime (1234 124))


;;; Examples

;; Here follows some examples demonstrating the use of xml-rpc.el

;; Normal synchronous operation
;; ----------------------------

;; (xml-rpc-method-call \"http://localhost:80/RPC\" 'foo-method foo bar zoo)

;; Asynchronous example (cb-foo will be called when the methods returns)
;; ---------------------------------------------------------------------

;; (defun cb-foo (foo)
;;   (print (format \"%s\" foo)))

;; (xml-rpc-method-call-async 'cb-foo \"http://localhost:80/RPC\"
;;                            'foo-method foo bar zoo)


;; Some real world working examples for fun and play
;; -------------------------------------------------

;; Check the temperature (celsius) outside jonas@codefactory.se's apartment

;; (xml-rpc-method-call
;;      \"http://flint.bengburken.net:80/xmlrpc/onewire_temp.php\"
;;      'onewire.getTemp)


;; Fetch the latest NetBSD news the past 5 days from O'reillynet

;; (xml-rpc-method-call \"http://www.oreillynet.com/meerkat/xml-rpc/server.php\"
;;                   'meerkat.getItems
;;                   '((\"channel\" . 1024)
;;                     (\"search\" . \"/NetBSD/\")
;;                     (\"time_period\" . \"5DAY\")
;;                     (\"ids\" . 0)
;;                     (\"descriptions\" . 200)
;;                     (\"categories\" . 0)
;;                     (\"channels\" . 0)
;;                     (\"dates\" . 0)
;;                     (\"num_items\" . 5)))


"]) (xcscope . [(20140106 1950) nil "cscope interface for (X)Emacs" single ";;; Commentary:
;;
;; This is a cscope interface for (X)Emacs.
;; It currently runs under Unix only.
;;
;; Using cscope, you can easily search for where symbols are used and defined.
;; Cscope is designed to answer questions like:
;;
;;         Where is this variable used?
;;         What is the value of this preprocessor symbol?
;;         Where is this function in the source files?
;;         What functions call this function?
;;         What functions are called by this function?
;;         Where does the message \"out of space\" come from?
;;         Where is this source file in the directory structure?
;;         What files include this header file?
;;         Where was this variable assigned-to?
;;
;; Send comments to dima@secretsauce.net
;;
;;
;;
;; ***** INSTALLATION *****
;;
;; * NOTE: this interface currently runs under Unix only.
;;
;; Installation steps:
;;
;; 0. (It is, of course, assumed that cscope is already properly
;;    installed on the current system.)
;;
;; 1. Install xcscope.el through your system package manager, MELPA or by
;;    loading the file with
;;
;;      (require 'xcscope)
;;
;; 2. Call (cscope-setup). This can go into the .emacs to always enable
;;    xcscope.el at emacs startup
;;
;; 3. If you intend to use xcscope.el often you can optionally edit your
;;    ~/.emacs file to add keybindings that reduce the number of keystrokes
;;    required.  For example, the following will add \"C-f#\" keybindings, which
;;    are easier to type than the usual \"C-c s\" prefixed keybindings.  Note
;;    that specifying \"global-map\" instead of \"cscope-minor-mode-keymap\" makes the
;;    keybindings available in all buffers:
;;
;;	(define-key global-map [(control f3)]  'cscope-set-initial-directory)
;;	(define-key global-map [(control f4)]  'cscope-unset-initial-directory)
;;	(define-key global-map [(control f5)]  'cscope-find-this-symbol)
;;	(define-key global-map [(control f6)]  'cscope-find-global-definition)
;;	(define-key global-map [(control f7)]
;;	  'cscope-find-global-definition-no-prompting)
;;	(define-key global-map [(control f8)]  'cscope-pop-mark)
;;	(define-key global-map [(control f9)]  'cscope-history-forward-line)
;;	(define-key global-map [(control f10)] 'cscope-history-forward-file)
;;	(define-key global-map [(control f11)] 'cscope-history-backward-line)
;;	(define-key global-map [(control f12)] 'cscope-history-backward-file)
;;      (define-key global-map [(meta f9)]  'cscope-display-buffer)
;;      (define-key global-map [(meta f10)] 'cscope-display-buffer-toggle)
;;
;; 6. Restart (X)Emacs.  That's it.
;;
;;
;;
;;
;; ***** USING THIS MODULE *****
;;
;; * Basic usage:
;;
;; If all of your C/C++/lex/yacc source files are in the same
;; directory, you can just start using this module.  If your files are
;; spread out over multiple directories, see \"Advanced usage\", below.
;;
;; Just edit a source file, and use the pull-down or pop-up (button 3)
;; menus to select one of:
;;
;;         Find symbol
;;         Find global definition
;;         Find called functions
;;         Find functions calling a function
;;         Find text string
;;         Find egrep pattern
;;         Find a file
;;         Find files #including a file
;;
;; The cscope database will be automatically created in the same
;; directory as the source files (assuming that you've never used
;; cscope before), and a buffer will pop-up displaying the results.
;; You can then use button 2 (the middle button) on the mouse to edit
;; the selected file, or you can move the text cursor over a selection
;; and press [Enter].
;;
;; The third mouse button is bound to a popup menu for cscope. Shift-mouse
;; button 3 invokes the last find command again. E.g. if you look for the symbol
;; 'main' and afterwards you want to look for another symbol, just press Shift
;; and click the third button.
;;
;; Each cscope search adds its results to the *cscope* buffer. These sets of
;; results can be navigated and manupulated similar to patches in diff-mode.:
;;
;;  - n/p navigates over individual results
;;  - k kills individual results
;;
;;  - N/P or M-n/M-p navigates over file results
;;  - M-k kills file results
;;
;;  - M-N/M-P navigates over result sets
;;  - M-K kills result sets
;;
;;  - Navigation from outside the *cscope* buffer (C-c s n/p/N/P) is restricted to
;;    the result set at (point)
;;
;; Any result set in the *cscope* buffer can be re-run with the 'r' key.
;;
;;
;; * Locating the cscope databases:
;;
;; This module will first use the variable, `cscope-database-regexps', to search
;; for a suitable database directory. If a database location cannot be found
;; using this variable then a search is begun at the variable,
;; `cscope-initial-directory', if set. If not set and we're running this search
;; from the *cscope* buffer, the search is begun from the directory of the
;; search at point. Otherwise, the current directory is used. If the directory
;; is not a cscope database directory then the directory's parent, parent's
;; parent, etc. is searched until a cscope database directory is found, or the
;; root directory is reached. If the root directory is reached, the current
;; directory will be used.
;;
;; A cscope database directory is one in which EITHER a cscope database
;; file (e.g., \"cscope.out\") OR a cscope file list (e.g.,
;; \"cscope.files\") exists.  If only \"cscope.files\" exists, the
;; corresponding \"cscope.out\" will be automatically created by cscope
;; when a search is done.  By default, the cscope database file is called
;; \"cscope.out\", but this can be changed (on a global basis) via the
;; variable, `cscope-database-file'.  There is limited support for cscope
;; databases that are named differently than that given by
;; `cscope-database-file', using the variable, `cscope-database-regexps'.
;;
;; Note that the variable, `cscope-database-regexps', is generally not
;; needed, as the normal hierarchical database search is sufficient
;; for placing and/or locating the cscope databases.  However, there
;; may be cases where it makes sense to place the cscope databases
;; away from where the source files are kept; in this case, this
;; variable is used to determine the mapping.  One use for this
;; variable is when you want to share the database file with other
;; users; in this case, the database may be located in a directory
;; separate from the source files.  
;;
;; Setting the variable, `cscope-initial-directory', is useful when a
;; search is to be expanded by specifying a cscope database directory
;; that is a parent of the directory that this module would otherwise
;; use.  For example, consider a project that contains the following
;; cscope database directories:
;;
;;     /users/jdoe/sources
;;     /users/jdoe/sources/proj1
;;     /users/jdoe/sources/proj2
;;
;; If a search is initiated from a .c file in /users/jdoe/sources/proj1
;; then (assuming the variable, `cscope-database-regexps', is not set)
;; /users/jdoe/sources/proj1 will be used as the cscope data base directory.
;; Only matches in files in /users/jdoe/sources/proj1 will be found.  This
;; can be remedied by typing \"C-c s a\" and then \"M-del\" to remove single
;; path element in order to use a cscope database directory of
;; /users/jdoe/sources.  Normal searching can be restored by typing \"C-c s A\".
;;
;;
;; * Keybindings:
;;
;; All keybindings use the \"C-c s\" prefix, but are usable only while
;; editing a source file, or in the cscope results buffer:
;;
;;      C-c s s         Find symbol.
;;      C-c s =         Find assignments to this symbol
;;      C-c s d         Find global definition.
;;      C-c s g         Find global definition (alternate binding).
;;      C-c s G         Find global definition without prompting.
;;      C-c s c         Find functions calling a function.
;;      C-c s C         Find called functions (list functions called
;;                      from a function).
;;      C-c s t         Find text string.
;;      C-c s e         Find egrep pattern.
;;      C-c s f         Find a file.
;;      C-c s i         Find files #including a file.
;;
;; These pertain to navigation through the search results:
;;
;;      C-c s b         Display *cscope* buffer.
;;      C-c s B         Auto display *cscope* buffer toggle.
;;      C-c s n         Next symbol.
;;      C-c s N         Next file.
;;      C-c s p         Previous symbol.
;;      C-c s P         Previous file.
;;      C-c s u         Pop mark.
;;
;; These pertain to setting and unsetting the variable,
;; `cscope-initial-directory', (location searched for the cscope database
;;  directory):
;;
;;      C-c s a         Set initial directory.
;;      C-c s A         Unset initial directory.
;;
;; These pertain to cscope database maintenance:
;;
;;      C-c s L         Create list of files to index.
;;      C-c s I         Create list and index.
;;      C-c s E         Edit list of files to index.
;;      C-c s W         Locate this buffer's cscope directory
;;                      (\"W\" --> \"where\").
;;      C-c s S         Locate this buffer's cscope directory.
;;                      (alternate binding: \"S\" --> \"show\").
;;      C-c s T         Locate this buffer's cscope directory.
;;                      (alternate binding: \"T\" --> \"tell\").
;;      C-c s D         Dired this buffer's directory.
;;
;;
;; * Advanced usage:
;;
;; If the source files are spread out over multiple directories,
;; you've got a few choices:
;;
;; 1. If all of the directories exist below a common directory
;;    (without any extraneous, unrelated subdirectories), you can tell
;;    this module to place the cscope database into the top-level,
;;    common directory.  This assumes that you do not have any cscope
;;    databases in any of the subdirectories.  If you do, you should
;;    delete them; otherwise, they will take precedence over the
;;    top-level database.
;;
;;    If you do have cscope databases in any subdirectory, the
;;    following instructions may not work right.
;;
;;    It's pretty easy to tell this module to use a top-level, common
;;    directory:
;;
;;    a. Make sure that the menu pick, \"Cscope/Index recursively\", is
;;       checked (the default value).
;;
;;    b. Select the menu pick, \"Cscope/Create list and index\", and
;;       specify the top-level directory. This will index the sources
;;       in the background, so you can do other things if indexing
;;       takes a long time. A list of files to index will be created in
;;       \"cscope.files\", and the cscope database will be created in
;;       \"cscope.out\".
;;
;;    Once this has been done, you can then use the menu picks
;;    (described in \"Basic usage\", above) to search for symbols.
;;
;;    Note, however, that, if you add or delete source files, you'll
;;    have to either rebuild the database using the above procedure,
;;    or edit the file, \"cscope.files\" to add/delete the names of the
;;    source files.  To edit this file, you can use the menu pick,
;;    \"Cscope/Edit list of files to index\".
;;
;;
;; 2. If most of the files exist below a common directory, but a few
;;    are outside, you can use the menu pick, \"Cscope/Create list of
;;    files to index\", and specify the top-level directory.  Make sure
;;    that \"Cscope/Index recursively\", is checked before you do so,
;;    though.  You can then edit the list of files to index using the
;;    menu pick, \"Cscope/Edit list of files to index\".  Just edit the
;;    list to include any additional source files not already listed.
;;
;;    Once you've created, edited, and saved the list, you can then
;;    use the menu picks described under \"Basic usage\", above, to
;;    search for symbols.  The first time you search, you will have to
;;    wait a while for cscope to fully index the source files, though.
;;    If you have a lot of source files, you may want to manually run
;;    cscope to build the database:
;;
;;            cd top-level-directory    # or wherever
;;            rm -f cscope.out          # not always necessary
;;            cscope -b
;;
;;
;; 3. If the source files are scattered in many different, unrelated
;;    places, you'll have to manually create cscope.files and put a
;;    list of all pathnames into it.  Then build the database using:
;;
;;            cd some-directory         # wherever cscope.files exists
;;            rm -f cscope.out          # not always necessary
;;            cscope -b
;;
;;    Next, read the documentation for the variable,
;;    \"cscope-database-regexps\", and set it appropriately, such that
;;    the above-created cscope database will be referenced when you
;;    edit a related source file.
;;
;;    Once this has been done, you can then use the menu picks
;;    described under \"Basic usage\", above, to search for symbols.
;;
;;
;; * Interesting configuration variables:
;;
;; \"cscope-truncate-lines\"
;;      This is the value of `truncate-lines' to use in cscope
;;      buffers; the default is the current setting of
;;      `truncate-lines'.  This variable exists because it can be
;;      easier to read cscope buffers with truncated lines, while
;;      other buffers do not have truncated lines.
;;
;; \"cscope-use-relative-paths\"
;;      If non-nil, use relative paths when creating the list of files
;;      to index.  The path is relative to the directory in which the
;;      cscope database will be created.  If nil, absolute paths will
;;      be used.  Absolute paths are good if you plan on moving the
;;      database to some other directory (if you do so, you'll
;;      probably also have to modify `cscope-database-regexps').
;;      Absolute paths may also be good if you share the database file
;;      with other users (you'll probably want to specify some
;;      automounted network path for this).
;;
;; \"cscope-index-recursively\"
;;      If non-nil, index files in the current directory and all
;;      subdirectories.  If nil, only files in the current directory
;;      are indexed.  This variable is only used when creating the
;;      list of files to index, or when creating the list of files and
;;      the corresponding cscope database.
;;
;; \"cscope-name-line-width\"
;;      The width of the combined \"function name:line number\" field in
;;      the cscope results buffer.  If negative, the field is
;;      left-justified.
;;
;; \"cscope-option-....\" Various options passed to the 'cscope' process. Controls
;;      things like include directories, database compression, database type,
;;      etc.
;;
;; \"cscope-display-cscope-buffer\" 
;;      If non-nil, display the *cscope* buffer after each search
;;      (default).  This variable can be set in order to reduce the
;;      number of keystrokes required to navigate through the matches.
;;
;; \"cscope-database-regexps\"
;; 	List to force directory-to-cscope-database mappings.
;; 	This is a list of `(REGEXP DBLIST [ DBLIST ... ])', where:
;;
;; 	REGEXP is a regular expression matched against the current buffer's
;; 	current directory.  The current buffer is typically some source file,
;; 	and you're probably searching for some symbol in or related to this
;; 	file.  Basically, this regexp is used to relate the current directory
;; 	to a cscope database.  You need to start REGEXP with \"^\" if you want
;; 	to match from the beginning of the current directory.
;;
;; 	DBLIST is a list that contains one or more of:
;;
;; 	    ( DBDIR )
;; 	    ( DBDIR ( OPTIONS ) )
;; 	    ( t )
;; 	    t
;;
;; 	Here, DBDIR is a directory (or a file) that contains a cscope
;; 	database.  If DBDIR is a directory, then it is expected that the
;; 	cscope database, if present, has the filename given by the variable,
;; 	`cscope-database-file'; if DBDIR is a file, then DBDIR is the path
;; 	name to a cscope database file (which does not have to be the same as
;; 	that given by `cscope-database-file').  If only DBDIR is specified,
;; 	then that cscope database will be searched without any additional
;; 	cscope command-line options.  If OPTIONS is given, then OPTIONS is a
;; 	list of strings, where each string is a separate cscope command-line
;; 	option.
;;
;; 	In the case of \"( t )\", this specifies that the search is to use the
;; 	normal hierarchical database search.  This option is used to
;; 	explicitly search using the hierarchical database search either before
;; 	or after other cscope database directories.
;;
;; 	If \"t\" is specified (not inside a list), this tells the searching
;; 	mechanism to stop searching if a match has been found (at the point
;; 	where \"t\" is encountered).  This is useful for those projects that
;; 	consist of many subprojects.  You can specify the most-used
;; 	subprojects first, followed by a \"t\", and then followed by a master
;; 	cscope database directory that covers all subprojects.  This will
;; 	cause the most-used subprojects to be searched first (hopefully
;; 	quickly), and the search will then stop if a match was found.  If not,
;; 	the search will continue using the master cscope database directory.
;;
;; 	Here, `cscope-database-regexps' is generally not used, as the normal
;; 	hierarchical database search is sufficient for placing and/or locating
;; 	the cscope databases.  However, there may be cases where it makes
;; 	sense to place the cscope databases away from where the source files
;; 	are kept; in this case, this variable is used to determine the
;; 	mapping.
;;
;; 	This module searches for the cscope databases by first using this
;; 	variable; if a database location cannot be found using this variable,
;; 	then the current directory is searched, then the parent, then the
;; 	parent's parent, until a cscope database directory is found, or the
;; 	root directory is reached.  If the root directory is reached, the
;; 	current directory will be used.
;;
;; 	A cscope database directory is one in which EITHER a cscope database
;; 	file (e.g., \"cscope.out\") OR a cscope file list (e.g.,
;; 	\"cscope.files\") exists.  If only \"cscope.files\" exists, the
;; 	corresponding \"cscope.out\" will be automatically created by cscope
;; 	when a search is done.  By default, the cscope database file is called
;; 	\"cscope.out\", but this can be changed (on a global basis) via the
;; 	variable, `cscope-database-file'.  There is limited support for cscope
;; 	databases that are named differently than that given by
;; 	`cscope-database-file', using the variable, `cscope-database-regexps'.
;;
;; 	Here is an example of `cscope-database-regexps':
;;
;;		(setq cscope-database-regexps
;;		      '(
;;			( \"^/users/jdoe/sources/proj1\"
;;			  ( t )
;;			  ( \"/users/jdoe/sources/proj2\")
;;			  ( \"/users/jdoe/sources/proj3/mycscope.out\")
;;			  ( \"/users/jdoe/sources/proj4\")
;;			  t
;;			  ( \"/some/master/directory\" (\"-d\" \"-I/usr/local/include\") )
;;			  )
;;			( \"^/users/jdoe/sources/gnome/\"
;;			  ( \"/master/gnome/database\" (\"-d\") )
;;			  )
;;			))
;;
;; 	If the current buffer's directory matches the regexp,
;; 	\"^/users/jdoe/sources/proj1\", then the following search will be
;; 	done:
;;
;; 	    1. First, the normal hierarchical database search will be used to
;;	       locate a cscope database.
;;
;; 	    2. Next, searches will be done using the cscope database
;;	       directories, \"/users/jdoe/sources/proj2\",
;;	       \"/users/jdoe/sources/proj3/mycscope.out\", and
;;	       \"/users/jdoe/sources/proj4\".  Note that, instead of the file,
;;	       \"cscope.out\", the file, \"mycscope.out\", will be used in the
;;	       directory \"/users/jdoe/sources/proj3\".
;;
;; 	    3. If a match was found, searching will stop.
;;
;; 	    4. If a match was not found, searching will be done using
;;	       \"/some/master/directory\", and the command-line options \"-d\"
;;	       and \"-I/usr/local/include\" will be passed to cscope.
;;
;; 	If the current buffer's directory matches the regexp,
;; 	\"^/users/jdoe/sources/gnome\", then the following search will be
;; 	done:
;;
;; 	    The search will be done only using the directory,
;; 	    \"/master/gnome/database\".  The \"-d\" option will be passed to
;; 	    cscope.
;;
;; 	If the current buffer's directory does not match any of the above
;; 	regexps, then only the normal hierarchical database search will be
;; 	done.
;;
;;
;; * Other notes:
;;
;; 1. This module is called, \"xcscope\", because someone else has
;;    already written a \"cscope.el\" (although it's quite old).
;;
;;
;; * KNOWN BUGS:
;;
;; 1. Cannot handle whitespace in directory or file names.
;;
;; 2. The support for cscope databases different from that specified by
;;    `cscope-database-file' is quirky.  If the file does not exist, it
;;    will not be auto-created (unlike files names by
;;    `cscope-database-file').  You can manually force the file to be
;;    created by using touch(1) to create a zero-length file; the
;;    database will be created the next time a search is done.
;;
"]) (x-dict . [(20091203 1023) nil "emacs interface for several online dictionaries" single ";;; Commentary:

;; x-dict.el provides an Emacs interface for the following dictionaries:
;;  URL            language
;;  dict.leo.org : english <-> german
;;  www.dict.cc  : english <-> german

;; x-dict.el needs my python script 'x-dict' to interact with the web interface
;; x-dict can be found here: http://www.xsteve.at/prg/python

;; The latest version of x-dict.el can be found at:
;; http://www.xsteve.at/prg/emacs/

;; Here is a nice tip from Harald Maier to select a specific coding
;; system for the x-dict interaction:
;; (add-to-list 'process-coding-system-alist '(\"x-dict\" . latin-9))

;; Comments and/or patches are very welcome!

"]) (writeroom-mode . [(20130315 1207) nil "Minor mode for distraction-free writing" tar ";;; Commentary:

;; writeroom-mode is a minor mode for Emacs that implements a
;; distraction-free writing mode similar to the famous Writeroom editor for
;; OS X. writeroom-mode is meant for GNU Emacs 24 and won't run on older
;; versions.
;;
;; See the README or info manual for usage instructions.
;; 
"]) (writegood-mode . [(20130408 718) nil "Polish up poor writing on the fly" single ";;; Commentary:
;;
;;  This minor mode tries to find and highlight problems with your
;;  writing (in english).
;;
;;  Behavior inspired by the weaselwords scripts to aid in good
;;  writing.
;;  http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (wrap-region . [(20130528 2228) ((dash (1 0 3))) "Wrap text with punctation or tag" single ";;; Commentary:

;; wrap-region is a minor mode that wraps a region with
;; punctuations. For tagged markup modes, such as HTML and XML, it
;; wraps with tags.
;;
;; To use wrap-region, make sure that this file is in Emacs load-path:
;;   (add-to-list 'load-path \"/path/to/directory/or/file\")
;;
;; Then require wrap-region:
;;   (require 'wrap-region)

;; To start wrap-region:
;;   (wrap-region-mode t) or M-x wrap-region-mode
;;
;; If you only want wrap-region active in some mode, use hooks:
;;   (add-hook 'ruby-mode-hook 'wrap-region-mode)
;;
;; Or if you want to activate it in all buffers, use the global mode:
;;   (wrap-region-global-mode t)

;; To wrap a region, select that region and hit one of the punctuation
;; keys. In \"tag-modes\"\" (see `wrap-region-tag-active-modes'), \"<\" is
;; replaced and wraps the region with a tag. To activate this behavior
;; in a mode that is not default:
;;   (add-to-list 'wrap-region-tag-active-modes 'some-tag-mode)
;;
;; `wrap-region-table' contains the default punctuations
;; that wraps. You can add and remove new wrappers by using the
;; functions `wrap-region-add-wrapper' and
;; `wrap-region-remove-wrapper' respectively.
;;   (wrap-region-add-wrapper \"`\" \"'\")                  ; hit ` then region -> `region'
;;   (wrap-region-add-wrapper \"/*\" \"*/\" \"/\")            ; hit / then region -> /*region*/
;;   (wrap-region-add-wrapper \"$\" \"$\" nil 'latex-mode)  ; hit $ then region -> $region$ in latex-mode
;;   (wrap-region-remove-wrapper \"(\")
;;   (wrap-region-remove-wrapper \"$\" 'latex-mode)
;;
;; Some modes may have conflicting key bindings with wrap-region. To
;; avoid conflicts, the list `wrap-region-except-modes' contains names
;; of modes where wrap-region should not be activated (note, only in
;; the global mode). You can add new modes like this:
;;   (add-to-list 'wrap-region-except-modes 'conflicting-mode)


"]) (world-time-mode . [(20130331 1829) nil "show whole days of world-time diffs" single ";;; Commentary:

;; Very useful productivity tool if you work in different time zones.

"]) (workgroups2 . [(20131224 657) nil "New workspaces for Emacs" tar ";;; Commentary:
;;
;; Workgroups2 is an Emacs session manager. It is based on the
;; experimental branch of the original \"workgroups\" extension.
;;
;; If you find a bug - please post it here:
;; https://github.com/pashinin/workgroups2/issues
;;
;;
;; Install
;; ----------------------
;; See the README.md file at: https://github.com/pashinin/workgroups2
;; Add the lines below to your .emacs configuration.
;;
;; (require 'workgroups2)
;;
;; ;; if you start as \"emacs --daemon\" - turn off autoloading of workgroups:
;; ;;(setq wg-use-default-session-file nil)
;;
;; (workgroups-mode 1)  ; put this one at the bottom of .emacs
;;
;;
;; Configure
;; ----------------------
;; ;; Change prefix key (before activating WG)
;; (setq wg-prefix-key (kbd \"C-c z\"))
;;
;; ;; Change workgroups session file
;; (setq wg-default-session-file \"~/.emacs.d/.emacs_workgroups\"
;;
;; ;; Set your own keyboard shortcuts to reload/save/switch WG:
;; (global-set-key (kbd \"<pause>\")     'wg-reload-session)
;; (global-set-key (kbd \"C-S-<pause>\") 'wg-save-session)
;; (global-set-key (kbd \"s-z\")         'wg-switch-to-workgroup)
;; (global-set-key (kbd \"s-/\")         'wg-switch-to-previous-workgroup)
;;
;;
;; Use
;; ----------------------
;; Most commands start with prefix `wg-prefix-key'.
;; You can change it before activating workgroups.
;; By default prefix is: \"C-c z\"
;;
;; <prefix> <key>
;;
;; <prefix> c    - create workgroup
;; <prefix> A    - rename workgroup
;; <prefix> k    - kill workgroup
;; <prefix> v    - switch to workgroup
;; <prefix> C-s  - save session
;; <prefix> C-f  - load session
;;
;;
;; Help
;; ----------------------
;; Type \"<prefix> ?\" for more help
;;
;; See also: https://github.com/pashinin/workgroups2/wiki
;;
"]) (workgroups . [(20110726 941) nil "workgroups for windows (for Emacs)" single ";;; Commentary:
;;
;; See the file README.md in `workgroups.el's directory
;;
;;; Installation:
;;
"]) (wonderland . [(20130912 1819) ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) "declarative configuration for Emacsen" single nil]) (with-namespace . [(20130407 1122) ((dash (1 1 0)) (loop (1 1))) "interoperable elisp namespaces" single nil]) (wispjs-mode . [(20140103 1432) ((clojure-mode (0))) "Major mode for Wisp code." single ";;; Commentary:
;;
;; A major mode for the Lisp->JavaScript language Wisp: http://jeditoolkit.com/wisp/

(require 'clojure-mode)
(require 'font-lock)

"]) (wisp-mode . [(20140105 224) nil "Tools for wisp: the Whitespace-to-Lisp preprocessor" single ";;; Commentary:

;; To use, add wisp-mode.el to your emacs lisp path and add the following
;; to your ~/.emacs or ~/.emacs.d/init.el
;; 
;; (require 'wisp-mode)
;; 
;; For details on wisp, see 
;; http://draketo.de/light/english/wisp-lisp-indentation-preprocessor
;; 
;; If you came here looking for wisp the lisp-to-javascript compiler[1], have a look at wispjs-mode[2].
;; 
;; [1]: http://jeditoolkit.com/try-wisp
;; 
;; [2]: http://github.com/krisajenkins/wispjs-mode
;; 
"]) (winpoint . [(20131023 1013) nil "Remember buffer positions per-window, not per buffer" single ";;; Commentary:

;; When two windows view the same buffer at the same time, and one
;; window is switched to another buffer and back, point is now the
;; same as in the other window, not as it was before we switched away.
;; This mode tries to work around this problem by storing and
;; restoring per-window positions for each buffer.

;; To enable this, just run (winpoint-mode 1)

"]) (windsize . [(20110728 1336) nil "Simple, intuitive window resizing" single ";;; Commentary:

;; Use the arrow keys (C-S-<dir> by default) to move one of the
;; borders of the active window in that direction. Always prefers to
;; move the right or bottom border when possible, and falls back to
;; moving the left or top border otherwise.
;; 
;; Rather than me trying to explain that in detail, it's best to just
;; split your emacs frame in to several windows and try it - trust me,
;; it's intuitive once you give it a go.

;;; Usage

;; (require 'windsize)
;; (windsize-default-keybindings) ; C-S-<left/right/up/down>
;;
;; Or bind windsize-left, windsize-right, windsize-up, and
;; windsize-down to the keys you prefer.
;;
;; By default, resizes by 8 columns and by 4 rows. Customize by
;; setting windsize-cols and/or windsize-rows.
;; Note that these variables are not buffer-local, since resizing
;; windows usually affects at least 2 buffers.

"]) (window-numbering . [(20130902 930) nil "Numbered window shortcuts" single ";;; Commentary:
;;
;; Enable window-numbering-mode and use M-1 through M-0 to navigate.
;;
;; If you want to affect the numbers, use window-numbering-before-hook or
;; window-numbering-assign-func.
;; For instance, to always assign the calculator window the number 9, add the
;; following to your .emacs:
;;
;; (setq window-numbering-assign-func
;;       (lambda () (when (equal (buffer-name) \"*Calculator*\") 9)))
;;
;;; Changes Log:
;;
;; 2013-03-23 (1.1.2)
;;    Fix numbering in terminal mode with menu bar visible.
;;    Add face for window number.  (thanks to Chen Bin)
;;
;; 2008-04-11 (1.1.1)
;;    Added possibility to delete window with prefix arg.
;;    Cleaned up code and migrated to `defcustom'.
;;
;; 2007-02-18 (1.1)
;;    Added window-numbering-before-hook, window-numbering-assign-func.
;;
"]) (window-number . [(20140101 1547) nil "Select windows by numbers." single ";;; Commentary:
;;
;; Window number mode allows you to select windows by numbers.
;;
;; `window-number-switch' same as `other-window' (C-x o) when windows less than three.
;; If have three windows (or more) showing, `window-number-switch' will
;; highlight window number at mode-line then prompt you input window number.
;;
;; I binding `window-number-switch' on 'C-x o' to instead `other-window'.
;;

;;; Installation:
;;
;; Put window-number.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'window-number)
;; (window-number-mode 1)
;;
;; No need more.

"]) (window-layout . [(20130805 1854) nil "window layout manager" single ";;; Commentary:

;; Split a frame or window into some windows according to a layout
;; recipe.

;;; Example code

;; ;; Layout function
;; ; -> three pane layout.
;; (setq wm ; <-- window management object
;;       (wlf:layout 
;;        '(| (:left-size-ratio 0.3) 
;;            folder 
;;            (- (:upper-max-size 15) 
;;               summary 
;;               message))
;;        '((:name 'folder 
;;           :buffer \"folder buffer\")
;;          (:name 'summary
;;           :buffer \"summary buffer\")
;;          (:name 'message
;;           :buffer \"message buffer\")
;;         )))

;; ;; Window controlling
;; (wlf:show    wm 'summary)
;; (wlf:hide    wm 'summary)
;; (wlf:toggle  wm 'summary)
;; (wlf:select  wm 'summary)
;; (wlf:toggle-maximize  wm 'summary)

;; ;; Window updating
;; (wlf:refresh wm)
;; (wlf:reset-window-sizes wm)
;; (wlf:reset-init wm)

;; ;; Accessing a buffer
;; (wlf:get-buffer wm 'summary) -> <#buffer object>
;; (wlf:set-buffer wm 'summary \"*scratch*\")

;; ;; Accessing a window
;; (wlf:get-window wm 'summary)

;; ;; Layout hook
;; (defun wlf:test-hook (wset) (message \"HOOK : %s\" wset))
;; (wlf:layout-hook-add wm 'wlf:test-hook)
;; (wlf:layout-hook-remove wm 'wlf:test-hook)

;;; `wlf:layout' function

;; * Layout recipe:

;; ( (split type) (split option) 
;;                (left window name or recipe)
;;                (right window name or recipe) )

;;   - : split vertically
;;   | : split horizontally

;; split option (the prefix 'left' can be replaced by 'right', 'upper' and 'lower'.)
;;   :left-size  (column or row number) window size
;;   :left-max-size  (column or row number) if window size is larger than this value, the window is shrunken.
;;   :left-size-ratio  (0.0 - 1.0) window size ratio. the size of the other side is the rest.
;; 
;; Note: 
;; The split option can be omitted.
;; The size parameters, :size, :max-size and :size-ratio, are mutually
;; exclusive.  The size of a window is related with one of the other
;; side window. So, if both side windows set size parameters, the
;; window size may not be adjusted as you write.

;; * Window options:

;;   :name  [*] the window name.
;;   :buffer  a buffer name or a buffer object to show the window. If nil or omitted, the current buffer remains.
;;   :default-hide  (t/nil) if t, the window is hided initially. (default: nil)
;;   :fix-size  (t/nil) if t, when the windows are laid out again, the window size is remained. (default: nil)

;; * subwindow-p option:

;; If this option is not nil, this function splits the windows within
;; the current window. If this option is nil or omitted, this function
;; uses the entire space of the current frame. Because some user
;; actions and complicated window layouts may cause unexpected split
;; behaviors, it is easy to use the entire space of a frame.

;; * Return value (Window management object):

;; You should not access the management object directly, because it is not 
;; intended direct access.
;; You can make some management objects to switch the window layout.

;; * Layout hook

;; After splitting windows, registered hook are called with one
;; argument, the window management object. 



"]) (window-jump . [(20130224 114) nil "Move left/right/up/down through your windows." single ";;; Commentary:
;;
;; Directionally move through the windows in a frame. The core functions
;; are window-jump-<left,right,up,down>. Bind them to some keys and
;; you'll be flying around your windows like Superman.
;;
;; See https://github.com/chumpage/chumpy-windows for more
;; documentation, and to submit patches.
;;
"]) (window-end-visible . [(20131106 706) nil "Find the last visible point in a window" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'window-end-visible)
;;
;;     ;; open a buffer larger than the window
;;
;;     ;; may return nil
;;     M-: (pos-visible-in-window-p (window-end)) RET
;;
;;     ;; always returns t
;;     M-: (pos-visible-in-window-p (window-end-visible)) RET
;;
;; Explanation
;;
;; Window-end-visible.el has no user-level interface, and is only
;; useful when programming Emacs Lisp.
;;
;; This library provides the function `window-end-visible', which
;; works around a limitation of `window-end', at a speed penalty.
;;
;; The issue this function solves is that the following is not true
;; as might be expected:
;;
;;    (pos-visible-in-window-p (window-end))
;;
;; `window-end-visible' returns the \"true\" window end: the last
;; visible position in the window, verified by testing with
;; `pos-visible-in-window-p'.
;;
;; The speed penalty of `window-end-visible' over `window-end' varies
;; depending on your configuration.  For example, tabbar.el makes
;; calling `pos-visible-in-window-p' quite expensive.
;;
;; To use window-end-visible, place the window-end-visible.el library
;; somewhere Emacs can find it, and add the following to your ~/.emacs
;; file:
;;
;;     (require 'window-end-visible)
;;
;; Notes
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     No external dependencies
;;
;; Bugs
;;
;; TODO
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (window+ . [(20131227 211) nil "Extensions to `window.el'." single ";;; Commentary:
;;
;;    Extensions to `window.el'.
;;
;;
;;  ***** NOTE: The following functions defined in `window.el' have
;;              been REDEFINED HERE:
;;
;;  `count-windows' -
;;     Only use arg MINIBUF if current frame has a minibuffer.
;;
;;  `special-display-popup-frame' (Emacs 24+) - Fit the frame.
;;
;;  `quit-window' - Call `delete-window' inside `condition-case'.
;;
;;  This file should be loaded after loading the standard GNU file
;;  `window.el'.  So, in your `~/.emacs' file, do this:
;;  (eval-after-load \"window\" '(require 'window+))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (win-switch . [(20130202 937) nil "fast, dynamic bindings for window-switching/resizing" single ";;; Commentary:
;;
;;  If you use multiple windows in an Emacs frame, you may find yourself
;;  moving through the window configuration using `other-window' (C-x o)
;;  again and again. Because the order of windows in the window list
;;  need not relate intuitively to windows' positions, moving
;;  efficiently can require context-specific prefix arguments along the
;;  way. The tiring outcome is that navigation through a complex window
;;  configuration demands many keystrokes and nontrivial attention.
;;  This package is designed to solve that problem.
;;
;;  While the `windmove' package provides functions for moving
;;  intuitively among windows, the natural key bindings for these
;;  functions (e.g., the arrow keys with some modifier) require a
;;  distant and thus inefficient hand movement. Moreover, one often
;;  wants to mix a variety of window-based operations (other-window,
;;  previous-window, directional movement, resizing) in rapid
;;  succession.
;;
;;  This package builds on the windmove functionality by defining a
;;  command `win-switch-dispatch' that engages a dynamic, transient
;;  keyboard override, allowing one to efficiently move among defined
;;  windows (and frames) -- and even resize, split, delete them -- with
;;  minimal fuss and effort. When the override is engaged, the movement
;;  and resizing commands are bound to simple keys that can be pressed
;;  quickly with one hand. The override ends either when the user exits
;;  explicitly or after a configurable idle time threshold. The happy
;;  outcome is fast and seamless navigation.
;;
;;  To use the package, execute the following code either directly
;;  or in your .emacs file:
;;
;;      (require 'win-switch)
;;      (global-set-key \"\\C-xo\" 'win-switch-dispatch)
;;
;;  or use whatever keybinding you ordinarily have set to `other-window'.
;;  Alternatively, you can use one of a variety of predefined configuration
;;  commands, as in
;;
;;      (require 'win-switch)
;;      (win-switch-setup-keys-ijkl \"\\C-xo\")
;;
;;  which has the same effect as the above.
;;
;;  Now, when executing a window switch (i.e., hitting C-xo), Emacs enters
;;  window switching mode, which lasts until either the user exits the
;;  mode or the idle time exceeds the threshold `win-switch-idle-time'.
;;  During this override, selected keys move among windows (or frames)
;;  or resize the windows. The following keys are bound by default:
;;
;;    + i select the window above the current window.
;;    + k select the window below the current window.
;;    + j select the window left of the current window.
;;    + l select the window right of the current window.
;;    + o cycle forward through the window list in the current frame.
;;    + p cycle backward through the window list in the current frame.
;;    + SPACE cycles among existing frames.
;;    + u (and RETURN) exit window switching mode.
;;    + I and K vertically enlarge and shrink the current window, respectively.
;;    + L and J horizontally enlarge and shrink the current window, respectively.
;;    + h and ; split the current window, horizontally and vertically, respectively.
;;    + ESCAPE acts as an \"emergency\" exit
;;
;;  All other keys exit window switching mode and execute their original function.
;;
;;  By default, window selection wraps around when moving across a frame
;;  edge and window switching mode is forgone when there are only two
;;  windows. But these features, the key bindings, and other parameters
;;  can all be customized, either with the customization facility or
;;  with defvar and setter functions.
;;
;;  The default keybindings are designed for fast and intuitve,
;;  one-handed operation, but if desired the key bindings can be easily
;;  adjusted or reset. Several alternative key configurations are pre-defined
;;  (see `win-switch-setup-keys-ijkl', `win-switch-setup-keys-arrow-ctrl',
;;  `win-switch-setup-keys-arrow-meta', and `win-switch-setup-keys-esdf'
;;  below). The keys also can be rebound in groups via the variables
;;  `win-switch-<name>-keys' where <name> can be one of up, down, left,
;;  right, next-window, previous-window, enlarge-vertically,
;;  shrink-vertically, enlarge-horizontally, shrink-horizontally,
;;  other-frame, exit, split-vertically, split-horizontally, delete-window,
;;  or emergency-exit. These variables should not be set directly,
;;  but rather should be set either by customize or by
;;  using the functions `win-switch-add-key', `win-switch-delete-key',
;;  and `win-switch-set-keys'. For example:
;;
;;    (win-switch-add-key    \"O\" 'previous-window)
;;    (win-switch-delete-key \"p\" 'previous-window)
;;    (win-switch-set-keys   '(\" \" \",\" \"m\") 'other-frame)
;;
;;  Note that the last arguments here are win-switch commands not elisp
;;  functions. (Note also that the emergency-exit keys do a hard exit in
;;  case of an unexpected error in user-defined code such as in
;;  customized feedback functions. This command may be removed in future
;;  versions.) At least one exit key must always be defined. Revised
;;  bindings can be set in in the hook `win-switch-load-hook' before
;;  loading the package. (Also see `win-switch-define-key' for setting
;;  general commands in the win-switch keymap, and
;;  `win-switch-set-once-key' for setting commands in the once only
;;  keymap used by `win-switch-dispatch-once'.)
;;
;;  Besides key bindings, the most important customization options are
;;  the following:
;;
;;    + `win-switch-idle-time'
;;    + `win-switch-window-threshold'
;;    + `win-switch-other-window-first'
;;    + `win-switch-wrap-around'  (set via `win-switch-set-wrap-around')
;;
;;  The idle time should be set so that one does not have to either rush
;;  or wait. (While explicit exit always works, it is nice to have
;;  window-switching mode end on its own at just the right time.) This
;;  may require some personalized fiddling to find a comfortable value,
;;  though the default should be pretty good. The window-threshold and
;;  other-window-first control when and if window switching mode is
;;  entered. And wrap-around determines if moving across the edge of the
;;  frame wraps around to the window on the other side.
;;
;;  The other customizable parameters are as follows:
;;
;;    + `win-switch-provide-visual-feedback'
;;    + `win-switch-feedback-background-color'
;;    + `win-switch-feedback-foreground-color'
;;    + `win-switch-on-feedback-function'
;;    + `win-switch-off-feedback-function'
;;    + `win-switch-other-window-function'
;;
;;  The feedback mechanisms are intended to make it salient when
;;  window switching mode is on or off and can be customized at
;;  several scales. The other-window-function replaces `other-window'
;;  for moving between window; the primary motivation is to allow
;;  `icicle-other-window-or-frame' under icicles.
;;
;;  And three hooks can be set as well:
;;
;;    + `win-switch-load-hook'
;;    + `win-switch-on-hook'
;;    + `win-switch-off-hook'
;;
;;  The following functions are used to set options:
;;
;;    + `win-switch-set-wrap-around'
;;    + `win-switch-add-key'
;;    + `win-switch-delete-key'
;;    + `win-switch-set-keys'
;;
;;  There are three main entry points for using this functionality
;;
;;    + `win-switch-dispatch' (alias `win-switch-mode')
;;    + `win-switch-dispatch-once'
;;    + `win-switch-dispatch-with'
;;
;;  The first is the main function, the second is a prefix command that
;;  gives one switch only but allows easy maneuvering in up to five
;;  windows with a single keystroke. (The `once' keys can be set using
;;  the `win-switch-set-once-keys' command.) The last constructs
;;  commands for keybindings that dispatch after some other command.
;;  (See `win-switch-setup-keys-arrow' for a nice example of its use.)
;;
;;  NOTE: win-switch is not a formal major or minor mode, more of an
;;        overriding mode. This started as a way to explore dynamic
;;        keybindings, an idea that is generalized considerably in
;;        my packages `quick-nav' and `power-keys'. The latter
;;        introduces some programming abstractions that can be used
;;        to easily install dynamic keymaps of several flavors.
;;        I plan to use the `power-keys' mechanisms for this package
;;        in a later version.
;;
;; Code Contents
;;   1. (@> \"User-Configurable Parameters\")
;;   2. (@> \"User-Configurable Key Bindings\")
;;   3. (@> \"Preventing Default Shadowing\")
;;   4. (@> \"Internal Configuration Data\")
;;   5. (@> \"Internal Functions and Macros\")
;;   6. (@> \"Customization Initializers and Option Setters\")
;;   7. (@> \"User Entry Points\")
;;   8. (@> \"Pre-defined Configurations\")
;;


"]) (wimpy-del . [(20131227 211) nil "Require confirmation for large region deletion." single ";;; Commentary:
;;
;;    Require confirmation for large region deletion.
;;  Replacements for `kill-region' and `clipboard-kill-region'.
;;
;;  Original code by Bard Bloom, bard@theory.lcs.mit.edu.
;;  Modifications by Drew Adams.
;;
;;  This provides `kill-region-wimpy', a replacement for
;;  `kill-region'.  If the region is larger than `wimpy-delete-size'
;;  characters, then `kill-region-wimpy' asks you if you really want
;;  to delete it.  The prompt tells you how big the region is, and
;;  indicates the region's text.  This can thus also be used as an
;;  alternative to `C-x C-x' to determine where the region is.
;;
;;  Similarly, `clipboard-kill-region-wimpy' is provided as a
;;  replacement for `clipboard-kill-region'.
;;
;;  New functions defined here:
;;
;;    `clipboard-kill-region-wimpy', `kill-region-wimpy'.
;;
;;  New user options (variables) defined here:
;;
;;    `wimpy-delete-dopey-message', `wimpy-delete-size'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (wiki-nav . [(20131106 706) ((button-lock (1 0 0)) (nav-flash (1 0 0))) "Simple file navigation using [[WikiStrings]]" single ";;; Commentary:
;;
;;;;;;;;;;;;;;;;;;;
;;
;; Table of Contents
;;
;; [[Quickstart]]
;; [[Explanation]]
;; [[Example usage]]
;; [[See Also]]
;; [[Prior Art]]
;; [[Notes]]
;; [[Bugs]]
;; [[Compatibility and Requirements]]
;; [[Todo]]
;; [[License]]
;; [[Code]]
;;
;;;;;;;;;;;;;;;;;;;
;;
;; [[<Quickstart]]
;;
;;     (require 'wiki-nav)
;;
;;     (global-wiki-nav-mode 1)
;;
;;     Sprinkle double-bracketed [[links]] in your code comments
;;
;; [[<Explanation]]
;;
;; Wiki-nav.el is a minor mode which recognizes [[wiki-style]]
;; double-bracketed navigation links in any type of file, providing
;; the ability to jump between sections, between files, or open
;; external links.
;;
;; Wiki-nav.el requires button-lock.el, which in turn requires
;; font-lock.el.  Font-lock.el is provided with Emacs.
;; Button-lock.el is available here
;;
;;     http://github.com/rolandwalker/button-lock
;;
;; [[<Example usage]]
;;
;;     Add the following to your ~/.emacs
;;
;;         (require 'wiki-nav)
;;         (global-wiki-nav-mode 1)
;;
;;     and sprinkle
;;
;;         [[links]]
;;
;;     throughout your files.  That's it.  There's more functionality,
;;     but simple [[links]] may be all you need.
;;
;;     Clicking a [[link]] will invoke a text search for the next
;;     matching link.  Double-clicking a link will search for matching
;;     links in all open buffers.
;;
;;     Text-matching between links is always case-insensitive.
;;
;;     To navigate upward to a previous matching link, add a '<'
;;     symbol before the search text
;;
;;         [[<links]]
;;
;;     You can insert the '>' symbol, too, but that simply indicates
;;     the default forward-search navigation.
;;
;;     Both forward and backward navigation will wrap around the ends
;;     of the file without prompting.
;;
;;     Leading and trailing space inside a link is ignored.
;;
;;     From the keyboard:
;;
;;         control-c w   skip forward in the buffer to the next link
;;
;;         control-c W   skip backward in the buffer to the previous link
;;
;;         return        if positioned on a link, activate it
;;
;;         tab           if positioned on a link, skip forward in the
;;                       buffer to the next link of any kind (need not
;;                       match the current link)
;;
;;         S-tab         if positioned on a link, skip backward in the
;;                       buffer to the previous link of any kind (need not
;;                       not match the current link)
;;
;; Advanced usage:
;;
;;     Bracketed links may contain external URLs
;;
;;         [[http://google.com]]
;;
;;     Or they may use various internally-recognized URI schemes:
;;
;;     visit: navigates to another file
;;
;;         [[visit:/etc/hosts]]
;;
;;         [[visit:/path/to/another/file:NameOfLink]]
;;
;;     func: navigates to the definition of a function
;;
;;         [[func:main]]
;;
;;     line: navigates to a line number
;;
;;         [[line:12]]
;;
;;     visit: may be combined with other schemes:
;;
;;         [[visit:/path/to/another/file:func:main]]
;;
;;         [[visit:/etc/hosts:line:5]]
;;
;;     Path names and similar strings are subjected to URI-style
;;     unescaping before lookup.  To link a filename which contains a
;;     colon, substitute \"%3A\" for the colon character.
;;
;;     See the documentation for the function wiki-nav for more
;;     information.
;;
;; [[<See Also]]
;;
;;     M-x customize-group RET wiki-nav RET
;;     M-x customize-group RET nav-flash RET
;;
;; [[<Prior Art]]
;;
;;     linkd.el
;;     David O'Toole <dto@gnu.org>
;;
;;     org-mode
;;     Carsten Dominik <carsten at orgmode dot org>
;;
;; [[<Notes]]
;;
;;     wiki-nav uses industry-standard left-clicks rather than
;;     Emacs-traditional middle clicks.
;;
;;     It is difficult to edit the text inside a link using the
;;     mouse.  To make a link inactive, position the point after the
;;     link and backspace into it.  Once the trailing delimiters have
;;     been modified, the link reverts to ordinary text.
;;
;; [[<Bugs]]
;;
;;     Only highlights first match on each comment line.
;;
;;     Double-square-brackets represent a valid construct in some
;;     programming languages (especially shell), and may be mistakenly
;;     linked.  Workaround: don't click.  Second workaround: add mode to
;;     wiki-nav-comment-only-modes via customize.  Third workaround:
;;     change delimiters triple-square-brackets via customize.
;;
;;     Newlines are not escaped in regexp fields in customize.
;;
;;     Case-sensitivity on matching the delimiters is unknown because
;;     it depends on how font-lock-defaults was called for the current
;;     mode.  However, this is not an issue unless the default delimiters
;;     are changed to use alphabetical characters.
;;
;;     Auto-complete interacts and causes keyboard interaction
;;     problems.  Auto-complete should be suppressed if the point is
;;     on a link?
;;
;;     Difficult to reproduce: keystrokes sometimes leaking through to
;;     the editor during keyboard navigation.  Tends to happen on first
;;     navigation, when key is pressed quickly?
;;
;;     The global minor mode causes button-lock to be turned off/back
;;     on for every buffer.
;;
;; [[<Compatibility and Requirements]]
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     Requires button-lock.el
;;
;;     Uses if present: nav-flash.el, back-button.el
;;
;; [[<Todo]]
;;
;;     ido support - document and provide default bindings
;;
;;     instead of comment-only modes, check if comment syntax is present
;;     in buffer as is done in fixmee-mode, and use syntax-ppss rather
;;     than regexp to detect comment context
;;
;;     support kbd-help property
;;
;;     follow the doc for defgroup to find link functions which are
;;     built-in to Emacs
;;
;;     these and other widgets are used in customize/help
;;     wiki-nav should reuse the widget functions (wid-edit.el and others)
;;         emacs-commentary-link
;;         emacs-library-link
;;     and the xref functions in help-mode.el
;;
;;     use a function matcher in font-lock keywords instead of regexp to
;;     get comment-only matches to work perfectly.  fixmee.el has correct
;;     code to match in comment
;;
;;     wiki-nav-external-link-pattern might be replaced with functions
;;     from url-util
;;
;;     visit:-1 counts from end of file
;;
;;     keyboard analog for double-click
;;
;;     right-click context menu
;;
;;     link any string <<<text>>> together within a file
;;     like org-mode radio links
;;
;;     patch font-lock to support keyword searching in comment only,
;;     like 'keep, only different - maybe not needed if using a func
;;     instead of a regexp in keyword
;;
;;     raised button style option
;;
;;     break down monolithic dispatch function wiki-nav-action-1
;;
;;     schemes to add
;;         search:
;;         regexp:
;;         elisp:
;;
;;     wiki-nav-links can be optimized by tracking which buffers are
;;     completely fontified - doesn't font-lock do that?
;;
;;     similarly, speed up wiki-nav-find-any-link by remembering if
;;     the buffer is fontified, or switch to searching by regexp
;;
;;     version of wiki-nav-find-any-link that does not wrap
;;
;;     wiki-nav-ido can only go to one occurrence of a duplicate -
;;     may not always be first
;;
;;     toggle key for switching to all buffers within wiki-nav-ido
;;     prompt
;;
;;     sort recently-used items first in wiki-nav-ido - see
;;     yas/insert-snippet for example
;;
;; [[<License]]
;;
;; Simplified BSD License
;;
;; Copyright (c) 2011-12, Roland Walker
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
;; [[<Code]]
"]) (wiki . [(20120807 1458) nil "hypertext authoring the WikiWay" single ";;; Commentary:

;; Wiki is a hypertext and a content management system: Normal users are
;; encouraged to enhance the hypertext by editing and refactoring
;; existing pages and by adding more pages.  This is made easy by
;; requiring a certain way of writing pages.  It is not as complicated
;; as a markup language such as HTML.  The general idea is to write
;; plain ASCII.  Word with mixed case such as ThisOne are WikiNames --
;; they may be a Link or they may not.  If they are, clicking them will
;; take you to the page with that WikiName; if they are not, clicking
;; them will create an empty page for you to fill out.

;; This mode does all of this for you without using a web browser, cgi
;; scripts, databases, etc.  All you need is Emacs!  In order to
;; install, put wiki.el on you load-path, and add the following to your
;; .emacs file:

;; (require 'wiki)

;; This will activate WikiMode for all files in `wiki-directories' as soon
;; as they are opened.  This works by adding `wiki-maybe' to
;; `find-file-hooks'.

;; Emacs provides the functionality usually found on Wiki web sites
;; automatically: To find out how many pages have links to your page,
;; use `grep' or `dired-do-search'.  To get an index of all wikis, use
;; `dired'.  To keep old versions around, use `version-control' or use
;; `vc-next-action'.  To edit wikis, use Emacs!

;; You can publish a wiki using `wiki-publish', or you can use
;; `dired-do-wiki-publish' to publish marked wikis from dired, or you
;; can use `wiki-publish-all' to publish all wikis and write an index
;; file.  This will translate your plain text wikis into HTML according
;; to the rules defined in `wiki-pub-rules'.

;; Find out more: Take a look at http://c2.com/cgi/wiki?StartingPoints

;;; XEmacs

;; XEmacs users will have to get easy-mmode.el, I'm afraid.  You should
;; be able to get easy-mmode.el from a web site carrying the Emacs
;; sources.  It loads fine, so that shouldn't be a problem.  Put
;; `easy-mmode' somewhere in your load-path and install as follows:

;; (require 'easy-mmode)
;; (require 'wiki)

;;; What about a Major Mode?

;; By default, wiki files will be in `fundamental-mode'.  I prefer to be
;; in `text-mode', instead.  You can do this either for all files that
;; have WikiNames by changing `auto-mode-alist', or you can make
;; text-mode the default mode instead of fundamental mode.  Example:

;; (setq default-major-mode 'text-mode)

;; This puts wiki files in `text-mode'.  One problem remains, however.
;; Text mode usually means that the apostrophe is considered to be part
;; of words, and some WikiNames will not be highlighted correctly, such
;; as \"WikiName''''s\".  In that case, change the syntax table, if you
;; don't mind the side effects.  Example:

;; (modify-syntax-entry ?' \".\" text-mode-syntax-table)

;;; Thanks

;; Frank Gerhardt <Frank.Gerhardt@web.de>, author of the original wiki-mode.
;;   His latest version is here: http://www.s.netic.de/fg/wiki-mode/wiki.el
;; Thomas Link <t.link@gmx.at>
;; John Wiegley <johnw@gnu.org>, author of emacs-wiki.el.
;;   His latest version is here: http://www.emacswiki.org/emacs/EmacsWikiMode
;; and evolved into Emacs Muse: http://www.emacswiki.org/emacs/EmacsMuse

 

"]) (widget-mvc . [(20130430 757) nil "MVC framework for the emacs widgets" single ";;; Commentary:

;; * Overview
;; This library provides following functions:
;;  - Widget Template
;;    - template helpers
;;  - Data Binding
;;  - Validation
;;  - Action Mapping
;;  - Session Attributes
;; 
;; * Widget Template
;; 
;; Sample:
;; 
;; Syntax:
;; 

;; Todo
;;   component
;;   popup select
;;   user-action

"]) (wide-n . [(20131227 210) nil "Cycle among buffer restrictions" single ";;; Commentary:
;;
;;    This library modifies commands `narrow-to-region',
;;    `narrow-to-defun', and `narrow-to-page' (`C-x n n', `C-x n d',
;;    and `C-x n p') so that the current buffer restriction
;;    (narrowing) is added to a list of restrictions for the current
;;    buffer, `wide-n-restrictions'.
;;
;;    You can then use `C-x n x' to cycle among previous buffer
;;    restrictions.  Repeating `x' repeats the action: `C-x n x x x x'
;;    etc.  Each time you hit `x' a different narrowing is made
;;    current.  This gives you an easy way to browse your past
;;    narrowings.
;;
;;    Invoking `C-x n x' with a prefix argument changes the behavior
;;    as follows:
;;
;;    * A plain prefix arg (`C-u') widens the buffer completely.
;;
;;    * A zero numeric prefix arg (e.g `C-0') widens completely
;;      and resets (empties) the list of restrictions.
;;
;;    * A numeric prefix arg N takes you directly to the abs(N)th
;;      previous restriction.  That is, it widens abs(N) times.
;;      Positive and negative args work the same, except that a
;;      negative arg also pops entries off the ring: it removes the
;;      ring entries from the most recent back through the (-)Nth one.
;;
;;    Be default, `C-x n x' is bound to command `wide-n-repeat'.  If
;;    you use Emacs 21 then you will want to change this key binding
;;    to command `wide-n', which is a non-repeatable version.
;;    Repeatability is not available before Emacs 22.
;;
;;    Emacs markers are used to record restriction limits, so the same
;;    restriction is available even if you modify its context.  If for
;;    any reason `wide-n-restrictions' ever has any entries that use
;;    buffer positions (numbers) instead of markers, invoking `wide-n'
;;    corrects this by changing the positions to markers.
;;
;;    This means that you can serialize `wide-n-restrictions',
;;    converting all markers to positions, save the value
;;    persistently, and restore it later.  Library `bookmark+.el' does
;;    this in order to let you bookmark and restore a list of
;;    restrictions.
;;
;;    In normal use, only the interactive use of commands
;;    `narrow-to-region', `narrow-to-defun', and `narrow-to-page' is
;;    affected by this library.  When these functions are called
;;    non-interactively there is normally no change to the value of
;;    variable `wide-n-restrictions'.  However, if for some reason you
;;    want to add entries to the restrictions ring when narrowing with
;;    some Emacs-Lisp code (i.e. non-interactively), you can do so by
;;    binding variable `wide-n-push-anyway-p' around the narrowing
;;    call.
;;
;;
;;  Commands defined here:
;;
;;    `wide-n', `wide-n-repeat',
;;
;;  Non-interactive functions defined here:
;;
;;    `wide-n-markerize', `wide-n-push', `wide-n-repeat-command'.
;;
;;  Internal variables defined here:
;;
;;    `wide-n-push-anyway-p', `wide-n-restrictions'.
;;
;;  ***** NOTE: This EMACS PRIMITIVE has been ADVISED HERE:
;;
;;    `narrow-to-region'.
;;
;;  ***** NOTE: The following functions defined in `lisp.el' and
;;              `page.el' have been REDEFINED here:
;;
;;    `narrow-to-defun', `narrow-to-page'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (wide-column . [(20120814 112) nil "Calls functions dependant on column position." single ";;; Commentary:
;;
;; This package is designed to run functions depending on the column
;; that the cursor is in.  My initial idea with it, is just to have it
;; change the cursor colour, lightening it as you go over the fill
;; column length.
;;
;; The point of this is that monitor sizes have in recent years got
;; plain silly, and its now relatively easy to buy one the size of a
;; small wardrobe.  Combined with the other wise wonderful
;; `dabbrev-expand' which makes it feasible to use very explantory,
;; and very long variable, and function names, source code has a habit
;; of becoming stupidly wide.  Now of course this wouldn't matter very
;; much, if we all had wide screens.  However in recent years, flat
;; screen monitors have become widely prevelant, and these generally
;; have lower resolutions, and smaller screen sizes, unless you are
;; very rich.  This raises the nasty possibility of a split therefore
;; in behaviour between those using LCD, and CRT based monitors.
;; Coming, as I do, from the left of the political spectrum, naturally
;; I find such divisiveness worrying.  This, therefore, is my
;; contribution to preventing it.
;;
;; This package functions as a normal minor mode, so
;; `wide-column-mode' toggles it on and off. There is also a global
;; minor mode which you can access with `global-wide-column-mode'
;; (Emacs 21 only). There is a problem with the getting the default
;; cursor colour; this happens when wide-column is loaded, and I can't
;; get around it without a hook in `set-cursor-color'. Set the
;; variable `wide-column-default-cursor-colour' which will solve this
;; problem.
;;

;;; Similar Packages:
;;
;; Sandip Chitale (sandip.chitale@blazesoft.com) highlight-beyond-fill

;;; Installation
;;
;; Place this file in your Emacs load path. Put (require 'wide-column)
;; into your .emacs or equivalent file. This operates as a normal
;; minor mode, so `wide-column-mode' will toggle it on and off.
;;
;; The code was developed on Gnu Emacs 21. Emacs 20 support has now
;; been removed because it required code duplication horribleness. 
;;
;; It may work on XEmacs, but I don't have one around to try. You will
;; certainly need the fsf compatibility packages if you do. 

;;; Issues;
;;
;; 1) I'm not sure about the error handling. I think things are
;; working quite well. However if the affector function crashes out,
;; it will appear to the user that wide-column mode is on, but
;; actually, it will be disabled. I can solve this easily, by
;; switching the mode off on errors, but easy-mmode produces
;; mini-buffer messages, which hide my own attempts to provide error
;; reporting. I think this way is better. If a crash happens the
;; system will be inconsistent, but the alternative will be to have
;; the minor-mode switch itself off.
;;
;; 2) The colour list is poor. I would like to improve things here,
;; but I am not sure how. See the comments near the definition of
;; `wide-column-colour-list'
;;
;; 3) Custom support would be good, and no doubt will be added at some
;; time. 
;;
;; 4) It's not going to work if people use lots of different default
;; cursor colours. Seems like a daft thing to do to me! Something to
;; work on anyway. Maybe I could solve this by advicing
;; `set-cursor-colour', but this would fail if someone uses
;; `modify-frame-parameters' directly, and I really don't want to
;; advice this function anyway.

(require 'easy-mmode)

"]) (wid-edit+ . [(20131227 210) nil "Extensions to standard library `wid-edit.el'." single ";;; Commentary:
;;
;;  Extensions to standard library `wid-edit.el'.
;;
;;  New widgets defined here:
;;
;;    `conditional-key-definition', `key-definition'.
;;
;;  Functions defined here:
;;
;;    `widgetp-color-match', `widgetp-color-validate',
;;    `widgetp-define-key-from-key-def',
;;    `widgetp-display-Completions', `widgetp-keyboard-quit',
;;    `widgetp-key-def-set', `widgetp-remove-Completions',
;;    `widgetp-rgb-hex-string-p'.
;;
;;
;;  ***** NOTE: The following widgets defined in `wid-edit.el'
;;              have been REDEFINED HERE:
;;
;;  `color' - Added :match and :validate values.
;;            Increased :size value to max color name length.
;;
;;  `editable-field' - `C-g' also removes *Completions*.
;;
;;
;;  ***** NOTE: The following functions defined in `wid-edit.el' have
;;              been REDEFINED HERE:
;;
;;  `widget-color-complete' - Made compatible with Emacs 20.
;;                            Don't use `facemenu-color-alist'.
;;                            Delete *Completions* window when done.
;;                            Keep focus in Customize frame.
;;
;;  `widget-color-notify'   - Remove *Completions* if color changes.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (whole-line-or-region . [(20110901 130) nil "operate on current line if region undefined" single ";;; Commentary:
;;
;;  This minor mode allows functions to operate on the current line if
;;  they would normally operate on a region and region is currently
;;  undefined.
;;
;;  The primary use for this is to kill (cut) the current line if no
;;  region is defined, and kill-region is invoked.  It basically saves
;;  you the effort of going to the begining of the line, selecting the
;;  text up to the end of the line, and killing.  Similarly, when
;;  yanking, it's smart enough to know that the string to be yanked
;;  was killed as a whole line, and it should be yanked as one, too.
;;  So you don't need to position yourself at the start of the line
;;  before yanking.  If region *is* defined, though, all functions act
;;  as normal.
;;
;;  The inspiration for this came from an old editor I used to use
;;  (brief maybe?), that did this exact thing for you.  It was a handy
;;  feature to have, and I definitely wanted it when I moved to Emacs.
;;  I've extended the concept slightly, to let you copy N whole lines,
;;  using the standard prefix method.
;;
;;  NOTE: This package will behave unexpectedly (and indeed is nearly
;;  useless) if `transient-mark-mode' is off, as there is then always
;;  a region defined.
;;
;;  NOTE: I haven't gotten this to work under XEmacs (though I
;;  honestly haven't tried real hard).

"]) (whitespace-cleanup-mode . [(20131205 1117) nil "Intelligently call whitespace-cleanup on save" single ";;; Commentary:

;; `whitespace-cleanup' is a handy function, but putting it in
;; `before-save-hook' for every buffer is overkill, and causes messy diffs
;; when editing code that did not initially have clean whitespace.

;; Additionally, whitespace preferences are often project-specific, and
;; it's inconvenient to set up `before-save-hook' in a \".dir-locals.el\" file.

;; `whitespace-cleanup-mode' is a minor mode which calls `whitespace-cleanup'
;; before saving the current buffer, but only if the whitespace in the buffer
;; was initially clean.

;; Set `whitespace-cleanup-mode' to t in \".dir-locals.el\" to enable the mode
;; project-wide, or add it to the hook for the major mode(s) of your choice.

;; To clean up whitespace everywhere by default, enable
;; `global-whitespace-cleanup-mode'.

;; To clean up whitespace at save even if it was intitially dirty,
;; unset `whitespace-cleanup-mode-only-if-initially-clean'.

;; This mode is built upon some functionality provided by `whitespace-mode', namely
;; `whitespace-action': if you would rather see a warning when saving a file with
;; bogus whitespace, or even have the save aborted, then set that variable.

"]) (wgrep-helm . [(20121201 530) ((wgrep (2 1 1))) "Writable helm-grep-mode buffer and apply the changes to files" single ";;; Commentary:

;; wgrep-helm allows you to edit a helm-grep-mode buffer and apply those
;; changes to the file buffer.

"]) (wgrep-ag . [(20131209 659) ((wgrep (2 1 5))) "Writable ag buffer and apply the changes to files" single ";;; Commentary:

;; wgrep-ag allows you to edit a ag buffer and apply those changes to
;; the file buffer.

"]) (wgrep-ack . [(20121201 530) ((wgrep (2 1 1))) "Writable ack-and-a-half buffer and apply the changes to files" single ";;; Commentary:

;; wgrep-ack allows you to edit a ack-and-a-half buffer and apply those
;; changes to the file buffer.

"]) (wgrep . [(20131209 659) nil "Writable grep buffer and apply the changes to files" single ";;; Commentary:

;; wgrep allows you to edit a grep buffer and apply those changes to
;; the file buffer.

"]) (weechat . [(20131117 358) ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) "Chat via WeeChat's relay protocol in Emacs" tar nil]) (wedge-ws . [(20130930 647) nil "Wedge whitespace between columns in text" single nil]) (websocket . [(20140104 1438) nil "Emacs WebSocket client and server" single ";;; Commentary:
;; This implements RFC 6455, which can be found at
;; http://tools.ietf.org/html/rfc6455.
;;
;; This library contains code to connect Emacs as a client to a
;; websocket server, and for Emacs to act as a server for websocket
;; connections.
;;
;; Websockets clients are created by calling `websocket-open', which
;; returns a `websocket' struct.  Users of this library use the
;; websocket struct, and can call methods `websocket-send-text', which
;; sends text over the websocket, or `websocket-send', which sends a
;; `websocket-frame' struct, enabling finer control of what is sent.
;; A callback is passed to `websocket-open' that will retrieve
;; websocket frames called from the websocket.  Websockets are
;; eventually closed with `websocket-close'.
;;
;; Server functionality is similar.  A server is started with
;; `websocket-server' called with a port and the callbacks to use,
;; which returns a process.  The process can later be closed with
;; `websocket-server-close'.  A `websocket' struct is also created
;; for every connection, and is exposed through the callbacks.

(require 'bindat)
(require 'url-parse)
(eval-when-compile (require 'cl))

"]) (weblogger . [(20110926 918) ((xml-rpc (1 6 8))) "Weblog maintenance via XML-RPC APIs" single ";;; Commentary:

;; weblogger.el implements the Blogger, MetaWeblog, Movable Type, and
;; LiveJournal APIs to talk to server-side weblog software.

;;; Installation:

;; If you use ELPA (http://tromey.com/elpa), you can install via the
;; M-x package-list-packages interface. This is preferrable as you
;; will have access to updates automatically.

;; Otherwise, just make sure this file and xml-rpc.el are in your
;; load-path (usually ~/.emacs.d is included) and put
;; (require 'weblogger) in your ~/.emacs or ~/.emacs.d/init.el file.

;;; Starting Out:

;; If you don't yet have a weblog, you can set one up for free on
;; various services.  (I suggest OpenWeblog.com, but then I run that
;; site :) )
;;
;; To set up your profile:
;;
;;    M-x weblogger-setup-weblog RET

;; You will be prompted for some information.  The URL should be the
;; one that uses the API you're using, not the one you would use for
;; typing an entry.  For instance, in wordpress, use
;; <blog-url>/xmlrpc.php.

;; *** FIXME This section is complete fantasy at the moment.
;; ;; If you already have a weblog, and your weblog supports RSD
;; ;; (http://archipelago.phrasewise.com/rsd), you can use
;; ;;
;; ;;    M-x weblogger-discover-server RET url RET
;; ;;
;; ;; where url is the URL of your weblog.  This will set up a
;; ;; ~/.webloggerrc file for you if you let it.

;; You can also set up your server information using
;;
;;    M-x customize-group RET weblogger RET
;;
"]) (web-server . [(20140112 824) nil "Emacs Web Server" tar ";;; Commentary:

;; A web server in Emacs running handlers written in Emacs Lisp.
;;
;; Full support for GET and POST requests including URL-encoded
;; parameters and multipart/form data.  Supports web sockets.
;;
;; See the examples/ directory for examples demonstrating the usage of
;; the Emacs Web Server.  The following launches a simple \"hello
;; world\" server.
;;
;;     (ws-start
;;      '(((lambda (_) t) .                         ; match every request
;;         (lambda (request)                        ; reply with \"hello world\"
;;           (with-slots (process) request
;;             (ws-response-header process 200 '(\"Content-type\" . \"text/plain\"))
;;             (process-send-string process \"hello world\")))))
;;      9000)

"]) (web-mode . [(20140111 1600) nil "major mode for editing html templates" tar nil]) (web-beautify . [(20131118 226) nil "Format HTML, CSS and JavaScript/JSON by js-beautify" single ";;; Commentary:

;; Add the following to your Emacs init file.

;;     (require 'web-beautify) ;; Not necessary if using ELPA package
;;     (eval-after-load 'js2-mode
;;       '(define-key js2-mode-map (kbd \"C-c b\") 'web-beautify-js))
;;     (eval-after-load 'json-mode
;;       '(define-key json-mode-map (kbd \"C-c b\") 'web-beautify-js))
;;     (eval-after-load 'sgml-mode
;;       '(define-key html-mode-map (kbd \"C-c b\") 'web-beautify-html))
;;     (eval-after-load 'css-mode
;;       '(define-key css-mode-map (kbd \"C-c b\") 'web-beautify-css))

;; If you want to automatically format before saving a file,
;; add the following hook to your Emacs configuration:

;;     (eval-after-load 'js2-mode
;;       '(add-hook 'js2-mode-hook
;;                  (lambda ()
;;                    (add-hook 'before-save-hook 'web-beautify-js-buffer t t))))

;;     (eval-after-load 'json-mode
;;       '(add-hook 'json-mode-hook
;;                  (lambda ()
;;                    (add-hook 'before-save-hook 'web-beautify-js-buffer t t))))

;;     (eval-after-load 'sgml-mode
;;       '(add-hook 'html-mode-hook
;;                  (lambda ()
;;                    (add-hook 'before-save-hook 'web-beautify-html-buffer t t))))

;;     (eval-after-load 'css-mode
;;       '(add-hook 'css-mode-hook
;;                  (lambda ()
;;                    (add-hook 'before-save-hook 'web-beautify-css-buffer t t))))

;; For more information, See URL https://github.com/yasuyk/web-beautify.


"]) (web . [(20140111 1503) nil "useful HTTP client" single ";;; Commentary:
;;
;; This is an HTTP client using lexical scope.  This makes coding with
;; callbacks easier than with `url'.  This package also provides a
;; streaming mode where the callback is continually called whenever
;; chunk encoding chunks are completed.

"]) (weather-metno . [(20131228 1128) ((emacs (24))) "Weather data from met.no in Emacs" tar ";;; Commentary:

;; See http://api.met.no/weatherapi/documentation
;; and http://api.met.no/license_data.html

;; Internal commands use ~ in the prefix.

"]) (wcheck-mode . [(20130613 808) nil "General interface for text checkers" single ";;; Commentary:
;;
;; A general interface for text checkers
;;
;; Wcheck mode is a general-purpose text-checker interface for Emacs
;; text editor. Wcheck mode a minor mode which provides an on-the-fly
;; text checker. It checks the visible text area, as you type, and
;; possibly highlights some parts of it. What is checked and how are all
;; configurable.
;;
;; Wcheck mode can use external programs or Emacs Lisp functions for
;; checking text. For example, Wcheck mode can be used with
;; spell-checker programs such as Ispell, Enchant and Hunspell, but
;; actually any tool that can receive text from standard input stream
;; and send text to standard output can be used. Wcheck mode sends parts
;; of buffer's content to an external program or an Emacs Lisp function
;; and, based on their output, decides if some parts of text should be
;; marked in the buffer.


"]) (wc-mode . [(20120531 1344) nil "show wc-like information in status bar" single ";;; Commentary:
;;
;; A simple minor-mode to display the length of the buffer in the status bar.


"]) (watch-buffer . [(20120331 1344) nil "run a shell command when saving a buffer" single ";;; Commentary:
;;
;; This extension provides a way to connect updating a buffer with running
;; a shell command.  So you can have a shell script which makes and runs a
;; c program, and then you would M-x watch-buffer, enter the shell script
;; to run, and every time you save the file it will run the shell script
;; asynchronously in a seperate buffer

"]) (wakatime-mode . [(20131223 617) nil "Automatic time tracking extension based on WakaTime" single ";;; Commentary:

;; Enable WakaTime for the current buffer by invoking
;; `wakatime-mode'. If you wish to activate it globally, use
;; `global-wakatime-mode'.

;; Set variable `wakatime-api-key' to your API key. Point
;; `wakatime-cli-path' to the absolute path of the CLI script
;; (wakatime-cli.py).

"]) (wacspace . [(20130726 1007) ((dash (1 2 0)) (cl-lib (0 2))) "The WACky WorkSPACE manager for emACS" tar nil]) (w3m . [(20140107 1708) nil "an Emacs interface to w3m" tar ";;; Commentary:

;; Emacs-w3m is an Emacs interface to the w3m program.  For more
;; detail about w3m, see:
;;
;;    http://w3m.sourceforge.net/


;;; How to install:

;; See the README file in any case.  We also recommend you check
;; whether a newer version of w3m is released.
;;
;; The outline of installation is: run the `configure' script and type
;; `make install' in the top directory of the emacs-w3m distribution.


"]) (w32browser-dlgopen . [(20131227 209) nil "Use w32browser with standard Windows Open File box." single ";;; Commentary:
;;
;; Opens MS Windows standard Open file dialog box.
;;
;; The executable `getfile.exe' should be in the system path somewhere
;; or var `dlgopen-executable-path' should have executable path+name.
;;
;; Command `dlgopen-open-files' opens the Windows Open dialog box.
;;
;; If function `w32-browser' is defined, then it is used to open files
;; selected in the Windows Open dialog box.  Otherwise, standard Emacs
;; `find-file' functions are used.
;;
;; If `w32-browser' is not defined, then `dlgopen-other-window'
;; controls how selected files are opened:
;; Non-nil => display chosen file(s) in separate windows.
;; Nil => display a single chosen file in the current window; don't
;; display multiple chosen files.  (The effect is reversed if
;; you supply a prefix arg to `dlgopen-open-files'.)
;;
;; NOTE: This is a minor tweak of file `dlgopen.el', by Binu Jose
;;       Philip.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (w32-browser . [(20131227 208) nil "Run Windows application associated with a file." single ";;; Commentary:
;;
;;    Run Windows application associated with a file.
;;
;; Functions `w32-browser' & `dired-w32-browser' were originally from
;; code posted on EmacsWiki (author unknown).
;;
;; Modified `w32-browser' to invoke `find-file' if it cannot use
;; `w32-shell-execute'.  Modified `dired-multiple-w32-browser' to use
;; `w32-browser-wait-time'.  Wrote `dired-mouse-w32-browser',
;; `w32explore', `dired-w32explore', and `dired-mouse-w32explore'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (volatile-highlights . [(20130321 641) nil "Minor mode for visual feedback on some operations." single ";;; Commentary:
;;
;; Overview
;; ========
;; This library provides minor mode `volatile-highlight-mode', which
;; brings visual feedback to some operations by highlighting portions
;; relating to the operations.
;;
;; All of highlights made by this library will be removed
;; when any new command is executed.
;;
;;
;; INSTALLING
;; ==========
;; To install this library, save this file to a directory in your
;; `load-path' (you can view the current `load-path' using \"C-h v
;; load-path\" within Emacs), then add the following line to your
;; .emacs start up file:
;;
;;    (require 'volatile-highlights)
;;    (volatile-highlights-mode t)
;;
;; USING
;; =====
;; To toggle volatile highlighting, type `M-x volatile-highlights-mode RET'.
;;
;; Currently, operations listed below will be highlighted While the minor mode
;; `volatile-highlights-mode' is on:
;;
;;    - `undo':
;;      Volatile highlights will be put on the text inserted by `undo'.
;;
;;    - `yank' and `yank-pop':
;;      Volatile highlights will be put on the text inserted by `yank'
;;      or `yank-pop'.
;;
;;    - `kill-region', `kill-line', any other killing function:
;;      Volatile highlights will be put at the positions where the
;;      killed text used to be.
;;
;;    - `delete-region':
;;      Same as `kill-region', but not as reliable since
;;      `delete-region' is an inline function.
;;
;;    - `find-tag':
;;      Volatile highlights will be put on the tag name which was found
;;      by `find-tag'.
;;
;;    - `occur-mode-goto-occurrence' and `occur-mode-display-occurrence':
;;      Volatile highlights will be put on the occurrence which is selected
;;      by `occur-mode-goto-occurrence' or `occur-mode-display-occurrence'.
;;
;;    - Non incremental search operations:
;;      Volatile highlights will be put on the the text found by
;;      commands listed below:
;;
;;        `nonincremental-search-forward'
;;        `nonincremental-search-backward'
;;        `nonincremental-re-search-forward'
;;        `nonincremental-re-search-backward'
;;        `nonincremental-repeat-search-forward'
;;        `nonincremental-repeat-search-backwar'
;;
;; Highlighting support for each operations can be turned on/off individually
;; via customization. Also check out the customization group
;;
;;   `M-x customize-group RET volatile-highlights RET'


"]) (vline . [(20120108 1245) nil "show vertical line (column highlighting) mode." single ";;; Commentary:

;; put followings your .emacs
;;   (require 'vline)
;;
;; if you display a vertical line, type M-x vline-mode.  `vline-mode' doesn't
;; effect other buffers, because it is a buffer local minor mode.  if you hide
;; a vertical line, type M-x vline-mode again.
;;
;; if you display a vertical line in all buffers, type M-x vline-global-mode.
;;
;; `vline-style' provides a display style of vertical line.  see
;; `vline-style' docstring.
;;
;; if you don't want to visual line highlighting (ex.  for performance
;; issue), please to set `vline-visual' to nil.
;;
;; if you don't want to use timer (ex.  you want to highlight column
;; during moving cursors), please to set `vline-use-timer' to nil.

"]) (vlf . [(20140113 1511) nil "View Large Files" tar ";;; Commentary:
;; This package provides the M-x vlf command, which visits part of
;; large file without loading it entirely.
;; The buffer uses VLF mode, which provides several commands for
;; moving around, searching and editing selected part of file.
;; To have it offered when opening large files:
;; (require 'vlf-integrate)

;; This package was inspired by a snippet posted by Kevin Rodgers,
;; showing how to use `insert-file-contents' to extract part of a
;; file.

"]) (vkill . [(20091203 1022) nil "view and kill Unix processes from within Emacs" single ";;; Commentary:

;; M-x vkill creates a buffer containing ps(1) output and allows you to
;; mvoe around in it marking processes to be sent a signal.  Type a `?'
;; in the Process Info buffer for more help.
;;
;; The commands vkill and list-unix-processes are the package entry points.
;;
;; To autoload, use
;;     (autoload 'vkill \"vkill\" nil t)
;;     (autoload 'list-unix-processes \"vkill\" nil t)
;; in your .emacs file.

"]) (visual-regexp-steroids . [(20140109 242) ((visual-regexp (0 5))) "Extends visual-regexp to support other regexp engines" tar nil]) (visual-regexp . [(20140109 242) ((cl-lib (0 2))) "A regexp/replace command for Emacs with interactive visual feedback" single nil]) (visible-mark . [(20080221 651) nil "Make marks visible." single ";;; Commentary:

;; This was hacked together by Jorgen Sch\303\244fer
;; And hacked again by Yann Hodique
;; Donated to the public domain. Use at your own risk.

"]) (virtualenvwrapper . [(20131120 1008) ((dash (1 5 0)) (s (1 6 1))) "a modern virtualenv tool for Emacs" single ";;; Commentary:

;; A powerful virtualenv tool for Emacs.  See documentation at
;; https://github.com/porterjamesj/virtualenvwrapper.el

;;; POTENTIAL TODOS:
;; - Figure out a better way to make M-x shell work than
;;   advising it.  This could be done if Emacs had pre-
;;   and post- shell activation hooks.
;; - Implement the option to have eshell work in a separate
;;   namespace.  This would be a substantial refactor.
;; - Add an option for `venv-location' to be an alist.
;; - Propertize the venv names in the output of `venv-lsvirtualenv'
;;   so that clicking or pressing RET on one will switch to it.

;;; VERSION HISTORY
;; 20130921
;; - Fix a bug that caused an error if exec-path was nil (Thanks Steven Huwig).
;; - Fix a bug that prevented cpvirtualenv from working in eshell.
;; - Fix a bug in which deleted virtualenvs sometimes still showed up
;;   in completions.
;; - Eshell commands now tab complete virtualenv names where appropriate.
;; - mkvirtualenv and rmvirtualenv can now accept multiple names.


"]) (virtualenv . [(20120930 1034) nil "Virtualenv for Python" single ";;; Commentary:

;; This is a minor mode for setting the virtual environment for the
;; Python shell using virtualenv and supports both python-mode.el and
;; python.el. This minor mode was inspired by an earlier
;; implementation by Jesse Legg and Jeremiah Dodds, however this code
;; is a complete re-write with a GPLv3 license consistent with
;; GNU Emacs and python-mode.el.

;; There are two ways to use virtualenv.

;; 1) The quickest way to get started is to simply type:
;;      M-x virtualenv-workon
;;    Which will prompt you to enter the name of a directory in
;;    ~/.virtualenvs that contains your chosen environment. You can
;;    hit tab to show the available completions.

;;    You'll know that you're in virtualenv mode now when you see the
;;    name of the virtualenv you selected in brackets. So if I were to
;;    select my turbogears environment that I call tg2.1 then I would
;;    see [tg2.1] appear in the mode line. To make sure you're new
;;    python shell is set up correctly you can try running this little
;;    snippet of python code:

;;      import os, sys
;;      print os.environ
;;      print sys.path

;; 2) The recommended way to use virtualenv minor mode is to use a
;; .dir-locals.el file in the root of your project directory, however that
;; requires Emacs 23.1 or higher. There are two buffer-local variables that you
;; can set for virtualenv as shown in this example:

;; in file /path/to/project/.dir-locals.el:
;; ((nil . ((virtualenv-workon . \"tg2.1\")
;; 	    (virtualenv-default-directory . \"/path/to/project/subdir\"))))

;; The .dir-locals.el is new in Emacs23 and is useful for other
;; things, too. You should read the dir-locals docs to understand the
;; format. The variable virtualenv-workon should just be a string the
;; same as you'd give to the interactive function. The variable
;; virtualenv-default-directory is useful when you want to have your
;; python process rooted in a particular directory when it starts, so
;; that no matter where you are in your project's hierarchy, if you
;; launch a python shell. This method is recommended because it is
;; more flexible and will allow multiple virtualenvs running at once
;; in future versions.

"]) (vimrc-mode . [(20130228 1244) nil "Major mode for vimrc files" single ";;; Commentary:

;; Add the following to ~/.emacs:
;;
;;     (require 'vimrc-mode)
;;     (add-to-list 'auto-mode-alist '(\".vim\\\\(rc\\\\)?$\" . vimrc-mode))
;;

"]) (vimgolf . [(20120228 550) nil "VimGolf interface for the One True Editor" single ";;; Commentary:

;; This is a simple package that allows Emacs users to compete on [VimGolf][1]
;; using the One True Editor. Competition can be commenced utilizing `M-x
;; vimgolf`. When finished with a challenge, `C-c C-v C-c` should finish your
;; editing, ensure correctness, and submit your score and keystrokes to
;; [VimGolf][1].
;;
;; On second thought, let's not go to Camelot. It's a silly place.
;;
;; Patches are accepted at https://github.com/timvisher/vimgolf
;;
;; [1]: http://vimgolf.com/

;;; Installation:

;; Use package.el. You'll need to add Marmalade to your archives:

;; (require 'package)
;; (add-to-list 'package-archives
;;              '(\"marmalade\" . \"http://marmalade-repo.org/packages/\"))

;; If you use a version of Emacs prior to 24 that doesn't include
;; package.el, you can get it from http://bit.ly/pkg-el23. If you have
;; an older package.el installed from tromey.com, you should upgrade
;; in order to support installation from multiple sources.

"]) (vim-region . [(20131214 747) nil "Select region as vim" single ";;; Commentary:

;; To use this package, add following code to your init.el or .emacs
;; (require 'vim-region)
;; (global-set-key (kbd \"C-@\") 'vim-region-mode)
;;

"]) (viewer . [(20130314 2337) nil "View-mode extension" single ";;; Commentary:

;; Viewer is view-mode extension. View-mode is finger-friendly than
;; normal editing because of many alphabetical commands. Let's use
;; view-mode more to protect our pinky.

"]) (vertica . [(20131217 711) ((sql (3 0))) "Vertica SQL mode extension" single ";;; Commentary:

;; This package adds Vertica to the SQL mode product list.

"]) (vector-utils . [(20131106 706) nil "Vector-manipulation utility functions" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'vector-utils)
;;
;;     (vector-utils-flatten '[1 2 [3 4 [5 6 7]]])
;;     ;; '[1 2 3 4 5 6 7]
;;
;;     (vector-utils-depth '[1 2 [3 4 [5 6 7]]])
;;     ;; 3
;;
;; Explanation
;;
;; Vector-utils is a collection of functions for vector manipulation.
;; This library has no user-level interface; it is only useful for
;; programming in Emacs Lisp.
;;
;; Furthermore (when programming in Emacs Lisp), be aware that the
;; modification of a vector is not permitted: only vector *elements*
;; may be changed.  All \"modification\" operations herein can only
;; work by making copies, which is not efficient.
;;
;; The following functions are provided:
;;
;;     `vector-utils-depth'
;;     `vector-utils-flatten'
;;     `vector-utils-insert-before'
;;     `vector-utils-insert-after'
;;     `vector-utils-insert-before-pos'
;;     `vector-utils-insert-after-pos'
;;
;; To use vector-utils, place the vector-utils.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'vector-utils)
;;
;; Notes
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     No external dependencies
;;
;; See Also
;;
;;     Why you should not modify vectors
;;     http://emacswiki.org/emacs/VectorUsage
;;
;; Bugs
;;
;; TODO
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (vcomp . [(20121231 248) nil "compare version strings" single ";;; Commentary:

;; Compare version strings.

;; Similar functionality is available in Emacs; see `version<' and
;; friends defined in `subr.el'.  Unfortunately those functions have
;; some limitations.
;;
;; This library can parse more version strings and doesn't treat
;; certain versions as equal that are not actually equal.

;; What is a valid version string is defined jointly by the regular
;; expression stored in variable `vcomp--regexp' and the function
;; `vcomp--intern' and best explained with an example.
;;
;; Function `vcomp--intern' converts a string to the internal format
;; as follows:
;;
;;   0.11a_rc3-r1 => ((0 11) (97 103 3 1))
;;
;;   0.11         => (0 11)  valid separators are ._-
;;       a        => 97      either 0 or the ascii code of the lower
;;                           case letter (A is equal to a)
;;        _rc     => 103     100 alpha
;;                           101 beta
;;                           102 pre
;;                           103 rc
;;                           104 --
;;                           105 p
;;                           _ is optional, - is also valid
;;           3    => 3       if missing 0 is used
;;            -r1 => 1       there are no variations of -rN
;;
;; A less crazy version string would be converted like this:
;;
;;   1.0.3 => ((1 0 3) (0 104 0 0))
;;
;; The internal format is only intended for ... internal use but if
;; you are wondering why a flat list does not do:
;;
;;   1.97 => (1 97)
;;   1a   => (1 97)

;; There are other ways of dealing with this and similar problems.
;; E.g. the built-in functions treat 1 and 1.0 as equal and only
;; support pre-releases of sorts but not patches (\"-pN\") like this
;; library does.  Having an internal format that doesn't make any
;; compromises but has to be explained seems like the better option.
;;
;; Functions `vcomp-compare' and `vcomp--compare-interned' can be used
;; to compare two versions using any predicate that can compare
;; integers.
;;
;; When comparing two versions whose numeric parts have different
;; lengths `vcomp--compare-interned' fills in -1.
;;
;;   1.0    => ((1 0) ...)   => ((1 0 -1) ...)
;;   1.0.0  => ((1 0 0) ...) => ((1 0  0) ...)
;;
;; So 1.0.0 is greater than 1.0 and 1.0 is greater than 1.  If you
;; don't want that set `vcomp--fill-number' to 0.
;;
;; This filling has to happen in `vcomp--compare-interned' as we don't
;; know the length of the other versions when `vcomp--intern' is called.

;; Function `vcomp-normalize' can be used to normalize a version string.
;;
;;   0-11A-Alpha0-r1 => 0.11a_alpha-r1
;;   2.3d-BETA5      => 2.3d_beta5
;;
;; That's the way I like my version strings; if you would like this to
;; be customizable please let me know.

"]) (vcl-mode . [(20121129 1314) nil "Syntax highlighting for Varnish Command Language" single nil]) (vc-osc . [(20120910 211) nil "non-resident support for osc version-control" single ";;; Commentary:

;; osc is the CLI tool for interacting with the Open Build Service
;; http://www.open-build-service.org/
;;
;; Thanks and credit to Stefan Monnier and all other contributors
;; to vc-svn.el, on which this is heavily based.

"]) (vc-darcs . [(20090617 1105) nil "a VC backend for darcs" single ";;; Commentary:

;; Darcs is David's Advanced Revision Control System at
;; http://www.darcs.net/

;; This version of vc-darcs was written for Emacs 23.  It will work
;; under Emacs 22, albeit with reduced functionality.

;; A few ideas for this file are directly taken from vc-svn.el.  Thanks to
;; Jim Blandy.

;; To install, put this file into your load-path and add the following to
;; your .emacs:

;; (add-to-list 'vc-handled-backends 'DARCS)
;; (autoload 'vc-darcs-find-file-hook \"vc-darcs\")
;; (add-hook 'find-file-hooks 'vc-darcs-find-file-hook)

;; There are a few reasons why vc is difficult to coerce into using darcs
;; as a backend.  By default, vc expects files (not trees) to be versioned
;; as nodes in an AND/OR tree, as is done by RCS and CVS.  Recent version
;; of vc allow some customisation of that, which allows smooth integration
;; with e.g. subversion.

;; Darcs doesn't version files at all; a darcs repository is a collection
;; of patches, and a particular file version is just the set of patches
;; that have been applied in order to build it.  While patches might be
;; reordered when moving between repositories, they usually remain ordered
;; (notable exceptions to that being unpull and optimize); hence,
;; a convenient mental shortcut is to identify a version by the latest
;; patch included in that version.  This is what we do.

;; Internally, darcs identifies a patch by its hash, which you may obtain
;; by using changes --xml.  We follow that approach in this code.  However,
;; as a hash might be difficult to remember at times (it's 65 characters
;; long), all commands that might take an interactive argument also accept
;; a regexp identifying a patch name.  See VC-DARCS-REV-TO-HASH.

;; The fit with vc is still not quite perfect.  A sore point is that vc
;; doesn't normalise versions; hence, if you have a patch called ``Initial
;; import'', you might end up with distinct but identical buffers called
;; vc-darcs.el~Init~, vc-darcs.el~Initial~ and so on.


(defvar vc-darcs-version-string \"1.12\"
  \"The version string for vc-darcs.el.\")

"]) (vc-check-status . [(20130814 522) nil "Warn you when quitting emacs and leaving repo dirty." tar ";;; Commentary:

;; This is an Emacs extension that warns you when you are about to quit
;; Emacs and leaving a git repository that has some file opened in Emacs
;; in a dirty state: uncommitted changes, unpushed commits, etc...

;;; Installation:

;; Put the following in your .emacs:

;; (require 'vc-check-status)
;; (vc-check-status-activate 1)

;; See documentation on https://github.com/thisirs/vc-check-status#vc-check-status

;;; Code

(require 'vc-git-check-status)

(defvar vc-check-alist
  '((\".*\" unpushed changes))
  \"Alist of file-name patterns vs corresponding states to check.
See corresponding checking functions in
`vc-<VCS>-check-status.el` file.\")

;;;###autoload
(progn
  (defvar vc-check nil
    \"Buffer-local variable that defines the list of states to
check.\")
  (make-variable-buffer-local 'vc-check)
  (put 'vc-check 'safe-local-variable 'vc-check-safe-p))

(defvar vc-check-cancel-hook nil
  \"Normal hook run by `vc-check-repositories', if any of the
function returns non-nil, the checking is canceled.\")

(defun vc-check-safe-p (keywords)
  \"Return non-nil if KEYWORDS is a list of symbols.\"
  (and (listp keywords)
       (null (delete t (mapcar #'symbolp keywords)))))

(defun vc-check--responsible-backend (file)
  \"Return (ROOT BACKEND) if file is under a version controlled system.
If not, return nil.\"
  (catch 'found
    (dolist (backend vc-handled-backends)
      (let ((path (vc-call-backend backend 'responsible-p file)))
        (if path (throw 'found (list path backend)))))))

(defun vc-check--get-repositories ()
  \"Return a list of elements of the form (PATH BACKEND
KEYWORDS...) where PATH is the path to a repository, BACKEND
its backend and KEYWORDS the list of the checks to perform on it
when quitting.\"
  (let (result)
    (dolist (buffer (buffer-list) result)
      (let ((file (buffer-file-name buffer)))
        (when file
          (let ((backend (vc-check--responsible-backend file)))
            (unless (or (not backend) (assoc (car backend) result)
                        (with-current-buffer buffer
                          (run-hook-with-args-until-success
                           'vc-check-cancel-hook)))
              (let (temp)
                (cond
                 ((and (local-variable-p 'vc-check buffer)
                       (buffer-local-value 'vc-check buffer))
                  (push (append backend (buffer-local-value 'vc-check buffer)) result))
                 ((setq temp (assoc-default (car backend) vc-check-alist 'string-match))
                  (push (append backend temp) result)))))))))
    result))

(defun vc-check-repositories ()
  \"Check all known repos and ask for confirmation.
This function first lists all known repositories. Then for every
one of them, it checks if they are clean. If not, it asks you if
you really want to quit.\"
  (interactive)
  (let* ((repos (vc-check--get-repositories)))
    (while (and repos (vc-check--repository-ok (car repos)))
      (setq repos (cdr repos)))
    (null repos)))

(defun vc-check--repository-ok (repo)
  \"Return non-nil if the repository described by REPO passed the
specified checks.\"
  (let* ((default-directory (car repo))
         (checks (cddr repo))
         (backend (downcase (symbol-name (cadr repo))))
         (sym-alist (symbol-value (intern (format \"vc-%s-sym-name\" backend))))
         checks-ok
         error)

    (setq checks-ok
          (mapcar
           (lambda (check)
             (condition-case e
                 (progn
                   (unless (assoc check sym-alist)
                     (error \"Check `%s' not listed in `vc-%s-sym-name'\" check backend))
                   (and (funcall
                         (intern
                          (format \"vc-%s-check-%s-p\" backend check)))
                        check))
               (setq error e)))
           checks))

    ;; Remove nil corresponding to passed checks
    (setq checks-ok (delete nil checks-ok))

    (if error
        (yes-or-no-p
         (format \"An error occurred on repo %s: %s; Exit anyway?\"
                 (car repo) error))
      (or
       (not checks-ok)
       (yes-or-no-p
        (format \"You have %s in repository %s; Exit anyway?\"
                (mapconcatend
                 (lambda (e)
                   (assoc-default e sym-alist))
                 checks-ok \", \" \" and \")
                default-directory))))))


;;;###autoload
(defun vc-check-status-activate (&optional arg)
  (interactive \"P\")
  (if (< (prefix-numeric-value arg) 0)
      (remove-hook 'kill-emacs-query-functions 'vc-check-repositories)
    (add-hook 'kill-emacs-query-functions 'vc-check-repositories)))


;; Helper functions

(defun mapconcatend (func list separator last-separator)
  \"Like mapconcat but the last separator can be specified. Useful
when building sentence like blah, blih, bloh and bluh.\"
  (let ((beg (butlast list))
        (end (car (last list))))
    (if beg
        (concat (mapconcat func beg separator) last-separator
                (funcall func end))
      (funcall func end))))

(provide 'vc-check-status)

;;; vc-check-status.el ends here
"]) (vbasense . [(20140109 2212) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a environment like Visual Basic Editor." tar ";;; Commentary:
;; 
;; This extension provides a environment with the following function like Visual Basic Editor.
;; - code assist
;; - jump to definition
;; - popup help
;; - show signature of method
;; 
;; For more infomation,
;; see <https://github.com/aki2o/emacs-vbasense/blob/master/README.md>

"]) (vagrant . [(20130808 618) nil "Manage a vagrant box from emacs" single ";;; Commentary:

;; This package lets you send vagrant commands while working within a
;; project containing a Vagrantfile.
;;
;; It will traverse the directory tree until a Vagrantfile is found
;; and assume this is the box you want to work with. It can be handy
;; to bring a box up, (re)provision, or even ssh to without leaving
;; emacs.
;;
;; The emacs command `vagrant-up` will run `vagrant up` in a shell,
;; other commands follow the pattern `vagrant-X` emacs command runs
;; `vagrant X` in the shell. An exception is vagrant-edit, which will
;; open the Vagrantfile for editing.

"]) (uuid . [(20120910 151) nil "UUID's for EmacsLisp" single ";;; Commentary:

;; UUID's are useful for all sorts of things.

;; Create, parse, and manipulate UUIDs/GUIDs, as specified in
;; http://www.ietf.org/internet-drafts/draft-mealling-uuid-urn-05.txt

"]) (use-package . [(20140106 1253) ((bind-key (1 0)) (diminish (0 44))) "A use-package declaration for simplifying your .emacs" single ";;; Commentary:

;; The `use-package' declaration macro allows you to isolate package
;; configuration in your \".emacs\" in a way that is performance-oriented and,
;; well, just tidy.  I created it because I have over 80 packages that I use
;; in Emacs, and things were getting difficult to manage.  Yet with this
;; utility my total load time is just under 1 second, with no loss of
;; functionality!
;;
;; Please see README.md from the same repository for documentation.

"]) (usage-memo . [(20110722 1551) nil "integration of Emacs help system and memo" single ";;; Commentary:

;; This program enables you to write annotation in *Help* and
;; third-party help systems. When we do programming, we often use
;; Emacs help system (ie. describe-function). Do you want to take a
;; note in the *Help* buffer and want Emacs to show your note later?
;; In other words, integration of Emacs help and your memo!


"]) (urlenc . [(20120219 343) nil "URL encoding/decoding utility for Emacs." single ";;; Commentary:

;; 

"]) (url-shortener . [(20131218 353) nil "shorten long url and expand tinyurl" single ";;; Commentary:
;; Usage:
;; this package provides commands to do url shorten and expand:
;;    M-x goo-url-shorten
;;    M-x goo-url-expand
;;    M-x bitly-url-shorten
;;    M-x bitly-url-expand
;;    M-x dwz-url-shorten
;;    M-x dwz-url-expand
;;    M-x 126am-url-shorten
;;    M-x 126am-url-expand
"]) (unipoint . [(20140113 1424) nil "a simple way to insert unicode characters by TeX name" single ";;; Commentary:

;; How to use:
;; Add this file to your load-path
;; (require 'unipoint)
;; turn on unipoint-mode
;; chord 

"]) (unicode-whitespace . [(20131122 1001) ((ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "teach whitespace-mode about fancy characters" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'unicode-whitespace)
;;
;;     (unicode-whitespace-setup 'subdued-faces)
;;
;;     M-x whitespace-mode RET
;;
;; Explanation
;;
;; Unicode-whitespace makes the built-in `whitespace-mode' Unicode-aware
;; in two different ways:
;;
;;     1. Recognizing Unicode whitespace characters in your buffer,
;;        such as \"No-Break Space\" or \"Hair Space\".
;;
;;     2. Displaying Unicode characters such as \"Paragraph Sign\"
;;        (pilcrow) in place of whitespace.
;;
;; This library also makes some minor adjustments to the default
;; settings of `whitespace-mode', and exposes character-by-character
;; display substitution mappings in customize.
;;
;; To use unicode-whitespace, place the unicode-whitespace.el library
;; somewhere Emacs can find it, and add the following to your ~/.emacs
;; file:
;;
;;     (require 'unicode-whitespace)
;;     (unicode-whitespace-setup 'subdued-faces)  ; 'subdued-faces is optional
;;
;; Then invoke `whitespace-mode' as usual.
;;
;; The display of newlines is changed from the default.  Newlines are
;; not displayed unless one of the following conditions is met:
;;
;;     1. `truncate-lines' is non-nil
;;
;;     2. `word-wrap' is non-nil
;;
;;     3. The major mode of the buffer is listed in
;;        `unicode-whitespace-newline-mark-modes'.
;;
;; A new `whitespace-style' is provided: 'echo causes the name of the
;; whitespace character under the point to be displayed in the echo
;; area.  This is not enabled by default.
;;
;; Two interactive commands are provided to manipulate these settings
;; when `whitespace-mode' is active:
;;
;;     `unicode-whitespace-toggle-newlines'
;;     `unicode-whitespace-toggle-echo'
;;
;; See Also
;;
;;     M-x customize-group RET unicode-whitespace RET
;;     M-x customize-group RET whitespace RET
;;
;; Notes
;;
;;     If the extended characters used to represent whitespace do
;;     not display correctly on your system, install unicode-fonts.el
;;     and/or read the setup tips therein.
;;
;;     Be aware when setting customizable variables for `whitespace-mode'
;;     that unicode-whitespace works by overwriting those same variables.
;;
;;     Unicode-whitespace causes alternative line terminators such as
;;     \"Line Separator\" to visually break lines so long as
;;     `whitespace-mode' is on.  Extra newline characters are not
;;     inserted.  This is a visual effect only, which ceases when
;;     `whitespace-mode' is turned off.
;;
;;     Unicode-whitespace turns off the long-line indicators built
;;     into whitespace-mode because of a font-lock bug.  To reverse
;;     this, do
;;
;;         (add-to-list 'whitespace-styles 'lines)
;;
;;     or use a separate long-lines detection package.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.3 and lower : no
;;
;;     Requires ucs-utils.el
;;
;;     Uses if present: unicode-fonts.el
;;
;; Bugs
;;
;;     Gray faces won't look good on a gray background such as that
;;     used by Zenburn color theme.  Does Zenburn set background to
;;     light or dark?  Provide a way to force faces?
;;
;;     The face for alternative line terminators is often incorrect;
;;     font-lock overrides the settings from unicode-whitespace.  This
;;     is because `whitespace-display-char-on' hardcodes \\n as the
;;     line terminator.
;;
;;     Calling alternative line terminators 'space-mark is a hack to
;;     make it possible to toggle display of standard newlines
;;     without affecting the alternates.  They really should all be
;;     called newline-mark.  whitespace.el could be updated to
;;     allow this.
;;
;;     Trailing space that ends with \\r or \\f sometimes does not get
;;     fontified -- though it usually get picked up after some
;;     typing.  This could be because of some assumptions in the
;;     post-command-hook of whitespace.el.
;;
;;
;; TODO
;;
;;     There should be separate faces for each of these classes, would
;;     need to patch or override whitespace.el
;;
;;         unicode-whitespace-tab-names
;;         unicode-whitespace-tab-set-names
;;         unicode-whitespace-soft-space-names
;;         unicode-whitespace-hard-space-names
;;         unicode-whitespace-pseudo-space-names
;;         unicode-whitespace-standard-line-terminator-names
;;         unicode-whitespace-alternative-line-terminator-names
;;         form feed
;;
;;     There are probably more nonprinting characters to include as
;;     pseudo-spaces by default.  A list of glyphless chars could be
;;     gotten from variable `glyphless-char-display'.
;;
;;     Regexps should probably be redone with only \\t for certain
;;     things.
;;
;;     A whitespace-cycle command could turn on the mode and cycle
;;     through a few levels of visibility.
;;
;;     Add a test function that dumps an extended example to scratch
;;     buffer.
;;
;;     Consistent marker symbol for thin spaces, and a way to see the
;;     intersection between thin and nonbreaking - maybe nonbreaking
;;     should be a consistent face and thin a consistent symbol.
;;
;;     The tab-visibility bug in whitespace.el could probably be fixed
;;     with an overlay.  Also, stipple can show tabs as arrows without
;;     changing display, seen here (http://emacswiki.org/emacs/BlankMode).
;;     However, the stipple face is dependent on frame-char-width/height.
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (unicode-progress-reporter . [(20131106 706) ((emacs (24 1 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Progress-reporter with fancy characters" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'unicode-progress-reporter)
;;
;;     (unicode-progress-reporter-setup)
;;
;;     ;; to see a demo
;;     (unicode-progress-reporter-test)
;;
;; Explanation
;;
;; This is a trivial modification to Emacs' built-in progress
;; reporter to display spinners using Unicode characters.
;;
;; To use unicode-progress-reporter, place the
;; unicode-progress-reporter.el library somewhere Emacs can
;; find it, and add the following to your ~/.emacs file:
;;
;;     (require 'unicode-progress-reporter)
;;     (unicode-progress-reporter-setup)
;;
;; See Also
;;
;;     M-x customize-group RET unicode-progress-reporter RET
;;
;; Notes
;;
;;     redefines `progress-reporter-do-update'
;;
;;     alters private variable `progress-reporter--pulse-characters'
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3 and lower : no
;;
;;     Requires ucs-utils.el
;;
;; Bugs
;;
;; TODO
;;
;;; License
;;
;; This library is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This library is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
;;
"]) (unicode-fonts . [(20131122 1001) ((font-utils (0 7 0)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Configure Unicode fonts" single ";;; Commentary:
;;
;; Quickstart:
;;
;;     Configure an extended Latin font for your default face, such
;;     as Monaco, Consolas, or DejaVu Sans Mono.
;;
;;     Install these fonts
;;
;;         http://users.teilar.gr/~g1951d/Symbola706.zip
;;         http://www.quivira-font.com/files/Quivira.ttf
;;         http://sourceforge.net/projects/dejavu/files/dejavu/2.33/dejavu-fonts-ttf-2.33.tar.bz2
;;
;;     Remove Unifont from your system.
;;
;;     (require 'unicode-fonts)
;;
;;     (unicode-fonts-setup)
;;
;; Testing:
;;
;;     C-h h                                         ; M-x view-hello-file
;;     M-x list-charset-chars RET unicode-bmp RET    ; search for 210x
;;     M-x list-charset-chars RET unicode-smp RET    ; if your backend supports astral chars
;;     M-x unicode-fonts-debug-insert-block RET Mathematical_Operators RET
;;
;; Explanation:
;;
;; Emacs maintains font mappings on a per-glyph basis, meaning
;; that multiple fonts are used at the same time (transparently) to
;; display any character for which you have a font.  Furthermore,
;; Emacs does this out of the box.
;;
;; However, font mappings via fontsets are a bit difficult to
;; configure.  In addition, the default setup does not always pick
;; the most legible fonts.  As the manual warns, the choice of font
;; actually displayed for a non-ASCII character is \"somewhat random\".
;;
;; The Unicode standard provides a way to organize font mappings: it
;; divides character ranges into logical groups called \"blocks\".  This
;; library configures Emacs in a Unicode-friendly way by providing
;; mappings from
;;
;;     each Unicode block  ---to--->   a font with good coverage
;;
;; and makes the settings available via the customization interface.
;;
;; This library provides font mappings for 205 of the 216 blocks in
;; the Unicode 6.3 standard with displayable characters.
;;
;; To use unicode-fonts, place the unicode-fonts.el file somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'unicode-fonts)
;;     (unicode-fonts-setup)
;;
;; See important notes about startup speed below.
;;
;; To gain any benefit from the library, you must have fonts with good
;; Unicode support installed on your system.  If you are running a
;; recent version of OS X or Microsoft Windows, you already own some
;; good multi-lingual fonts, though you would do very well to download
;; and install the four items below:
;;
;; From http://dejavu-fonts.org/wiki/Download
;;
;;     DejaVu Sans, DejaVu Sans Mono
;;
;; From http://www.quivira-font.com/downloads.php
;;
;;     Quivira
;;
;; From http://users.teilar.gr/~g1951d/
;;
;;     Symbola
;;
;; Many non-free fonts are referenced by the default settings.
;; However, free alternatives are also given wherever possible, and
;; patches are of course accepted to improve every case.
;;
;; On the assumption that an extended Latin font such as Monaco,
;; Consolas, or DejaVu Sans Mono is already being used for the default
;; face, no separate mappings are provided for the following Unicode
;; blocks:
;;
;;     Latin Extended Additional
;;     Latin Extended-A
;;     Latin-1 Supplement
;;     Spacing Modifier Letters
;;
;; It is also recommended to remove GNU Unifont from your system.
;; Unifont is very useful for debugging, but not useful for reading.
;;
;; The default options favor correctness and completeness over speed,
;; and can add many seconds to startup time in GUI mode.  Note that
;; when possible a font cache is kept between sessions, so try
;; starting Emacs a second time to see the true startup cost.  To
;; further increase startup speed, enter the customization interface
;; and
;;
;;     1. Remove fonts from `unicode-fonts-block-font-mapping'
;;        which are not present on your system.
;;
;;     2. Disable blocks in `unicode-fonts-block-font-mapping'
;;        which you are not interested in displaying.
;;
;; If you are using a language written in Chinese or Arabic script,
;; try customizing `unicode-fonts-skip-font-groups' to control which
;; script you see, and send a friendly bug report.
;;
;; Color Emoji are enabled by default when using the Native Mac port
;; on OS X.  This can be disabled by customizing each relevant mapping,
;; or by turning off all multicolor glyphs here:
;;
;;     M-x customize-variable RET unicode-fonts-skip-font-groups RET
;;
;; See Also
;;
;;     M-x customize-group RET unicode-fonts RET
;;     M-x customize-variable RET unicode-fonts-block-font-mapping RET
;;
;; Notes
;;
;; Free fonts recognized by this package may be downloaded
;; from the following locations:
;;
;;     From http://scripts.sil.org/cms/scripts/page.php?item_id=DoulosSIL_download
;;
;;         Doulos SIL                    ; Extended European and diacritics
;;
;;     From http://scripts.sil.org/cms/scripts/page.php?item_id=Gentium_download
;;
;;         Gentium Plus                  ; Greek
;;
;;     From http://users.teilar.gr/~g1951d/
;;
;;         Aegean, Aegyptus, Akkadian    ; Ancient languages
;;         Analecta                      ; Ancient languages, Deseret
;;         Musica                        ; Musical Symbols
;;
;;     From http://www.wazu.jp/gallery/views/View_MPH2BDamase.html
;;
;;         MPH 2B Damase                 ; Arabic, Armenian, Buginese, Cherokee, Georgian,
;;                                       ; Glagolitic, Hanunoo, Kharoshthi, Limbu, Osmanya,
;;                                       ; Shavian, Syloti Nagri, Tai Le, Thaana
;;
;;     From http://wenq.org/enindex.cgi?Home
;;
;;         WenQuanYi Zen Hei             ; CJK (Simplified Chinese)
;;
;;     From http://babelstone.co.uk/Fonts/
;;
;;         BabelStone Han                ; CJK (Simplified Chinese)
;;         BabelStone Phags-pa Book      ; Phags-pa
;;
;;     From http://kldp.net/projects/unfonts/
;;
;;         Un Batang                     ; CJK (Hangul)
;;
;;     From http://sourceforge.jp/projects/hanazono-font/releases/
;;
;;         Hana Min A, Hana Min B        ; CJK (Japanese)
;;
;;     From http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=SILYi_home
;;
;;         Nuosu SIL                     ; CJK (Yi)
;;
;;     From http://www.daicing.com/manchu/index.php?page=fonts-downloads
;;
;;         Daicing Xiaokai               ; Mongolian
;;
;;     From http://www.library.gov.bt/IT/fonts.html
;;
;;         Jomolhari                     ; Tibetan
;;
;;     From http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=
;;
;;         Padauk                        ; Myanmar
;;
;;     From https://code.google.com/p/myanmar3source/downloads/list
;;
;;         Myanmar3                      ; Myanmar
;;
;;     From http://www.yunghkio.com/unicode/
;;
;;         Yunghkio                      ; Myanmar
;;
;;     From https://code.google.com/p/tharlon-font/downloads/list
;;
;;         TharLon                       ; Myanmar
;;
;;     From http://sourceforge.net/projects/prahita/files/Myanmar%20Unicode%20Fonts/MasterpieceUniSans/
;;
;;         Masterpiece Uni Sans          ; Myanmar
;;
;;     From http://sarovar.org/projects/samyak/
;;
;;         Samyak                        ; Devanagari, Gujarati, Malayalam, Oriya, Tamil
;;
;;     From http://guca.sourceforge.net/typography/fonts/anmoluni/
;;
;;         AnmolUni                      ; Gurmukhi
;;
;;     From http://brahmi.sourceforge.net/downloads2.html
;;
;;         Kedage                        ; Kannada
;;
;;     From http://www.omicronlab.com/bangla-fonts.html
;;
;;         Mukti Narrow                  ; Bengali
;;
;;     From http://www.kamban.com.au/downloads.html
;;
;;         Akshar Unicode                ; Sinhala
;;
;;     From http://tabish.freeshell.org/eeyek/download.html
;;
;;         Eeyek Unicode                 ; Meetei Mayek
;;
;;     From http://scripts.sil.org/CMS/scripts/page.php?&item_id=Mondulkiri
;;
;;         Khmer Mondulkiri              ; Khmer
;;
;;     From http://www.laoscript.net/downloads/
;;
;;         Saysettha MX                  ; Lao
;;
;;     From http://www.geocities.jp/simsheart_alif/taithamunicode.html
;;
;;         Lanna Alif                    ; Tai Tham
;;
;;     From http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=DaiBannaSIL
;;
;;         Dai Banna SIL                 ; New Tai Lue
;;
;;     From http://scripts.sil.org/cms/scripts/page.php?item_id=TaiHeritage
;;
;;         Tai Heritage Pro              ; Tai Viet
;;
;;     From http://sabilulungan.org/aksara/
;;
;;         Sundanese Unicode             ; Sundanese
;;
;;     From http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=ArabicFonts
;;
;;         Scheherazade                  ; Arabic
;;
;;     From http://www.farsiweb.ir/wiki/Persian_fonts
;;
;;         Koodak                        ; Arabic (Farsi)
;;
;;     From http://openfontlibrary.org/font/ahuramazda/
;;
;;         Ahuramzda                     ; Avestan
;;
;;     From http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=AbyssinicaSIL
;;
;;         Abyssinica SIL                ; Ethiopic
;;
;;     From http://www.bethmardutho.org/index.php/resources/fonts.html
;;
;;         Estrangelo Nisibin            ; Syriac
;;
;;     From http://www.evertype.com/fonts/nko/
;;
;;         Conakry                       ; N'ko
;;
;;     From http://uni.hilledu.com/download-ribenguni
;;
;;         Ribeng                        ; Chakma
;;
;;     From http://www.virtualvinodh.com/downloads
;;
;;         Adinatha Tamil Brahmi         ; Brahmi
;;
;;     From https://code.google.com/p/noto/
;;
;;         Noto Sans                     ; Turkish Lira Sign (and others)
;;
;;     From http://ftp.gnu.org/gnu/freefont/
;;
;;         FreeMono, etc (FreeFont)      ; Kayah Li (and others)
;;
;;     From http://ulikozok.com/aksara-batak/batak-font/
;;
;;         Batak-Unicode                 ; Batak
;;
;;     From http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=Mingzat
;;
;;         Mingzat                       ; Lepcha
;;
;;     From http://phjamr.github.io/miao.html#install
;;
;;         Miao Unicode                  ; Miao, Lisu
;;
;;     From http://scholarsfonts.net/cardofnt.html
;;
;;         Cardo                         ; Historical Languages
;;
;;     From http://sourceforge.net/projects/junicode/files/junicode/
;;
;;         Junicode                      ; Historical Languages
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.3 and lower : no
;;
;;     Requires font-utils.el, ucs-utils.el
;;
;; Bugs
;;
;;     The default choice of font for each code block balances coverage
;;     versus appearance.  This is necessarily subjective.
;;
;;     Checking for font availability is slow.  This library can
;;     add anywhere between 0.1 - 10 secs to startup time.  It is
;;     slowest under X11.  Some per-architecture limitations are
;;     documented in font-utils.el
;;
;;     Calling `set-fontset-font' can easily crash Emacs.  There is a
;;     workaround, but it may not be sufficient on all platforms.
;;     Tested on Cocoa Emacs, Native Mac Emacs, X11/XQuartz,
;;     MS Windows XP.
;;
;;     Glyph-by-glyph fallthrough happens differently depending on the
;;     font backend.  On Cocoa Emacs, glyph-by-glyph fallthrough does not
;;     occur, and manual per-glyph overrides are required to maximize
;;     coverage.  Fallthrough works on MS Windows, but not perfectly.
;;     X11/FreeType behaves most predictably.
;;
;;     The following ranges cannot be overridden within the
;;     \"fontset-default\" fontset:
;;
;;         Latin Extended Additional
;;         Latin Extended-B
;;         Spacing Modifier Letters
;;
;;     `unicode-fonts-overrides-mapping' shows some order-dependence,
;;     which must indicate a bug in this code.
;;
;;     A number of the entries in `unicode-fonts-overrides-mapping'
;;     are workarounds for the font Monaco, and therefore specific
;;     to OS X.
;;
;;     Widths of alternate fonts do not act as expected on MS Windows.
;;     For example, DejaVu Sans Mono box-drawing characters may use
;;     a different width than the default font.
;;
;; TODO
;;
;;     (set-language-environment \"UTF-8\") ?
;;
;;     Remove very old Microsoft entries (eg Monotype.com which was
;;     renamed Andale)
;;
;;     Recognize the default font and make smarter choices when it is
;;     one of the provided mappings.  (On Cocoa, the default font is
;;     returned when font-info fails, which is not a good thing
;;     overall.)
;;
;;     For every font, list font version and unicode blocks which are
;;     complete.
;;
;;     Note all decorative fonts
;;
;;     Get Windows 8 font listing
;;
;;     Adobe international fonts which are supplied with Reader
;;
;;     Apple fonts which could not be mapped
;;         Wawati TC
;;         Weibei TC
;;         Weibei SC
;;         Wawati SC
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
;; No rights are claimed over data created by the Unicode
;; Consortium, which are included here under the terms of
;; the Unicode Terms of Use.
;;
"]) (unicode-enbox . [(20131122 1000) ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Surround a string with box-drawing characters" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'unicode-enbox)
;;
;;     (insert \"\\n\" (unicode-enbox \"testing\"))
;;
;; Explanation
;;
;; Unicode-enbox.el has no user-level interface; it is only useful
;; for programming in Emacs Lisp.
;;
;; This library provides two functions:
;;
;;     unicode-enbox
;;     unicode-enbox-debox
;;
;; which can be used to add/remove box-drawing characters around
;; a single- or multi-line string.
;;
;; To use unicode-enbox, place the unicode-enbox.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'unicode-enbox)
;;
;; See Also
;;
;;     M-x customize-group RET unicode-enbox RET
;;
;; Notes
;;
;; For good monospaced box-drawing characters, it is recommended to
;; install the free DejaVu Sans Mono font and use unicode-fonts.el.
;; If unicode-fonts.el is too heavy for your needs, try adding the
;; following bit to your ~/.emacs file:
;;
;;     (set-fontset-font \"fontset-default\"
;;                       (cons (decode-char 'ucs #x2500)  (decode-char 'ucs #x257F))
;;                       '(\"DejaVu Sans Mono\" . \"iso10646-1\"))
;;
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.3 and lower : no
;;
;;     Requires string-utils.el, ucs-utils.el
;;
;; Bugs
;;
;; TODO
;;
;;     Interactive command that works on rectangles.
;;
;;     Logic in unicode-enbox is not clear, eg where it falls through
;;     to 'smart.
;;
;;     Detect lines of full dashes, replace with box chars and
;;     connectors, then would need more clever deboxing - or just
;;     store the original string in a property - done?
;;
;;     Detect acutal width of unicode characters in GUI - char-width
;;     does not return the right answer.
;;
;;     Generalize to comment boxes with multi-character drawing
;;     elements.
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (unfill . [(20131103 213) nil "The inverse of fill-paragraph and fill-region" single nil]) (undohist . [(20110331 1623) nil "Persistent Undo History for GNU Emacs" single ";;; Commentary:

;; This extension provides a way to use undo history of
;; individual file buffers persistently.
;;
;; Write the following code to your .emacs:
;;
;; (require 'undohist)
;; (undohist-initialize)
;;
;; Now you can record and recover undohist by typing
;; C-x C-s (save-buffer) an C-x C-f (find-file).
;; And then type C-/ (undo).

"]) (undo-tree . [(20140110 616) nil "Treat undo history as a tree" single ";;; Commentary:
;;
;; Emacs has a powerful undo system. Unlike the standard undo/redo system in
;; most software, it allows you to recover *any* past state of a buffer
;; (whereas the standard undo/redo system can lose past states as soon as you
;; redo). However, this power comes at a price: many people find Emacs' undo
;; system confusing and difficult to use, spawning a number of packages that
;; replace it with the less powerful but more intuitive undo/redo system.
;;
;; Both the loss of data with standard undo/redo, and the confusion of Emacs'
;; undo, stem from trying to treat undo history as a linear sequence of
;; changes. It's not. The `undo-tree-mode' provided by this package replaces
;; Emacs' undo system with a system that treats undo history as what it is: a
;; branching tree of changes. This simple idea allows the more intuitive
;; behaviour of the standard undo/redo system to be combined with the power of
;; never losing any history. An added side bonus is that undo history can in
;; some cases be stored more efficiently, allowing more changes to accumulate
;; before Emacs starts discarding history.
;;
;; The only downside to this more advanced yet simpler undo system is that it
;; was inspired by Vim. But, after all, most successful religions steal the
;; best ideas from their competitors!
;;
;;
;; Installation
;; ============
;;
;; This package has only been tested with Emacs versions 24 and CVS. It should
;; work in Emacs versions 22 and 23 too, but will not work without
;; modifications in earlier versions of Emacs.
;;
;; To install `undo-tree-mode', make sure this file is saved in a directory in
;; your `load-path', and add the line:
;;
;;   (require 'undo-tree)
;;
;; to your .emacs file. Byte-compiling undo-tree.el is recommended (e.g. using
;; \"M-x byte-compile-file\" from within emacs).
;;
;; If you want to replace the standard Emacs' undo system with the
;; `undo-tree-mode' system in all buffers, you can enable it globally by
;; adding:
;;
;;   (global-undo-tree-mode)
;;
;; to your .emacs file.
;;
;;
;; Quick-Start
;; ===========
;;
;; If you're the kind of person who likes to jump in the car and drive,
;; without bothering to first figure out whether the button on the left dips
;; the headlights or operates the ejector seat (after all, you'll soon figure
;; it out when you push it), then here's the minimum you need to know:
;;
;; `undo-tree-mode' and `global-undo-tree-mode'
;;   Enable undo-tree mode (either in the current buffer or globally).
;;
;; C-_  C-/  (`undo-tree-undo')
;;   Undo changes.
;;
;; M-_  C-?  (`undo-tree-redo')
;;   Redo changes.
;;
;; `undo-tree-switch-branch'
;;   Switch undo-tree branch.
;;   (What does this mean? Better press the button and see!)
;;
;; C-x u  (`undo-tree-visualize')
;;   Visualize the undo tree.
;;   (Better try pressing this button too!)
;;
;; C-x r u  (`undo-tree-save-state-to-register')
;;   Save current buffer state to register.
;;
;; C-x r U  (`undo-tree-restore-state-from-register')
;;   Restore buffer state from register.
;;
;;
;;
;; In the undo-tree visualizer:
;;
;; <up>  p  C-p  (`undo-tree-visualize-undo')
;;   Undo changes.
;;
;; <down>  n  C-n  (`undo-tree-visualize-redo')
;;   Redo changes.
;;
;; <left>  b  C-b  (`undo-tree-visualize-switch-branch-left')
;;   Switch to previous undo-tree branch.
;;
;; <right>  f  C-f  (`undo-tree-visualize-switch-branch-right')
;;   Switch to next undo-tree branch.
;;
;; C-<up>  M-{  (`undo-tree-visualize-undo-to-x')
;;   Undo changes up to last branch point.
;;
;; C-<down>  M-}  (`undo-tree-visualize-redo-to-x')
;;   Redo changes down to next branch point.
;;
;; <down>  n  C-n  (`undo-tree-visualize-redo')
;;   Redo changes.
;;
;; <mouse-1>  (`undo-tree-visualizer-mouse-set')
;;   Set state to node at mouse click.
;;
;; t  (`undo-tree-visualizer-toggle-timestamps')
;;   Toggle display of time-stamps.
;;
;; d  (`undo-tree-visualizer-toggle-diff')
;;   Toggle diff display.
;;
;; s  (`undo-tree-visualizer-selection-mode')
;;   Toggle keyboard selection mode.
;;
;; q  (`undo-tree-visualizer-quit')
;;   Quit undo-tree-visualizer.
;;
;; C-q  (`undo-tree-visualizer-abort')
;;   Abort undo-tree-visualizer.
;;
;; ,  <
;;   Scroll left.
;;
;; .  >
;;   Scroll right.
;;
;; <pgup>  M-v
;;   Scroll up.
;;
;; <pgdown>  C-v
;;   Scroll down.
;;
;;
;;
;; In visualizer selection mode:
;;
;; <up>  p  C-p  (`undo-tree-visualizer-select-previous')
;;   Select previous node.
;;
;; <down>  n  C-n  (`undo-tree-visualizer-select-next')
;;   Select next node.
;;
;; <left>  b  C-b  (`undo-tree-visualizer-select-left')
;;   Select left sibling node.
;;
;; <right>  f  C-f  (`undo-tree-visualizer-select-right')
;;   Select right sibling node.
;;
;; <pgup>  M-v
;;   Select node 10 above.
;;
;; <pgdown>  C-v
;;   Select node 10 below.
;;
;; <enter>  (`undo-tree-visualizer-set')
;;   Set state to selected node and exit selection mode.
;;
;; s  (`undo-tree-visualizer-mode')
;;   Exit selection mode.
;;
;; t  (`undo-tree-visualizer-toggle-timestamps')
;;   Toggle display of time-stamps.
;;
;; d  (`undo-tree-visualizer-toggle-diff')
;;   Toggle diff display.
;;
;; q  (`undo-tree-visualizer-quit')
;;   Quit undo-tree-visualizer.
;;
;; C-q  (`undo-tree-visualizer-abort')
;;   Abort undo-tree-visualizer.
;;
;; ,  <
;;   Scroll left.
;;
;; .  >
;;   Scroll right.
;;
;;
;;
;; Persistent undo history:
;;
;; Note: Requires Emacs version 24.3 or higher.
;;
;; `undo-tree-auto-save-history' (variable)
;;    automatically save and restore undo-tree history along with buffer
;;    (disabled by default)
;;
;; `undo-tree-save-history' (command)
;;    manually save undo history to file
;;
;; `undo-tree-load-history' (command)
;;    manually load undo history from file
;;
;;
;;
;; Compressing undo history:
;;
;;   Undo history files cannot grow beyond the maximum undo tree size, which
;;   is limited by `undo-limit', `undo-strong-limit' and
;;   `undo-outer-limit'. Nevertheless, undo history files can grow quite
;;   large. If you want to automatically compress undo history, add the
;;   following advice to your .emacs file (replacing \".gz\" with the filename
;;   extension of your favourite compression algorithm):
;;
;;   (defadvice undo-tree-make-history-save-file-name
;;     (after undo-tree activate)
;;     (setq ad-return-value (concat ad-return-value \".gz\")))
;;
;;
;;
;;
;; Undo Systems
;; ============
;;
;; To understand the different undo systems, it's easiest to consider an
;; example. Imagine you make a few edits in a buffer. As you edit, you
;; accumulate a history of changes, which we might visualize as a string of
;; past buffer states, growing downwards:
;;
;;                                o  (initial buffer state)
;;                                |
;;                                |
;;                                o  (first edit)
;;                                |
;;                                |
;;                                o  (second edit)
;;                                |
;;                                |
;;                                x  (current buffer state)
;;
;;
;; Now imagine that you undo the last two changes. We can visualize this as
;; rewinding the current state back two steps:
;;
;;                                o  (initial buffer state)
;;                                |
;;                                |
;;                                x  (current buffer state)
;;                                |
;;                                |
;;                                o
;;                                |
;;                                |
;;                                o
;;
;;
;; However, this isn't a good representation of what Emacs' undo system
;; does. Instead, it treats the undos as *new* changes to the buffer, and adds
;; them to the history:
;;
;;                                o  (initial buffer state)
;;                                |
;;                                |
;;                                o  (first edit)
;;                                |
;;                                |
;;                                o  (second edit)
;;                                |
;;                                |
;;                                x  (buffer state before undo)
;;                                |
;;                                |
;;                                o  (first undo)
;;                                |
;;                                |
;;                                x  (second undo)
;;
;;
;; Actually, since the buffer returns to a previous state after an undo,
;; perhaps a better way to visualize it is to imagine the string of changes
;; turning back on itself:
;;
;;        (initial buffer state)  o
;;                                |
;;                                |
;;                  (first edit)  o  x  (second undo)
;;                                |  |
;;                                |  |
;;                 (second edit)  o  o  (first undo)
;;                                | /
;;                                |/
;;                                o  (buffer state before undo)
;;
;; Treating undos as new changes might seem a strange thing to do. But the
;; advantage becomes clear as soon as we imagine what happens when you edit
;; the buffer again. Since you've undone a couple of changes, new edits will
;; branch off from the buffer state that you've rewound to. Conceptually, it
;; looks like this:
;;
;;                                o  (initial buffer state)
;;                                |
;;                                |
;;                                o
;;                                |\\
;;                                | \\
;;                                o  x  (new edit)
;;                                |
;;                                |
;;                                o
;;
;; The standard undo/redo system only lets you go backwards and forwards
;; linearly. So as soon as you make that new edit, it discards the old
;; branch. Emacs' undo just keeps adding changes to the end of the string. So
;; the undo history in the two systems now looks like this:
;;
;;            Undo/Redo:                      Emacs' undo
;;
;;               o                                o
;;               |                                |
;;               |                                |
;;               o                                o  o
;;               .\\                               |  |\\
;;               . \\                              |  | \\
;;               .  x  (new edit)                 o  o  |
;;   (discarded  .                                | /   |
;;     branch)   .                                |/    |
;;               .                                o     |
;;                                                      |
;;                                                      |
;;                                                      x  (new edit)
;;
;; Now, what if you change your mind about those undos, and decide you did
;; like those other changes you'd made after all? With the standard undo/redo
;; system, you're lost. There's no way to recover them, because that branch
;; was discarded when you made the new edit.
;;
;; However, in Emacs' undo system, those old buffer states are still there in
;; the undo history. You just have to rewind back through the new edit, and
;; back through the changes made by the undos, until you reach them. Of
;; course, since Emacs treats undos (even undos of undos!) as new changes,
;; you're really weaving backwards and forwards through the history, all the
;; time adding new changes to the end of the string as you go:
;;
;;                       o
;;                       |
;;                       |
;;                       o  o     o  (undo new edit)
;;                       |  |\\    |\\
;;                       |  | \\   | \\
;;                       o  o  |  |  o  (undo the undo)
;;                       | /   |  |  |
;;                       |/    |  |  |
;;      (trying to get   o     |  |  x  (undo the undo)
;;       to this state)        | /
;;                             |/
;;                             o
;;
;; So far, this is still reasonably intuitive to use. It doesn't behave so
;; differently to standard undo/redo, except that by going back far enough you
;; can access changes that would be lost in standard undo/redo.
;;
;; However, imagine that after undoing as just described, you decide you
;; actually want to rewind right back to the initial state. If you're lucky,
;; and haven't invoked any command since the last undo, you can just keep on
;; undoing until you get back to the start:
;;
;;      (trying to get   o              x  (got there!)
;;       to this state)  |              |
;;                       |              |
;;                       o  o     o     o  (keep undoing)
;;                       |  |\\    |\\    |
;;                       |  | \\   | \\   |
;;                       o  o  |  |  o  o  (keep undoing)
;;                       | /   |  |  | /
;;                       |/    |  |  |/
;;      (already undid   o     |  |  o  (got this far)
;;       to this state)        | /
;;                             |/
;;                             o
;;
;; But if you're unlucky, and you happen to have moved the point (say) after
;; getting to the state labelled \"got this far\", then you've \"broken the undo
;; chain\". Hold on to something solid, because things are about to get
;; hairy. If you try to undo now, Emacs thinks you're trying to undo the
;; undos! So to get back to the initial state you now have to rewind through
;; *all* the changes, including the undos you just did:
;;
;;      (trying to get   o                          x  (finally got there!)
;;       to this state)  |                          |
;;                       |                          |
;;                       o  o     o     o     o     o
;;                       |  |\\    |\\    |\\    |\\    |
;;                       |  | \\   | \\   | \\   | \\   |
;;                       o  o  |  |  o  o  o  |  o  o
;;                       | /   |  |  | /   |  |  | /
;;                       |/    |  |  |/    |  |  |/
;;      (already undid   o     |  |  o<.   |  |  o
;;       to this state)        | /     :   | /
;;                             |/      :   |/
;;                             o       :   o
;;                                     :
;;                             (got this far, but
;;                              broke the undo chain)
;;
;; Confused?
;;
;; In practice you can just hold down the undo key until you reach the buffer
;; state that you want. But whatever you do, don't move around in the buffer
;; to *check* that you've got back to where you want! Because you'll break the
;; undo chain, and then you'll have to traverse the entire string of undos
;; again, just to get back to the point at which you broke the
;; chain. Undo-in-region and commands such as `undo-only' help to make using
;; Emacs' undo a little easier, but nonetheless it remains confusing for many
;; people.
;;
;;
;; So what does `undo-tree-mode' do? Remember the diagram we drew to represent
;; the history we've been discussing (make a few edits, undo a couple of them,
;; and edit again)? The diagram that conceptually represented our undo
;; history, before we started discussing specific undo systems? It looked like
;; this:
;;
;;                                o  (initial buffer state)
;;                                |
;;                                |
;;                                o
;;                                |\\
;;                                | \\
;;                                o  x  (current state)
;;                                |
;;                                |
;;                                o
;;
;; Well, that's *exactly* what the undo history looks like to
;; `undo-tree-mode'.  It doesn't discard the old branch (as standard undo/redo
;; does), nor does it treat undos as new changes to be added to the end of a
;; linear string of buffer states (as Emacs' undo does). It just keeps track
;; of the tree of branching changes that make up the entire undo history.
;;
;; If you undo from this point, you'll rewind back up the tree to the previous
;; state:
;;
;;                                o
;;                                |
;;                                |
;;                                x  (undo)
;;                                |\\
;;                                | \\
;;                                o  o
;;                                |
;;                                |
;;                                o
;;
;; If you were to undo again, you'd rewind back to the initial state. If on
;; the other hand you redo the change, you'll end up back at the bottom of the
;; most recent branch:
;;
;;                                o  (undo takes you here)
;;                                |
;;                                |
;;                                o  (start here)
;;                                |\\
;;                                | \\
;;                                o  x  (redo takes you here)
;;                                |
;;                                |
;;                                o
;;
;; So far, this is just like the standard undo/redo system. But what if you
;; want to return to a buffer state located on a previous branch of the
;; history? Since `undo-tree-mode' keeps the entire history, you simply need
;; to tell it to switch to a different branch, and then redo the changes you
;; want:
;;
;;                                o
;;                                |
;;                                |
;;                                o  (start here, but switch
;;                                |\\  to the other branch)
;;                                | \\
;;                        (redo)  o  o
;;                                |
;;                                |
;;                        (redo)  x
;;
;; Now you're on the other branch, if you undo and redo changes you'll stay on
;; that branch, moving up and down through the buffer states located on that
;; branch. Until you decide to switch branches again, of course.
;;
;; Real undo trees might have multiple branches and sub-branches:
;;
;;                                o
;;                            ____|______
;;                           /           \\
;;                          o             o
;;                      ____|__         __|
;;                     /    |  \\       /   \\
;;                    o     o   o     o     x
;;                    |               |
;;                   / \\             / \\
;;                  o   o           o   o
;;
;; Trying to imagine what Emacs' undo would do as you move about such a tree
;; will likely frazzle your brain circuits! But in `undo-tree-mode', you're
;; just moving around this undo history tree. Most of the time, you'll
;; probably only need to stay on the most recent branch, in which case it
;; behaves like standard undo/redo, and is just as simple to understand. But
;; if you ever need to recover a buffer state on a different branch, the
;; possibility of switching between branches and accessing the full undo
;; history is still there.
;;
;;
;;
;; The Undo-Tree Visualizer
;; ========================
;;
;; Actually, it gets better. You don't have to imagine all these tree
;; diagrams, because `undo-tree-mode' includes an undo-tree visualizer which
;; draws them for you! In fact, it draws even better diagrams: it highlights
;; the node representing the current buffer state, it highlights the current
;; branch, and you can toggle the display of time-stamps (by hitting \"t\") and
;; a diff of the undo changes (by hitting \"d\"). (There's one other tiny
;; difference: the visualizer puts the most recent branch on the left rather
;; than the right.)
;;
;; Bring up the undo tree visualizer whenever you want by hitting \"C-x u\".
;;
;; In the visualizer, the usual keys for moving up and down a buffer instead
;; move up and down the undo history tree (e.g. the up and down arrow keys, or
;; \"C-n\" and \"C-p\"). The state of the \"parent\" buffer (the buffer whose undo
;; history you are visualizing) is updated as you move around the undo tree in
;; the visualizer. If you reach a branch point in the visualizer, the usual
;; keys for moving forward and backward in a buffer instead switch branch
;; (e.g. the left and right arrow keys, or \"C-f\" and \"C-b\").
;;
;; Clicking with the mouse on any node in the visualizer will take you
;; directly to that node, resetting the state of the parent buffer to the
;; state represented by that node.
;;
;; You can also select nodes directly using the keyboard, by hitting \"s\" to
;; toggle selection mode. The usual motion keys now allow you to move around
;; the tree without changing the parent buffer. Hitting <enter> will reset the
;; state of the parent buffer to the state represented by the currently
;; selected node.
;;
;; It can be useful to see how long ago the parent buffer was in the state
;; represented by a particular node in the visualizer. Hitting \"t\" in the
;; visualizer toggles the display of time-stamps for all the nodes. (Note
;; that, because of the way `undo-tree-mode' works, these time-stamps may be
;; somewhat later than the true times, especially if it's been a long time
;; since you last undid any changes.)
;;
;; To get some idea of what changes are represented by a given node in the
;; tree, it can be useful to see a diff of the changes. Hit \"d\" in the
;; visualizer to toggle a diff display. This normally displays a diff between
;; the current state and the previous one, i.e. it shows you the changes that
;; will be applied if you undo (move up the tree). However, the diff display
;; really comes into its own in the visualizer's selection mode (see above),
;; where it instead shows a diff between the current state and the currently
;; selected state, i.e. it shows you the changes that will be applied if you
;; reset to the selected state.
;;
;; (Note that the diff is generated by the Emacs `diff' command, and is
;; displayed using `diff-mode'. See the corresponding customization groups if
;; you want to customize the diff display.)
;;
;; Finally, hitting \"q\" will quit the visualizer, leaving the parent buffer in
;; whatever state you ended at. Hitting \"C-q\" will abort the visualizer,
;; returning the parent buffer to whatever state it was originally in when the
;; visualizer was .
;;
;;
;;
;; Undo-in-Region
;; ==============
;;
;; Emacs allows a very useful and powerful method of undoing only selected
;; changes: when a region is active, only changes that affect the text within
;; that region will be undone. With the standard Emacs undo system, changes
;; produced by undoing-in-region naturally get added onto the end of the
;; linear undo history:
;;
;;                       o
;;                       |
;;                       |  x  (second undo-in-region)
;;                       o  |
;;                       |  |
;;                       |  o  (first undo-in-region)
;;                       o  |
;;                       | /
;;                       |/
;;                       o
;;
;; You can of course redo these undos-in-region as usual, by undoing the
;; undos:
;;
;;                       o
;;                       |
;;                       |  o_
;;                       o  | \\
;;                       |  |  |
;;                       |  o  o  (undo the undo-in-region)
;;                       o  |  |
;;                       | /   |
;;                       |/    |
;;                       o     x  (undo the undo-in-region)
;;
;;
;; In `undo-tree-mode', undo-in-region works much the same way: when there's
;; an active region, undoing only undoes changes that affect that region. In
;; `undo-tree-mode', redoing when there's an active region similarly only
;; redoes changes that affect that region.
;;
;; However, the way these undo- and redo-in-region changes are recorded in the
;; undo history is quite different. The good news is, you don't need to
;; understand this to use undo- and redo-in-region in `undo-tree-mode' - just
;; go ahead and use them! They'll probably work as you expect. But if you're
;; masochistic enough to want to understand conceptually what's happening to
;; the undo tree as you undo- and redo-in-region, then read on...
;;
;;
;; Undo-in-region creates a new branch in the undo history. The new branch
;; consists of an undo step that undoes some of the changes that affect the
;; current region, and another step that undoes the remaining changes needed
;; to rejoin the previous undo history.
;;
;;      Previous undo history                Undo-in-region
;;
;;               o                                o
;;               |                                |
;;               |                                |
;;               |                                |
;;               o                                o
;;               |                                |
;;               |                                |
;;               |                                |
;;               o                                o_
;;               |                                | \\
;;               |                                |  x  (undo-in-region)
;;               |                                |  |
;;               x                                o  o
;;
;; As long as you don't change the active region after undoing-in-region,
;; continuing to undo-in-region extends the new branch, pulling more changes
;; that affect the current region into an undo step immediately above your
;; current location in the undo tree, and pushing the point at which the new
;; branch is attached further up the tree:
;;
;;      First undo-in-region                 Second undo-in-region
;;
;;               o                                o
;;               |                                |
;;               |                                |
;;               |                                |
;;               o                                o_
;;               |                                | \\
;;               |                                |  x  (undo-in-region)
;;               |                                |  |
;;               o_                               o  |
;;               | \\                              |  |
;;		 |  x                             |  o
;;		 |  |                             |  |
;;		 o  o     			  o  o
;;
;; Redoing takes you back down the undo tree, as usual (as long as you haven't
;; changed the active region after undoing-in-region, it doesn't matter if it
;; is still active):
;;
;;                       o
;;			 |
;;			 |
;;			 |
;;			 o_
;;			 | \\
;;			 |  o
;;			 |  |
;;			 o  |
;;			 |  |
;;			 |  o  (redo)
;;			 |  |
;;			 o  x  (redo)
;;
;;
;; What about redo-in-region? Obviously, redo-in-region only makes sense if
;; you have already undone some changes, so that there are some changes to
;; redo! Redoing-in-region splits off a new branch of the undo history below
;; your current location in the undo tree. This time, the new branch consists
;; of a first redo step that redoes some of the redo changes that affect the
;; current region, followed by *all* the remaining redo changes.
;;
;;      Previous undo history                Redo-in-region
;;
;;               o                                o
;;               |                                |
;;               |                                |
;;               |                                |
;;               x                                o_
;;               |                                | \\
;;               |                                |  x  (redo-in-region)
;;               |                                |  |
;;               o                                o  |
;;               |                                |  |
;;               |                                |  |
;;               |                                |  |
;;               o                                o  o
;;
;; As long as you don't change the active region after redoing-in-region,
;; continuing to redo-in-region extends the new branch, pulling more redo
;; changes into a redo step immediately below your current location in the
;; undo tree.
;;
;;      First redo-in-region                 Second redo-in-region
;;
;;               o                                 o
;;               |                                 |
;;               |                                 |
;;               |                                 |
;;               o_                                o_
;;               | \\                               | \\
;;               |  x                              |  o
;;               |  |                              |  |
;;               o  |                              o  |
;;               |  |                              |  |
;;               |  |                              |  x  (redo-in-region)
;;               |  |                              |  |
;;               o  o                              o  o
;;
;; Note that undo-in-region and redo-in-region only ever add new changes to
;; the undo tree, they *never* modify existing undo history. So you can always
;; return to previous buffer states by switching to a previous branch of the
;; tree.



"]) (underwater-theme . [(20131117 1602) nil "A gentle, deep blue color theme" single ";;; Commentary:

;; This is an Emacs 24 port of underwater-mod.vim by Mario Gutierrez
;; from URL `http://www.vim.org/scripts/script.php?script_id=3132'.
;;
;; To use this theme, download it to ~/.emacs.d/themes. In your `.emacs'
;; or `init.el', add this line:
;;
;;   (add-to-list 'custom-theme-load-path \"~/.emacs.d/themes\")
;;
;; Once you have reloaded your configuration (`eval-buffer'), do `M-x
;; load-theme' and select \"underwater\".

"]) (uncrustify-mode . [(20130707 659) nil "Minor mode to automatically uncrustify." single nil]) (ukrainian-holidays . [(20130720 649) nil "Ukrainian holidays for Emacs calendar." single ";;; Commentary:

;; *English*
;;
;; Ukrainian holidays for Emacs calendar.
;;
;; To install, put this file in ~/.emacs.d/ and add to ~/.emacs:
;; (eval-after-load 'calendar
;;   '(load \"~/.emacs.d/ukrainian-holidays.el\" t t))
;;
;; *Ukrainian*
;;
;; \320\243\320\272\321\200\320\260\321\227\320\275\321\201\321\214\320\272\321\226 \321\201\320\262\321\217\321\202\320\260 \320\264\320\273\321\217 \320\272\320\260\320\273\320\265\320\275\320\264\320\260\321\200\321\217 Emacs.
;;
;; \320\243\321\201\321\202\320\260\320\275\320\276\320\262\320\272\320\260: \321\201\320\272\320\276\320\277\321\226\321\216\320\271\321\202\320\265 \321\206\320\265\320\271 \321\204\320\260\320\271\320\273 \320\264\320\276 ~/.emacs.d/ \321\226 \320\264\320\276\320\264\320\260\320\271\321\202\320\265 \320\264\320\276 ~/.emacs:
;; (eval-after-load 'calendar
;;   '(load \"~/.emacs.d/ukrainain-holidays.el\" t t))

"]) (ujelly-theme . [(20131211 1552) nil "Ujelly theme for GNU Emacs 24 (deftheme)" single nil]) (ucs-utils . [(20131122 1636) ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) "Utilities for Unicode characters" tar ";;; Commentary:
;;
;; Quickstart
;;
;;      (require 'ucs-utils)
;;
;;      (ucs-utils-char \"Middle Dot\"         ; character to return
;;                      ?.                   ; fallback if unavailable
;;                      'char-displayable-p) ; test for character to pass
;;
;;      (ucs-utils-first-existing-char '(\"White Bullet\"
;;                                       \"Bullet Operator\"
;;                                       \"Circled Bullet\"
;;                                       \"Middle Dot\"
;;                                       ?.) 'cdp)
;;
;;      (ucs-utils-string \"Horizontal Ellipsis\" '[[\"...\"]])
;;
;; Explanation
;;
;; This library provides utilities for manipulating Unicode
;; characters, with integrated ability to return fallback characters
;; when Unicode display is not possible.
;;
;; Some ambiguities in Emacs' built-in Unicode data are resolved, and
;; character support is updated to Unicode 6.3.
;;
;; There are three interactive commands:
;;
;;     `ucs-utils-ucs-insert'       ; `ucs-insert' workalike using ido
;;     `ucs-utils-eval'             ; the inverse of `ucs-insert'
;;     `ucs-utils-install-aliases'  ; install shorter aliases
;;
;; The other functions are only useful from other Lisp code:
;;
;;     `ucs-utils-char'
;;     `ucs-utils-first-existing-char'
;;     `ucs-utils-vector'
;;     `ucs-utils-string'
;;     `ucs-utils-intact-string'
;;     `ucs-utils-pretty-name'
;;     `ucs-utils-read-char-by-name'
;;     `ucs-utils-subst-char-in-region'
;;
;; To use ucs-utils, place the ucs-utils.el library somewhere Emacs
;; can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'ucs-utils)
;;
;; and optionally
;;
;;     (ucs-install-aliases)
;;
;; See Also
;;
;;     M-x customize-group RET ucs-utils RET
;;     http://en.wikipedia.org/wiki/Universal_Character_Set
;;
;; Notes
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes (*)
;;     GNU Emacs version 22.3 and lower : no
;;
;;     (*) For full Emacs 23.x support, the library ucs-utils-6.0-delta.el
;;         should also be installed.
;;
;;     Uses if present: persistent-soft.el (Recommended)
;;
;; Bugs
;;
;; TODO
;;
;;     Accept synonyms on inputs? at least Tab would be nice.
;;
;;     Separate test run without persistent-soft.el
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
;; No rights are claimed over data created by the Unicode
;; Consortium, which are included here under the terms of
;; the Unicode Terms of Use.
;;
"]) (ucs-cmds . [(20131227 204) nil "Macro to create commands that insert Unicode chars." single ";;; Commentary:
;;
;;  This library defines a macro, `ucsc-make-commands', and a command
;;  `ucsc-insert' that can define simple commands that insert Unicode
;;  characters.
;;
;;  Command `ucsc-insert' is a replacement for vanilla command
;;  `insert-char' (called `ucs-insert' prior to Emacs 24), which is
;;  bound by default to `C-x 8 RET' and which lets you type input to
;;  complete against a Unicode character name and then inserts that
;;  character.
;;
;;  The behavior and code of `ucsc-insert' are identical to those of
;;  `insert-char' except for what happens when you use a negative
;;  prefix argument:
;;
;;  1. It acts as if the prefix-arg value was positive.  So a value of
;;     -3 inserts three copies of the character, just as 3 does.
;;
;;  2. In addition to inserting the character, it defines a command
;;     that you can use thereafter to insert that character.  You can
;;     use a prefix argument with that command to insert multiple
;;     copies of the given character.  The command name is the same as
;;     the character name, except it is lowercase and any `SPC'
;;     characters in the character name are replaced by hyphens (`-').
;;
;;  This gives you a command that is tailor-made to insert a given
;;  Unicode character.  You can then bind the command to a key
;;  sequence, effectively adding Unicode characters to your keyboard.
;;
;;  Whenever `insert-char' does anything (it does nothing for a
;;  negative prefix arg), `ucsc-insert' does the same thing.  Because
;;  of this, I recommend that you bind `ucsc-insert' to `C-x 8 RET' as
;;  a replacement for `insert-char'.  Put this in your init file:
;;
;;    (define-key global-map [remap insert-char] 'ucsc-insert)
;;
;;  If you only need a few such commands for inserting particular
;;  Unicode characters, then using `ucsc-insert' to define them is
;;  sufficiently convenient.  But it, like `insert-char', can be a bit
;;  slow if you use completion, because there are many, *MANY*
;;  completion candidates.
;;
;;  As an alternative, you can use macro `ucsc-make-commands' to
;;  quickly create a whole set of such commands for characters whose
;;  names are similar.
;;
;;  You provide a regexp as the macro argument.  It is matched against
;;  all Unicode character names (in `ucs-names').  An insertion
;;  command is created for each of the characters whose name matches.
;;
;;  For example, here are some tests to try.  You need a Unicode font.
;;  One of these fonts might help:
;;
;;   (set-frame-font \"DejaVu Sans Mono-10\")
;;   (set-frame-font \"DejaVu Sans 10\")
;;   (set-frame-font \"Arial Unicode MS\")
;;
;;  Sample command creations:
;;
;;   (ucsc-make-commands \"^math\") ; Math symbols
;;   (ucsc-make-commands \"latin\") ; Latin alphabet characters
;;   (ucsc-make-commands \"arabic\")
;;   (ucsc-make-commands \"^cjk\")  ; Chinese, Japanese, Korean characters
;;   (ucsc-make-commands \"^box drawings \")
;;   (ucsc-make-commands \"^greek [a-z]+ letter\") ; Greek characters
;;   (ucsc-make-commands \"\\\\(^hangul\\\\|^circled hangul\\\\|^parenthesized hangul\\\\)\")
;;
;;
;;
;;  Icicles Can Help
;;  ----------------
;;
;;  The commands created using macro `ucsc-make-commands' or the more
;;  general command `ucsc-insert' (or `insert-char') are enhanced if
;;  you use `Icicles'
;;  (http://www.emacswiki.org/cgi-bin/wiki/icicles.el).
;;
;;  For both, you can use more powerful completion with `Icicles',
;;  including regexp, substring (a subset of regexp), and various
;;  kinds of fuzzy matching.
;;
;;  More importantly, you can use progressive completion, to match
;;  parts of a candidate name in any order.  And you can \"chip away at
;;  the non-elephant\", removing whole sets of candidates that match
;;  patterns that you are *not* interested in.
;;
;;  With `Icicles', `ucsc-insert' (but not the individual insertion
;;  commands defined using it or `ucsc-make-commands') has the
;;  additional advantage that it displays the characters themselves
;;  next to their names, in `*Completions*'.  So you see immediately
;;  what the names represent: WYSIWYG.
;;
;;
;;  Macros defined here:
;;
;;    `ucsc-make-commands'.
;;
;;  Commands defined here:
;;
;;    `ucsc-insert'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (typo . [(20130323 340) nil "Minor mode for typographic editing" single ";;; Commentary:

;; typo.el includes two modes, `typo-mode` and `typo-global-mode`.
;;
;; `typo-mode` is a buffer-specific minor mode that will change a number
;; of normal keys to make them insert typographically useful unicode
;; characters. Some of those keys can be used repeatedly to cycle through
;; variations. This includes in particular quotation marks and dashes.
;;
;; `typo-global-mode` introduces a global minor mode which adds the
;; `C-c 8` prefix to complement Emacs\342\200\231 default `C-x 8` prefix map.
;;
;; See the documentation of `typo-mode` and `typo-global-mode` for
;; further details.
;;
;; ## Quotation Marks
;;
;; > \342\200\234He said, \342\200\230leave me alone,\342\200\231 and closed the door.\342\200\235
;;
;; All quotation marks in this sentence were added by hitting the \" key
;; exactly once each. typo.el guessed the correct glyphs to use from
;; context. If it gets it wrong, you can just repeat hitting the \" key
;; until you get the quotation mark you wanted.
;;
;; `M-x typo-change-language` lets you change which quotation marks to
;; use. This is also configurable, in case you want to add your own.
;;
;; ## Dashes and Dots
;;
;; The hyphen key will insert a default hyphen-minus glyph. On repeated
;; use, though, it will cycle through the en-dash, em-dash, and a number
;; of other dash-like glyphs available in Unicode. This means that typing
;; two dashes inserts an en-dash and typing three dashes inserts an
;; em-dash, as would be expected. The name of the currently inserted dash
;; is shown in the minibuffer.
;;
;; The full stop key will self-insert as usual. When three dots are
;; inserted in a row, though, they are replaced by a horizontal ellipsis
;; glyph.
;;
;; ## Other Keys
;;
;; Tick and backtick keys insert the appropriate quotation mark as well.
;; The less-than and greater-than signs cycle insert the default glyphs
;; on first use, but cycle through double and single guillemets on
;; repeated use.
;;
;; ## Prefix Map
;;
;; In addition to the above, typo-global-mode also provides a
;; globally-accessible key map under the `C-c 8` prefix (akin to Emacs\342\200\231
;; default `C-x 8` prefix map) to insert various Unicode characters.
;;
;; In particular, `C-c 8 SPC` will insert a no-break space. Continued use
;; of SPC after this will cycle through half a dozen different space
;; types available in Unicode.
;;
;; Check the mode\342\200\231s documentation for more details.

"]) (typing . [(20121026 2118) nil "The Typing Of Emacs" single ";;; Commentary:

;; This is a game inspired by The Typing Of The Dead on the Dreamcast.
;; That game itself is a parody of The House Of The Dead.  In the
;; latter, players use a light gun to shoot zombies and other undead.
;; In the former, players have to *type* the names of the undead in
;; order to shoot them.  The Typing Of Emacs is the parody of the
;; parody, since there are no undead (except possibly for the user
;; staring at Emacs).
;;
;; In order to play, choose any buffer and type M-x typing-of-emacs RET
;; to start the game.  Traditionally used files are the source code of
;; the package, the Emacs NEWS file, and words file.
;;
;; In order to install, put this file somewhere on your `load-path' and
;; add (autoload 'typing-of-emacs \"The Typing Of Emacs, a game.\" t) to
;; your ~/.emacs file.
;;
;; Note that this package will create a highscore list for you.  The
;; name of the file is stored in `toe-highscore-file'.  Set it to nil if
;; you don't want yet another dot file to clutter your home directory.

"]) (twittering-mode . [(20131211 1017) nil "Major mode for Twitter" single ";;; Commentary:

;; twittering-mode.el is a major mode for Twitter.
;; You can check friends timeline, and update your status on Emacs.

;;; Feature Request:

;; URL : http://twitter.com/d00dle/statuses/577876082
;; * Status Input from Popup buffer and C-cC-c to POST.
;; URL : http://code.nanigac.com/source/view/419
;; * update status for region

"]) (twilight-theme . [(20120412 603) nil "Twilight theme for GNU Emacs 24 (deftheme)" single nil]) (twilight-bright-theme . [(20130605 143) nil "A Emacs 24 faces port of the TextMate theme" single ";;; Commentary:
;;
;; This is not a straight up port as some colors have been slightly tweaked
;; and some were simply invented as the original TextMate version didn't
;; include any colors that would fit.
;;
"]) (twilight-anti-bright-theme . [(20120713 316) nil "A soothing Emacs 24 light-on-dark theme" single ";;; Commentary:
;;
;; I particularly like the colors used in Twilight Bright, but I prefer
;; light-on-dark themes, so I set out to create such a theme inspired by
;; Twilight Bright. This is the result :)
;;
"]) (twig-mode . [(20130220 1050) nil "A major mode for twig" single ";;; Commentary:

;;   This is an emacs major mode for twig with:
;;        syntax highlighting
;;        sgml/html integration
;;        indentation (working with sgml)

;; This file comes from http://github.com/moljac024/twig-mode

"]) (tup-mode . [(20131009 2213) nil "Major mode for editing files for Tup" single ";;; Commentary:
;;
;; Place this file somewhere in your Emacs Lisp path, i.e. `load-path',
;; and add this to your `.emacs' file:
;;
;;     (require 'tup-mode)
;;
;; Files ending with the `*.tup' extension, or files named `Tupfile'
;; or `tup.config' automatically enable tup-mode.
;;
;;
;;
"]) (tumblesocks . [(20131104 1917) ((htmlize (1 39)) (oauth (1 0 3)) (markdown-mode (1 8 1))) "An Emacs tumblr client." tar nil]) (tumble . [(20130327 1007) ((http-post-simple (0))) "an Tumblr mode for Emacs" single ";;; Commentary:

;; Tumble is a mode for interacting with Tumblr inside Emacs. It currently
;; provides the following functions:
;;
;; tumble-text-from-region
;;     Posts the selected region as a \"Text\".
;; tumble-text-from-buffer
;;     Posts the current buffer as a \"Text\".

;; tumble-quote-from-region
;;     Posts the current region as a \"Quote\". Prompts
;;     for an optional \"source\" parameter.

;; tumble-link
;;     Prompts for a title and a URL for a new \"Link\".
;; tumble-link-with-description
;;     Prompts for a title and a URL for a new \"Link\" and
;;     uses the selected region as the link's description.

;; tumble-chat-from-region
;;     Posts the selected region as a \"Chat\".
;; tumble-chat-from-buffer
;;     Posts the current buffer as a \"Chat\".

;; tumble-photo-from-url
;;     Prompts for a file URL, a caption and a clickthrough and
;;     posts the result as a \"Photo\".
;; tumble-photo-from-file
;;     Prompts for a local file, a caption and a clickthrough and
;;     posts the result as a Photo.
;; tumble-audio
;;     Prompts for a local file and an optional caption to
;;     upload a MP3 file.

;; tumble-video-from-url
;;     Prompts for an embed code and an optional caption to post a video
;;     to Tumblr.

;; A word of caution: Audio files can take a while to upload and will
;; probably freeze your Emacs until it finishes uploading.

;; You can always find the latest version of Tumble at: http://github.com/febuiles/tumble

;; Installation:

;;
;; Download Tumble to some directory:
;; $ git clone git://github.com/febuiles/tumble.git
;;
;; Add it to your load list and require it:
;;
;; (add-to-list 'load-path \"~/some_directory/tumble\")
;; (require 'tumble)
;;
;; Optional:
;;
;; Open tumble.el (this file) and modify the following variables:
;; (setq tumble-email \"your_email@something.com\")
;; (setq tumble-password \"your_password\")
;; (setq tumble-url \"your_tumblelog.tumblr.com\")
;;
;; Tumble uses no group for posting and Markdown as the default
;; format but you can change these:
;; (setq tumble-group \"your_group.tumblr.com\")
;; (setq tumble-format \"html\")
;;
;; You can also reset the Tumblr login credentials by calling:
;;
;;     tumble-reset-credentials

"]) (tuareg . [(20131112 447) ((caml (3 12 0 1))) "OCaml mode for Emacs." tar ";;; Commentary:
;; Description:
;; Tuareg helps editing OCaml code, to highlight important parts of
;; the code, to run an OCaml toplevel, and to run the OCaml debugger
;; within Emacs.

;; Installation:
;; If you have permissions to the local `site-lisp' directory, you
;; only have to copy `tuareg.el' and `ocamldebug.el' Otherwise, copy
;; `tuareg.el' and `ocamldebug.el' to a local directory and add the
;; following line to your `.emacs'
;;
;; (add-to-list 'load-path \"DIR\")


"]) (ttrss . [(20130409 1049) ((emacs (23 1))) "Tiny Tiny RSS elisp bindings" single ";;; Commentary:

;; Introduction

;; ttrss.el provides an interface to the Tiny Tiny RSS API. It targets
;; API level 5, and has been developed and tested against version
;; 1.7.5. As such, the versioning on this file tracks that of ttrss
;; itself.  You can read more about Tiny Tiny RSS at
;; <http://tt-rss.org/redmine/projects/tt-rss/wiki>.

;; Scope

;; The current version of ttrss.el covers all methods as documented at
;; <http://tt-rss.org/redmine/projects/tt-rss/wiki/JsonApiReference>.
;; It purposefully doesn't offer any additional higher level methods.

;; Installation

;; (add-to-list 'load-path \"/path/to/parent/directory\")
;; (require 'ttrss)

;; Usage

;; (setq ttrss-address \"http://example.com/ttrss/api/\"
;;       ttrss-user \"user\"
;;       ttrss-password \"pass\")

;; (let ((ttrss-sid (ttrss-login ttrss-address ttrss-user ttrss-password)))
;;   (if (ttrss-logged-in-p ttrss-address ttrss-sid)
;;       (with-current-buffer (switch-to-buffer \"*ttrss reader*\")
;; 	(erase-buffer)
;; 	(message \"Logged in to %s as %s with password %s\\n\"
;; 		 ttrss-address
;; 		 ttrss-user
;; 		 ttrss-password)
;; 	(message \"Server running version %s and API level %d\\n\"
;; 		 (ttrss-get-version ttrss-address ttrss-sid)
;; 		 (ttrss-get-api-level ttrss-address ttrss-sid))
;; 	(message \"There are %s unread articles in %d feeds\"
;; 		 (ttrss-get-unread ttrss-address ttrss-sid)
;; 		 (length (ttrss-get-feeds ttrss-address ttrss-sid :unread_only t)))
;; 	(insert \"The grand <b>*ttrss* reader!</b>\\n\\n---\\n\\n\")
;; 	(mapcar (lambda (pl) (insert (format \"%s\\n%s\\n\\n%s\\n---\\n\"
;; 					     (plist-get pl :title)
;; 					     (plist-get pl :link)
;; 					     (plist-get pl :content))))
;; 		(ttrss-get-headlines ttrss-address ttrss-sid :feed_id -3 :limit 3 :show_content t))
;; 	(html2text))
;;     (message \"Login failed\")))

;; Design

;; I was motivated to write this library to support a new backend for
;; Gnus, 'nnttrss.el'. Its design is kept as functional as possible.
;; That means that it makes no use of global state, amongst other
;; things.

;; TODO

;; * Interactive versions of the methods employing global state:
;;   You'll note that there are, in fact, a number of variables defined
;;   at the top-level, namely 'ttrss-address', 'ttrss-user',
;;   'ttrss-password', 'ttrss-sid', 'ttrss-api-level', and
;;   'ttrss-server-version'. These are defined in anticipation of the
;;   next release, in which I plan to introduce interactive counterparts
;;   of most methods that do employ global state.

;; * variable 'nnttrss-debug':
;;   - Trace methods in the mini-buffer
;;   - Keep a log buffer with requests and responses data structures

"]) (tt-mode . [(20130804 410) nil "Emacs major mode for editing Template Toolkit files." single nil]) (tss . [(20131120 906) ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a interface for auto-complete.el/flymake.el on typescript-mode." tar ";;; Commentary:
;; 
;; This extension is a interface for typescript-tools.
;; This extension provides the following on typescript-mode.
;;  - Auto completion by using auto-complete.el
;;  - Check syntax by using flymake.el
;; 
;; For more infomation,
;; see <https://github.com/aki2o/emacs-tss/blob/master/README.md>

"]) (truthy . [(20131106 706) ((list-utils (0 4 2))) "Test the content of a value" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'truthy)
;;
;;     (truthy \"\")                   ; nil
;;     (truthy '[])                  ; nil
;;     (truthy 0)                    ; nil
;;     (truthy (lambda ()))          ; nil
;;     (truthy (make-sparse-keymap)) ; nil
;;     (truthy 1)                    ; 1
;;     (truthy '(a b c))             ; '(a b c)
;;     (truthy '(nil nil nil))       ; nil
;;     (truthy '([] \"\" 0))           ; nil
;;
;;     (truthy-s '([] \"\" 0))         ; '([] \"\" 0)         ; shallow test
;;
;;     (truthy-l '(nil nil nil))     ; '(nil nil nil)     ; lengthwise test
;;
;; Explanation
;;
;; This library has no user-level interface; it is only useful
;; for programming in Emacs Lisp.  Three functions are provided:
;;
;;     `truthy'
;;     `truthy-s'
;;     `truthy-l'
;;
;; Truthy provides an alternative measure of the \"truthiness\" of a
;; value.  Whereas Lisp considers any non-nil value to be \"true\" when
;; evaluating a Boolean condition, `truthy' considers a value to be
;; \"truthy\" if it has *content*.  If the value is a string or buffer,
;; it must have non-zero length.  If a number, it must be non-zero.
;; If a hash, it must have keys.  If a window, it must be live.  See
;; the docstring to `truthy' for more details.
;;
;; `truthy' always returns its argument on success.
;;
;; `truthy-s' is the shallow version of `truthy'.  It does not recurse
;; into sequences, but returns success if any element of a sequence is
;; non-nil.
;;
;; `truthy-l' is the \"lengthwise\" version of `truthy'.  It does not
;; recurse into sequences, but returns success if the argument has
;; length, considering only the variable portion of a data type.
;;
;; To use truthy, place the truthy.el library somewhere Emacs can find
;; it, and add the following to your ~/.emacs file:
;;
;;     (require 'truthy)
;;
;; Notes
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.3 and lower : no
;;
;;     Uses if present: list-utils.el
;;
;; Bugs
;;
;;     truthy-l is fairly meaningless on structs
;;
;; TODO
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (tronesque-theme . [(20130822 1536) nil "Color Theme based on Tron universe." single ";;; Commentary:

;; In your init file:
;; (load-theme 'tronesque)
;;
;; You can also add:
;; (tronesque-mode-line)
;; To get a custom mode-line with additional colors
;;
;; Supports both Emacs with a window system and Emacs within a
;; terminal. When used within a terminal you should use tronesque
;; themed ansi colors (available in github repository)


(deftheme tronesque
  \"Theme based on Tron universe. Colors are inspired / taken from the movies.
More information on Tron: https://en.wikipedia.org/wiki/Tron\")

(let (
      (base00 (if (window-system) \"#081724\" \"black\"))
      (base01 (if (window-system) \"#033340\" \"brightblack\"))
      (base02 (if (window-system) \"#1d5483\" \"brightyellow\"))
      (base03 (if (window-system) \"#2872b2\" \"brightblue\"))
      (base04 (if (window-system) \"#d3f9ee\" \"white\"))
      (base05 (if (window-system) \"#a6f3dd\" \"brightgreen\"))
      (base06 (if (window-system) \"#effffe\" \"brightwhite\"))
      (base07 (if (window-system) \"#fffed9\" \"brightcyan\"))
      (red (if (window-system) \"#ff694d\" \"red\"))
      (orange (if (window-system) \"#f5b55f\" \"brightred\"))
      (yellow (if (window-system) \"#fffe4e\" \"yellow\"))
      (magenta (if (window-system) \"#afc0fd\" \"brightmagenta\"))
      (violet (if (window-system) \"#96a5d9\" \"magenta\"))
      (blue (if (window-system) \"#bad6e2\" \"blue\"))
      (cyan (if (window-system) \"#d2f1ff\" \"cyan\"))
      (green (if (window-system) \"#68f6cb\" \"green\")))

  (custom-theme-set-faces
   'tronesque

   `(button ((t (:background ,base00 :foreground ,magenta :inherit nil :box (:line-width 2 :style released-button)))))
   `(cursor ((t (:background ,base06))))
   `(custom-button ((t (:background ,magenta :foreground ,base00 :inherit nil :box (:line-width 2 :style released-button)))))
   `(custom-state ((t (:foreground ,green))))
   `(default ((t (:background ,base00 :foreground ,base04))))
   `(escape-glyph ((t (:foreground ,green))))
   `(flymake-errline ((t (:background ,red :foreground ,base00 :underline nil))))
   `(flymake-warnline ((t (:background ,orange :foreground ,base00 :underline nil))))
   `(font-lock-builtin-face ((t (:slant italic :foreground ,violet))))
   `(font-lock-comment-delimiter-face ((t (:foreground ,base02))))
   `(font-lock-comment-face ((t (:foreground ,base03))))
   `(font-lock-constant-face ((t (:weight bold :foreground ,magenta))))
   `(font-lock-doc-face ((t (:slant italic :foreground ,green))))
   `(font-lock-function-name-face ((t (:foreground ,blue))))
   `(font-lock-keyword-face ((t (:weight bold :foreground ,violet))))
   `(font-lock-negation-char-face ((t (:foreground ,red))))
   `(font-lock-preprocessor-face ((t (:foreground ,violet))))
   `(font-lock-regexp-grouping-backslash ((t (:inherit (bold)))))
   `(font-lock-regexp-grouping-construct ((t (:inherit (bold)))))
   `(font-lock-string-face ((t (:foreground ,green))))
   `(font-lock-type-face ((t (:foreground ,orange))))
   `(font-lock-variable-name-face ((t (:foreground ,red))))
   `(font-lock-warning-face ((t (:foreground ,orange :underline t))))
   `(fringe ((t (:foreground ,base04 :background ,base01))))
   `(header-line ((t (:box (:line-width -1 :color nil :style released-button) :foreground ,base00 :background ,base05))))
   `(highlight ((t (:background ,yellow :foreground ,base00))))
   `(hl-line ((t (:background ,base01 :inherit nil))))
   `(idle-highlight ((t (:background ,base01 :foreground nil))))
   `(ido-indicator ((t (:background ,red :foreground ,base00 :width condensed))))
   `(ido-only-match ((t (:foreground ,green))))
   `(ido-subdir ((t (:foreground ,red))))
   `(info-menu-star ((t (:foreground ,red))))
   `(info-xref ((t (:foreground ,green))))
   `(isearch ((t (:weight bold :foreground ,base00 :background ,yellow))))
   `(isearch-fail ((t (:weight bold :foreground ,red))))
   `(lazy-highlight ((t (:weight bold :foreground ,base00 :background ,base07))))
   `(link ((t (:foreground \"#d2f1ff\" :underline t))))
   `(link-visited ((t (:foreground ,blue :underline t))))
   `(match ((t (:foreground ,base00 :background ,blue))))
   `(minibuffer-prompt ((t (:foreground ,yellow))))
   `(next-error ((t (:inherit (region)))))
   `(org-hide ((t (:background ,base00 :foreground ,base00))))
   `(query-replace ((t (:inherit (isearch)))))
   `(region ((t (:background ,base02))))
   `(secondary-selection ((t (:background \"#002b36\"))))
   `(shadow ((t (:foreground ,base02))))
   `(trailing-whitespace ((t (:background ,red))))

   `(magit-header ((t (:background ,base01 :foreground ,magenta :inherit nil ))))
   `(magit-item-highlight ((t (:background ,base01 :foreground nil))))
   `(magit-diff-hunk-header ((t (:background ,base02))))
   `(diff-file-header ((t (:background ,base00 :foreground ,magenta :inherit nil :box (:line-width 2 :style released-button)))))
   `(diff-context ((t (:inherit diff-changed :foreground ,base03))))
   `(diff-added ((t (:inherit diff-changed :foreground ,green :background ,base00))))
   `(diff-removed ((t (:inherit diff-changed :foreground ,red :background ,base00))))

   `(outline-1 ((t (:foreground ,red))))
   `(outline-2 ((t (:foreground ,orange))))
   `(outline-3 ((t (:foreground ,yellow))))
   `(outline-4 ((t (:foreground ,blue))))
   `(outline-5 ((t (:foreground ,magenta))))
   `(outline-6 ((t (:foreground ,green))))
   `(outline-7 ((t (:foreground ,cyan))))
   `(outline-8 ((t (:foreground ,violet))))

   `(success ((t (:background ,green :foreground ,base00 :weight bold))))
   `(compilation-mode-line-exit ((t (:inherit compilation-info :background ,green :weight bold))))
   `(compilation-mode-line-fail ((t (:inherit compilation-error :background ,red :weight bold))))

   `(erc-dangerous-host-face ((t (:foreground ,red))))
   `(erc-direct-msg-face ((t (:foreground ,red))))
   `(erc-error-face ((t (:foreground ,red))))
   `(erc-fool-face ((t (:foreground ,base02))))
   `(erc-header-line ((t (:background ,base07 :foreground ,base00))))
   `(erc-inverse-face ((t (:background ,base04 :foreground ,base00))))
   `(erc-keyword-face ((t (:foreground ,green :weight bold))))
   `(erc-nick-msg-face ((t (:foreground ,red :weight bold))))
   `(erc-notice-face ((t (:foreground ,base02 :weight bold))))
   `(erc-pal-face ((t (:foreground ,magenta :weight bold))))
   `(erc-prompt-face ((t (:background ,violet :foreground ,base00 :weight bold))))
   `(erc-timestamp-face ((t (:foreground ,green :weight bold))))
   `(erc-input-face ((t (:foreground ,orange))))
   `(erc-my-nick-face ((t (:foreground ,yellow))))
   `(erc-current-nick-face ((t (:foreground ,yellow))))

   `(show-paren-match ((t (:background ,green :foreground ,base00))))
   `(show-paren-mismatch ((t (:background ,red :foreground ,base00))))
   `(sp-show-pair-match-face ((t (:inherit show-paren-match))))
   `(sp-show-pair-mismatch-face ((t (:inherit show-paren-mismatch))))
   `(sp-pair-overlay-face ((t (:inherit sp-show-pair-match-face))))
   `(ac-completion-face ((t (:foreground ,base02 :underline t))))
   `(ac-candidate-face ((t (:background ,base04 :foreground ,base00))))
   `(ac-candidate-mouse-face ((t (:inherit ac-completion-face))))
   `(ac-selection-face ((t (:background ,base02)))))

  (custom-theme-set-variables
   'tronesque

   `(ansi-color-names-vector
     ;; black, red, green, yellow, blue, magenta, cyan, white
     [,base00 ,red ,green ,yellow ,blue ,magenta ,cyan ,base04])
   `(ansi-term-color-vector
     ;; black, red, green, yellow, blue, magenta, cyan, white
     [unspecified ,base00 ,red ,green ,yellow ,blue ,magenta ,cyan ,base04]))

  ;; Extra mode line faces
  (make-face 'mode-line-read-only-face)
  (make-face 'mode-line-modified-face)
  (make-face 'mode-line-clean-face)
  (make-face 'mode-line-folder-face)
  (make-face 'mode-line-filename-face)
  (make-face 'mode-line-position-face)
  (make-face 'mode-line-mode-face)
  (make-face 'mode-line-minor-mode-face)
  (make-face 'mode-line-vc-face)
  (make-face 'mode-line-80col-face)

  (set-face-attribute 'mode-line nil
                      :foreground base00 :background base04
                      :inverse-video nil
                      :box `(:line-width 6 :color ,base04  :style nil))
  (set-face-attribute 'mode-line-inactive nil
                      :foreground base00 :background base02
                      :inverse-video nil
                      :box `(:line-width 6 :color ,base02 :style nil))
  (set-face-attribute 'mode-line-read-only-face nil
                      :inherit 'mode-line-face
                      :foreground red)
  (set-face-attribute 'mode-line-modified-face nil
                      :inherit 'mode-line-face
                      :background red
                      :box `(:line-width 6 :color ,red :style nil))
  (set-face-attribute 'mode-line-clean-face nil
                      :inherit 'mode-line-face
                      :background green
                      :box `(:line-width 6 :color ,green :style nil))
  (set-face-attribute 'mode-line-folder-face nil
                      :inherit 'mode-line-face
                      :foreground base00
                      :background violet
                      :box `(:line-width 6 :color ,violet :style nil))
  (set-face-attribute 'mode-line-filename-face nil
                      :inherit 'mode-line-face
                      :foreground base02
                      :background violet
                      :box `(:line-width 6 :color ,violet :style nil)
                      :weight 'bold)
  (set-face-attribute 'mode-line-position-face nil
                      :inherit 'mode-line-face
                      :height 100)
  (set-face-attribute 'mode-line-mode-face nil
                      :inherit 'mode-line-face
                      :foreground base00
                      :background orange
                      :box `(:line-width 6 :color ,orange :style nil))
  (set-face-attribute 'mode-line-minor-mode-face nil
                      :foreground base00
                      :height 110)
  (set-face-attribute 'mode-line-vc-face nil
                      :inherit 'mode-line-face
                      :background green
                      :box `(:line-width 6 :color ,green :style nil))
  (set-face-attribute 'mode-line-80col-face nil
                      :inherit 'mode-line-position-face
                      :foreground \"black\" :background orange
                      :box `(:line-width 6 :color ,orange :style nil))
  )

(defun tronesque-mode-line ()
  \"change default modeline\"
  (interactive)
  (setq-default
   mode-line-format
   '(
     \"%e\"
     mode-line-front-space
     mode-line-mule-info
     mode-line-client
     mode-line-modified
     mode-line-remote
     mode-line-frame-identification
     (:propertize \" \"
                  face mode-line-filename-face)
     (:propertize mode-line-buffer-identification
                  face mode-line-filename-face)
     (:propertize \" \"
                  face mode-line-filename-face)
     \" \"
     mode-line-position
     (vc-mode vc-mode)
     \" \"
     (:propertize \" \"
                  face mode-line-mode-face)
     (:propertize mode-name
                  face mode-line-mode-face)
     (:propertize \" \"
                  face mode-line-mode-face)

     (:eval (propertize (format-mode-line minor-mode-alist)
                        'face 'mode-line-minor-mode-face))
     mode-line-misc-info
     mode-line-end-spaces)))

;; Helper function
(defun shorten-directory (dir max-length)
  \"Show up to `max-length' characters of a directory name `dir'.\"
  (let ((path (reverse (split-string (abbreviate-file-name dir) \"/\")))
        (output \"\"))
    (when (and path (equal \"\" (car path)))
      (setq path (cdr path)))
    (while (and path (< (length output) (- max-length 4)))
      (setq output (concat (car path) \"/\" output))
      (setq path (cdr path)))
    (when path
      (setq output (concat \".../\" output)))
    output))


;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'tronesque)
;;; tronesque-theme.el ends here
"]) (trident-mode . [(20130726 1207) ((emacs (24)) (slime (20130526)) (skewer-mode (1 5 0)) (dash (1 0 3))) "Live Parenscript interaction" single ";;; Commentary:

;; This is an Emacs minor mode and collection of commands for working with
;; Parenscript code in SLIME and sending it to the browser via Skewer. The goal
;; is to create an environment for hacking Parenscript which fits as naturally
;; as possible into the Lisp style of interactive development.

;; ** Installation

;; Trident is available on MELPA, meaning a simple =M-x package-install RET
;; trident-mode RET= will install both it and its dependencies.

;; To enable MELPA, if you haven't already, add something like the following to
;; your Emacs configuration:

;;   (require 'package)
;;   (add-to-list 'package-archives
;;                '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)
;;   (package-initialize)

;; The dependencies that will be installed are:
;;   - SLIME
;;   - Skewer
;;   - dash.el

;; Trident also requires a Common Lisp implementation and Parenscript.
;; Quicklisp is the best way to install Parenscript.

;; ** Setup

;; To enable trident-mode in a SLIME buffer: M-x trident-mode.

;; To have lisp-mode, slime-mode, and trident-mode all enable automatically for
;; any file with an extension of \".paren\":

;;   (add-to-list 'auto-mode-alist (cons \"\\\\.paren\\\\'\" 'lisp-mode))
;;   (add-hook 'lisp-mode-hook
;;             #'(lambda ()
;;                 (when (and buffer-file-name
;;                            (string-match-p \"\\\\.paren\\\\>\" buffer-file-name))
;;                   (unless (slime-connected-p)
;;                     (save-excursion (slime)))
;;                   (trident-mode +1))))

;; Parenscript must be loaded in your Common Lisp image, and you'll probably
;; also want to import its symbols:

;;   (ql:quickload :parenscript)
;;   (use-package :parenscript)

;; With the above taken care of it's time to skewer the browser. See Skewer's
;; README for detailed information on the multiple ways you can connect to a
;; site - including sites on servers you don't control.

;; The fastest way to simply try things out is to run M-x run-skewer. Skewer
;; will load an empty page in your browser and connect to it. You can
;; immediately begin using Trident's evaluation commands (described below); to
;; additionally open a JavaScript REPL you can run M-x skewer-repl.

;; ** Commands

;; *** Code expansion commands

;; These commands generate JavaScript from the Parenscript code and display it
;; but don't send it to the browser for evaluation:

;;    - trident-expand-sexp
;;    - trident-expand-last-expression
;;    - trident-expand-defun
;;    - trident-expand-region
;;    - trident-expand-buffer
;;    - trident-expand-dwim

;; From within an expansion buffer you can press e to send the JavaScript to
;; the browser, w to copy it to the kill ring, s to save it to a file (you'll
;; be prompted for the destination) or q to dismiss the buffer. The copy
;; command, w, acts on the region if it's active or the entire buffer
;; otherwise.

;; Additionally, you can use M-x trident-compile-buffer-to-file to expand the
;; current buffer and save the generated code directly to a file.

;; *** Code evaluation commands

;; These commands first compile the Parenscript code to JavaScript and then
;; immediately send to it the browser to be evaluated:

;;    - trident-eval-sexp
;;    - trident-eval-last-expression
;;    - trident-eval-defun
;;    - trident-eval-region
;;    - trident-eval-buffer
;;    - trident-eval-dwim

;; ** Key bindings

;; The traditional set of code evaluation key bindings is a poor fit for
;; Trident,since they would shadow SLIME's equivalent commands and that's
;; probably not what you want. That leaves us without a clear convention to
;; follow, so by default we don't establish any key bindings at all. However,
;; the function trident-add-keys-with-prefix will add two-key key bindings for
;; all commands behind a prefix of your choice.

;; For example: (trident-add-keys-with-prefix \"C-c C-e\"). The key sequence for
;; trident-eval-region is \"e r\", so it's now bound to \"C-c\" \"C-e er\"

;; The full list of key bindings trident-add-keys-with-prefix will establish
;; is:

;;    - \"e RET\" -- trident-eval-sexp
;;    - \"e e\" -- trident-eval-last-expression
;;    - \"e d\" -- trident-eval-defun
;;    - \"e r\" -- trident-eval-region
;;    - \"e b\" -- trident-eval-buffer
;;    - \"e SPC\" -- trident-eval-dwim
;;    - \"x RET\" -- trident-expand-sexp
;;    - \"x e\" -- trident-expand-last-expression
;;    - \"x d\" -- trident-expand-defun
;;    - \"x r\" -- trident-expand-region
;;    - \"x b\" -- trident-expand-buffer
;;    - \"x SPC\" -- trident-expand-dwim

;; Evaluation commands begin with an \"e\", expansion commands with \"x\". The
;; second letter is generally mnemonic but not always. The -sexp commands use
;; RET in correspondence to slime-expand-1, and the -dwim commands use the
;; space bar because it's easy and comfortable to hit.

;; Please consider these keys provisional, and let me know if you have any
;; ideas for improving the arrangement.

;; If you really want to shadow SLIME's key bindings in buffers where
;; trident-mode is active you could do something like this:

;;   (defun steal-slime-keys-for-trident! ()
;;     ;; Don't affect all SLIME buffers, just where invoked
;;     (make-local-variable 'slime-mode-map)
;;     (let ((map slime-mode-map))
;;       (define-key map (kbd \"C-x C-e\") nil)
;;       (define-key map (kbd \"C-c C-r\") nil)
;;       (define-key map (kbd \"C-M-x\")   nil)
;;       (define-key map (kbd \"C-c C-k\") nil)
;;       (define-key map (kbd \"C-c C-m\") nil))
;;     (let ((map trident-mode-map))
;;       (define-key map (kbd \"C-x C-e\") 'trident-eval-last-expression)
;;       (define-key map (kbd \"C-c C-r\") 'trident-eval-region)
;;       (define-key map (kbd \"C-M-x\")   'trident-eval-defun)
;;       (define-key map (kbd \"C-c C-k\") 'trident-eval-buffer)
;;       (define-key map (kbd \"C-c C-m\") 'trident-expand-sexp)))
;;
;;   (add-hook 'trident-mode-hook 'steal-slime-keys-for-trident!)

;; ** Other amenities

;; slime-selector is a great feature and Trident can optionally integrate with
;; it. If you call trident-add-slime-selector-methods, two entries related to
;; trident-mode will be added. One, invoked with p, will take you to the most
;; recently visited buffer where trident-mode is active (excluding buffers
;; which are already visible). The other, on P, will take you to a scratch
;; buffer with trident-mode enabled, creating the buffer if necessary.

;; Speaking of the scratch buffer, the trident-scratch command will take you
;; straight there.

;; ** Still do be done

;;    - Add some tests.
;;    - Better documentation.
;;    - Look into adding a REPL.
;;    - See if more integration with SLIME is possible.
;;    - Command(s) for compiling to a file.
;;    - Similar support for CL-WHO and/or CSS-LITE?
;;    - Add support for Customize.

;; ** Contributing

;; Contributions are very welcome. Since I've just started working on this and
;; don't have everything figured out yet, please first contact me on GitHub or
;; send me an email so we can talk before you start working on something.

"]) (tree-mode . [(20121207 1538) nil "A mode to manage tree widgets" single nil]) (tracwiki-mode . [(20140108 853) ((xml-rpc (1 6 8))) "Emacs Major mode for working with Trac" single ";;; Commentary:

;; tracwiki-mode is a major mode for editing Trac-formatted text files
;; in GNU Emacs. tracwiki-mode is free software, licensed under the
;; GNU GPL.
;;
;; Starting in version 0.2, I've pretty much just copypasta'ed most of
;; the original trac-wiki from Shun-ichi GOTO:
;; http://trac-hacks.org/wiki/EmacsWikiEditScript Future versions will
;; include better English, yet more controls, and better
;; customization. Seriously though, without Shun-ichi Goto's work,
;; none of this magic would exist.
;;
;;

"]) (tracking . [(20131201 620) ((shorten (0 1))) "Buffer modification tracking" single ";;; Commentary:

;; tracking.el is a library for other Emacs Lisp programs not useful
;; by itself.

;; The library provides a way to globally register buffers as being
;; modified and scheduled for user review. The user can cycle through
;; the buffers using C-c C-SPC. This is especially useful for buffers
;; that interact with external sources, such as chat clients and
;; similar programs.

"]) (toxi-theme . [(20130418 1239) ((emacs (24))) "A dark color theme by toxi" single nil]) (tox . [(20130925 731) nil "Launch current python test with tox" single ";;; Commentary:

;; Call `tox-current-test' or `tox-current-cast' to launch the current
;; test or class with tox.  with an argument it will read the tox.ini
;; and ask you for a value for a tox environement variable.

;; Originally the ideas was coming from nosetests.el (written by me)
;; which was modified by Julien Danjou <julien@danjou.info) and
;; adapted to tox.

"]) (top-mode . [(20130605 1739) nil "run \"top\" from emacs" single ";;; Commentary:

;; This code runs top from within emacs (using top's batch mode), and
;; provides functionality to operate on processes.

;; In order to run it, just execute M-x top.  Unlike real top, the
;; resulting buffer doesn't refresh automatically (yet, it's a feature
;; I'd like to add someday).  You can refresh the buffer manually by
;; pressing 'g'.  If you'd like to mark processes for later actions,
;; use 'm' to mark or 'u' to unmark.  If no processes are marked, the
;; default action will apply to the process at the current line.  At
;; the time of this writing, the valid actions are:
;;
;;     -strace a process
;;     -kill processes
;;     -renice processes

;; You can also toggle showing processes of a specific user by
;; pressing 'U'.
;;
;; NOTE:  tested only on Debian GNU/Linux unstable and solaris 8.
;;
;; Should work out of the box for Debian's version of 'top', however
;; for solaris 8's version of top, I found the following settings to
;; be useful:
;;
;;     (defun top-mode-solaris-generate-top-command (user)
;;       (if (not user)
;;           \"top -b\"
;;         (format \"top -b -U%s\" user)))
;;     (setq top-mode-generate-top-command-function
;;           'top-mode-solaris-generate-top-command)
;;     (setq top-mode-strace-command \"truss\")

"]) (tool-bar+ . [(20131227 203) nil "Extensions to standard library tool-bar.el" single ";;; Commentary:
;;
;;  Extensions to standard library tool-bar.el.
;;
;;  New commands defined here:
;;
;;    `show-tool-bar-for-one-command', `tool-bar-here-mode',
;;    `tool-bar-pop-up-mode'.
;;
;;
;;  New key bound here: [menu-bar pop-up-tool-bar]
;;
;;
;;  Usage:
;;
;;    Load this library: (require 'tool-bar+).
;;    Turn on tool-bar pop-up mode: M-x tool-bar-pop-up-mode.
;;
;;    Click \"Buttons\" in the menu-bar to access the tool-bar when you
;;    need it.  This displays the tool-bar buttons just long enough
;;    for one command: after you click a tool-bar button, the tool-bar
;;    disappears again.
;;
;;    The advantage of `tool-bar-pop-up-mode' is that you do not lose
;;    frame real estate to the tool-bar -- you have it when you need
;;    it, at the cost of an extra click (\"Buttons\").
;;
;;    In addition to defining minor mode `tool-bar-pop-up-mode', this
;;    library defines minor mode `tool-bar-here-mode', which is the
;;    same as the global `tool-bar-mode' except that it affects only
;;    the current frame.
;;
;;    The advantage of `tool-bar-here-mode' is (again) that it saves
;;    real estate on frames other than the ones with the tool-bar.
;;
;;
;;  Put this in your initialization file (`~/.emacs'):
;;
;;  (require 'tool-bar+) ; load this library
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (tommyh-theme . [(20131004 1630) nil "A bright, bold-colored theme for emacs" single nil]) (toml-mode . [(20130302 748) nil "Mojor mode for editing TOML files" single nil]) (toml . [(20130903 555) nil "TOML (Tom's Obvious, Minimal Language) parser" single ";;; Commentary:

;; This is a library for parsing TOML (Tom's Obvious, Minimal
;; Language).

;; Learn all about TOML here: https://github.com/mojombo/toml

;; Inspired by json.el.  thanks!!

"]) (tomatinho . [(20140101 1543) nil "Tomatinho" tar ";;; Commentary:

;; Tomatinho is a simple and beautiful [[http://www.pomodorotechnique.com/][pomodoro technique]] timer that
;; runs on Emacs and is not bloated with distractive graphics or inorganic
;; commands. Just press Enter, see time flow and do you best.

"]) (todotxt . [(20131231 850) nil "A major mode for editing todo.txt files" single nil]) (todochiku . [(20120202 2005) nil "A mode for interfacing with Growl, Snarl, and the like." single ";;; Commentary:
;; todochiku is **NOTHING** in japanese.   todoroku \"growl\" in Japanese.

"]) (tmmofl . [(20121025 401) nil "Calls functions dependant on font lock highlighting at point" single ";;; Commentary:
;; 
;; This code is used to run to functions depending on whether the
;; current font-lock font is at point.  As font-lock is usually
;; syntactically meaningful this means that you can for instance
;; toggle minor modes on and off depending on the current syntax.
;;
;; To install this software place this file and the tmmofl-x.el file
;; into your load path and place
;; 
;; (require 'tmmofl)
;;
;; if your .emacs.
;;
;; To switch on this minor mode use the command tmmofl-mode.  The mode
;; line will indicate that the mode is switched on.  What this actually
;; does will depend on what the main mode of the current buffer
;; is.  The default behaviour is to switch `auto-fill' mode on when
;; point is within comments, and off when its in anything else.
;;

;;; Notes for developers:
;;~/src/ht/home_website/
;; There are actually two ways to use this mode, firstly as a minor
;; mode. Default behaviour is to toggle auto-fill on and off, but you
;; might want additional behaviour. To do this you define a variable called
;; `tmmofl-MODENAME-actions' where mode name is the name for mode as
;; returned by the `major-mode' variable. This variable is as
;; follows...
;;
;;(defvar tmmofl-jde-mode-actions
;;  '(
;;    (font-lock-comment-face
;;     (lambda()
;;       (progn
;;         (abbrev-mode 0)
;;         (auto-fill-mode 1)))
;;     (lambda()
;;       (progn
;;         (abbrev-mode 1)
;;         (auto-fill-mode 0))))
;;    
;;    (font-lock-string-face
;;     (lambda()
;;       (abbrev-mode 0))
;;     (lambda()
;;       (abbrev-mode 1)))))
;;
;; This is a list each element of which is a list defining the
;; font-lock-symbol to be acted on, the on function, and the off
;; function. If tmmofl can not find this variable the default of...
;;
;;(defvar tmmofl-default-actions
;;      '(
;;        (font-lock-comment-face
;;         (lambda()
;;           (auto-fill-mode 1))
;;         (lambda()
;;           (auto-fill-mode 0)))))
;;
;; can be used instead, which toggles auto fill on and off when on of
;; off comments. There are some sample action variables defined in
;; tmmofl-x.el which you may load if you wish.
;;
;; The second way to use this mode is outside of the tmmofl minor
;; mode. For instance say you wanted emacs to display the fully
;; referenced name of a class every time you moved point on top of a
;; Type declaration in Java code. If you had a function called
;; `java-show-full-class-name' (which I dont before you ask) you might
;; want to use tmmofl to call this function. To do this you would use
;; the `tmmofl-install-for-mode' function like so...
;;
;;(tmmofl-install-for-mode
;; java-mode-hook
;; font-lock-type-face
;; (lambda()
;;   (java-show-full-class-name))
;; (lambda()
;;   ()))
;;
;; where the first argument is the install hook. This would work
;; without showing the tmmofl mode information in the mode line. I am
;; fairly sure that this should work independantely of `tmmofl-mode'.

;; The software was designed, written and tested on win 95, using
;; NTEmacs. It has since been rewritten on a Gnu/Linux system. Please
;; let me know if it works elsewhere. The current version should be
;; available at http://www.bioinf.man.ac.uk/~lord
;;

;;; Acknowledgements:
;;
;; This code has grown up over about a year. It originally started off
;; as jde-auto-abbrev. I would like to thank Joakim Verona
;; (joakim@verona.se) who sent me the code which did part of what
;; tmmofl does (toggled abbrev mode!). He used `defadvice' on
;; `put-text-property'. I got the idea for using `post-command-hook'
;; from Gerd Neugebauer's multi-mode.el.
;; Finally Stefan Monnier who gave me lots of good advice about both
;; the overall structure of the file, and some specific problems I
;; had. Thanks a lot. Much appreciated.

;; TODO
;;
;; More stuff in tmmofl-x.el, but at the moment its working quite
;; nicely.
;;

"]) (tiny . [(20140103 305) nil "Quickly generate linear ranges in Emacs" single ";;; Commentary:
;;
;; Setup:
;; In ~/.emacs:
;;     (require 'tiny)
;;     (tiny-setup-default)
;;
;; Usage:
;; This extension's main command is `tiny-expand'.
;; It's meant to quickly generate linear ranges, e.g. 5, 6, 7, 8.
;; Some elisp proficiency is an advantage, since you can transform
;; your numeric range with an elisp expression.
;;
;; There's also some emphasis on the brevity of the expression to be
;; expanded: e.g. instead of typing (+ x 2), you can do +x2.
;; You can still do the full thing, but +x2 would save you some
;; key strokes.
;;
;; You can test out the following snippets
;; by positioning the point at the end of the expression
;; and calling `tiny-expand' (default shortcut is C-;):
;;
;; m10
;; m5 10
;; m5,10
;; m5 10*xx
;; m5 10*xx%x
;; m5 10*xx|0x%x
;; m25+x?a%c
;; m25+x?A%c
;; m97,122(string x)
;; m97,122stringxx
;; m97,120stringxupcasex
;; m97,120stringxupcasex)x
;; m\\n;; 10|%(+ x x) and %(* x x) and %s
;; m10*2+3x
;; m\\n;; 10expx
;; m5\\n;; 20expx%014.2f
;; m7|%(expt 2 x)
;; m, 7|0x%02x
;; m10|%0.2f
;; m1\\n14|*** TODO http://emacsrocks.com/e%02d.html
;; m1\\n10|convert img%s.jpg -monochrome -resize 50%% -rotate 180 img%s_mono.pdf
;; (setq foo-list '(m1 11+x96|?%c))
;; m1\\n10listx+x96|convert img%s.jpg -monochrome -resize 50%% -rotate 180 img%c_mono.pdf
;; m1\\n10listxnthxfoo-list|convert img%s.jpg -monochrome -resize 50%% -rotate 180 img%c_mono.pdf
;; m\\n;; 16list*xxx)*xx%s:%s:%s
;; m\\n8|**** TODO Learning from Data Week %(+ x 2) \\nSCHEDULED: <%(date \"Oct 7\" (* x 7))> DEADLINE: <%(date \"Oct 14\" (* x 7))>
;;
;; As you might have guessed, the syntax is as follows:
;; m[<range start:=0>][<separator:= >]<range end>[Lisp expr]|[format expr]
;;
;; x is the default var in the elisp expression.  It will take one by one
;; the value of all numbers in the range.
;;
;; | means that elisp expr has ended and format expr has begun.
;; It can be omitted if the format expr starts with %.
;; The keys are the same as for format.
;; In addition %(sexp) forms are allowed.  The sexp can depend on x.
;;
;; Note that multiple % can be used in the format expression.
;; In that case:
;; * if the Lisp expression returns a list, the members of this list
;;   are used in the appropriate place.
;; * otherwise, it's just the result of the expression repeated as
;;   many times as necessary.

"]) (time-ext . [(20130130 2151) nil "more function for time/date" single ";;; Commentary:
;;
;; More easy-to-use time/date functions. Using polymorphism,
;; TIME accepts (T1 T2 T3), (SEC MINUTE HOUR DAY MONTH YEAR DOW DST ZONE) and
;; float time.

"]) (tidy . [(20111222 1756) nil "Interface to the HTML Tidy program" single ";;;; Commentary:

;; Provides a simple interface to the HTML Tidy program -- a free
;; utility that can fix common errors in your mark-up and clean up
;; sloppy editing automatically. See
;;
;;       <http://tidy.sourceforge.net/>
;;
;; for more details.  This package provides the following functions:
;;
;;       `tidy-buffer',
;;       `tidy-parse-config-file',
;;       `tidy-save-settings', and
;;       `tidy-describe-options',
;;
;; These can be invoked interactively (using M-x) or via the menu-bar.
;; The function `tidy-buffer' sends the current buffer to HTML Tidy,
;; replacing the existing contents with a \"tidied\" version.  If
;; `tidy-buffer' is given a prefix argument, tidy operates on the
;; current region, ignoring mark-up outside <BODY>...</BODY> tags
;; (useful for writhing cgi scripts in Pearl).  Warnings and errors
;; are presented in a compilation buffer to facilitate tracking down
;; necessary changes (e.g. C-x ` is bound to `next-error').
;;
;; This package also provides menu-bar support for setting Tidy's many
;; options, and includes support for Tidy configuration files.  The
;; function `tidy-parse-config-file' will synchronise options
;; displayed in the menu-bar with the settings in `tidy-config-file'.
;; This is normally called by the load-hook for your HTML editing mode
;; (see installation instructions below).  The function
;; `tidy-save-settings' will save the current option settings to your
;; `tidy-config-file'.  Finally `tidy-describe-options' allows you to
;; browse the documentation strings associated with each option.

;;;

;;;; Installation:

;; This package assumes you have and up-to-date HTML Tidy program
;; installed on your system.  See the URL above for instructions on
;; how to do this.  To set up this support package, first place the
;; \"tidy.el\" file somewhere in your `load-path' and open it in Emacs.
;; Byte-compile and load this package using the command
;;
;; M-x emacs-lisp-byte-compile-and-load <RET>
;;
;; Next customise the variables `tidy-config-file', `tidy-temp-dir'
;; `tidy-shell-command', `tidy-menu-lock' and `tidy-menu-x-position'
;;
;; M-x customize-group <RET> tidy <RET>
;;
;; Now add the following autoloads to your \".emacs.el\" file:
;;
;; (autoload 'tidy-buffer \"tidy\" \"Run Tidy HTML parser on current buffer\" t)
;; (autoload 'tidy-parse-config-file \"tidy\" \"Parse the `tidy-config-file'\" t)
;; (autoload 'tidy-save-settings \"tidy\" \"Save settings to `tidy-config-file'\" t)
;; (autoload 'tidy-build-menu  \"tidy\" \"Install an options menu for HTML Tidy.\" t)
;;
;; If you use html-mode to edit HTML files then add something like
;; this as well

;; (defun my-html-mode-hook () \"Customize my html-mode.\"
;;   (tidy-build-menu html-mode-map)
;;   (local-set-key [(control c) (control c)] 'tidy-buffer)
;;   (setq sgml-validate-command \"tidy\"))
;;
;; (add-hook 'html-mode-hook 'my-html-mode-hook)

;; This will set up a \"tidy\" menu in the menu bar and bind the key
;; sequence \"C-c C-c\" to `tidy-buffer' in html-mode (normally bound to
;; `validate-buffer').
;;
;; For other modes (like html-helper-mode) simple change the variables
;; `html-mode-hook' and `html-mode-map' to whatever is appropriate e.g.

;; (defun my-html-mode-hook () \"Customize my html-helper-mode.\"
;;   (tidy-build-menu html-helper-mode-map)
;;   (local-set-key [(control c) (control c)] 'tidy-buffer)
;;   (setq sgml-validate-command \"tidy\"))
;;
;; (add-hook 'html-helper-mode-hook 'my-html-mode-hook)

;; Finally, restart Emacs and open an HTML file to test-drive the tidy
;; package. For people new to HTML tidy check that the option \"markup\"
;; under the \"Input/Output\" sub menu is set. You can read the
;; documentation on this option via the menu item \"Describe Options\".
;;
;; Enjoy!

;;;; New Features:
;;
;; 0. Now compatible with CVS version of Tidy as at 22 May 2003
;; 1. Improved menu support to facillitate incorporting new options
;; 2. Menu lock option makes menu stick when toggling options.
;; 3. Now runs on XEmacs!!
;; 4. Uses error file rather than std-error to retrieve errors (this
;;    fixes some odd pop up behaviour)
;; 5. minor bug fix (empty config files)
;; 6. handle buffer modified query in error buffer better
;; 7. make it impossible to mark the error buffer as modified
;; 8. Added the variable `tidy-temp-directory'.
;; 9. Bugfix in tidy-buffer: call find-file-noselect with NOWARN

"]) (thumb-through . [(20120118 2134) nil "Plain text reader of HTML documents" single nil]) (thumb-frm . [(20131227 201) ((frame-fns (0)) (frame-cmds (0))) "Commands for thumbnail frames." single ";;; Commentary:
;;
;;    Shrink frames to a thumbnail size and restore them again.
;;
;;  User option `thumfr-frame-parameters' defines the appearance of
;;  the thumbnail frames.  If you change it and set the new definition
;;  for the current session you can immediately see the effect in all
;;  of your thumbnail frames.
;;
;;  Commands `thumfr-toggle-thumbnail-frame', `thumfr-thumbify-frame',
;;  and `thumfr-dethumbify-frame' thumbify and dethumbify an
;;  individual frame.  If option `thumfr-thumbify-dont-iconify-flag'
;;  is non-nil (the default), then keys (e.g. `C-z') that normally
;;  iconify and deiconify will instead thumbify and dethumbify.
;;
;;  Command `thumfr-thumbify-other-frames', alias `thumfr-fisheye',
;;  shrinks all frames except the selected frame to a thumbnail size.
;;  The thumbnail frames are stacked from top to bottom, left to right
;;  on your display.  This provides a kind of \"fisheye\" view of the
;;  frames you are using.  Command `thumfr-dethumbify-all-frames'
;;  restores all thumbnail frames to full size.
;;
;;  Command `thumfr-stack-thumbnail-frames' neatly stacks all of the
;;  thumbnail frames along a display edge.  You can use it at any
;;  time, and it is called automatically by `thumfr-fisheye'.  Which
;;  display edge to stack along (left, right, top, or bottom), and
;;  which direction (up, down, to-left or to-right), is determined by
;;  option `thumfr-stack-display-edge'.  The stacking order is
;;  determined by option `thumfr-sort-function'.  You can turn sorting
;;  on and off using command
;;  `thumfr-toggle-sort-thumbnail-frame-stack'.
;;
;;  By default, this library provides thumbifying and dethumbifying as
;;  a *replacement* for iconifying and deiconifying.  Whenever option
;;  `thumfr-thumbify-dont-iconify-flag' is non-nil, loading the
;;  library changes the standard commands `iconify-frame' and
;;  `iconify-or-deiconify-frame' so that they use thumbnail frames
;;  instead of desktop icons.  To prevent this thumbnail behavior, you
;;  can customize `thumfr-thumbify-dont-iconify-flag' to nil.
;;  Alternatively, you can deactivate (`ad-deactivate') the advice
;;  imposed here on these functions, to restore their original
;;  behavior.
;;
;;  The original behavior of commands `iconify-frame' and
;;  `iconify-or-deiconify-frame' is available using commands
;;  `thumfr-really-iconify-frame' and
;;  `thumfr-really-iconify-or-deiconify-frame'.  In particular, these
;;  commands can be used to iconify even if you bind [iconify-frame]
;;  in `special-event-map' (see below).
;;
;;  You can iconify or deiconify all thumbnail frames (that is, only
;;  the thumbnail frames), to get them out of the way and bring them
;;  back.  Use commands `thumfr-iconify-thumbnail-frames' and
;;  `thumfr-deiconify-thumbnail-frames' to do this.
;;
;;  Emacs built-in function `raise-frame' is redefined here to also
;;  dethumbify.  The original behavior of `raise-frame' is available
;;  in command `thumfr-only-raise-frame'.
;;
;;  You can cycle among the visible frames in two ways, applying
;;  `thumfr-fisheye' to each in turn.  The first way is using commands
;;  `thumfr-fisheye-previous-frame' and `thumfr-fisheye-next-frame'
;;  (which you can bind to, for instance, `C-M-prior' and `C-m-next').
;;  The second way is using command `thumfr-doremi-thumbnail-frames+'
;;  plus the arrow keys or mouse wheel.
;;
;;  To be able to use `thumfr-doremi-thumbnail-frames+', you need
;;  library `doremi-frm.el' (which in turn requires libraries
;;  `hexrgb.el', `faces+.el', `doremi.el', and perhaps `ring+.el',
;;  depending on your Emacs version).  The only libraries strictly
;;  required by `thumb-frm.el' are `frame-fns.el' and `frame-cmds.el'.
;;
;;  A more comprehensive, lower-level way of substituting thumbifying
;;  for iconifying is to do the following in your init file:
;;
;;    (define-key special-event-map [iconify-frame]
;;                'thumfr-thumbify-frame-upon-event)
;;
;;  In effect, this thumbifies any frame as soon as it is iconified,
;;  no matter how it was iconified.  In particular, this will let you
;;  use the window-manager \"minimize\" frame button (usually at the
;;  upper left or right frame corner) to thumbify.
;;
;;  Be aware of this fact/feature, which is true of any binding on
;;  keymap `special-event-map': The event interrupts any key sequence
;;  in progress, to invoke its command, and then the key sequence as a
;;  whole is processed, ignoring the special event.
;;
;;  For example, assuming that event `iconify-frame' occurs whenever
;;  you use a window-manager button (e.g. in the title bar) or menu
;;  item to minimize (iconify) a frame, if you do `C-x
;;  <click-the-minimize-button> b', then: (1) as soon as you click the
;;  minimize button the frame is thumbified, and (2) when you hit `b'
;;  the key sequence `C-x b' is processed (e.g. `switch-to-buffer'
;;  prompts you for a buffer name).  I mention this not because it is
;;  a useful feature but in order to avoid confusion.
;;
;;  If you do bind `thumfr-thumbify-frame-upon-event' to
;;  `iconify-frame', be aware that `thumfr-thumbify-dont-iconify-flag'
;;  will no longer have any effect: Emacs will *always* thumbify
;;  instead of iconify (except for functions `really-iconify-*frame',
;;  which are designed to counter this).  If you try this behavior and
;;  then wish to cancel it, to once again allow iconification, use
;;  this code:
;;
;;  In Emacs 20 or prior:
;;    (define-key special-event-map [iconify-frame] 'ignore-event)
;;
;;  In Emacs 21 or later:
;;    (define-key special-event-map [iconify-frame] 'ignore)
;;
;;
;;  Other user options (variables) not mentioned above are these:
;;
;;    `thumfr-font-difference'             - Zoom of thumbnail frames.
;;    `thumfr-rename-when-thumbify-flag'   - Rename frame to buffer.
;;    `thumfr-stack-display-edge'         - Display edge for stacking.
;;    `window-mgr-title-bar-pixel-width'   - Thickness of title bar.
;;
;;
;;  IMPORTANT:
;;
;;    Thumbnail frames are *FULLY FUNCTIONAL*.  In particular, their
;;    buffers are *NOT* read-only in any way.  You can edit their
;;    buffers normally, even if you can't see what you're doing :-).
;;
;;    You can also scroll and search their buffers.  You can thumbify
;;    the frame of a progressive output buffer, to monitor the output
;;    from 4,000 meters as it is produced.  In other words, you can
;;    interactive with thumbnail frames in the usual ways.  They are
;;    not special; they are just small.
;;
;;  Functions defined here:
;;
;;    `set-frame-parameter' (Emacs < 22),
;;    `thumfr-culled-thumbnail-frames',
;;    `thumfr-deiconify-thumbnail-frames', `thumfr-delete-if-not',
;;    `thumfr-dethumbify-all-frames', `thumfr-dethumbify-frame',
;;    `thumfr-doremi-thumbnail-frames+', `thumfr-fisheye',
;;    `thumfr-fisheye-next-frame', `thumfr-fisheye-previous-frame',
;;    `thumfr-iconify-thumbnail-frames', `thumfr-only-raise-frame',
;;    `thumfr-nset-difference', `thumfr-next-stack-position',
;;    `thumfr-really-iconify-frame',
;;    `thumfr-really-iconify-or-deiconify-frame', `thumfr-remove-if',
;;    `thumfr-remove-if-not', `thumfr-set-difference',
;;    `thumfr-stack-thumbnail-frames', `thumfr-sort-by-name',
;;    `thumfr-sort-by-window-id', `thumfr-thumbify-frame',
;;    `thumfr-thumbnail-frame-p', `thumfr-thumbnail-frames',
;;    `thumfr-thumbify-frame-upon-event',
;;    `thumfr-thumbify-other-frames', `thumfr-thumfr-parameter-p',
;;    `thumfr-toggle-sort-thumbnail-frame-stack',
;;    `thumfr-toggle-thumbnail-frame'.
;;
;;
;;  User options (variables) defined here:
;;
;;    `thumfr-font-difference', `thumfr-thumbify-dont-iconify-flag',
;;    `thumfr-frame-parameters', `thumfr-rename-when-thumbify-flag',
;;    `thumfr-sort-function', `thumfr-stack-display-edge',
;;    `window-mgr-title-bar-pixel-width'.
;;
;;
;;  Internal variable defined here:
;;
;;    `thumfr-last-row-show', `thumfr-last-sort-function',
;;    `thumfr-next-stack-xoffset', `thumfr-next-stack-yoffset'.
;;
;;
;;  ***** NOTE: These EMACS functions have been ADVISED or REDEFINED:
;;
;;  `iconify-frame' - Thumbify if `thumfr-thumbify-dont-iconify-flag'.
;;  `iconify-or-deiconify-frame' - Similar to `iconify-frame', plus
;;                                 dethumbify if already a thumbnail.
;;  `raise-frame' - Dethumbify also, if a thumbnail.
;;
;;
;;  Put this in your init file (`~/.emacs'): (require 'thumb-frm)
;;
;;  Suggested key bindings:
;;
;;   (global-set-key [(shift mouse-3)]
;;                   'thumfr-toggle-thumbnail-frame)
;;   (global-set-key [(shift control mouse-3)]
;;                   'thumfr-thumbify-other-frames)
;;   (global-set-key [(shift control ?z)]
;;                   'thumfr-thumbify-other-frames)
;;   (global-set-key [(shift control ?p)]
;;                   'thumfr-fisheye-previous-frame)
;;   (global-set-key [(shift control ?n)]
;;                   'thumfr-fisheye-next-frame)
;;   (global-set-key [(control meta ?z)]
;;                   'thumfr-really-iconify-or-deiconify-frame)
;;
;;   ;; Make the window-manager \"minimize\" button thumbify instead.
;;   (define-key special-event-map [iconify-frame]
;;               'thumfr-thumbify-frame-upon-event)
;;
;;   ;; Add `thumfr-doremi-thumbnail-frames+' to the Do Re Mi commands
;;   ;; - see library `doremi-frm.el'.
;;   (unless (fboundp 'doremi-prefix)
;;     (defalias 'doremi-prefix (make-sparse-keymap))
;;     (defvar doremi-map (symbol-function 'doremi-prefix)
;;       \"Keymap for Do Re Mi commands.\"))
;;   (define-key global-map \"\\C-xt\"  'doremi-prefix)
;;   (define-key global-map \"\\C-xte\"
;;               'thumfr-doremi-thumbnail-frames+) ; \"Eye\"
;;
;;   Keep in mind also that if `thumfr-thumbify-dont-iconify-flag' is
;;   non-nil then keys bound to (de-)iconifying commands, such as
;;   `C-z', will instead (de)thumbify.  (This is not true, however, if
;;   `thumfr-thumbify-frame-upon-event' is bound to `iconify-frame'.
;;   Such a binding causes `thumfr-thumbify-dont-iconify-flag' not to
;;   have any effect - Emacs *always* thumbifies instead of
;;   iconifying, except for commands like `really-iconify-*frame'.)
;;
;;
;;  See also these libraries for other frame commands:
;;
;;     `autofit-frame.el' - Automatically fit each frame to its
;;                          selected window.  Uses `fit-frame.el'.
;;
;;     `fit-frame.el'     - 1) Fit a frame to its selected window.
;;                          2) Incrementally resize a frame.
;;
;;     `doremi-frm.el'    - Incrementally adjust frame properties
;;                          using arrow keys and/or mouse wheel.
;;
;;     `frame-cmds.el'    - Miscellaneous frame and window commands.
;;
;;     `zoom-frm.el'      - Zoom a frame, so that its font becomes
;;                          larger or smaller.
;;
;;  Acknowledgements (thanks):
;;    Michael Cadilhac [Michael.Cadilhac-@t-lrde.epita.fr] for a tip
;;      on using `discard-input' to effectively nullify
;;      `special-event-map' bindings (used in
;;      `really-iconify-[or-deiconify]frame').
;;
;;  TO DO?:
;;
;;     Make thumbnail frames read-only, to prevent inadvertent
;;     changes.  How to do so? Could make all buffers in frame's
;;     buffer-list r-o, but that would affect the buffer on
;;     non-thumbnail frames too.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (thrift . [(20130910 912) nil "Major mode for Apache Thrift files" single ";;; Commentary:

;;

"]) (thread-dump . [(20130323 1025) nil "Java thread dump viewer" single nil]) (thingopt . [(20120717 826) nil "Thing at Point optional utilities" single ";;; Commentary:

;; TODO documentation
;; TODO forward-string by syntax (?)

"]) (thingatpt+ . [(20131227 200) nil "Extensions to `thingatpt.el'." single ";;; Commentary:
;;
;;    Extensions to `thingatpt.el'.
;;
;;
;;  Commands defined here:
;;
;;    `find-fn-or-var-nearest-point', `forward-char-same-line',
;;    `forward-whitespace-&-newlines', `tap-put-thing-at-point-props',
;;    `tap-redefine-std-fns'.
;;
;;  User options defined here:
;;
;;    `tap-near-point-x-distance', `tap-near-point-y-distance'.
;;
;;  Non-interactive functions defined here:
;;
;;    `tap-bounds-of-color-at-point', `tap-bounds-of-form-at-point',
;;    `tap-bounds-of-form-nearest-point',
;;    `tap-bounds-of-list-at-point',
;;    `tap-bounds-of-list-nearest-point',
;;    `tap-bounds-of-number-at-point',
;;    `tap-bounds-of-number-at-point-decimal',
;;    `tap-bounds-of-number-at-point-hex',
;;    `tap-bounds-of-sexp-at-point',
;;    `tap-bounds-of-sexp-nearest-point',
;;    `tap-bounds-of-string-at-point',
;;    `tap-bounds-of-string-contents-at-point',
;;    `tap-bounds-of-symbol-at-point',
;;    `tap-bounds-of-symbol-nearest-point',
;;    `tap-bounds-of-thing-nearest-point', `tap-color-at-point',
;;    `tap-color-nearest-point',
;;    `tap-color-nearest-point-with-bounds',
;;    `tap-define-aliases-wo-prefix', `tap-form-at-point-with-bounds',
;;    `tap-form-nearest-point', `tap-form-nearest-point-with-bounds',
;;    `tap-list-at/nearest-point-with-bounds',
;;    `tap-list-at-point-with-bounds', `tap-list-nearest-point',
;;    `tap-list-nearest-point-with-bounds',
;;    `tap-list-nearest-point-as-string', `tap-looking-at-p',
;;    `tap-looking-back-p', `tap-non-nil-symbol-name-at-point',
;;    `tap-non-nil-symbol-name-nearest-point',
;;    `tap-non-nil-symbol-nearest-point',
;;    `tap-number-at-point-decimal', `tap-number-at-point-hex',
;;    `tap-number-nearest-point', `tap-region-or-word-at-point',
;;    `tap-region-or-word-nearest-point',
;;    `tap-region-or-non-nil-symbol-name-nearest-point',
;;    `tap-sentence-nearest-point', `tap-sexp-at-point-with-bounds',
;;    `tap-sexp-nearest-point', `tap-sexp-nearest-point-with-bounds',
;;    `tap-string-at-point', `tap-string-contents-at-point',
;;    `tap-string-contents-nearest-point.', `tap-string-match-p',
;;    `tap-string-nearest-point', `tap-symbol-at-point-with-bounds',
;;    `tap-symbol-name-at-point', `tap-symbol-name-nearest-point',
;;    `tap-symbol-nearest-point',
;;    `tap-symbol-nearest-point-with-bounds',
;;    `tap-thing-at-point-with-bounds',
;;    `tap-thing/form-nearest-point-with-bounds',
;;    `tap-thing-nearest-point',
;;    `tap-thing-nearest-point-with-bounds',
;;    `tap-unquoted-list-at-point', `tap-unquoted-list-nearest-point',
;;    `tap-unquoted-list-nearest-point-as-string',
;;    `tap-word-nearest-point',
;;
;;    plus the same functions without the prefix `tap-', if you invoke
;;    `tap-redefine-std-fns'.
;;
;;
;;  A REMINDER (the doc strings are not so great):
;;
;;    These functions, defined in `thingatpt.el', all move point:
;;      `beginning-of-thing', `end-of-sexp', `end-of-thing',
;;      `forward-symbol', `forward-thing'.
;;
;;  For older Emacs releases that do not have the following functions,
;;  they are defined here as no-ops:
;;
;;  `constrain-to-field', `field-beginning', `field-end'.
;;
;;
;;  How To Use This Library
;;  =======================
;;
;;  End Users
;;  ---------
;;
;;  Load this library after loading the standard GNU file
;;  `thingatpt.el'.  You can put this in your init file (`~/.emacs'):
;;
;;    (eval-after-load \"thingatpt\"
;;      '(require 'thingatpt+))
;;
;;  That defines new functions and improved versions of some of the
;;  standard thing-at-point functions.  All such functions have the
;;  prefix `tap-', so they are not used by default in any way.
;;
;;  That does not at all, however, make Emacs use the improved
;;  functions.  Merely loading this library does not change the
;;  behavior of thing-at-point features.
;;
;;  If you want functions defined here to be used for calls to
;;  standard Emacs functions that make use of the `thing-at-point' and
;;  `bounds-of-thing-at-point' symbol properties for standard thing
;;  types (e.g. `list'), then put this in your init file, instead:
;;
;;    (eval-after-load \"thingatpt\"
;;      '(when (require 'thingatpt+)
;;         (tap-put-thing-at-point-props))
;;
;;  A further step, which I recommend, is to use the `tap-' versions
;;  of standard functions, defined here, everywhere in place of those
;;  standard functions.  In other words, redefine the standard
;;  functions as the `tap-' versions defined here.  For example,
;;  redefine `bounds-of-thing-at-point' to do what
;;  `tap-bounds-of-thing-at-point' does.
;;
;;  (If you do that then you need not invoke
;;  `tap-put-thing-at-point-props', since the property values set by
;;  vanilla library `thingatpt.el' will be OK because the functions
;;  themselves will have been redefined in that case.)
;;
;;  So to get the most out of this library, I recommend that you put
;;  (only) the following in your init file:
;;
;;    (eval-after-load \"thingatpt\"
;;      '(when (require 'thingatpt+)
;;         (tap-redefine-std-fns))
;;
;;  That makes all Emacs code that uses the following standard
;;  functions use the their versions that are defined here, not the
;;  vanilla versions defined in `thingatpt.el'.
;;
;;  `bounds-of-thing-at-point' - Better behavior.
;;                               Accept optional arg SYNTAX-TABLE.
;;  `form-at-point'            - Accept optional arg SYNTAX-TABLE.
;;  `list-at-point'            - Better behavior.
;;  `symbol-at-point'          - Use `emacs-lisp-mode-syntax-table'.
;;  `thing-at-point'           - Ensure it returns a string or nil.
;;                               Accept optional arg SYNTAX-TABLE.
;;  `thing-at-point-bounds-of-list-at-point'
;;                             - Better behavior.  Accept optional
;;                               args UP and UNQUOTEDP.
;;
;;
;;  Lisp Programmers
;;  ----------------
;;
;;  If you write code that uses some of the functions defined here,
;;  this section is for you.
;;
;;  You can use the functions defined in `thingatpt+.el' that have
;;  prefix `tap-' to obtain, for your code, the improvements they
;;  provide.  Doing only that has no effect on any code that calls
;;  vanilla thing-at-point functions (which have no prefix `tap-').
;;
;;  For convenience you can invoke `tap-define-aliases-wo-prefix' to
;;  provide alias functions that have the same names but without the
;;  prefix `tap-'.  This affects only functions defined here that have
;;  no vanilla counterpart, so the aliases do not collide with any
;;  standard Emacs functions.  This is just a naming convenience.
;;
;;  For example, you might do this:
;;
;;    (when (require 'thingatpt+ nil t)  ; (no error if not found)
;;      (tap-define-aliases-wo-prefix))
;;
;;  You can optionally enable the improvements defined here to have
;;  wider application, so that code that does not directly invoke the
;;  functions defined here nevertheless uses them indirectly.
;;
;;  You can, for example, put `tap-' functions on THING-type symbols
;;  as property `thing-at-point' or property
;;  `bounds-of-thing-at-point'.  That has the effect of using those
;;  `tap-' functions for those THING types only.
;;
;;  For example, to get the improvements for lists offered by
;;  `tap-list-at-point', you can do this:
;;
;;    (put 'list 'bounds-of-thing-at-point
;;         'tap-bounds-of-list-at-point)
;;    (put 'list 'thing-at-point 'tap-list-at-point)
;;
;;  That causes the vanilla thing-at-point functions to invoke those
;;  `tap-' functions when handling lists.  It has an effect only on
;;  lists, not on other THINGs.  This behavior happens because the
;;  generic vanilla functions `thing-at-point' and
;;  `bounds-of-thing-at-point' use those standard symbol properties.
;;
;;  For even wider application, that is, if you want all of the
;;  improvements defined here to be available generally, then you will
;;  also need to do ONE of the following (#1 or #2):
;;
;;  1. Call `tap-redefine-std-fns', to redefine standard functions.
;;
;;  2. Do BOTH of these things:
;;
;;    a. Call `tap-put-thing-at-point-props', to substitute `tap-'
;;       functions for standard functions as the values of symbol
;;       properties `thing-at-point' and `bounds-of-thing-at-point'.
;;
;;    b. Call the individual `tap-*' functions explicitly for each of
;;       the standard functions that would be redefined by
;;       `tap-redefine-std-fns'.  Or call standard functions that make
;;       use of property `thing-at-point' or
;;       `bounds-of-thing-at-point'.
;;
;;    This (#2) changes (improves) the behavior of things like
;;    (thing-at-point 'list), even though it does not redefine any
;;    standard functions.  Again, this is because functions
;;    `thing-at-point' and `bounds-of-thing-at-point' use symbol
;;    properties `thing-at-point' and `bounds-of-thing-at-point', and
;;    `tap-put-thing-at-point-props' changes those property values.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (thing-cmds . [(20131227 159) ((hide-comnt (0))) "Commands that use things, as defined by `thingatpt.el'." single ";;; Commentary:
;;
;;  You can use the commands defined here to select or move to
;;  different kinds of text entities (\"things\") that are at or near
;;  point.  They are especially useful in combination with Transient
;;  Mark mode.
;;
;;
;;  Commands defined here:
;;
;;    `cycle-thing-region', `mark-enclosing-list',
;;    `mark-enclosing-list-backward', `mark-enclosing-list-forward',
;;    `mark-thing', `next-visible-thing', `next-visible-thing-repeat',
;;    `previous-visible-thing', `previous-visible-thing-repeat',
;;    `select-thing-near-point', `thgcmd-bind-keys', `thing-region'.
;;
;;  User options defined here:
;;
;;    `thing-types'.
;;
;;  Non-interactive functions defined here:
;;
;;    `thgcmd-bounds-of-thing-at-point', `thgcmd-invisible-p',
;;    `thgcmd-next-visible-thing-1', `thgcmd-next-visible-thing-2',
;;    `thgcmd-repeat-command', `thgcmd-things-alist'.
;;
;;  Internal variables defined here:
;;
;;    `thgcmd-defined-thing-p', `thgcmd-last-thing-type',
;;    `thgcmd-thing-region-index', `thgcmd-thing-region-point'.
;;
;;  Put this in your init file (`~/.emacs'):
;;
;;   (require 'thing-cmds)
;;   (thgcmd-bind-keys) ; Only if you want the key bindings it defines
;;
;;  See also the doc strings of `next-visible-thing' and
;;  `thgcmd-bind-keys', for more information about thing navigation
;;  keys.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (thesaurus . [(20121125 1937) nil "replace a word with a synonym looked up in a web service." single ";;; Commentary:

;; This module allows a user to look up synonyms for a word in
;; a web-accessible thesaurus.

;; This code started with a basic version posted without license at
;; http://alexhenning.github.com/blog/2010/11/01/synonym.el/

;; I standardized the naming, re-factored, wrote some documentation,
;; introduced the dependency on dropdown-list.el and x-popup-menu, added
;; a license, introduced some error handling, and polished it.

;; Right now it depends on a web service from Big Huge Labs. It
;; is not tied to that service, and could be expanded to use other
;; services, and to even dynamically choose which service to access.

;; To use, first go to http://words.bighugelabs.com/ and register (no
;; cost) to get an API key. Then, put thesaurus.el in your emacs load
;; path and modify your .emacs to do this:

;;   (require 'thesaurus)
;;   (setq thesaurus-bhl-api-key \"XXXXXXXXXXXX\")  ;; from registration

;;    -or-

;;   (require 'thesaurus)
;;   (thesaurus-set-bhl-api-key-from-file \"~/BigHugeLabs.apikey.txt\")

;; Optionally, set a key binding:
;; (define-key global-map (kbd \"C-x t\") 'thesaurus-choose-synonym-and-replace)

;; This module currently relies on a BigHugeLabs thesaurus service. The
;; service is currently free, and has a limit of 10,000 lookups per
;; day. If the service changes, or becomes unavailable, or if anyone
;; exceeds the limit, it shouldn't be difficult to expand this module to
;; support other online thesaurus services. Wolfram Alpha is one
;; possible option; theirs is a free API. Wordnik has a free synonyms API.
;;
;; eg:
;; http://api.wordnik.com//v4/word.json/awry/relatedWords?relationshipTypes=synonym
;;
;; I think Bing has one. Probably there are others. This module would need
;; to be modified to support one of those.
;;
;; If you want to proxy the URL calls, then use this:
;;   (setq url-proxy-services (list (cons \"http\" \"proxyHost:proxyPort\")))

;;
"]) (theme-changer . [(20130725 1919) nil "Sunrise/Sunset Theme Changer for Emacs" single ";;; Commentary:

;; Given a location and day/night color themes, this file provides a
;; `change-theme` function that selects the appropriate theme based on
;; whether it is day or night. It will continue to change themes at
;; sunrise and sunset. To install:

;; Set the location:
;;     (setq calendar-location-name \"Dallas, TX\") 
;;     (setq calendar-latitude 32.85)
;;     (setq calendar-longitude -96.85)

;; Specify the day and night themes:
;;     (require 'theme-changer)
;;     (change-theme 'solarized-light 'solarized-dark)

;; You can also pass nil as either of parameters to change-theme, with the
;; effect of not using a theme (or using the default Emacs theme) during that
;; period of the day. For example:

;;     (change-theme nil 'solarized-dark)

;; will result in setting the default Emacs theme during the day, and
;; solarized-dark during the night.

;; You may need to add this file path to your loadpath. For example:
;;     (add-to-list 'load-path \"~/.emacs.d/elisp/theme-changer\")

;; If you want to use the color-theme package instead of the Emacs 24 color
;; theme facility:
;;     (setq theme-changer-mode \"color-theme\")
;;     (change-theme 'color-theme-solarized-light 'color-theme-solarized-dark)

"]) (tfs . [(20120508 1820) nil "MS Team Foundation Server commands for Emacs." single ";;; Commentary:
;;
;; Basic steps to setup:
;;   1. Place `tfs.el' in your `load-path'.
;;   2. In your .emacs file:
;;        (require 'tfs)
;;        (setq tfs/tf-exe  \"c:\\\\vs2010\\\\common7\\\\ide\\\\tf.exe\")
;;        (setq tfs/login \"/login:domain\\\\userid,password\")
;;              -or-
;;        (setq tfs/login (getenv \"TFSLOGIN\"))
;;   3. also in your .emacs file:
;;        set local or global key bindings for tfs commands.  like so:
;;
;;        (global-set-key  \"\\C-xvo\" 'tfs/checkout)
;;        (global-set-key  \"\\C-xvi\" 'tfs/checkin)
;;        (global-set-key  \"\\C-xvp\" 'tfs/properties)
;;        (global-set-key  \"\\C-xvr\" 'tfs/rename)
;;        (global-set-key  \"\\C-xvg\" 'tfs/get)
;;        (global-set-key  \"\\C-xvh\" 'tfs/history)
;;        (global-set-key  \"\\C-xvu\" 'tfs/undo)
;;        (global-set-key  \"\\C-xvd\" 'tfs/diff)
;;        (global-set-key  \"\\C-xv-\" 'tfs/delete)
;;        (global-set-key  \"\\C-xv+\" 'tfs/add)
;;        (global-set-key  \"\\C-xvs\" 'tfs/status)
;;        (global-set-key  \"\\C-xva\" 'tfs/annotate)
;;        (global-set-key  \"\\C-xvw\" 'tfs/workitem)
;;
;;

"]) (textmate-to-yas . [(20130509 854) nil "Import Textmate macros into yasnippet syntax" tar ";;; Commentary:
;; 
;; * Importing A Textmate bundle from the Textmate SVN url
;; This is done with the command `textmate-import-svn-from-url'.
;; * Importing from an unzipped Textmate tmBundle
;; This is done with the command `textmate-import-bundle'.  You need to
;; specify both the root directory of the bundle ant the parent modes for
;; importing (like text-mode).
;; *Example function for importing Sata snippets into Yasnippet
;; 
;; *** textmate-import-svn-get-pkgs
;; =(textmate-import-svn-get-pkgs)=
;; 
;;  - Gets textmate bundles from svn
;; 
;; *** textmate-import-svn-snippets
;; =(textmate-import-svn-snippets SNIPPET-URL PLIST TEXTMATE-NAME)=
;; 
;; *Imports snippets based on textmate svn tree.
;; 
;; *** textmate-regexp-to-emacs-regexp
;; =(textmate-regexp-to-emacs-regexp REXP)=
;; 
;;  - Convert a textmate regular expression to an emacs regular expression (as much as possible)
;; 
;; *** textmate-yas-menu
;; =(textmate-yas-menu PLIST &optional MODE-NAME)=
;; 
;;  - Builds `yas-define-menu'from info.plist file
;; 
;; *** textmate-yas-menu-get-items
;; =(textmate-yas-menu-get-items TXT)=
;; 
;; Gets items from TXT and puts them into a list
;; 
;; *** yas---t/
;; =(yas---t/ TEXTMATE-REG TEXTMATE-REP &optional TEXTMATE-OPTION T-TEXT)=
;; 
;;  - Textmate like mirror.  Uses textmate regular expression and textmate formatting.
;; 
;; *** yas-format-match-?-buf
;; =(yas-format-match-\\?-buf TEXT &optional STRING EMPTY-MISSING
;; START-POINT STOP-POINT)=
;; 
;;  - Recursive call to temporary buffer to replace conditional formats.
;; 
;; *** yas-getenv
;; =(yas-getenv VAR)=
;; 
;;  - Gets environment variable or customized variable for Textmate->Yasnippet conversion
;; 
;; *** yas-replace-match
;; =(yas-replace-match TEXT &optional STRING
;; TREAT-EMPTY-MATCHES-AS-MISSING-MATCHES SUBEXP)=
;; 
;;  - yas-replace-match is similar to emacs replace-match but using Textmate formats
;; 
;; *** yas-text-on-moving-away
;; =(yas-text-on-moving-away DEFAULT-TEXT)=
;; 
;;  - Changes text when moving away AND original text has not changed
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (textmate . [(20110816 1446) nil "TextMate minor mode for Emacs" single ";;; Commentary:

;; This minor mode exists to mimick TextMate's awesome
;; features.

;;    \342\214\230T - Go to File
;;  \342\207\247\342\214\230T - Go to Symbol
;;    \342\214\230L - Go to Line
;;  \342\207\247\342\214\230L - Select Line (or expand Selection to select lines)
;;    \342\214\230/ - Comment Line (or Selection/Region)
;;    \342\214\230] - Shift Right
;;    \342\214\230[ - Shift Left
;;  \342\214\245\342\214\230] - Align Assignments
;;  \342\214\245\342\214\230[ - Indent Line
;;    \342\214\245\342\206\221 - Column Up
;;    \342\214\245\342\206\223 - Column Down
;;  \342\214\230RET - Insert Newline at Line's End
;;  \342\214\245\342\214\230T - Reset File Cache (for Go to File)

;; A \"project\" in textmate-mode is determined by the presence of
;; a .git directory, an .hg directory, a Rakefile, or a Makefile.

;; You can configure what makes a project root by appending a file
;; or directory name onto the `*textmate-project-roots*' list.

;; If no project root indicator is found in your current directory,
;; textmate-mode will traverse upwards until one (or none) is found.
;; The directory housing the project root indicator (e.g. a .git or .hg
;; directory) is presumed to be the project's root.

;; In other words, calling Go to File from
;; ~/Projects/fieldrunners/app/views/towers/show.html.erb will use
;; ~/Projects/fieldrunners/ as the root if ~/Projects/fieldrunners/.git
;; exists.

;;; Installation

;; $ cd ~/.emacs.d/vendor
;; $ git clone git://github.com/defunkt/textmate.el.git
;;
;; In your emacs config:
;;
;; (add-to-list 'load-path \"~/.emacs.d/vendor/textmate.el\")
;; (require 'textmate)
;; (textmate-mode)

;;; Depends on imenu
(require 'imenu)

;;; Needed for flet
(eval-when-compile
  (require 'cl))

;;; Minor mode

(defvar *textmate-gf-exclude*
  \"(/|^)(\\\\.+[^/]+|vendor|fixtures|tmp|log|classes|build)($|/)|(\\\\.xcodeproj|\\\\.nib|\\\\.framework|\\\\.app|\\\\.pbproj|\\\\.pbxproj|\\\\.xcode|\\\\.xcodeproj|\\\\.bundle|\\\\.pyc)(/|$)\"
  \"Regexp of files to exclude from `textmate-goto-file'.\")

(defvar *textmate-project-roots*
  '(\".git\" \".hg\" \"Rakefile\" \"Makefile\" \"README\" \"build.xml\" \".emacs-project\")
  \"The presence of any file/directory in this list indicates a project root.\")

(defvar textmate-use-file-cache t
  \"Should `textmate-goto-file' keep a local cache of files?\")

(defvar textmate-completing-library 'ido
  \"The library `textmade-goto-symbol' and `textmate-goto-file' should use for
completing filenames and symbols (`ido' by default)\")

(defvar textmate-find-files-command \"find \\\"%s\\\" -type f\"
  \"The command `textmate-project-files' uses to find files. %s will be replaced
by the project root.\")

(defvar *textmate-completing-function-alist* '((ido ido-completing-read)
                                               (icicles  icicle-completing-read)
                                               (none completing-read))
  \"The function to call to read file names and symbols from the user\")

(defvar *textmate-completing-minor-mode-alist*
  `((ido ,(lambda (a) (progn (ido-mode a) (setq ido-enable-flex-matching t))))
    (icicles ,(lambda (a) (icy-mode a)))
    (none ,(lambda (a) ())))
  \"The list of functions to enable and disable completing minor modes\")

(defvar *textmate-mode-map*
  (let ((map (make-sparse-keymap)))
    (cond ((featurep 'aquamacs)
     (define-key map [A-return] 'textmate-next-line)
     (define-key map (kbd \"A-M-t\") 'textmate-clear-cache)
     (define-key map (kbd \"A-M-]\") 'align)
     (define-key map (kbd \"A-M-[\") 'indent-according-to-mode)
     (define-key map (kbd \"A-]\")  'textmate-shift-right)
     (define-key map (kbd \"A-[\") 'textmate-shift-left)
     (define-key map (kbd \"A-/\") 'comment-or-uncomment-region-or-line)
     (define-key map (kbd \"A-L\") 'textmate-select-line)
     (define-key map (kbd \"A-t\") 'textmate-goto-file)
     (define-key map (kbd \"A-T\") 'textmate-goto-symbol)
     (define-key map (kbd \"M-<up>\") 'textmate-column-up)
     (define-key map (kbd \"M-<down>\") 'textmate-column-down)
     (define-key map (kbd \"M-S-<up>\") 'textmate-column-up-with-select)
     (define-key map (kbd \"M-S-<down>\") 'textmate-column-down-with-select))
    ((and (featurep 'mac-carbon) (eq window-system 'mac) mac-key-mode)
     (define-key map [(alt meta return)] 'textmate-next-line)
     (define-key map [(alt meta t)] 'textmate-clear-cache)
     (define-key map [(alt meta \\])] 'align)
     (define-key map [(alt meta \\[)] 'indent-according-to-mode)
     (define-key map [(alt \\])]  'textmate-shift-right)
     (define-key map [(alt \\[)] 'textmate-shift-left)
     (define-key map [(meta /)] 'comment-or-uncomment-region-or-line)
     (define-key map [(alt t)] 'textmate-goto-file)
           (define-key map [(alt shift l)] 'textmate-select-line)
     (define-key map [(alt shift t)] 'textmate-goto-symbol)
     (define-key map [(alt up)] 'textmate-column-up)
     (define-key map [(alt down)] 'textmate-column-down)
     (define-key map [(alt shift up)] 'textmate-column-up-with-select)
     (define-key map [(alt shift down)] 'textmate-column-down-with-select))
    ((featurep 'ns)  ;; Emacs.app
     (define-key map [(super meta return)] 'textmate-next-line)
     (define-key map [(super meta t)] 'textmate-clear-cache)
     (define-key map [(super meta \\])] 'align)
     (define-key map [(super meta \\[)] 'indent-according-to-mode)
     (define-key map [(super \\])]  'textmate-shift-right)
     (define-key map [(super \\[)] 'textmate-shift-left)
     (define-key map [(super /)] 'comment-or-uncomment-region-or-line)
     (define-key map [(super t)] 'textmate-goto-file)
     (define-key map [(super shift l)] 'textmate-select-line)
     (define-key map [(super shift t)] 'textmate-goto-symbol)
     (define-key map [(meta up)] 'textmate-column-up)
     (define-key map [(meta down)] 'textmate-column-down)
     (define-key map [(meta shift up)] 'textmate-column-up-with-select)
     (define-key map [(meta shift down)] 'textmate-column-down-with-select))
    (t ;; Any other version
     (define-key map [(meta return)] 'textmate-next-line)
     (define-key map [(control c)(control t)] 'textmate-clear-cache)
     (define-key map [(control c)(control a)] 'align)
     (define-key map [(control tab)] 'textmate-shift-right)
     (define-key map [(control shift tab)] 'textmate-shift-left)
     (define-key map [(control c)(control k)] 'comment-or-uncomment-region-or-line)
     (define-key map [(meta t)] 'textmate-goto-file)
     (define-key map [(meta shift l)] 'textmate-select-line)
     (define-key map [(meta shift t)] 'textmate-goto-symbol)
     (define-key map [(alt up)] 'textmate-column-up)
     (define-key map [(alt down)] 'textmate-column-down)
     (define-key map [(alt shift up)] 'textmate-column-up-with-select)
     (define-key map [(alt shift down)] 'textmate-column-down-with-select)))
    map))

(defvar *textmate-project-root* nil
  \"Used internally to cache the project root.\")
(defvar *textmate-project-files* '()
  \"Used internally to cache the files in a project.\")

(defcustom textmate-word-characters \"a-zA-Z0-9_\" \"Word Characters for Column Movement\")
;;; Bindings

(defun textmate-ido-fix ()
  \"Add up/down keybindings for ido.\"
  (define-key ido-completion-map [up] 'ido-prev-match)
  (define-key ido-completion-map [down] 'ido-next-match))

(defun textmate-completing-read (&rest args)
  \"Uses `*textmate-completing-function-alist*' to call the appropriate completing
function.\"
  (let ((reading-fn
         (cadr (assoc textmate-completing-library
                      *textmate-completing-function-alist*))))
  (apply (symbol-function reading-fn) args)))

;;; allow-line-as-region-for-function adds an \"-or-line\" version of
;;; the given comment function which (un)comments the current line is
;;; the mark is not active.  This code comes from Aquamac's osxkeys.el
;;; and is licensed under the GPL

(defmacro allow-line-as-region-for-function (orig-function)
`(defun ,(intern (concat (symbol-name orig-function) \"-or-line\"))
   ()
   ,(format \"Like `%s', but acts on the current line if mark is not active.\"
            orig-function)
   (interactive)
   (if mark-active
       (call-interactively (function ,orig-function))
     (save-excursion
       ;; define a region (temporarily) -- so any C-u prefixes etc. are preserved.
       (beginning-of-line)
       (set-mark (point))
       (end-of-line)
       (call-interactively (function ,orig-function))))))

(defun textmate-define-comment-line ()
  \"Add or-line (un)comment function if not already defined\"
  (unless (fboundp 'comment-or-uncomment-region-or-line)
    (allow-line-as-region-for-function comment-or-uncomment-region)))

;;; Commands

(defun textmate-next-line ()
  \"Inserts an indented newline after the current line and moves the point to it.\"
  (interactive)
  (end-of-line)
  (newline-and-indent))

(defun textmate-select-line ()
  \"If the mark is not active, select the current line.
Otherwise, expand the current region to select the lines the region touches.\"
  (interactive)
  (if mark-active ;; expand the selection to select lines
      (let ((top (= (point) (region-beginning)))
            (p1 (region-beginning))
            (p2 (region-end)))
        (goto-char p1)
        (beginning-of-line)
        (push-mark (point))
        (goto-char p2)
        (unless (looking-back \"\\n\")
          (progn
            (end-of-line)
            (if (< (point) (point-max)) (forward-char))))
        (setq mark-active t
              transient-mark-mode t)
        (if top (exchange-point-and-mark)))
    (progn
      (beginning-of-line)
      (push-mark (point))
      (end-of-line)
      (if (< (point) (point-max)) (forward-char))
      (setq mark-active t
            transient-mark-mode t))))

;; http://chopmo.blogspot.com/2008/09/quickly-jumping-to-symbols.html
(defun textmate-goto-symbol ()
  \"Update the imenu index and then use ido to select a symbol to navigate to.
Symbols matching the text at point are put first in the completion list.\"
  (interactive)
  (imenu--make-index-alist)
  (let ((name-and-pos '())
        (symbol-names '()))
    (flet ((addsymbols (symbol-list)
                       (when (listp symbol-list)
                         (dolist (symbol symbol-list)
                           (let ((name nil) (position nil))
                             (cond
                              ((and (listp symbol) (imenu--subalist-p symbol))
                               (addsymbols symbol))

                              ((listp symbol)
                               (setq name (car symbol))
                               (setq position (cdr symbol)))

                              ((stringp symbol)
                               (setq name symbol)
                               (setq position
                                     (get-text-property 1 'org-imenu-marker
                                                        symbol))))

                             (unless (or (null position) (null name))
                               (add-to-list 'symbol-names name)
                               (add-to-list 'name-and-pos (cons name position))))))))
      (addsymbols imenu--index-alist))
    ;; If there are matching symbols at point, put them at the beginning
    ;; of `symbol-names'.
    (let ((symbol-at-point (thing-at-point 'symbol)))
      (when symbol-at-point
        (let* ((regexp (concat (regexp-quote symbol-at-point) \"$\"))
               (matching-symbols (delq nil
                                       (mapcar
                                        (lambda (symbol)
                                          (if (string-match regexp symbol)
                                              symbol))
                                        symbol-names))))
          (when matching-symbols
            (sort matching-symbols (lambda (a b) (> (length a) (length b))))
            (mapc (lambda (symbol)
                    (setq symbol-names (cons symbol
                                             (delete symbol symbol-names))))
                  matching-symbols)))))
    (let* ((selected-symbol (ido-completing-read \"Symbol? \" (reverse symbol-names)))
           (position (cdr (assoc selected-symbol name-and-pos))))
      (goto-char (if (overlayp position) (overlay-start position) position)))))

(defun textmate-goto-file ()
  \"Uses your completing read to quickly jump to a file in a project.\"
  (interactive)
  (let ((root (textmate-project-root)))
    (when (null root) 
      (error \"Can't find any .git directory\"))
    (find-file 
     (concat 
      (expand-file-name root) \"/\"
      (textmate-completing-read 
       \"Find file: \"
       (mapcar
	(lambda (e)
	  (replace-regexp-in-string (textmate-project-root) \"\" e))
	(textmate-cached-project-files (textmate-project-root))))))))

(defun textmate-clear-cache ()
  \"Clears the project root and project files cache. Use after adding files.\"
  (interactive)
  (setq *textmate-project-root* nil)
  (setq *textmate-project-files* nil)
  (message \"textmate-mode cache cleared.\"))

;;; Utilities

(defun textmate-find-project-files (root)
  \"Finds all files in a given project.\"
  (split-string
    (shell-command-to-string
     (concat
      (textmate-string-replace \"%s\" root textmate-find-files-command)
      \"  | grep -vE '\"
      *textmate-gf-exclude*
      \"' | sed 's:\"
      *textmate-project-root*
      \"/::'\")) \"\\n\" t))

(defun textmate-project-files (root)
  (sort
    (textmate-find-project-files root)
    '(lambda (a b) (< (length a) (length b)))))

;; http://snipplr.com/view/18683/stringreplace/
(defun textmate-string-replace (this withthat in)
  \"replace THIS with WITHTHAT' in the string IN\"
  (with-temp-buffer
    (insert in)
    (goto-char (point-min))
    (while (search-forward this nil t)
      (replace-match withthat nil t))
    (buffer-substring (point-min) (point-max))))

(defun textmate-cached-project-files (&optional root)
  \"Finds and caches all files in a given project.\"
  (cond
   ((null textmate-use-file-cache) (textmate-project-files root))
   ((equal (textmate-project-root) (car *textmate-project-files*))
    (cdr *textmate-project-files*))
   (t (cdr (setq *textmate-project-files*
                 `(,root . ,(textmate-project-files root)))))))

(defun textmate-project-root ()
  \"Returns the current project root.\"
  (when (or
         (null *textmate-project-root*)
         (not (string-match *textmate-project-root* default-directory)))
    (let ((root (textmate-find-project-root)))
      (if root
          (setq *textmate-project-root* (expand-file-name (concat root \"/\")))
        (setq *textmate-project-root* nil))))
  *textmate-project-root*)

(defun root-match(root names)
  (member (car names) (directory-files root)))

(defun root-matches(root names)
  (if (root-match root names)
      (root-match root names)
      (if (eq (length (cdr names)) 0)
          'nil
          (root-matches root (cdr names))
          )))

(defun textmate-find-project-root (&optional root)
  \"Determines the current project root by recursively searching for an indicator.\"
  (when (null root) (setq root default-directory))
  (cond
   ((root-matches root *textmate-project-roots*)
    (expand-file-name root))
   ((equal (expand-file-name root) \"/\") nil)
   (t (textmate-find-project-root (concat (file-name-as-directory root) \"..\")))))

(defun textmate-shift-right (&optional arg)
  \"Shift the line or region to the ARG places to the right.

A place is considered `tab-width' character columns.\"
  (interactive)
  (let ((deactivate-mark nil)
        (beg (or (and mark-active (region-beginning))
                 (line-beginning-position)))
        (end (or (and mark-active (region-end)) (line-end-position))))
    (indent-rigidly beg end (* (or arg 1) tab-width))))

(defun textmate-shift-left (&optional arg)
  \"Shift the line or region to the ARG places to the left.\"
  (interactive)
  (textmate-shift-right (* -1 (or arg 1))))

(defun textmate-go-column (direction arg)
  \"Move down a column\"
  (let* ((orig-line (line-number-at-pos))
         (orig-column (current-column))
         (prefix-match-regex (if (<= orig-column 1) \"^\" (format \"^.\\\\{%d\\\\}\" (- orig-column 1))) )
         (word-regex (concat \"[\" textmate-word-characters \"]\"))
         (non-word-regex (concat \"[^\\n\" textmate-word-characters \"]\"))
         (matching-regex (concat prefix-match-regex
                                 (cond ((looking-back \"^\") \"\")
                                       ((looking-back word-regex) word-regex)
                                       (t non-word-regex))
                                 (cond ((looking-at \"$\") \"$\")
                                       ((looking-at word-regex) word-regex)
                                       (t non-word-regex))))
         (do-search (if (= direction 1)
                        (lambda () (search-forward-regexp matching-regex nil t))
                      (lambda () (search-backward-regexp matching-regex nil t)))))
    (forward-char direction)
    (funcall do-search)
    (backward-char direction)
    (move-to-column orig-column)
    (if (= (line-number-at-pos) (+ orig-line direction)) ;; did you only move one line?
        (progn
          (while (= (line-number-at-pos) (+ orig-line direction))
            (setq orig-line (line-number-at-pos))
            (funcall do-search)
            (move-to-column orig-column))
          (goto-line orig-line)
          (move-to-column orig-column)))))

(defun textmate-column-up (arg)
  \"Move up a column, textmate-style\"
  (interactive \"P\")
  (textmate-go-column -1 arg))

(defun textmate-column-down (arg)
  \"Move down a column, textmate-style\"
  (interactive \"P\")
  (textmate-go-column 1 arg))

(defun textmate-column-up-with-select (arg)
  \"Move up a column, selecting with shift-select\"
  (interactive \"P\")
  (unless mark-active (progn (push-mark (point))
                             (setq mark-active t transient-mark-mode t)))
  (let (deactivate-mark) (textmate-column-up arg)))

(defun textmate-column-down-with-select (arg)
  \"Move down a column, selecting with shift-select\"
  (interactive \"P\")
  (unless mark-active (progn (push-mark (point))
                             (setq mark-active t transient-mark-mode t)))
  (let (deactivate-mark) (textmate-column-down arg)))

;;;###autoload
(define-minor-mode textmate-mode \"TextMate Emulation Minor Mode\"
  :lighter \" mate\" :global t :keymap *textmate-mode-map*
  (add-hook 'ido-setup-hook 'textmate-ido-fix)
  (textmate-define-comment-line)
  ; activate preferred completion library
  (dolist (mode *textmate-completing-minor-mode-alist*)
    (if (eq (car mode) textmate-completing-library)
        (funcall (cadr mode) t)
      (when (fboundp
             (cadr (assoc (car mode) *textmate-completing-function-alist*)))
        (funcall (cadr mode) -1)))))

(provide 'textmate)
;;; textmate.el ends here
"]) (textile-mode . [(20120721 1258) nil "Textile markup editing major mode" single ";;; Commentary:

;; 


;; Known bugs or limitations:

;; - if several {style}, [lang] or (class) attributes are given for
;;   the same block, only the first one of each type will be
;;   highlighted.
;;
;; - some complex imbrications of inline markup and attributes are
;;   not well-rendered (for example, *strong *{something}notstrong*)
;;

					

"]) (tex-smart-umlauts . [(20131210 2346) nil "Smart umlaut conversion for TeX." single ";;; Commentary:
;;
;; Transform LaTeX encoded non-ASCII characters to and from their
;; visible (utf-8) representations when visiting a file and preserve
;; their original encoding when saving the buffer.
;;
;; TeX/LaTeX documents often contain special characters that are not
;; available in ASCII code in a special command form. For example, the
;; German umlaut \303\244 can be written in LaTeX as {\\\"a}, \\\"{a}, \\\"a or
;; even \"a. Of course, nowadays one should use an encoding like utf-8,
;; which contain a natural representation of these characters.
;; Unfortunately, old documents may still use the old encodings or
;; non-ASCII encodings are not allowed for other reasons. Emacs can
;; already automatically encode and decode such characters from and to
;; their LaTeX representation using the `iso-cvt' package: during
;; editing the document the characters are utf-8 encoded but when
;; saved to disk the characters are transformed to a LaTeX
;; representation.
;;
;; Unfortunately, this an all-or-nothing approach: either all
;; characters are transformed or none. But when working on a document
;; with several authors this may be problematic. This may particularly
;; true if the document is stored in a revision control system. In
;; these cases each author may use its own editor, each editor may
;; have its own setting and encodes umlauts in a special preferred
;; way. Each time one author does a small change, *all* umlauts in the
;; whole document may get transformed. This may also lead to huge
;; diffs that consist of many hunks that only change the encoding of
;; some characters.
;;
;; The purpose of `tex-smart-umlauts' is to automatically encode and
;; decode umlauts from and to their tex representation, while
;; *preserving* the original encoding. In other words, when a LaTeX
;; file is visited, the original encoding of each character is saved
;; and the character is transformed to its visible (utf-8)
;; representation. When the document is saved again, each character
;; that has been present when the document has been loaded is saved in
;; its *original* encoding. Only newly inserted non-ASCII characters
;; get a new encoding that depends on the user-options of
;; `tex-smart-umlauts'. This way, a small change in a document will
;; not reencode all non-ASCII charactes as `iso-cvt' would do and only
;; the modified parts of the document will really be modified on disk.
;;
"]) (test-simple . [(20130710 826) nil "Simple Unit Test Framework for Emacs Lisp" single ";;; Commentary:

;; test-simple.el is:
;;
;; * Simple. No need for
;;   - context macros,
;;   - enclosing specifications,
;;   - required test tags.
;;
;;   But if you want, you still can enclose tests in a local scope,
;;   add customized assert failure messages, or add summary messages
;;   before a group of tests.
;;
;; * Accomodates both interactive and non-interactive use.
;;    - For interactive use, one can use `eval-last-sexp', `eval-region',
;;      and `eval-buffer'. One can `edebug' the code.
;;    -  For non-interactive use, run:
;;        emacs --batch --no-site-file --no-splash --load <test-lisp-code.el>
;;
;; Here is an example using gcd.el found in the examples directory.
;;
;;   (require 'test-simple)
;;   (test-simple-start) ;; Zero counters and start the stop watch.
;;
;;   ;; Use (load-file) below because we want to always to read the source.
;;   ;; Also, we don't want no stinking compiled source.
;;   (assert-t (load-file \"./gcd.el\")
;; 	      \"Can't load gcd.el - are you in the right directory?\" )
;;
;;   (note \"degenerate cases\")
;;
;;   (assert-nil (gcd 5 -1) \"using positive numbers\")
;;   (assert-nil (gcd -4 1) \"using positive numbers, switched order\")
;;   (assert-raises error (gcd \"a\" 32)
;;                  \"Passing a string value should raise an error\")
;;
;;   (note \"GCD computations\")
;;   (assert-equal 1 (gcd 3 5) \"gcd(3,5)\")
;;   (assert-equal 8 (gcd 8 32) \"gcd(8,32)\")
;;   (end-tests) ;; Stop the clock and print a summary
;;
;; Edit (with Emacs of course) test-gcd.el and run M-x eval-current-buffer
;;
;; You should see in buffer *test-simple*:
;;
;;    test-gcd.el
;;    ......
;;    0 failures in 6 assertions (0.002646 seconds)
;;
;; Now let us try from a command line:
;;
;;    $ emacs --batch --no-site-file --no-splash --load test-gcd.el
;;    Loading /src/external-vcs/emacs-test-simple/example/gcd.el (source)...
;;    *scratch*
;;    ......
;;    0 failures in 6 assertions (0.000723 seconds)

"]) (test-case-mode . [(20131223 556) nil "unit test front-end" single ";;; Commentary:
;;
;; `test-case-mode' is a minor mode for running unit tests.  It is extensible
;; and currently comes with back-ends for JUnit, CxxTest, CppUnit, Python,
;; Ruby, Scala (with SimpleSpec), and Clojure.
;;
;; The back-ends probably need some more path options to work correctly.
;; Please let me know, as I'm not an expert on all of them.
;;
;; To install test-case-mode, add the following to your .emacs:
;; (add-to-list 'load-path \"/path/to/test-case-mode\")
;; (autoload 'test-case-mode \"test-case-mode\" nil t)
;; (autoload 'enable-test-case-mode-if-test \"test-case-mode\")
;; (autoload 'test-case-find-all-tests \"test-case-mode\" nil t)
;; (autoload 'test-case-compilation-finish-run-all \"test-case-mode\")
;;
;; To enable it automatically when opening test files:
;; (add-hook 'find-file-hook 'enable-test-case-mode-if-test)
;;
;; If you want to run all visited tests after a compilation, add:
;; (add-hook 'compilation-finish-functions
;;           'test-case-compilation-finish-run-all)
;;
;; If failures have occurred, they are highlighted in the buffer and/or its
;; fringes (if fringe-helper.el is installed).
;;
;; fringe-helper is available at:
;; http://nschum.de/src/emacs/fringe-helper/
;;
;; Limitations:
;; C++ tests can be compiled in a multitude of ways.  test-case-mode currently
;; only supports running them if each test class comes in its own file.
;;
"]) (tern-auto-complete . [(20130809 229) ((tern (0 0 1)) (auto-complete (1 4)) (emacs (24))) "Tern Completion by auto-complete.el" single ";;; Commentary:

;; Display completion items with its type and document.

;; If `tern-ac-on-dot' is non-nil (default), typing '.(dot)' invokes auto-complete with tern.
;; Calling the command `tern-ac-complete', you can invoke auto-complete manually.
;; This program does not provide an ac-source for arbitrary timing yet.

;;; Installation:

;; Add following lines below the tern setup code.

;; (eval-after-load 'tern
;;    '(progn
;;       (require 'tern-auto-complete)
;;       (tern-ac-setup)))

"]) (tern . [(20130828 716) ((json (1 2)) (emacs (24))) "Tern-powered JavaScript integration" single nil]) (telepathy . [(20131209 458) nil "Access Telepathy from Emacs" single nil]) (tea-time . [(20120331 120) nil "Simple timer package, useful to make perfect tea." single ";;; Commentary:

;; This package allows you to set up time intervals and after this
;; inteval is elapsed Emacs will notify you with sound and notification.
;; It could be useful if you like make a tea or if you would like to
;; be more productive by setting time limit for a task.
;;
;; If available, notification would be done with great tool
;; mumbles ( http://www.mumbles-project.org )
;; If not, then simply use standard emacs message.

;;; Requirements:

;; tested on Emacs 23

;;; Installation:

;; Add below code in your .emacs
;;
;; (require 'tea-time)
;; (setq tea-time-sound \"path-to-sound-file\")
;;
;; If you're running on Mac OS X you'll need to add this
;; (setq tea-time-sound-command \"afplay %s\")
;;
;; You can customize the sound command variable to any player you want
;; where %s will be the sound file configured at tea-time-sound setting


"]) (tdd-status-mode-line . [(20131123 916) nil "TDD status on the mode-line" single nil]) (tc . [(20131028 149) nil "a Japanese input method with T-Code on Emacs" tar nil]) (tangotango-theme . [(20130827 321) nil "Tango Palette color theme for Emacs 24." single nil]) (tango-2-theme . [(20120312 1325) nil "Tango 2 color theme for GNU Emacs 24" single nil]) (tagedit . [(20130816 510) ((s (1 3 1)) (dash (1 0 3))) "Some paredit-like features for html-mode" single ";;; Commentary:

;; A collection of paredit-like functions for editing in html-mode.

;; ## Installation
;;
;; I highly recommended installing tagedit through elpa.
;;
;; It's available on [marmalade](http://marmalade-repo.org/) and
;; [melpa](http://melpa.milkbox.net/):
;;
;;     M-x package-install tagedit
;;
;; You can also install the dependencies on your own, and just dump
;; tagedit in your path somewhere:
;;
;;  - <a href=\"https://github.com/magnars/s.el\">s.el</a>
;;  - <a href=\"https://github.com/magnars/dash.el\">dash.el</a>

;; ## Functions
;;
;; This is it at the moment:
;;
;;  - `tagedit-forward-slurp-tag` moves the next sibling into this tag.
;;  - `tagedit-forward-barf-tag` moves the last child out of this tag.
;;  - `tagedit-raise-tag` replaces the parent tag with this tag.
;;  - `tagedit-splice-tag` replaces the parent tag with its contents.
;;  - `tagedit-kill` kills to the end of the line, while preserving the structure.
;;
;; Not part of paredit:
;;
;;  - `tagedit-kill-attribute` kills the html attribute at point.

;; ## Setup
;;
;; If you want tagedit to bind to the same keys as paredit, there's this:
;;
;; ```cl
;; (eval-after-load \"sgml-mode\"
;;   '(progn
;;      (require 'tagedit)
;;      (tagedit-add-paredit-like-keybindings)
;;      (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
;; ```
;;
;; Or you can cherry-pick functions and bind them however you want:
;;
;; ```cl
;; (define-key tagedit-mode-map (kbd \"C-<right>\") 'tagedit-forward-slurp-tag)
;; (define-key tagedit-mode-map (kbd \"C-<left>\") 'tagedit-forward-barf-tag)
;; (define-key tagedit-mode-map (kbd \"M-r\") 'tagedit-raise-tag)
;; (define-key tagedit-mode-map (kbd \"M-s\") 'tagedit-splice-tag)
;; (define-key tagedit-mode-map (kbd \"C-k\") 'tagedit-kill)
;; (define-key tagedit-mode-map (kbd \"s-k\") 'tagedit-kill-attribute)
;; ```

;; ## Experimental tag editing
;;
;; I am currently working on automatically updating the closing tag when
;; you edit the starting tag. It is an experimental feature, since it is quite new
;; and I'm sure it breaks some things.
;;
;; This also inserts `<></>` when you type `<`, and expands it to
;; `<div></div>` as you type.
;;
;; You can turn on experimental features using:
;;
;; ```cl
;; (tagedit-add-experimental-features)
;; ```

;; ## Other conveniences
;;
;; It also expands one-line tags into multi-line tags for you, when you
;; press refill-paragraph. Like this:
;;
;; ```html
;; <p>My one very long text inside a tag that I'd like to refill</p>
;; ```
;;
;; then after `M-q`:
;;
;; ```html
;; <p>
;;   My one very long text inside a tag that
;;   I'd like to refill
;; </p>
;; ```
;;
;; You can disable this behavior by setting
;; `tagedit-expand-one-line-tags` to nil.

"]) (tabulated-list . [(20120406 1351) nil "generic major mode for tabulated lists." single ";;; Commentary:

;; This package is a backport of a native functionality of GNU Emacs 24.

;; This file defines `tabulated-list-mode', a generic major mode for displaying
;; lists of tabulated data, intended for other major modes to inherit from.  It
;; provides several utility routines, e.g. for pretty-printing lines of
;; tabulated data to fit into the appropriate columns.

;; For usage information, see the documentation of `tabulated-list-mode'.

;; This package originated from Tom Tromey's Package Menu mode, extended and
;; generalized to be used by other modes.

"]) (tabbar-ruler . [(20130701 2153) ((tabbar (2 0 1))) "Pretty tabbar, autohide, use both tabbar/ruler" tar ";;; Commentary:
;; 
;; * Introduction
;; Tabbar ruler is an emacs package that allows both the tabbar and the
;; ruler to be used together.  In addition it allows auto-hiding of the
;; menu-bar and tool-bar.
;; 
;; 
;; Tabbar appearance based on reverse engineering Aquaemacs code and
;; changing to my preferences, and Emacs Wiki.
;; 
;; Tabbar/Ruler integration is new. Tabbar should be active on mouse
;; move.  Ruler should be active on self-insert commands.
;; 
;; Also allows auto-hiding of toolbar and menu.
;; 
;; To use this, put the library in your load path and use
;; 
;; 
;;   (setq tabbar-ruler-global-tabbar t) ; If you want tabbar
;;   (setq tabbar-ruler-global-ruler t) ; if you want a global ruler
;;   (setq tabbar-ruler-popup-menu t) ; If you want a popup menu.
;;   (setq tabbar-ruler-popup-toolbar t) ; If you want a popup toolbar
;;   (setq tabbar-ruler-popup-scrollbar t) ; If you want to only show the
;;                                         ; scroll bar when your mouse is moving.
;;   (require 'tabbar-ruler)
;;   
;; 
;; 
;; 
;; * Changing how tabbar groups files/buffers
;; The default behavior for tabbar-ruler is to group the tabs by frame.
;; You can change this back to the old-behavior by:
;; 
;;   (tabbar-ruler-group-buffer-groups)
;; 
;; or by issuing the following code:
;; 
;; 
;;   (setq tabbar-buffer-groups-function 'tabbar-buffer-groups)
;; 
;; 
;; In addition, you can also group by projectile project easily by:
;; 
;; 
;;   (tabbar-ruler-group-by-projectile-project)
;; 
;; * Adding key-bindings to tabbar-ruler
;; You can add key-bindings to change the current tab.  The easiest way
;; to add the bindings is to add a key like:
;; 
;; 
;;   (global-set-key (kbd \"C-c t\") 'tabbar-ruler-move)
;; 
;; 
;; After that, all you would need to press is Control+c t and then the
;; arrow keys will allow you to change the buffer quite easily.  To exit
;; the buffer movement you can press enter or space.
;; 
;; * Known issues
;; the left arrow is text instead of an image.
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (tabbar . [(20131106 1524) nil "No description available." tar nil]) (systemtap-mode . [(20121209 1510) nil "A mode for SystemTap" single ";;; Commentary:

;; This code is based on the original systemtap-mode.el written by
;; Tomoki Sekiyama.  It can be found at
;; http://coderepos.org/share/browser/lang/elisp/systemtap-mode/systemtap-mode.el?format=txt

;; TODO:
;;   - indent embedded-C %{ ... %} correctly
;;   - add parameter for indentation
;;   - ...

"]) (syslog-mode . [(20131020 1702) ((hide-lines (20130623))) "Major-mode for viewing log files" single ";;; Commentary:
;;
"]) (syntactic-sugar . [(20131106 706) nil "Effect-free forms such as if/then/else" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'syntactic-sugar)
;;
;;     (if t
;;         (then (message \"true\"))
;;       (else (message \"false\")))
;;
;;     (unwind-protect
;;         (protected
;;           (error \"Error\"))
;;       (unwind
;;         (message \"cleanup\")))
;;
;; Explanation
;;
;; This library offers absolutely no functionality!  The following
;; macros are provided as synonyms for `progn':
;;
;;     `then'
;;     `else'
;;     `protected'
;;     `unwind'
;;
;; These macros can be used to clarify `if' or `unwind-protect' forms.
;;
;; Note that as synonyms for `progn', these forms have no useful
;; effects, and no additional syntax check is done, so nothing
;; prevents you from writing obfuscatory expressions such as
;;
;;     (if t (else 1) (then 2))      ; same as (if t (progn 1) (progn 2))
;;
;; or idiotic expressions such as
;;
;;     (if t
;;         (protected 1)
;;       (unwind 2))
;;
;; So, think of these macros as glorified comments.  And realize that
;; if you are tempted to use them, if in fact you have even read the
;; documentation to this point, you are hopelessly impure at heart.
;;
;; To use syntactic-sugar, place the syntactic-sugar.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'syntactic-sugar)
;;
;; See Also
;;
;;     M-x customize-group RET syntactic-sugar RET
;;
;; Notes
;;
;; When this library is loaded, the provided forms are registered as
;; keywords in font-lock.  This may be disabled via customize.
;;
;; The included macros are intentionally not autoloaded, because they
;; are outside the package namespace.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes
;;     GNU Emacs version 21.x and lower : unknown
;;
;; Bugs
;;
;; TODO
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (synonyms . [(20131227 159) nil "Look up synonyms for a word or phrase in a thesaurus." single ";;; Commentary:
;;
;;  Look up synonyms for a word or phrase in a thesaurus.
;;
;;
;;  Getting Started
;;  ---------------
;;
;;  To use library Synonyms, you will need the Moby Thesaurus II file,
;;  `mthesaur.txt', available here:
;;
;;    ftp://ibiblio.org/pub/docs/books/gutenberg/etext02/mthes10.zip
;;
;;  Put this in your initialization file (~/.emacs):
;;
;;    ;; The file names are absolute, not relative, locations
;;    ;;     - e.g. /foobar/mthesaur.txt.cache, not mthesaur.txt.cache
;;    (setq synonyms-file        <name & location of mthesaur.txt>)
;;    (setq synonyms-cache-file  <name & location of your cache file>)
;;    (require 'synonyms)
;;
;;  As an alternative to the first two lines, you can use Customize to
;;  set `synonyms-file' and `synonyms-cache-file' persistently.  The
;;  second of these files is created by this library, to serve as a
;;  synonym cache for completion.
;;
;;  The main command is `synonyms'.  It prompts you for a word or
;;  phrase to look up in the thesaurus.  The synonyms found are then
;;  displayed in buffer *Synonyms*.  For example, `M-x synonyms RET
;;  democracy' displays synonyms for `democracy'.
;;
;;  If you do not define `synonyms-file' and `synonyms-cache-file'
;;  prior to using command `synonyms', that command will prompt you to
;;  define them.  If you want to use the same values during subsequent
;;  Emacs sessions, then you should use `M-x customize-option' to save
;;  those newly defined values.
;;
;;
;;  Some Definitions
;;  ----------------
;;
;;  The thesaurus is divided into \"entries\", which are like glossary
;;  entries: each entry is followed by associated words and phrases,
;;  which, for lack of a better word, I refer to as \"synonyms\".  For
;;  example, `democracy' is an entry, and it is followed by its
;;  synonyms.  Some synonyms are not also entries.  For example,
;;  `patriarchy' is in the thesaurus as a synonym but not as an entry.
;;
;;  Note: What I call \"synonyms\" here are not necessarily synonyms, in
;;  the sense of having the same or even similar meanings.  They are
;;  simply terms collected together with the same thesaurus entry
;;  because they are related in some way - the grouping is what
;;  defines their relation.
;;
;;  In Moby Thesaurus II, the meanings of synonyms in the same group
;;  do have something in common, but this might be simply the fact
;;  that they are terms of a similar kind.  For example, the
;;  \"synonyms\" following the `democracy' thesaurus entry are words
;;  such as `dictatorship' and `autocracy'.  These are different forms
;;  of the same general thing: government - they are certainly not
;;  synonymous with each other or with the entry `democracy'.
;;
;;
;;  Searching the Thesaurus
;;  -----------------------
;;
;;  The default input value for command `synonyms' is the word under
;;  the cursor.  Alternatively, if a region is active and you are in
;;  Transient Mark mode (recommended), then it is the text in the
;;  region (selection).
;;
;;  Your input is actually treated as a regular expression (regexp),
;;  so you can also input patterns like `for.*ion', which will match
;;  thesaurus entries `formation', `formulation', `fornication',
;;  `fortification', and `forward motion'.  Note that the last of
;;  these is a phrase rather than a single word.
;;
;;  Using a regexp as input is a powerful way to search, but be aware
;;  that it can be costly in CPU time and computer memory if the
;;  regexp is not appropriate.  The regexp `.*' will, for example,
;;  likely use up available memory before being able to return the
;;  entire thesaurus (it's very large).  You can always use `C-g' to
;;  interrupt a thesaurus search if you mistakenly use an inefficient
;;  regexp.
;;
;;
;;  Using a Prefix Argument To Do More
;;  ----------------------------------
;;
;;  You can use a prefix argument to modify searching and the
;;  presentation of search results, as follows:
;;
;;    `C-u'     - Search for additional synonyms, in two senses:
;;
;;                1) Return also synonyms that are matched partially
;;                   by the input.
;;
;;                2) Search the entire thesaurus for input matches,
;;                   even if the input matches a thesaurus entry.
;;
;;    `M--'     - Append the search results to any previous search
;;                results, in buffer *Synonyms*.  (Normally, the new
;;                results replace any previous results.)
;;
;;    `C-u C-u' - `C-u' plus `M--': Search more and append results.
;;
;;  If you find yourself often using a particular prefix argument (for
;;  example, to append results), then you might want to instead change
;;  the default behavior to reflect this preference.  Options
;;  `synonyms-match-more-flag' and `synonyms-append-result-flag'
;;  correspond to using `C-u' and `M--', respectively.  In fact, a
;;  prefix argument simply toggles the value of the corresponding
;;  option for the duration of the command.  So, for example, if
;;  `synonyms-append-result-flag' is t and you use `M--', then results
;;  will not be appended.
;;
;;  When partially matching input (`C-u', sense #1), complete synonyms
;;  are matched against your input.  This means that you generally
;;  need not add a preceding or trailing `.*' to try to match a
;;  complete synonym.  For example, input `format' will match the
;;  complete synonyms `conformation', `efformation', `format',
;;  `formation', `formative', `formational', `information',
;;  `informative', `informational', `malformation', `deformation',
;;  `reformation', `transformation', `reformatory', and so on - there
;;  is no need to input `.*format.*' to match the same synonyms.
;;
;;  To better understand the meaning of #2 above for `C-u' (to
;;  continue the search even if your input matches an entry), try, for
;;  example, `C-u M-x synonyms RET widespread'.  You'll see not only
;;  the main synonyms listed for `widespread' as an entry, but also
;;  lots of different meanings of `widespread', judging by the entries
;;  for which it is listed as a synonym:
;;
;;    `accepted', `ample', `broad', `broadcast', `capacious',
;;    `catholic', `commodious', `commonness', `conventional',
;;    `currency', `current', `customary', `deep', `deltoid',
;;    `diffuse', `discrete', `dispersed', `disseminated',
;;    `dissipated', `distributed', `epidemic', `established',
;;    `everyday', `expansive', `extended', `extensive', `familiar',
;;    `fan shaped', `far flung', `far reaching', `flaring', `full',
;;    `general', `indiscriminate', `infinite', `large scale',
;;    `liberal', `normal', `normality', `open', `ordinary',
;;    `outstretched', `pervasive', `popular', `prescribed',
;;    `prescriptive', `prevailing', `prevalence', `prevalent',
;;    `public', `rampant', `received', `regnant', `regular',
;;    `regulation', `reign', `rife', `roomy', `ruling', `run',
;;    `scattered', `set', spacious`', `sparse', `splay', `sporadic',
;;    `sprawling', `spread', `standard', `stock', `straggling',
;;    `stretched out', `sweeping', `time-honored', `traditional',
;;    `universal', `usual', `vast', `voluminous', `wholesale', `wide
;;    open', `wide', and `wonted'.
;;
;;  These are just the entries! Each of these is of course followed by
;;  its own synonyms - perhaps 100 or 300, including `widespread'.
;;
;;  This list of entries is not the same list as the synonyms for
;;  entry `widespread'.  There are words and phrases here that are not
;;  in the latter list, and vice versa.  For example, the former (but
;;  not the latter) list includes `full'; the latter (but not the
;;  former) list includes `wide-reaching'.
;;
;;  The latter are the words most closely related to `widespread'.
;;  The list above are the other thesaurus entries (corresponding to
;;  main categories) to which `widespread' is most closely related.
;;  Looking at all of the synonym groups in which `widespread' appears
;;  can tell you additional information about its meanings - and it
;;  can provide additional synonyms for `widespread'.
;;
;;
;;  Using Completion with Synonyms
;;  ------------------------------
;;
;;  You can complete words and phrases in the minibuffer, as input to
;;  command `synonyms'.  You can use library Synonyms together with
;;  library `Icicles to complete a partial word in a text buffer into a
;;  word or phrase in the thesaurus.  If you use both libraries then
;;  load Icicles after Synonyms.  For more information on Icicles, see
;;  `http://www.emacswiki.org/Icicles'.
;;
;;  ** Minibuffer Input Completion **
;;
;;  You can enter any text to match against thesaurus synonyms.  When
;;  you are prompted by command `synonyms' to enter this text, you can
;;  also use input completion to complete to a thesaurus synonym.
;;  That is, even though you can enter any text (including a regexp),
;;  completion will only complete to synonyms in the thesaurus.
;;
;;  If you load library Icicles, then a more powerful version of
;;  command `synonyms' is used.  In particular, it lets you:
;;
;;   - Use `S-TAB' during completion to see the list of all synonyms
;;     (thesaurus terms) that match your minibuffer input so far.
;;
;;   - Use `next' (or repeated `S-TAB'), and `prior' (usually keys
;;     `Page Down' and `Page Up') during completion to cycle through
;;     the completion candidates (synonyms) that match your input.
;;
;;   - Use `C-next' and `C-prior' during completion to display the
;;     synonyms of the current completion candidate.
;;
;;  ** Completing Buffer Text Using the Thesaurus **
;;
;;  Icicles also provides two commands for using completion to insert
;;  thesaurus entries in a buffer:
;;
;;   - `icicle-complete-thesaurus-entry' completes a word in a text
;;     buffer to any word or phrase in the thesaurus.  I bind it to
;;     `C-c /'.
;;
;;   - `icicle-insert-thesaurus-entry' inserts thesaurus words and
;;     phrases in a text buffer.  It is a multi-command, which means
;;     that, within a single call to it, you can insert any number of
;;     thesaurus entries, in succession.  If you want to, you can
;;     write an entire book using a single call to
;;     `icicle-insert-thesaurus-entry'!
;;
;;
;;  Browsing the Thesaurus
;;  ----------------------
;;
;;  Besides using command `synonyms' to search for synonyms, you can
;;  use Synonyms to browse the thesaurus.  This is really just the
;;  same thing, but key and mouse bindings are provided in buffer
;;  *Synonyms*, so you need not input anything - just point and click
;;  the hyperlinks.  Buffer *Synonyms* is in Synonyms major mode,
;;  which provides a few additional features.
;;
;;  You can still choose to search for additional synonyms or append
;;  search results, without bothering with a prefix argument, by using
;;  modifier keys (Control, Meta) with a mouse click.
;;
;;  Another way of browsing is to revisit previous search-result
;;  pages.  You can do this using commands `synonyms-history-backward'
;;  and `synonyms-history-forward'.  In buffer *Synonyms*, these are
;;  bound to the following key sequences, for convenience:
;;
;;    `l', `p', `mouse-4' - `synonyms-history-backward'
;;    `r', `n', `mouse-5' - `synonyms-history-forward'
;;
;;  The `l' and `r' bindings correspond to the history bindings in
;;  Info.  The `p' and `n' bindings stand for \"previous\" and \"next\".
;;  The bindings to additional mouse buttons correspond to typical
;;  bindings for Back and Forward in Web browsers.
;;
;;  In addition to these bindings, the same history commands can be
;;  accessed by clicking links [Back] and [Forward] with `mouse-2'.
;;
;;  If you have previously used the append option (via, for example,
;;  `M-mouse2'), so that there are multiple search results in buffer
;;  *Synonyms*, then using a history command simply takes you to the
;;  preceding (for [Back]) or following (for [Forward]) result in the
;;  buffer, measured from the current cursor position.  Depending on
;;  the cursor position, this might be different from the previous or
;;  next search made previously.
;;
;;  This is for convenience, but it is also more efficient in the case
;;  of a regexp search that takes a long time.  Except for this
;;  special treatment of appended results, whenever you navigate the
;;  search-results history you are actually searching again for a
;;  synonym you sought previously.  The case of appended results is
;;  analogous to accessing a Web browser cache when navigating the
;;  history.
;;
;;  You can of course use modifier keys (Control, Meta) while you
;;  click links [Back] and [Forward], to impose their usual behavior:
;;  search for additional synonyms or append search results, or both.
;;
;;  Finally, some people prefer menus, so there is a Synonyms menu-bar
;;  menu when you are in Synonyms mode, complete with all of the
;;  functionalities described above.
;;
;;  For more information on the browsing possibilities in buffer
;;  *Synonyms*, use `?' in Synonyms mode.
;;
;;
;;  Dictionary Definitions, Antonyms, etc.
;;  --------------------------------------
;;
;;  Synonyms works with a large but simple database of groups of words
;;  and phrases that are synonyms of each other.  This database does
;;  not provide definitions of words or phrases; it simply groups
;;  them.  Command `synonym-definition' (aka `dictionary-definition')
;;  lets you look up a word or phrase (or a regexp) using one or more
;;  dictionaries on the Web.  That is usually the best source for this
;;  kind of information, but you obviously need an Internet connection
;;  to use this command.
;;
;;  Options (variables) `synonyms-dictionary-url' and
;;  `synonyms-dictionary-alternate-url' are URLs you can set to point
;;  to the dictionaries of your choice.  The default value of
;;  `synonyms-dictionary-alternate-url' looks up the search term in
;;  multiple dictionaries, and it lets you use wildcards.  Use `C-h v
;;  synonyms-dictionary-alternate-url' for more information.  The
;;  default value of `synonyms-dictionary-url' usually provides a
;;  quicker answer.  Both of these URLs also give you access to
;;  additional information about the search term (antonyms, etymology,
;;  even pronunciation).
;;
;;  In buffer *Synonyms*, you can simply hit `d' followed by `RET' or
;;  `mouse-2' to look up a term that is in the buffer.  Just as for
;;  looking up a synonym by clicking `mouse-2', if you select text
;;  (region), then that text is looked up.
;;
;;
;;  A Cache File of Synonyms
;;  ------------------------
;;
;;  The very first time you use Synonyms, a large list of synonyms
;;  will be compiled and written to a cache file.  This is slow - it
;;  takes 2-3 minutes - but it is only a one-time cost.  From then on,
;;  whenever you first use Synonyms during an Emacs session, the cache
;;  file will be read (quickly), to create the list of synonyms that
;;  are used for minibuffer completion.
;;
;;
;;  Using Other Thesauri, Dictionaries, and so on - CSV data
;;  --------------------------------------------------------
;;
;;  There is nothing in library Synonyms that ties it to the Moby
;;  Thesaurus II thesaurus.  All of its functionality will work with
;;  any file of comma-separated values.  Each line of such a file is
;;  interpreted as a synonym group, as understood here, and the first
;;  word or phrase on each line is interpreted as a thesaurus entry,
;;  as understood here.  This means only that search results are
;;  organized into sections with entry headers.
;;
;;  If, for example, you had a CSV file of personal contacts, where
;;  the first term in each line was a last name or a company name,
;;  then you could use library Synonyms to query it, producing the
;;  same kind of output as for the thesaurus.
;;
;;  One thing to keep in mind if you try to use library Synonyms with
;;  a different CSV file is that there are several different CSV-file
;;  syntaxes.  The one that Synonyms is built to use is a simple one,
;;  with no quote marks around entries and no embedded quote marks
;;  within entries.
;;
;;  Similarly, there is nothing here that limits the functionality to
;;  English.  If you had a thesaurus in another language, it should
;;  work as well.
;;
;;  Currently, Synonyms works with a single raw synonyms file
;;  (thesaurus) and a corresponding single cache file (for
;;  completion).  However, it would be easy to extend the
;;  functionality to use multiple thesauri or, in general, multiple
;;  CSV files.  Suggestions of requirements (e.g. ways to select a
;;  thesaurus for particular passages of text) are welcome.
 
;;
;;
;;  Things Defined Here
;;  -------------------
;;
;;  Faces defined here -
;;
;;    `synonyms-heading', `synonyms-search-text',
;;    `synonyms-mouse-face'.
;;
;;
;;  User options (variables) defined here -
;;
;;    `synonyms-append-result-flag', `synonyms-cache-file',
;;    `synonyms-file', `synonyms-fill-column',
;;    `synonyms-match-more-flag', `synonyms-mode-hook',
;;    `synonyms-use-cygwin-flag'.
;;
;;  Commands defined here -
;;
;;    `dictionary-definition', `synonyms', `synonyms-append-result',
;;    `synonyms-append-result-no-read', `synonyms-definition',
;;    `synonyms-definition-mouse', `synonyms-definition-no-read',
;;    `synonyms-ensure-synonyms-read-from-cache',
;;    `synonyms-history-backward', `synonyms-history-forward',
;;    `synonyms-make-obarray', `synonyms-match-more',
;;    `synonyms-match-more-no-read',
;;    `synonyms-match-more+append-result',
;;    `synonyms-match-more+append-result-no-read', `synonyms-mode',
;;    `synonyms-mouse', `synonyms-mouse-append-result',
;;    `synonyms-mouse-match-more',
;;    `synonyms-mouse-match-more+append-result', `synonyms-no-read',
;;    `synonyms-write-synonyms-to-cache'.
;;
;;  Non-interactive functions defined here -
;;
;;    `synonyms-action', `synonyms-add-history-links',
;;    `synonyms-default-regexp', `synonyms-define-cache-file',
;;    `synonyms-define-synonyms-file', `synonyms-format-entries',
;;    `synonyms-format-entry', `synonyms-format-finish',
;;    `synonyms-format-synonyms',
;;    `synonyms-hack-backslashes-if-cygwin', `synonyms-lookup',
;;    `synonyms-nearest-word', `synonyms-file-readable-p',
;;    `synonyms-search-entries', `synonyms-search-synonyms',
;;    `synonyms-show-synonyms', `synonyms-file-writable-p'.
;;
;;  Internal variables defined here -
;;
;;    `synonyms-history', `synonyms-history-forward',
;;    `synonyms-list-for-obarray', `synonyms-mode-map',
;;    `synonyms-obarray', `synonyms-search-text'.
;;
;;  Key bindings made here - see `synonyms-mode'.  All key bindings
;;  are local to Synonyms mode; no global bindings are made here.
 
;;
;;
;;  Acknowledgements
;;  ----------------
;;
;;  The basic functionality provided here was derived from library
;;  `mthesaur.el', by Tad Ashlock <taashlo@cyberdude.com>.  That
;;  library, in turn, was inspired by library `thesaurus.el', by Ray
;;  Nickson.  Thanks also to those who sent helpful bug reports.
;;
;;
;;  Note on MS Windows Emacs 20 and Cygwin `grep'
;;  ---------------------------------------------
;;
;;  There is apparently a bug in the Emacs (at least versions 20-22) C
;;  code that implements function `call-process' on MS Windows.  When
;;  using native Windows Emacs with Cygwin commands, such as `grep',
;;  the C code removes a level of backslashes in some cases, so string
;;  arguments supplied to `call-process' need to have twice as many
;;  backslashes as they should need in those cases.  It is for this
;;  reason that option `synonyms-use-cygwin-flag' is supplied here.
;;  When that option is non-nil, backslashes in regexps are hacked to
;;  do the right thing.  (In Emacs 20, this means doubling the
;;  backslashes; in Emacs 21-22, this means doubling them unless there
;;  are spaces in the search string.)
;;
;;
;;  Maybe To Do?
;;  ------------
;;
;;  1. It would be ideal to have not only synonym information but also
;;     definitions, antonyms, more general and more specific terms,
;;     filtering by part of speech (verb vs adjective etc.), and so
;;     on.  A good example of what I'd really like to have is provided
;;     by the free Windows program WordWeb (available here:
;;     http://wordweb.info/).  Combining that functionality with
;;     Icicles completion features would provide a great tool, IMO.
;;
;;     `synonyms-definition*' goes a long way toward providing this,
;;     and perhaps it is the best way to go, since there is so much
;;     more definitional info on the Web.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (sws-mode . [(20120802 1052) nil "(S)ignificant (W)hite(S)pace mode" single nil]) (switch-window . [(20130914 640) nil "A *visual* way to choose a window to switch to" single nil]) (swbuff-x . [(20130607 1014) ((swbuff (19991231 1800))) "Modifications to David Ponce's swbuff" single ";;; Commentary:

;; A few modifications to David Ponce's most excellent swbuff package
;;
;; (1) Fix the display timer so that it doesn't interfere with other
;; packages e.g speedbar and ispell.
;;
;; (2) Maintain buffer list ordering so that only the first and last
;; buffer in a sequence are effected.
;;
;; (3) Exclude buffers whose major mode matches
;; `swbuff-exclude-mode-regexp' from the buffer list but include any
;; buffers that match `swbuff-include-buffer-regexps' (a couterpoint
;; to `swbuff-exclude-buffer-regexps'). Also If
;; `swbuff-this-frame-only' is non-nil exclude buffers displayed in
;; other visible frames.
;;
;; (4) New hook `swbuff-pre-switch-hook' for things you may want to do
;; before switching buffers.
;;
;; (5) New function `swbuff-kill-this-buffer' which useful for
;; selectively cleaning out your buffer list.
;;
;; (6) If `swbuff-start-with-current-centered' is non-nil buffer list
;; display starts with the current buffer roughly in the middle of the
;; display ordering.  This encourages the use of
;; `swbuff-previous-buffer' to get to buffers which would otherwise
;; appear at the end of the list.
;;
;; (7) New variables `swbuff-left' and `swbuff-right' as an
;; alternative to `swbuff-header', `swbuff-trailer' and
;; `swbuff-separator'.  This allows you to place brackets around the
;; buffer name.

;; (8) Display buffer name matching `swbuff-special-buffers-re' using
;; `swbuff-special-buffers-face'.

;; (9) Added variable `swbuff-modeline-format' to make the modeline of the
;; status window configurable (Thanks to Matthias Wedel).
;;

"]) (swbuff . [(20041012 718) nil "Quick switch between Emacs buffers." single ";;; Commentary:
;;
;; This package provides the commands `swbuff-switch-to-next-buffer'
;; and `swbuff-switch-to-previous-buffer' to respectively switch to
;; the next or previous buffer in the buffer list.
;;
;; The `swbuff-exclude-buffer-regexps' defines a list of regular
;; expressions for excluded buffers.  The default setting excludes
;; buffers whose name begin with a blank character.  To exclude all the
;; internal buffers (that is *scratch*, *Message*, etc...) you could
;; use the following regexps '(\"^ .*\" \"^\\\\*.*\\\\*\").
;;
;; Switching buffers pops-up a status window at the bottom of the
;; selected window.  The status window shows the list of switchable
;; buffers where the switched one is hilighted using
;; `swbuff-current-buffer-face'.  This window is automatically
;; discarded after any command is executed or after the delay
;; specified by `swbuff-clear-delay'.
;;
;; The bufferlist is sorted by how recently the buffers were used.  If
;; you prefer a fixed (cyclic) order set `swbuff-recent-buffers-first'
;; to nil.
;;
;; When the status window disappears because of the clear-delay you
;; still stay in switching mode.  The timeout is only a visual
;; thing.  If you want it to have the same effect as using the buffer,
;; set `swbuff-clear-delay-ends-switching' to t.
;;
;; The leftmost item in the status window is the active buffer before
;; switching started.  If you want the buffer /after/ switching started
;; there, set `swbuff-display-original-buffer-first' to nil.
;;
;; To install and use, put this file on your Emacs-Lisp load path and
;; add the following into your ~/.emacs startup file:
;;
;; (require 'swbuff)
;;

"]) (svg-mode-line-themes . [(20130922 1230) ((xmlgen (0 4))) "SVG-based themes for mode-line" tar ";;; Commentary:

;; The project is hosted at https://github.com/sabof/svg-mode-line-themes
;; The latest version, and all the relevant information can be found there.

"]) (surround . [(20130927 737) nil "emulate surround.vim from Vim" single ";;; Commentary:

;; This package emulates surround.vim by Tim Pope.
;; The functionality is wrapped into a minor mode. To enable
;; it globally, add the following lines to ~/.emacs:
;;
;;     (require 'surround)
;;     (global-surround-mode 1)
;;
;; Alternatively, you can enable surround-mode along a major mode
;; by adding `turn-on-surround-mode' to the mode hook.
;;
;; This package uses Evil as its vi layer. It is available from:
;;
;;     http://gitorious.org/evil

"]) (supergenpass . [(20130328 2248) nil "SuperGenPass for Emacs" single ";;; Commentary:
;;
;; Wanted Supergenpass available in Emacs :P
;; Based heavily off the Ruby implementation by rstacruz
;; https://github.com/rstacruz/sgpass.git
;;

;; Many thanks to #emacs on Freenode for assistance.

"]) (suomalainen-kalenteri . [(20130414 635) nil "Finnish holidays for Emacs calendar." single ";;; Commentary:

;; *English*
;;
;; Finnish holidays for Emacs calendar.
;;
;; License: This program is placed in the public domain.
;;
;; Installation: For example, add the following command to your Emacs
;; initialization file:
;;
;;     (eval-after-load 'calendar
;;       '(load \"~/path/suomalainen-kalenteri.el\" t t))
;;
;;
;; *Finnish*
;;
;; Suomalaiset merkkip\303\244iv\303\244t Emacsin kalenteriin.
;;
;; Lisenssi: T\303\244m\303\244 ohjelma on yleist\303\244 omaisuutta.
;;
;; Asennus: Lis\303\244\303\244 Emacsin k\303\244ynnistystiedostoon esimerkiksi
;; seuraavanlainen komento:
;;
;;     (eval-after-load 'calendar
;;       '(load \"~/polku/suomalainen-kalenteri.el\" t t))

"]) (sunny-day-theme . [(20131203 1250) nil "Emacs24 theme with a light background." single nil]) (summarye . [(20130328 1027) nil "list up matched strings from a buffer, and display them in summary buffer" single ";;; Commentary:

;; Usage:
;; 1. At first set autoload function in your .emacs like this:
;;    (autoload 'se/make-summary-buffer \"summarye\" nil t)
;;    (autoload 'soccur \"summarye\" nil t)
;; 2. [Optional] bind se/make-summary-buffer to your favorite key
;; sequence(or menu)
;;    like the following:
;;    (define-key help-map \"M\" 'se/make-summary-buffer)
;;    NOTE: You can use summarye from menu (Tools->Make summary) or
;;    M-x se/make-summary-buffer 
;; 3. Invoke it. You will get the summary buffer of current buffer. You
;;    will use it easily, I think.
;; 4. If you want to specify the item pattern, set the value to buffer-local
;;    variable se/item-delimiter-regexp like the following examples. The
;;    value must be either a regular expression string or a list of a list
;;    of a tag string and a regexp string. See examples.
;; 5. And if you want to specify the displayed string in summary buffer,
;;    assign a function to buffer-local variable
;;    se/item-name-constructor-function.

;; Coding memo:
;; * While cluster is an internal structure which index starts from
;;   zero, item means objects user can view like a displayed line or
;;   the corresponding text. Thus every commands do not have cluster
;;   in their names.
;; * In this program, term `face' is used. But it means not face but overlay.
"]) (sudo-ext . [(20130130 2151) nil "sudo support" single ";;; Commentary:
;;
;; `sudo' support in Emacs.
;; Currently it has two features.
;;
;; * `sudoedit' command opens files as root using sudoedit program.
;;   This command needs emacsserver or gnuserv.
;;   Try M-x server-start or M-x gnuserv-start first.
;;   Be sure to you can run `sudoedit FILE' in shell.
;;   
;; * `sudo' support in shell execution in Emacs.
;;   In executing sudo shell command, password prompt is appeared if needed.
;;   * M-x compile
;;   * M-x grep
;;   * M-!
;;   * M-|
;;   * M-&
;;   * M-x executable-interpret

"]) (sudden-death . [(20121218 549) nil "Totsuzen-no-Shi" single ";;; Commentary:

;; Enclose the active region with a fancy fence.
;; cf. https://github.com/aquarla/sudden_death

;; To install, save this on your load path and add the following to
;; your .emacs file:
;;
;; (require 'sudden-death)

;; To use, activate region and type M-x sudden-death.

"]) (subshell-proc . [(20130122 1322) nil "Functions for working with comints" single nil]) (sublimity . [(20131111 2311) nil "smooth-scrolling and minimap, like sublime editor" tar ";;; Commentary:

;; Require this script and some of \"sublimity-scroll\" \"sublimity-map\".
;;
;;   (require 'sublimity)
;;   (require 'sublimity-scroll)

;;   (require 'sublimity-map)
;;
;; then call command \"M-x sublimity-mode\".

;; If you want to enable sublimity everywhere, call function
;; sublimity-global-mode.
;;
;;   (sublimity-global-mode)

;; For more informations, see \"Readme\".

"]) (sublime-themes . [(20140104 315) nil "A collection of themes based on Sublime Text" tar ";;; Commentary:

"]) (subatomic256-theme . [(20130620 1910) nil "Fork of subatomic-theme for terminals." single nil]) (subatomic-theme . [(20131011 1048) nil "Nice looking emacs 24 theme" single nil]) (stylus-mode . [(20120802 1052) ((sws-mode (0))) "Major mode for editing .jade files" single nil]) (stupid-indent-mode . [(20130816 1354) nil "Plain stupid indentation minor mode" single ";;; Commentary:

;; Dumb indentation mode is appropriate for editing buffers that Emacs
;; does not fully understand syntactically, such as HTML/PHP
;; (typically involving multiple languages with different indentation
;; rules in the same buffer).  The default indentation level is 2
;; (customize `stupid-indent-level').
;;
;; Key bindings:
;;
;; TAB       -- indent current line by the value of `stupid-indent-level'
;; S-TAB     -- outdent current line
;; C-c TAB   -- indent region
;; C-c S-TAB -- outdent region
;; RET       -- newline and indent
;; C-c C-TAB -- indent according to mode

"]) (stumpwm-mode . [(20111113 431) nil "special lisp mode for evaluating code into running stumpwm" single ";;; Commentary:

;; load this file, set stumpwm-shell-program to point to stumpish and
;; run M-x stumpwm-mode in your stumpwm lisp files. Now, you can
;; easily eval code into a running stumpwm using the regular bindings.

"]) (stripe-buffer . [(20131010 1526) ((cl-lib (1 0))) "Use a different background for even and odd lines" single ";;; Commentary:

;; Use different background colors for even and odd lines.  With the
;; help of library `hl-line' yet another color can be used for the
;; current line.

;; The project is hosted at https://github.com/sabof/stripe-buffer

"]) (strings . [(20131227 158) nil "Miscellaneous string functions." single ";;; Commentary:
;;
;;        Miscellaneous string functions.
;;
;;  You may want to put this in your `~/.emacs' file, to erase the
;;  minibuffer when it is inactive and `minibuffer-empty-p':
;;
;;   (require 'strings)
;;   (add-hook 'pre-command-hook 'erase-nonempty-inactive-minibuffer))
;;
;;
;;  Macros defined here:
;;
;;    `empty-name-p', `non-empty-name-p'.
;;
;;  Functions defined here:
;;
;;    `absdiff', `buffer-alist', `concat-w-faces',
;;    `current-d-m-y-string', `current-line-string',
;;    `display-in-minibuffer', `display-lines-containing',
;;    `echo-in-buffer', `empty-name-p', `erase-inactive-minibuffer',
;;    `erase-nonempty-inactive-minibuffer', `fill-string',
;;    `frame-alist', `insert-in-minibuffer', `minibuffer-empty-p',
;;    `non-empty-name-p', `ordinal-suffix', `pick-some-words',
;;    `read-any-variable', `read-number', `region-description',
;;    `set-minibuffer-empty-p', `string-w-face',
;;    `symbol-name-before-point', `word-before-point'.
;;
;;  Variables defined here:
;;
;;    `minibuffer-empty-p'.
;;
;;
;;  ***** NOTE: These EMACS PRIMITIVES have been REDEFINED HERE:
;;
;;  `read-buffer'   - Uses `completing-read'.
;;  `read-variable' - Uses `symbol-nearest-point' & `completing-read'
;;                    to get the default.
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (string-utils . [(20131106 706) ((list-utils (0 4 2))) "String-manipulation utilities" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'string-utils)
;;
;;     (string-utils-squeeze-filename (buffer-file-name (current-buffer)) 20)
;;
;;     (string-utils-stringify-anything (selected-frame))
;;
;;     (progn
;;       (message (string-utils-pad (buffer-name (current-buffer)) (window-width) 'right))
;;       (sit-for 1)
;;       (message (string-utils-pad (buffer-name (current-buffer)) (window-width) 'center))
;;       (sit-for 1)
;;       (message (string-utils-pad (buffer-name (current-buffer)) (window-width) 'left))
;;       (sit-for 1))
;;
;; Explanation
;;
;; String-utils is a collection of functions for string manipulation.
;; This library has no user-level interface; it is only useful
;; for programming in Emacs Lisp.
;;
;; The following functions are provided:
;;
;;     `string-utils-stringify-anything'
;;     `string-utils-has-darkspace-p'
;;     `string-utils-has-whitespace-p'
;;     `string-utils-trim-whitespace'
;;     `string-utils-compress-whitespace'
;;     `string-utils-string-repeat'
;;     `string-utils-escape-double-quotes'
;;     `string-utils-quotemeta'
;;     `string-utils-pad'
;;     `string-utils-pad-list'
;;     `string-utils-propertize-fillin'
;;     `string-utils-plural-ending'
;;     `string-utils-squeeze-filename'
;;     `string-utils-squeeze-url'
;;     `string-utils-split'
;;     `string-utils-truncate-to'
;;
;; To use string-utils, place the string-utils.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'string-utils)
;;
;; Notes
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     Uses if present: list-utils.el, obarray-fns.el
;;
;; Bugs
;;
;;     (defun string-utils-test-func nil \"doc\" (keymap 95))
;;     (string-utils-stringify-anything (symbol-function 'string-utils-test-func))
;;
;;     Some objects such as window-configuration are completely
;;     opaque and won't be stringified usefully.
;;
;; TODO
;;
;;     Stringification of autoload data type
;;         http://www.gnu.org/software/emacs/manual/html_node/elisp/Autoload-Type.html
;;
;;     Maybe args should not be included when stringifying lambdas and
;;     macros.
;;
;;     In string-utils-propertize-fillin, strip properties which are
;;     set to nil at start, which will create more contiguity in the
;;     result.  See this example, where the first two characters have
;;     the same properties
;;
;;         (let ((text \"text\"))
;;           (add-text-properties 0 1 '(face nil) text)
;;           (add-text-properties 2 3 '(face error) text)
;;           (string-utils-propertize-fillin text 'face 'highlight)
;;           text)
;;
;;      String-utils-squeeze-url needs improvement, sometimes using
;;      two elisions where one would do.
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (string-inflection . [(20140111 731) nil "underscore -> UPCASE -> CamelCase conversion of names" single ";;; Commentary:

;; (require 'string-inflection)
;; (global-unset-key (kbd \"C-q\"))
;; (global-set-key (kbd \"C-q C-u\") 'string-inflection-cycle) ; Vz Editor-like key binding

"]) (string-edit . [(20130815 2115) ((dash (1 2 0))) "Avoid escape nightmares by editing string in separate buffer" single ";;; Commentary:

;; Avoid escape nightmares by editing string in separate buffer

"]) (strie . [(20140109 612) nil "A simple trie data structure implementation" single ";;; Commentary:

;; Tries are an efficient data structure for the storage of strings.
;; Addition, deletion, and query functions all have O(m) performance,
;; where m is the length of the string to be added/deleted/queried.
;;
;; They are a natural choice for completing partial strings according to some
;; dictionary.
;;
;; This implementation also supports key-value storage, which means that a trie
;; can act as a substitute for a dictionary / hash-table.
;;
;; See http://en.wikipedia.org/wiki/Trie for more details.

"]) (sticky . [(20101130 252) nil "Sticky key for capital letters" single ";;; Commentary:
;;
;; Input capital letters and some symbols with not shift key but sticky key.
;; See `use-sticky-key' docstring.
;; [EVAL IT] (describe-function 'use-sticky-key)

"]) (stem . [(20131102 409) nil "Routines for stemming" single ";;; Commentary:
;; This library is basing on thesis 'An algorithm for suffix stripping
;; (M.F.Porter)' that trim English word's suffix.
;;
;; \350\253\226\346\226\207\343\200\216An algorithm for suffix stripping (M.F.Porter)\343\200\217\343\201\253\350\250\230\350\277\260\343\201\225\343\202\214\343\201\246
;; \343\201\204\343\202\213\343\202\242\343\203\253\343\202\264\343\203\252\343\202\272\343\203\240\343\201\253\345\237\272\343\201\245\343\201\204\343\201\246\343\200\201\350\213\261\345\215\230\350\252\236\343\201\256\350\252\236\345\260\276\343\202\222\345\217\226\343\202\212\351\231\244\343\201\217\343\201\237\343\202\201\343\201\256\343\203\251\343\202\244\343\203\226\343\203\251\343\203\252\343\200\202
;; \345\210\251\347\224\250\345\217\212\343\201\263\345\206\215\351\205\215\345\270\203\343\201\256\351\232\233\343\201\257\343\200\201GNU \344\270\200\350\210\254\345\205\254\347\224\250\350\250\261\350\253\276\346\233\270\343\201\256\351\201\251\345\275\223\343\201\252\343\203\220\343\203\274\343\202\270\343\203\247\343\203\263\343\201\253\343\201\227\343\201\237\343\201\214\343\201\243
;; \343\201\246\344\270\213\343\201\225\343\201\204\343\200\202

;; \344\270\200\346\254\241\351\205\215\345\270\203\345\205\203
;;    http://www-nagao.kuee.kyoto-u.ac.jp/member/tsuchiya/elisp/xdic.html

"]) (starter-kit-ruby . [(20120202 1132) ((inf-ruby (2 2 3)) (starter-kit (2 0 1))) "Saner defaults and goodies for Ruby" single ";;; Commentary:

;; \"Emacs outshines all other editing software in approximately the
;; same way that the noonday sun does the stars. It is not just bigger
;; and brighter; it simply makes everything else vanish.\"
;; -Neal Stephenson, \"In the Beginning was the Command Line\"

;; This file contains tweaks specific to Ruby.

"]) (starter-kit-perl . [(20120202 1132) nil "Some helpful Perl code" single nil]) (starter-kit-lisp . [(20120504 1225) ((starter-kit (2 0 2)) (elisp-slime-nav (0 1))) "Saner defaults and goodies for lisp languages" single ";;; Commentary:

;; \"Emacs outshines all other editing software in approximately the
;; same way that the noonday sun does the stars. It is not just bigger
;; and brighter; it simply makes everything else vanish.\"
;; -Neal Stephenson, \"In the Beginning was the Command Line\"

;; This file contains tweaks specific to Lisp languages.

"]) (starter-kit-js . [(20111009 2054) ((starter-kit (2 0 1))) "Saner defaults and goodies for Javascript" single ";;; Commentary:

;; \"Emacs outshines all other editing software in approximately the
;; same way that the noonday sun does the stars. It is not just bigger
;; and brighter; it simply makes everything else vanish.\"
;; -Neal Stephenson, \"In the Beginning was the Command Line\"

;; This file contains tweaks specific to Javascript.

;; This file is in need of a maintainer.

"]) (starter-kit-eshell . [(20121001 1714) nil "Saner defaults and goodies: eshell tweaks" single ";;; Commentary:

;; \"Emacs outshines all other editing software in approximately the
;; same way that the noonday sun does the stars. It is not just bigger
;; and brighter; it simply makes everything else vanish.\"
;; -Neal Stephenson, \"In the Beginning was the Command Line\"

;; This file contains eshell tweaks.

"]) (starter-kit-bindings . [(20120101 1955) ((starter-kit (2 0 2))) "Saner defaults and goodies: bindings" single ";;; Commentary:

;; \"Emacs outshines all other editing software in approximately the
;; same way that the noonday sun does the stars. It is not just bigger
;; and brighter; it simply makes everything else vanish.\"
;; -Neal Stephenson, \"In the Beginning was the Command Line\"

;; This file just contains key bindings.

"]) (starter-kit . [(20130904 1547) ((paredit (22)) (idle-highlight-mode (1 1 1)) (find-file-in-project (3 0)) (smex (1 1 2)) (ido-ubiquitous (0 3)) (magit (0 8 1))) "Saner defaults and goodies." tar nil]) (stan-mode . [(20131007 2012) nil "Major mode for editing STAN files" tar ";;; Commentary:
;;
;; This is a major mode for the Stan modeling language for Bayesian
;; statistics. See http://mc-stan.org/.
;;
;; To load this library:
;;
;;   (require 'stan-mode)
;;
;; This mode currently supports syntax-highlighting, indentation (via
;; the cc-mode indentation engine), imenu, and compiler-mode regular
;; expressions.
;;
;; Yasnippet and flymake support for stan are provided in separate
;; libraries included with stan-mode.
;;
;; Yasnippet support is provided in stan-snippets.
;;
;;   (require 'stan-snippets)
;;
;; Flymake support is provided in flymake-stan.
;;
;;   (require 'flymake-stan)

"]) (ssh-config-mode . [(20120513 2233) nil "Mode for fontification of ~/.ssh/config" single ";;; Commentary:
;; * Fontifys the ssh config keywords.
;; * keys for skipping from host section to host section.
;; * Add the following to your startup file.
;;   (autoload 'ssh-config-mode \"ssh-config-mode\" t)
;;   (add-to-list 'auto-mode-alist '(\".ssh/config\\\\'\"  . ssh-config-mode))
;;   (add-to-list 'auto-mode-alist '(\"sshd?_config\\\\'\" . ssh-config-mode))
;;   (add-hook 'ssh-config-mode-hook 'turn-on-font-lock)

"]) (ssh . [(20120904 1342) nil "Support for remote logins using ssh." single ";;; Commentary:

;; Support for remote logins using `ssh'.
;; This program is layered on top of shell.el; the code here only accounts
;; for the variations needed to handle a remote process, e.g. directory
;; tracking and the sending of some special characters.

;; If you wish for ssh mode to prompt you in the minibuffer for
;; passwords when a password prompt appears, just enter m-x send-invisible
;; and type in your line, or add `comint-watch-for-password-prompt' to
;; `comint-output-filter-functions'.

"]) (sr-speedbar . [(20131207 2049) nil "Same frame speedbar" single ";;; Commentary:
;;
;; The sr-speedbar.el was created just because I could not believe what I
;; read on http://www.emacswiki.org/cgi-bin/wiki/Speedbar.  They wrote there
;; that it is not possible to show the speedbar in the same frame.  But, as
;; we all know, ecb had this already.  So I started as some kind of joke :)
;; But when I found it useful and use it all the time.
;;
;; Now you type windows key with 's' (`s-s' in Emacs) will show the speedbar
;; in an extra window, same frame.  You can customize the initial width of the
;; speedbar window further down for console/DOS and X/Win/MacOS separately.
;;
;; Below are commands you can use:
;;
;; `sr-speedbar-open'                   Open `sr-speedbar' window.
;; `sr-speedbar-close'                  Close `sr-speedbar' window.
;; `sr-speedbar-toggle'                 Toggle `sr-speedbar' window.
;; `sr-speedbar-select-window'          Select `sr-speedbar' window.
;; `sr-speedbar-refresh-turn-on'        Turn on refresh speedbar content.
;; `sr-speedbar-refresh-turn-off'       Turn off refresh speedbar content.
;; `sr-speedbar-refresh-toggle'         Toggle refresh speedbar content.
;;
;; Enjoy! ;)
;;

;;; Installation:
;;
;; Copy sr-speedbar.el to your load-path and add to your ~/.emacs
;;
;;  (require 'sr-speedbar)
;;  (global-set-key (kbd \"s-s\") 'sr-speedbar-toggle)
;;
;; ... or any key binding you like.
;;

"]) (sqlite . [(20140106 2009) nil "use sqlite via elisp" single ";;; Commentary:
;;
;; For usage and explanations see http://www.emacswiki.org/emacs/SQLite-el.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (sql-indent . [(20090325 2254) nil "indentation of SQL statements" single ";;; Commentary:

;; Indent SQL statements.

;; As the indentation of SQL statements depends not only on the previous
;; line but also on the current line, empty lines cannot always be
;; indented correctly.

;; Usage note: Loading this file will make all SQL mode buffers created
;; from then on use `sql-indent-line' for indentation.  A possible way
;; to install sql-indent.el would be to add the following to your
;; .emacs:

;; (eval-after-load \"sql\"
;;   '(load-library \"sql-indent\"))

;; Thanks:
;; Arcady Genkin <antipode@thpoon.com>


"]) (sprintly-mode . [(20121005 2234) ((furl (0 0 2))) "Major mode for dealing with sprint.ly" single ";;; Commentary:

"]) (spotify . [(20130520 258) nil "Control the spotify application from emacs" single ";;; Commentary:

;; Play, pause, skip songs in the Spotify app from Emacs.
;;
;; (global-set-key (kbd \"s-<pause>\") #'spotify-playpause)
;; (global-set-key (kbd \"s-M-<pause>\") #'spotify-next)
;;
;; On a system supporting freedesktop.org's D-Bus you can enable song
;; notifications in the minibuffer.
;;
;; (spotify-enable-song-notifications)

"]) (splitter . [(20130705 50) nil "Manage window splits" single ";;; Commentary:
;;
;; Splitter lets you easily declare and apply sophisticated window
;; layouts, create grids of windows, and intelligently shrink a window
;; layout to create room for a new window.
;;
;; See https://github.com/chumpage/chumpy-windows for more
;; documentation, and to submit patches.
;;
"]) (sphinx-frontend . [(20131223 329) nil "Launch build process for rst documents via sphinx." single nil]) (speechd-el . [(20130828 1209) nil "Client to speech synthesizers and Braille displays." tar nil]) (sparql-mode . [(20131129 226) nil "Edit and interactively evaluate SPARQL queries." single ";;; Commentary:

;; Mode for editing and interactively evaluating SPARQL queries.

;; Usage:

;; Add to your Emacs config:

;;  (add-to-list 'load-path \"/path/to/sparql-mode-dir\")
;;  (autoload 'sparql-mode \"sparql-mode.el\"
;;   \"Major mode for editing SPARQL files\" t)
;;  (add-to-list 'auto-mode-alist '(\"\\\\.sparql$\" . sparql-mode))

;; If you want auto-complete support you can also add:

;;  (add-to-list 'ac-dictionary-files \"/path/to/sparql-mode-dir/sparql-mode\")
;;  (add-hook 'sparql-mode-hook 'auto-complete-mode)

"]) (sparkline . [(20130803 542) nil "Make sparkline images from a list of numbers" single ";;; Commentary:

;; This package provide a function to create a sparkline graph.
;; 
;; Sparkline graphs were introduced by Edward Tufte see
;; http://en.wikipedia.org/wiki/Sparkline
;; 
;; They are charts containing a single line without any labels or indication
;; of scale.
;;
;; They are meant to be used inline in text, without changing the line height and
;; provide a quick overview of the trend and pattern of the underlying data.
;;
;; Creating sparkline graphs is done for example by
;;
;;   (sparkline-make-sparkline 80 11 '(10 20 4 23.3 22.1 3.3 4.5 6.7))
;;
;; which creates in image which can be inserted in a buffer with the standard
;; image functions such as:
;;
;;   (insert-image   (sparkline-make-sparkline 80 11 '(10 20 4 23.3 22.1 3.3 4.5 6.7)))
;;
;;
"]) (spaces . [(20130610 49) nil "Create and switch between named window configurations." single ";;; Commentary:
;;
;; Spaces helps you manage complex window configurations by letting you
;; give them names and quickly switch between them. The core function
;; is sp-switch-space.
;;
;; See https://github.com/chumpage/chumpy-windows for more
;; documentation, and to submit patches.
;;
"]) (spacegray-theme . [(20131230 1127) ((emacs (24 1))) "A Hyperminimal UI Theme" single ";;; Commentary:

;; To use it, put the following in your Emacs configuration file:
;;
;;   (load-theme 'spacegray t)
;;
;; Requirements: Emacs 24.

"]) (sourcetalk . [(20130908 957) ((request (0 2 0))) "SourceTalk (http://sourcetalk.net) plugin for Emacs" single nil]) (soundcloud . [(20131210 1103) ((emms (20131016)) (json (1 2)) (deferred (0 3 1)) (string-utils (0 3 2))) "a SoundCloud client for Emacs" single ";;; Commentary:

;; This package provides a minimal interface to the SoundCloud API, allowing
;; the user to find tracks by a specified artist or an artist found through
;; search.  Tracks are played using EMMS, which must be configured to play
;; streams from URLs.  mplayer is recommended for this.

"]) (soothe-theme . [(20130805 0) ((emacs (24 1))) "a dark colorful theme for Emacs24." single nil]) (solarized-theme . [(20140110 1323) nil "The Solarized color theme, ported to Emacs." tar nil]) (soft-stone-theme . [(20140108 456) ((emacs (24))) "Emacs 24 theme with a light background." single nil]) (soft-morning-theme . [(20131211 1342) nil "Emacs24 theme with a light background." single nil]) (soft-charcoal-theme . [(20130924 1206) nil "Dark charcoal theme with soft colors" single nil]) (snippet . [(20130210 1515) nil "Insert snippets of text into a buffer" single ";;; Commentary:

;; A quick stab at providing a simple template facility like the one
;; present in TextMate (an OSX editor).  The general idea is that a
;; snippet of text (called a template) is inserted into a buffer
;; (perhaps triggered by an abbrev), and while the point is within the
;; snippet, a special keymap is active to permit the user to cycle the
;; point to any of the defined fields (placeholders) within the
;; template via `snippet-next-field' and `snippet-prev-field'.

;; For example, the following template might be a useful while editing
;; HTML:

;;   <a href=\"$$\">$$</a>

;; This template might be useful for python developers.  In this
;; example, reasonable defaults have been supplied:

;;   for $${element} in $${sequence}:
;;       match = $${regexp}.search($${element})

;; When a template is inserted into a buffer (could be triggered by an
;; abbrev expansion, or simply bound to some key), point is moved to
;; the first field denoted by the \"$$\" characters (configurable via
;; `snippet-field-identifier').  The optional default for a field is
;; specified by the \"{default}\" (the delimiters are configurable via
;; `snippet-field-default-beg-char' and `snippet-field-defaul-end-char'.

;; If present, the default will be inserted and highlighted.  The user
;; then has the option of accepting the default by simply tabbing over
;; to the next field (any other key bound to `snippet-next-field' in
;; `snippet-map' can be used).  Alternatively, the user can start
;; typing their own value for the field which will cause the default
;; to be immediately replaced with the user's own input.  If two or
;; more fields have the same default value, they are linked together
;; (changing one will change the other dynamically as you type).

;; `snippet-next-field' (bound to <tab> by default) moves the point to
;; the next field.  `snippet-prev-field' (bound to <S-tab> by default)
;; moves the point to the previous field.  When the snippet has been
;; completed, the user simply tabs past the last field which causes
;; the snippet to revert to plain text in a buffer.  The idea is that
;; snippets should get out of a user's way as soon as they have been
;; filled and completed.

;; After tabbing past all of the fields, point is moved to the end of
;; the snippet, unless the user has specified a place within the
;; template with the `snippet-exit-identifier' (\"$.\" by default).  For
;; example: 

;;   if ($${test} {
;;       $.
;;   }

;; Indentation can be controlled on a per line basis by including the
;; `snippet-indent' string within the template.  Most often one would
;; include this at the beginning of a line; however, there are times
;; when indentation is better performed in other parts of the line.
;; The following shows how to use the functionality:

;;   if ($${test}) {
;;   $>this line would be indented
;;   this line will be indented after being inserted$>
;;   }

"]) (smotitah . [(20131127 152) nil "Modular emacs configuration framework" tar nil]) (smooth-scrolling . [(20131219 2039) nil "Make emacs scroll smoothly" single ";;; Commentary:

;; Make emacs scroll smoothly, keeping the point away from the top and
;; bottom of the current buffer's window in order to keep lines of
;; context around the point visible as much as possible, whilst
;; avoiding sudden scroll jumps which are visually confusing.
;;
;; This is a nice alternative to all the native scroll-* custom
;; variables, which unfortunately cannot provide this functionality
;; perfectly.  `scroll-margin' comes closest, but has some bugs
;; (e.g. with handling of mouse clicks).  See
;;
;;   http://www.emacswiki.org/cgi-bin/wiki/SmoothScrolling
;;
;; for the gory details.
;;

"]) (smooth-scroll . [(20130321 2114) nil "Minor mode for smooth scrolling and in-place scrolling." single ";;; Commentary:
;;
;; Overview
;; ========
;;
;; This library provides minor mode `smooth-scroll-mode' which adds
;; smooth scrolling feature to Emacs.
;;
;;
;; INSTALLING
;; ==========
;; To install this library, save this file to a directory in your
;; `load-path' (you can view the current `load-path' using \"C-h v
;; load-path RET\" within Emacs), then add the following line to your
;; .emacs startup file:
;;
;;    (require 'smooth-scroll)
;;    (smooth-scroll-mode t)
;;
;;
;; USING
;; =====
;; To toggle smooth scrolling feature, just type:
;;
;;   `M-x smooth-scroll-mode RET'
;;
;; while smooth scrolling feature is enabled, the string \"SScr\" will
;; be displayed on mode line.
;;
;; Also check out the customization group
;;
;;   `M-x customize-group RET smooth-scroll RET'
;;
;;
;; Additional commands provided by `smooth-scroll.el'.
;; ===================================================
;;
;; This library provides commands that brings `in place scrolling'
;; feature, listed below:
;;
;;    `scroll-up-1'
;;    `scroll-down-1'
;;    `scroll-left-1'
;;    `scroll-right-1'
;;
;; Bind these commands to any key you like for your convenience.
;;
;;    Keymap example:
;;
;;      (global-set-key [(control  down)]  'scroll-up-1)
;;      (global-set-key [(control  up)]    'scroll-down-1)
;;      (global-set-key [(control  left)]  'scroll-right-1)
;;      (global-set-key [(control  right)] 'scroll-left-1)
;;
;;      NOTE: Keys described above won't work on non window-system.
;;
;;
;; KNOWN PROBLEMS
;; ==============
;; - The speed of smooth scrolling is very slow on `Carbon Emacs'
;;   and `Cocoa Emacs' on Mac OS X. If you want to use smooth scrolling
;;   feature comfortably on these Emacsen, set large number
;;   (e.g. 4, 6 or 8) to the variable `smooth-scroll/vscroll-step-size' 
;;   and `smooth-scroll/hscroll-step-size'.
;;
;; - `scroll-left-1' and `scroll-right-1' may not work properly
;;   when the `smooth-scroll-mode' is turned off, due to the behavior
;;   of original `scroll-left' and `scroll-right' functions.

"]) (smex . [(20140111 126) nil "M-x interface with Ido-style fuzzy matching." single ";;; Commentary:

;; Quick start:
;; run (smex-initialize)
;;
;; Bind the following commands:
;; smex, smex-major-mode-commands
;;
;; For a detailed introduction see:
;; http://github.com/nonsequitur/smex/blob/master/README.markdown

"]) (smarty-mode . [(20100703 458) nil "major mode for editing smarty templates" single ";;; Commentary:

;; Smarty-mode is for highlighting html templates written for the smarty
;; template engine (http://smarty.php.net).  This mode *does not* inherit
;; from html-mode since that mode seems like it might interfere with 
;; what template designers might be trying to do.  This mode makes an 
;; attempt to deliberately ignore html and highlight only smarty code.

;; Since this is my first go at writing a major mode, this is pretty basic,
;; and may very well contain bugs.

"]) (smartscan . [(20131230 739) nil "Jumps between other symbols found at point" single ";;; Commentary:

;; This code comes from my article \"Effective Editing I: Movement\"
;; http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/
;;
;; Smart Scan lets you jump between symbols in your buffer, based on
;; the initial symbol your point was on when you started the
;; search. Incremental calls will still respect the original search
;; query so you can move up or down in your buffer, quickly, to find
;; other matches without having to resort to `isearch' to find things
;; first. The main advantage over isearch is speed: Smart Scan will
;; guess the symbol point is on and immediately find other symbols
;; matching it, in an unintrusive way.

;; INSTALLATION

;; Install package
;; (package-install 'smartscan)
;;
;; Enable minor mode in a specific mode hook using
;; (smartscan-mode 1)
;; or globally using
;; (global-smartscan-mode 1)

;; HOW TO USE IT

;; Simply type `smartscan-symbol-go-forward' (or press M-n) to go
;; forward; or `smartscan-symbol-go-backward' (M-p) to go
;; back. Additionally, you can replace all symbols point is on by
;; invoking M-' (that's \"M-quote\")

;; CUSTOMIZATION
;; You can customize `smartscan-use-extended-syntax' to alter
;; (temporarily, when you search) the syntax table used by Smart Scan
;; to find matches in your buffer.

"]) (smartrep . [(20130316 1716) nil "Support sequential operation which omitted prefix keys." single ";;; Commentary:

;; Installation:
;;   Put the smartrep.el to your load-path.
;;   And add to .emacs: (require 'smartrep)

"]) (smartparens . [(20140110 701) ((cl-lib (0 3)) (dash (2 4 0))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar nil]) (smart-window . [(20130214 1142) nil "vim-like window controlling plugin" single ";;; Commentary:

;; This package improves Emacs window system with window moving
;; commands (not moving focus between windows) and window
;; splitting commands that takes addtional options to edit a file
;; or a buffer.

;; C-x w runs the command smart-window-move, which is an interactive
;;   function that move the current window to specified directions
;;   (left/right/above/Below).

;; C-x W runs the command smart-window-buffer-split, which is an
;;   interactive function that asks you to choose a buffer and creates
;;   a new splitted window with coresponding buffer.

;; C-x M-w runs the command smart-window-file-split, which is an
;;   interactive function that asks you to choose a file and creates
;;   a new splitted window with coresponding file.

;; C-x R runs the command smart-window-rotate, which is an interactive
;;   function that rotates the windows downwards and rightwards

;; M-x sw-above allows you to split a window above the current window
;;   with the buffer you chose.

;; M-x sw-below allows you to split a window below the current window
;;   with the buffer you chose.

;; M-x sw-left allows you to split a window left to the current window
;;   with the buffer you chose.

;; M-x sw-right allows you to split a window right to the current window
;;   with the buffer you chose.

;; C-x 2 is bounded to sw-below.
;; C-x 3 is bounded to sw-right.
;; To switch back to the default key bindings, use the following settings in .emacs
;;   (setq smart-window-remap-keys 0)

"]) (smart-tabs-mode . [(20140102 1125) nil "Intelligently indent with tabs, align with spaces!" single ";;; Commentary:

;; This package provide a semantic way of using tab characters in
;; source code: tabs for indentation, spaces for alignment.
;;
;; It is derived from <http://www.emacswiki.org/emacs/SmartTabs>
;; with modifications by the various authors listed above.
;;
;; Modification history is at <https://github.com/jcsalomon/smarttabs>.

;;; Installation:

;; The easiest and preferred way to install smart-tabs-mode is to use
;; the package available on MELPA.
;;
;; Manual installation:
;;
;; Save smart-tabs-mode.el to a a directory on your load-path
;; (e.g., ~/.emacs.d/elisp), then add the following to your .emacs file:
;;
;;  (autoload 'smart-tabs-mode \"smart-tabs-mode\"
;;    \"Intelligently indent with tabs, align with spaces!\")
;;  (autoload 'smart-tabs-mode-enable \"smart-tabs-mode\")
;;  (autoload 'smart-tabs-advice \"smart-tabs-mode\")
;;  (autoload 'smart-tabs-insinuate \"smart-tabs-mode\")
;;

;;; Enabling smart-tabs-mode within language modes:

;; As of version 1.0 of this package, the easiest and preferred way to
;; enable smart-tabs-mode is with the smart-tabs-insinuate function;
;; for example,
;;
;;  (smart-tabs-insinuate 'c 'c++ 'java 'javascript 'cperl 'python
;;                        'ruby 'nxml)
;;
;; will enable smart-tabs-mode with all supported language modes.
;;
;; (See below for instructions on adding additional language support.)
;;
;; The old method of manually enabling smart-tabs-mode is still
;; available, but is no longer recommended; smart-tabs-insinuate
;; wraps the functionality below in a convenient manner.
;;
;; For reference, the basic manual method looks like this:
;;
;;  (add-hook 'MODE-HOOK 'smart-tabs-mode-enable)
;;  (smart-tabs-advice INDENT-FUNC TAB-WIDTH-VAR)
;;
;; Note that it might be preferable to delay calling smart-tabs-advice
;; until after the major mode is loaded and evaluated, so the lines
;; above would be better written like this:
;;
;;  (add-hook 'MODE-HOOK (lambda ()
;;                         (smart-tabs-mode-enable)
;;                         (smart-tabs-advice INDENT-FUNC TAB-WIDTH-VAR)))
;;
;; Here are some specific examples for a few popular languages:
;;
;;  ;; C
;;  (add-hook 'c-mode-hook 'smart-tabs-mode-enable)
;;  (smart-tabs-advice c-indent-line c-basic-offset)
;;  (smart-tabs-advice c-indent-region c-basic-offset)
;;
;;  ;; JavaScript
;;  (add-hook 'js2-mode-hook 'smart-tabs-mode-enable)
;;  (smart-tabs-advice js2-indent-line js2-basic-offset)
;;
;;  ;; Perl (cperl-mode)
;;  (add-hook 'cperl-mode-hook 'smart-tabs-mode-enable)
;;  (smart-tabs-advice cperl-indent-line cperl-indent-level)
;;
;;  ;; Python
;;  (add-hook 'python-mode-hook 'smart-tabs-mode-enable)
;;  (smart-tabs-advice python-indent-line-1 python-indent)

;;; Adding language support

;; Language support can be added through the use of the macro
;; `smart-tabs-add-language-support'. Pass in the symbol you wish
;; to use to identify the language, the mode hook, and a list
;; of cons cells containing (indent-line-function . offset-variable).
;; For example, if C++ mode was not provided by default it could be
;; added as follows:
;;
;; (smart-tabs-add-language-support c++ c++-mode-hook
;;   ((c-indent-line . c-basic-offset)
;;    (c-indent-region . c-basic-offset)))
;;
;; NOTE: All language support must be added before the call to
;;      `smart-tabs-insinuate'.

"]) (smart-tab . [(20130317 1157) nil "Intelligent tab completion and indentation." single ";;; Commentary:

;; INSTALL
;;
;; To install, put this file along your Emacs-Lisp `load-path' and add
;; the following into your ~/.emacs startup file or set
;; `global-smart-tab-mode' to non-nil with customize:
;;
;;     (require 'smart-tab)
;;     (global-smart-tab-mode 1)
;;
;; DESCRIPTION
;;
;; Try to 'do the smart thing' when tab is pressed. `smart-tab'
;; attempts to expand the text before the point or indent the current
;; line or selection.
;;
;; See <http://www.emacswiki.org/cgi-bin/wiki/TabCompletion#toc2>. There are a
;; number of available customizations on that page.
;;
;; Features that might be required by this library:
;;
;;   `easy-mmmode'

"]) (smart-operator . [(20051013 1756) nil "Beautify the operators in codes" single ";;; Commentary:

;; This package can automatically add whitespaces before and after operators.
;; e.g, \"=\" becomes \" = \", \"+=\" becomes \" += \". which will be handy for
;; writing C-style sources.

;; To use, set all the operators smart at one time, then ajust some at
;; your wish e.g.
;;
;; (defun my-c-mode-common-hook()
;;   (smart-insert-operator-hook)
;;
;;   (local-unset-key (kbd \".\"))
;;   (local-unset-key (kbd \":\"))
;;   (local-set-key (kbd \"*\") 'c-electric-star))
;;
;; (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;; Besides `smart-insert-operator' when writing, there's also
;; `smart-beautify-operator' to beautify ugly codes, be careful there
;; are still some unresolved issues in `smart-beautify-operator'!

;; Put this file into your load-path and the following into your ~/.emacs:
;;   (require 'smart-operator)

"]) (smart-newline . [(20131207 1940) nil "Provide smart newline for one keybind." single ";;; Commentary:

;;
;; Provide smart newline(C-m) which includes open-line(C-o) and newline-and-indent(C-j)
;; See https://github.com/ainame/smart-newline.el
;;

"]) (smart-mode-line . [(20131217 1354) ((emacs (24 3)) (dash (2 2 0))) "A color coded smart mode-line." single ";;; Commentary:
;;
;; Smart Mode Line is a sexy mode-line for Emacs, that aims to be easy to
;; read from small to large monitors by using a *prefix feature* and
;; *smart truncation*.
;;
;; Installation
;; ===
;; Make sure \"smart-mode-line.el\" is in your load path, then place
;; this code in your .emacs file:
;;
;;     (setq sml/theme 'dark)
;;     (require 'smart-mode-line)
;;     (sml/setup)
;;
;; Features
;; ===
;; Its main features include:
;;
;;  1. **Color coded**:
;;     Highlights the most important information for you
;;     (buffer name, modified state, line number). Don't
;;     like the colors? See item 5)!
;;
;;  2. **Fixed width** (if you want):
;;     Lets you set a maxium width for the path name and mode names, and
;;     truncates them intelligently (truncates the directory, not the
;;     buffer name). Also let's you **right indent** strings in the
;;     mode-line (see `sml/mode-width').
;;
;;  3. **Directory as Prefixes**:
;;     Prefix feature saves a LOT of space. e.g. \"~/.emacs.d/\"
;;     is translated to \":ED:\" in the path (open a file inside
;;     this folder to see it in action). Long path names you
;;     are commmonly working on are displayed as short
;;     abbreviations. Set your own prefixes to make best use
;;     of it (by configuring `sml/replacer-regexp-list'). Mousing
;;     over the abbreviated path will show you the full
;;     path. See below for examples.
;;
;;  4. **Hide minor-modes**:__
;;     Hidden-modes feature saves even more space. Select
;;     which minor modes you don't want to see listed by
;;     customizing the `sml/hidden-modes' variable. This will
;;     filter out the modes you don't care about and unclutter
;;     the modes list (mousing over the modes list still shows
;;     the full list).
;;
;;  5. **Very easy to configure**:
;;     All colors and variables are customizable. You can change the
;;     whole theme with `sml/apply-theme', or just customize anything
;;     manually with `sml/customize' and `sml/customize-faces'. There are
;;     *DOZENS* of variables to customize your mode-line, just pop over
;;     there and have a look!
;;
;;  6. **Compatible with absolutely anything**:
;;     I'm serious. Versions 2.0 and above should be compatible with
;;     **any** other packages that display information in the mode-line
;;     (evil, nyan-mode, elscreen, display-battery-mode, etc). If you
;;     find *ANYTHING* that does not appear as it should, file a bug report
;;     and I'll get to it.
;;
;; Important Variables:
;; ===
;; All variables can be edited by running `sml/customize', and the
;; documentations are mostly self explanatory, I list here only the
;; most important ones.
;;
;;  1. `sml/shorten-directory' and `sml/shorten-modes'
;;   Choose what theme ou want to use for the mode-line colors. For now
;;   there are 3 different themes: `dark', `light', and `respectful'.
;;
;;  1. `sml/shorten-directory' and `sml/shorten-modes'
;;   Setting both of these to `t' garantees a fixed width mode-line
;;   (directory name and minor-modes list will be truncated to fit). To
;;   actually define the width, see below.
;;
;;  2. `sml/name-width' and `sml/mode-width'
;;   Customize these according to the width of your emacs frame. I set
;;   them to `40' and `full' respectively, and the mode-line fits
;;   perfectly when the frame is split in two even on my laptop's small
;;   17\" monitor. `full' means everything after the minor-modes will be
;;   right-indented.
;;
;;  3. `sml/replacer-regexp-list'
;;   This variable is a list of (REGEXP REPLACEMENT) that is used
;;   to parse the path. The replacements are applied
;;   sequentially. This allows you to greatly abbreviate the path
;;   that's shown in the mode-line. If this abbreviation is of
;;   the form \":SOMETHING:\", it is considered a prefix and get's
;;   a different color (you can change what's considered a prefix
;;   by customizing `sml/prefix-regexp').
;;   For example, if you do a lot of work on a folder called
;;   \"~/Dropbox/Projects/In-Development/\" almost half the
;;   mode-line would be occupied just by the folder name, which
;;   is much less important than the buffer name. But, you can't
;;   just hide the folder name, since editting a file in
;;   \"~/Dropbox/Projects/In-Development/Source\" is VERY different
;;   from editting a file in \"~/Dropbox/Projects/Source\". By
;;   setting up a prefix for your commonly used folders, you get
;;   all that information without wasting all that space. In this
;;   example you could set the replacement to \":ProjDev:\" or just
;;   \":InDev:\", so the path shown in the mode-line will be
;;   \":ProjDev:Source/\" (saves a lot of space without hiding
;;   information).
;;
;; Here go some more useful examples:
;;
;;     (add-to-list 'sml/replacer-regexp-list '(\"^~/Dropbox/Projects/In-Development/\" \":ProjDev:\"))
;;     (add-to-list 'sml/replacer-regexp-list '(\"^~/Documents/Work/\" \":Work:\"))
;;
;;     ;; Added in the right order, they even work sequentially:
;;     (add-to-list 'sml/replacer-regexp-list '(\"^:DB:Documents\" \":DDocs:\"))
;;     (add-to-list 'sml/replacer-regexp-list '(\"^~/Dropbox/\" \":DB:\"))
;;     (add-to-list 'sml/replacer-regexp-list '(\"^:Git:\\\\(.*\\\\)/src/main/java/\" \":G/\\\\1/SMJ:\"))
;;     (add-to-list 'sml/replacer-regexp-list '(\"^~/Git-Projects/\" \":Git:\"))

"]) (smart-forward . [(20130205 452) ((expand-region (0 8 0))) "Semantic navigatioin" single ";;; Commentary:

;; smart-forward gives you semantic navigation, building on
;; [expand-region](https://github.com/magnars/expand-region.el). It is most easily
;; explained by example:

;;    function test() {
;;      return \"semantic navigation\";
;;    }

;; With point at the start of the quotes,

;;  * `smart-forward` would go to the end of the quotes
;;  * `smart-backward` would go to the start of `return`, then to the `{`.
;;  * `smart-up` would go to the `{`
;;  * `smart-down` would go to the `}`

;; I use M-up/down/left/right arrows for this.

;; ## Installation

;; Start by installing
;; [expand-region](https://github.com/magnars/expand-region.el).

;;     (require 'smart-forward)
;;     (global-set-key (kbd \"M-<up>\") 'smart-up)
;;     (global-set-key (kbd \"M-<down>\") 'smart-down)
;;     (global-set-key (kbd \"M-<left>\") 'smart-backward)
;;     (global-set-key (kbd \"M-<right>\") 'smart-forward)

;; ## Contribute

;; smart-forward is a thin wrapper around expand-region. Most fixes to
;; smart-forward belong there.

"]) (smart-compile . [(20130917 347) nil "an interface to `compile'" single ";;; Commentary:

;; This package provides `smart-compile' function.
;; You can associates a particular file with a particular compile functions,
;; by editing `smart-compile-alist'.
;;
;; To use this package, add these lines to your .emacs file:
;;     (require 'smart-compile)
;;
;; Note that it requires emacs 21 or later.

"]) (slime-ritz . [(20130218 1537) nil "slime extensions for ritz" single nil]) (slime-annot . [(20131230 1908) ((slime (0))) "cl-annot support for SLIME" single ";;; Commentary:

"]) (slime . [(20140114 247) ((cl-lib (0 3))) "Superior Lisp Interaction Mode for Emacs" tar nil]) (slim-mode . [(20131202 2302) nil "Major mode for editing Slim files" single ";;; Commentary:

;; Because Slim's indentation schema is similar
;; to that of YAML and Python, many indentation-related
;; functions are similar to those in yaml-mode and python-mode.

;; To install, save this on your load path and add the following to
;; your .emacs file:

;;
;; (require 'slim-mode)

"]) (slideview . [(20130512 2142) nil "File slideshow" single ";;; Commentary:
;;

;; * Slideview settings for file.zip
;;
;; (slideview-modify-setting \"/path/to/file.zip\"
;;     :margin 30 :direction 'right)

;; * Space
;;   Move forward slideview

;; * Backspace
;;   Move backward slideview

;; * C-c C-i, C-c C-p (Work only in `image-mode')
;;   Concat current image with next/previous image.
;;   To indicate the viewing file direction, please use
;;   `slideview-modify-setting' or `slideview-add-matched-file'

"]) (slamhound . [(20131107 927) nil "Rip Clojure namespaces apart and rebuild them." single ";;; Commentary:

;; Destroys the ns form of a clojure-mode buffer and attempts to
;; rebuild it by searching the classpath. Requires an active
;; connection to either slime or nrepl.

;; M-x slamhound

;; If the namespace cannot be reconstructed for whatever reason, the
;; file will remain untouched and the reason will be shown.

"]) (skype . [(20131001 2118) nil "skype UI for emacs users.." tar ";;; Commentary:

;; Improving Skype GUI.
;; This is under development...
;; 
;; To use this program, locate this file to load-path directory,
;; and add the following code to your .emacs.
;; ------------------------------
;; (require 'skype)
;; (setq skype--my-user-handle \"your skype account\")
;; ------------------------------
;; If you have anything.el, bind `skype--anything-command' to key,
;; like (global-set-key (kbd \"M-9\") 'skype--anything-command).

"]) (skewer-mode . [(20131117 808) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar nil]) (skewer-less . [(20131015 622) ((skewer-mode (1 5 3))) "Skewer support for live LESS stylesheet updates" single ";;; Commentary:

;; Minor mode allowing LESS stylesheet manipulation via `skewer-mode'.

;; Note that this is intended for use in place of `skewer-css-mode',
;; which does not work with lesscss.

;; Enable `skewer-less-mode' in a \".less\" buffer. Save the buffer to
;; trigger an update, or hit \"C-c C-k\" just like in
;; `skewer-css-mode'.

;; Operates by invoking \"less.refresh()\" via skewer on demand, or
;; whenever the buffer is saved.

;; For this to work properly, the less javascript should be included
;; in the target web page, and less should be configured in
;; development mode, e.g.

;;    <script>
;;      var less = {env: \"development\"};
;;    </script>
;;    <link href=\"/stylesheets/application.less\" rel=\"stylesheet/less\">
;;    <script src=\"/path/to/less.js\" type=\"text/javascript\"></script>

;; I may consider providing an option to instead run \"lessc\" from
;; Emacs, then send the output via skewer-css. Let me know if you want this.

"]) (simplezen . [(20130421 300) ((s (1 4 0)) (dash (1 1 0))) "A simple subset of zencoding-mode for Emacs." single ";;; Commentary:

;; A simple subset of zencoding-mode for Emacs.

;; It completes these types:
;;
;;     div        --> <div></div>
;;     input      --> <input>
;;     .article   --> <div class=\"article\"></div>
;;     #logo      --> <div id=\"logo\"></div>
;;     ul.items   --> <ul class=\"items\"></ul>
;;     h2#tagline --> <h2 id=\"tagline\"></h2>
;;
;; So why not just use zencoding-mode for a much richer set of features?
;;
;; - this covers 98% of my usage of zencoding-mode
;; - this is simple enough to be predictable
;;
;; The original had a way of surprising me. Like when I just wanted to
;; add a quick <code></code> tag inside some prose, and it garbled the
;; entire sentence. That doesn't happen here, since this subset does not
;; look past whitespace.
;;
;; It also will not try to expand anything that is not a known html-tag,
;; reducing the number of errors when I just want to indent the line.
;; Yes, I have it on TAB.
;;
;; ## Setup
;;
;; You can bind `simplezen-expand` to any button of your choosing.
;;
;;     (require 'simplezen)
;;     (define-key html-mode-map (kbd \"C-c C-z\") 'simplezen-expand)
;;
;; If you want it bound to `tab` you can do this:
;;
;;     (define-key html-mode-map (kbd \"TAB\") 'simplezen-expand-or-indent-for-tab)
;;
;; Then it will still indent the line, except in cases where you're
;; looking back at a valid simplezen-expression (see above).
;;
;; To get it working with yasnippet aswell, I did this:
;;
;;     (defun --setup-simplezen ()
;;       (set (make-local-variable 'yas/fallback-behavior)
;;            '(apply simplezen-expand-or-indent-for-tab)))
;;
;;     (add-hook 'sgml-mode-hook '--setup-simplezen)
;;
;; Which will give yasnippet first priority, then simplezen gets it
;; chance, and if neither of those did anything it will indent the line.

"]) (simplenote . [(20130416 1502) nil "Interact with simple-note.appspot.com" single nil]) (simpleclip . [(20131106 706) nil "Simplified access to the system clipboard" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'simpleclip)
;;
;;     (simpleclip-mode 1)
;;
;;     ;; Press super-c to copy without affecting the kill ring.
;;     ;; Press super-x or super-v to cut or paste.
;;     ;; On OS X, use \342\214\230-c, \342\214\230-v, \342\214\230-x.
;;
;; Explanation
;;
;; By default, Emacs orchestrates a subtle interaction between the
;; internal kill ring and the external system clipboard.
;;
;; `simpleclip-mode' radically simplifies clipboard handling: the
;; system clipboard and the Emacs kill ring are made completely
;; independent, and never influence each other.
;;
;; `simpleclip-mode' also enables support for accessing the system
;; clipboard from a TTY where possible.  You will likely need to
;; set up custom keybindings if you want to take advantage of that.
;;
;; To use simpleclip, place the simpleclip.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'simpleclip)
;;     (simpleclip-mode 1)
;;
;; Keybindings
;;
;; Turning on `simpleclip-mode' activates clipboard-oriented key
;; bindings which are modifiable in customize.
;;
;; The default bindings override keystrokes which may be bound as
;; alternatives for kill/yank commands on your system.  \"Traditional\"
;; kill/yank keys (control-k, control-y, meta-y) are unaffected.
;;
;; The default keybindings are
;;
;;              super-c   simpleclip-copy
;;              super-x   simpleclip-cut
;;              super-v   simpleclip-paste
;;
;;     control-<insert>   simpleclip-copy
;;       shift-<delete>   simpleclip-cut
;;       shift-<insert>   simpleclip-paste
;;
;; The \"super\" keybindings are friendly for OS X.  The \"insert\"/\"delete\"
;; keybindings are better suited for Unix and MS Windows.
;;
;; See Also
;;
;;     M-x customize-group RET simpleclip RET
;;
;; Notes
;;
;; `x-select-enable-primary' is not affected by `simpleclip-mode'.
;;
;; Access to the system clipboard from a TTY is provided for those
;; cases where a literal paste is needed -- for example, where
;; autopair interferes with pasted input which is interpreted as
;; keystrokes.  If you are already happy with the copy/paste provided
;; by your terminal emulator, then you don't need to set up
;; simpleclip's TTY support.
;;
;; The following functions may be useful to call from Lisp:
;;
;;     `simpleclip-get-contents'
;;     `simpleclip-set-contents'
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     No external dependencies
;;
;;     Tested on OS X, X11, and MS Windows
;;
;; Bugs
;;
;;     Assumes that transient-mark-mode is on.
;;
;;     Menu items under Edit are rebound successfully, but the visible
;;     menu text does not change.  cua-mode does this correctly --
;;     because of remap?  because of emulation-mode-map-alists?
;;
;;     Key bindings do not work out-of-the-box with Aquamacs.
;;
;; TODO
;;
;;     TTY-friendly key bindings.
;;
;;     Keep kill-ring commands in Edit menu under modified names.
;;
;;     Support non-string data types.
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (simple-rtm . [(20140105 438) nil "Interactive Emacs mode for Remember The Milk" tar nil]) (simple-httpd . [(20130908 1304) nil "pure elisp HTTP server" single ";;; Commentary:

;; Use `httpd-start' to start the web server. Files are served from
;; `httpd-root' on port `httpd-port' using `httpd-ip-family' at host
;; `httpd-host'. While the root can be changed at any time, the server
;; needs to be restarted in order for a port change to take effect.

;; Everything is performed by servlets, including serving
;; files. Servlets are enabled by setting `httpd-servlets' to true
;; (default). Servlets are four-parameter functions that begin with
;; \"httpd/\" where the trailing component specifies the initial path on
;; the server. For example, the function `httpd/hello-world' will be
;; called for the request \"/hello-world\" and \"/hello-world/foo\".

;; The default servlet `httpd/' is the one that serves files from
;; `httpd-root' and can be turned off through redefinition or setting
;; `httpd-serve-files' to nil. It is used even when `httpd-servlets'
;; is nil.

;; The four parameters for a servlet are process, URI path, GET/POST
;; arguments (alist), and the full request object (header
;; alist). These are ordered by general importance so that some can be
;; ignored. Two macros are provided to help with writing servlets.

;;  * `with-httpd-buffer' -- Creates a temporary buffer that is
;;    automatically served to the client at the end of the body.
;;    Additionally, `standard-output' is set to this output
;;    buffer. For example, this servlet says hello,

;;     (defun httpd/hello-world (proc path &rest args)
;;       (with-httpd-buffer proc \"text/plain\"
;;         (insert \"hello, \" (file-name-nondirectory path))))

;; This servlet be viewed at http://localhost:8080/hello-world/Emacs

;; * `defservlet' -- Similar to the above macro but totally hides the
;;   process object from the servlet itself. The above servlet can be
;;   re-written identically like so,

;;     (defservlet hello-world text/plain (path)
;;       (insert \"hello, \" (file-name-nondirectory path)))

;; Note that `defservlet' automatically sets `httpd-current-proc'. See
;; below.

;; The \"function parameters\" part can be left empty or contain up to
;; three parameters corresponding to the final three servlet
;; parameters. For example, a servlet that shows *scratch* and doesn't
;; need parameters,

;;     (defservlet scratch text/plain ()
;;       (insert-buffer-substring (get-buffer-create \"*scratch*\")))

;; A higher level macro `defservlet*' wraps this lower-level
;; `defservlet' macro, automatically binding variables to components
;; of the request. For example, this binds parts of the request path
;; and one query parameter. Request components not provided by the
;; client are bound to nil.

;;     (defservlet* packages/:package/:version text/plain (verbose)
;;       (insert (format \"%s\\n%s\\n\" package version))
;;       (princ (get-description package version))
;;       (when verbose
;;         (insert (format \"%S\" (get-dependencies package version)))))

;; It would be accessed like so,

;;     http://example.com/packages/foobar/1.0?verbose=1

;; Some support functions are available for servlets for more
;; customized responses.

;;   * `httpd-send-file'   -- serve a file with proper caching
;;   * `httpd-redirect'    -- redirect the browser to another url
;;   * `httpd-send-header' -- send custom headers
;;   * `httpd-error'       -- report an error to the client
;;   * `httpd-log'         -- log an object to *httpd*

;; Some of these functions require a process object, which isn't
;; passed to `defservlet' servlets. Use t in place of the process
;; argument to use `httpd-current-proc' (like `standard-output').

;; If you just need to serve static from some location under some
;; route on the server, use `httpd-def-file-servlet'. It expands into
;; a `defservlet' that serves files.

"]) (simple-call-tree . [(20130330 940) nil "analyze source code based on font-lock text-properties" single ";;; Commentary:

;; This code analyses a buffer and uses text properties to find
;; function names (these have the face font-lock-function-name-face).
;; Therefore, it should work for any source language, as long as it is
;; fontified correctly.

"]) (simple-call-tree+ . [(20131009 1412) nil "Extensions to simple-call-tree" single ";;; Commentary: 
;;
;; Bitcoin donations gratefully accepted: 1AmWPmshr6i9gajMi1yqHgx7BYzpPKuzMz

;;;; Introduction:
;; This library is based on simple-call-tree.el by Alex Schroeder, but you
;; do not need that library to use it (this is a replacement).
;; It displays a buffer containing a call tree for functions in source
;; code files. You can easily & quickly navigate the call tree, displaying
;; the code in another window, and apply query-replace or other commands
;; to individual functions.

;; When the command `simple-call-tree-display-buffer' is executed
;; a call tree for the functions in the current buffer will be created.
;; The user is also prompted for other files to include in the call tree.
;; The call tree is displayed in a buffer called *Simple Call Tree*,
;; which has a dedicated menu in the menu-bar showing various commands
;; and their keybindings. Most of these commands are self explanatory
;; so try them out.

"]) (simple+ . [(20131227 154) ((strings (0))) "Extensions to standard library `simple.el'." single ";;; Commentary:
;;
;;    Extensions to standard library `simple.el'.
;;
;;  See also library `icicles.el' for extensions to `simple.el' that
;;  concern input completion in the minibuffer.  Those extensions used
;;  to be in this library, but they are used by `icicles.el', so they
;;  have been moved there.
;;
;;
;;  Variables defined here:
;;
;;    `set-any-variable-value-history'.
;;
;;  Functions defined here:
;;
;;    `read-var-and-value', `set-any-variable'.
;;
;;
;;  ***** NOTE: The following user options defined in `simple.el' have
;;              been REDEFINED HERE:
;;
;;    `next-error-highlight', `next-error-highlight-no-select'
;;                            - New value: `until-move' (persistent).
;;
;;
;;  ***** NOTE: The following functions defined in `simple.el' have
;;              been REDEFINED HERE:
;;
;;    `edit-and-eval-command' - Bug fix for < Emacs 21: Adds COMMAND
;;                              as a command to `command-history', not
;;                              as a string.
;;
;;    `kill-new'              - Bug fix for < Emacs 21: be sure
;;                              `kill-ring' is non-empty before trying
;;                              to replace kill.
;;
;;    `next-error'            - `C-u C-u' just deletes highlighting
;;
;;  ***** NOTE: This EMACS PRIMITIVE has been REDEFINED HERE:
;;
;;    `set-variable' - Uses `read-var-and-value' to get args.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (simp . [(20130602 1301) nil "Simple project definition, chiefly for file finding, and grepping" tar nil]) (sicp . [(20121014 1314) nil "No description available." tar nil]) (shut-up . [(20131225 658) nil "Shut up would you!" single ";;; Commentary:

"]) (show-marks . [(20130805 749) ((fm (1 0))) "Navigate and visualize the mark-ring" single ";;; Commentary: 
;; 
;; * Commentary
;; This library provides the commands to navigate and display the mark ring.
;; The `show-marks' command displays a buffer listing the marks in the buffer from which it was called.
;; You can then press enter on one of the listed marks to jump to it, or press d to delete it from the
;; mark ring. You can also use the `forward-mark' and `backward-mark' commands to navigate the marks in
;; the mark ring. 

;;; Installation:
;;
;; Put show-marks.el in a directory in your load-path, e.g. ~/.emacs.d/
;; You can add a directory to your load-path with the following line in ~/.emacs
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;; where ~/elisp is the directory you want to add 
;; (you don't need to do this for ~/.emacs.d - it's added by default).
;;
;; Add the following to your ~/.emacs startup file.
;;
;; (require 'show-marks)
;;
;;  I recommend also binding the commands to global keys, e.g:
;; 
;;    (global-set-key (kbd \"<C-s-right>\") 'forward-mark)
;;    (global-set-key (kbd \"<C-s-left>\") 'backward-mark)
;;    (global-set-key (kbd \"<C-s-down>\") 'show-marks)
;; 
;;;;



"]) (show-css . [(20130605 1524) nil "Show the css of the html attribute the cursor is on" tar ";;; Commentary:
;;
;; DESCRIPTION AND USAGE
;;
;; Show CSS is a minor mode for emacs.
;;
;; With showcss-mode turned on, as you navigate around an HTML file the
;; matching css for that element will be displayed in another buffer.
;;
;; In the current html buffer, if you move the cursor over a class=\".*?\"
;; or id=\".*?\" a buffer will open with the external css file loaded and
;; scrolled to the matching selector.
;;
;; Show Css will look at the <link> tags and a custom comment tag to get
;; the location of external css files.
;;
;; Show Css looks for a comment with this regex:
;; <!-- showcss: \\\\(.*?\\\\) -->
;;
;; For example:
;; <!-- showcss: /home/user/projects/facebook/site/css/main.css -->
;; or
;; <!-- showcss: ./sass_files/main.sass-->
;;
;; The comment is useful if you want to use sass files directly instead
;; of compiling them.  Also showcss-mode will only use local files.  So
;; if you use css on a remote server, you will need to use the showcss
;; tag in you html file and have it point to a local copy of that css.
;;
;; INSTALLATION
;;
;; Put this in your init.el or .emacs file:
;;
;;   (autoload 'showcss-mode \"show-css\"
;;      \"Display the css of the class or id the cursor is at\" t)
;;
;; Personally, I find this mode to distracting to use all the time, so I
;; use this function to quickly toggle the mode on and off.
;;
;;   (defun sm/toggle-showcss()
;;     \"Toggle showcss-mode\"
;;     (interactive)
;;     (if (derived-mode-p
;;          'html-mode
;;          'nxml-mode
;;          'nxhtml-mode
;;          'web-mode
;;          'handlebars-mode)
;;         (showcss-mode 'toggle)
;;       (message \"Not in an html mode\")))
;;   (global-set-key (kbd \"C-c C-k\") 'sm/toggle-showcss)
;;
;; BUGS
;;
;; Please report any bugs found to the github repository
;; https://github.com/smmcg/showcss-mode
;;
;; Also, it you have ideas, suggestions, or advice; please
;; let me know.  Use the github issues tool or send me
;; an email.
;;

"]) (shorten . [(20131201 620) nil "component-wise string shortener" single ";;; Commentary:

;; This is a component-wise string shortener, meaning that, given a list
;; of strings, it breaks each string into parts, then computes shortest
;; prefix of each part with respect to others of the same 'depth', such
;; that when joined back together, the shortened form of the whole string
;; remains unique within the resulting list.  Many styles of shortening
;; are made possible via three functions that the caller may provide: the
;; split function, the join function, and the validate-component function.
;;
;; Strings are broken with the value of `shorten-split-function' (a
;; procedure string->list), and shortened components are rejoined with the
;; value of `shorten-join-function' (a procedure list->string[*]).  The
;; default split and join functions break the string on word boundaries,
;; and rejoin on the empty string.  Potential shortened forms of
;; components are tested with `shorten-validate-component-function'; its
;; default value passes only if its argument contains at least one
;; word-constituent character (regexp \\w), meaning that by default,
;; components consisting entirely of non-word characters will not be
;; shortened, and components that start with non-word characters will only
;; be shortened so much that they have at least one word-constituent
;; character in them.
;;
;; The main entry point is `shorten-strings', which takes a list of strings
;; as its argument and returns an alist ((STRING . SHORTENED-STRING) ...).
;;
;; [*] Also takes a second argument; see docstring of
;; `shorten-join-function'.

"]) (shimbun . [(20120718 2038) nil "interfacing with web newspapers" tar ";;; Commentary:

;; Original code was nnshimbun.el written by
;; TSUCHIYA Masatoshi <tsuchiya@namazu.org>.

;; Shimbun API:
;;
;; shimbun-open
;; shimbun-server
;; shimbun-groups
;; shimbun-current-group
;; shimbun-open-group
;; shimbun-close-group
;; shimbun-headers
;; shimbun-reply-to
;; shimbun-x-face
;; shimbun-header-insert
;; shimbun-search-id
;; shimbun-article-expiration-days
;; shimbun-article
;; shimbun-close

;; Shimbun Header API:
;;
;; shimbun-header-subject
;; shimbun-header-set-subject
;; shimbun-header-from
;; shimbun-header-set-from
;; shimbun-header-date
;; shimbun-header-set-date
;; shimbun-header-id
;; shimbun-header-set-id
;; shimbun-header-references
;; shimbun-header-set-references
;; shimbun-header-chars
;; shimbun-header-set-chars
;; shimbun-header-lines
;; shimbun-header-set-lines
;; shimbun-header-xref
;; shimbun-header-set-xref
;; shimbun-header-extra
;; shimbun-header-set-extra

"]) (shift-text . [(20130831 955) ((cl-lib (1 0)) (es-lib (0 3))) "Move the region in 4 directions, in a way similar to Eclipse's" single ";;; Commentary:

;; The project is hosted at https://github.com/sabof/shift-text
;; The latest version, and all the relevant information can be found there.

"]) (shell-switcher . [(20130711 933) nil "Provide fast switching between shell buffers" tar ";;; commentary:
;;
;; After you add the following line to your Emacs init file you will
;; switch easily between shell buffers:
;;
;; (require 'shell-switcher)
;;
;; You have to customize `shell-switcher-new-shell-function' if
;; `eshell' is not your shell of choice.
;;
"]) (shell-pop . [(20131223 1828) nil "helps you to use shell easily on Emacs. Only one key action to work." single ";;; Commentary:
;;
;; This is a utility which helps you pop up and pop out shell buffer
;; window easily.  Just do M-x shell-pop, and it is strongly recommended
;; to assign one hot-key to this function.
;;
;; I hope this is useful for you, and ENJOY YOUR HAPPY HACKING!

;;; Configuration:
;;
;; Use M-x customize-variable RET `shell-pop-shell-type' RET to
;; customize the shell to use.  Four pre-set options are: `shell',
;; `terminal', `ansi-term', and `eshell'.  You can also set your
;; custom shell if you use other configuration.

;; For `terminal' and `ansi-term' options, you can set the underlying
;; shell by customizing `shell-pop-term-shell'.  By default, `/bin/bash'
;; is used, but you can also use `/bin/tcsh', `/bin/zsh' or others.
;;
;; Use M-x customize-group RET shell-pop RET to set further options
;; such as hotkey, window height and position.

"]) (shell-history . [(20100504 850) nil "integration with shell history" single ";;; Commentary:

;; Add command of `shell-command', `shell-command-on-region',
;; `compile', `grep', and `background' to shell history file,
;; eg. ~/.zsh_history.

"]) (shell-here . [(20120807 1913) nil "Open a shell relative to the working directory" single ";;; Commentary:

;; Open a shell buffer in (or relative to) default-directory,
;; e.g. whatever directory the current buffer is in. If you have
;; find-file-in-project installed, you can also move around relative
;; to the root of the current project.

;; I use Emacs shell buffers for everything, and shell-here is great
;; for getting where you need to quickly. The =find-file-in-project=
;; integration makes it very easy to manage multiple shells and
;; maintain your path / history / scrollback when switching between
;; projects.
;;
;; Recommended binding: =C-c !=
;;
;;   (require 'shell-here)
;;   (define-key (current-global-map) \"\\C-c!\" 'shell-here)
;;
;; Usage:
;;
;; | =C-c !=         | Open a shell in the current directory         |
;; | =C-1 C-c !=     | Open a shell one level up from current        |
;; | =C-2 C-c !=     | Open a shell two levels up from current (etc) |
;; | =C-u C-c !=     | Open a new shell in the current directory     |
;; | =C-- C-c !=     | Open a shell in the current project root      |
;; | =C-- C-1 C-c != | Open a shell one level up from root           |
;; | =C-- C-2 C-c != | Open a shell two levels up from root (etc)    |
;; | =C-- C-u C-c != | Open a new shell in the project root          |

"]) (shell-current-directory . [(20140101 1554) nil "create new shell based on buffer directory" single nil]) (shell-command . [(20090621 1332) nil "enables tab-completion for `shell-command'" single ";;; Commentary:

;; This is an enhancement of shell-command, shell-command-on-region,
;; grep, grep-find, and compile, that enables tab-completion of
;; commands and dir/filenames within their input contexts.

"]) (shampoo . [(20131230 219) nil "A remote Smalltalk development mode" tar nil]) (shadow . [(20110507 24) nil "That's not the file. That's shadow." single ";;; Commentary:
;; See https://github.com/ujihisa/shadow.vim to check basic idea.

"]) (session . [(20120510 1700) nil "use variables, registers and buffer places across sessions" single ";;; Commentary:

;; When you start Emacs, package Session restores various variables (e.g.,
;; input histories) from your last session.  It also provides a menu
;; containing recently changed/visited files and restores the places (e.g.,
;; point) of such a file when you revisit it.

;; For details, check <http://emacs-session.sourceforge.net/> or, if you prefer
;; the manual style, the documentation of functions \\\\[session-save-session]
;; and `session-store-buffer-places'.

;; Bug fixes, bug reports, improvements, and suggestions for the newest version
;; are strongly appreciated.

"]) (servant . [(20131021 355) ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (elnode (0 9 9 7 6)) (epl (0 2))) "ELPA server written in Emacs Lisp" tar ";;; Commentary:

;; An ELPA server for Elnode.

;; Serves ELPA packages from ELPA. Builds the package index on the fly, if no
;; index file is present.

;; `servant-make-elnode-handler' creates an Elnode handler to serve packages
;; from a directory.  `servant-create-index' creates the index.

"]) (sequential-command . [(20100504 855) nil "Many commands into one command" tar ";;; Commentary:

;; Integrating multiple commands into one command is sometimes
;; useful. Pressing C-e at the end of line is useless and adding the
;; other behavior in this situation is safe.
;; 
;; For example, defining `my-end': if point is at the end of line, go
;; to the end of buffer, otherwise go to the end of line. Just evaluate it!
;;
;; (define-sequential-command my-end  end-of-line end-of-buffer)
;; (global-set-key \"\\C-e\" 'my-end)
;;
;; Consequently, pressing C-e C-e is `end-of-buffer'!
;;
;; `define-sequential-command' is a macro that defines a command whose
;; behavior is changed by sequence of calls of the same command.
;;
;; `seq-return' is a command to return to the position when sequence
;; of calls of the same command was started.
;;
;; See sequential-command-config.el if you want examples.
;;
;; http://www.emacswiki.org/cgi-bin/wiki/download/sequential-command-config.el

"]) (sequences . [(20130908 1122) ((emacs (24))) "Ports of some Clojure sequence functions." single ";;; Commentary:

;; Ports of Clojure sequence functions that I find useful to have
;; around. Maybe others will too?

"]) (sentence-highlight . [(20121026 1450) nil "highlight the current sentence" single nil]) (sensitive . [(20131015 635) ((emacs (24)) (sequences (0 1 0))) "A dead simple way to load sensitive information" single ";;; Commentary:

;; This package is intended to make it dead simple to include
;; sensitive information in your public .emacs file. More people
;; publishing their .emacs file is a good thing for the world of Emacs
;; users and the more facilities people have for hiding the
;; information they need to load without having to jump through hoops
;; to load it should make that easier.

"]) (second-sel . [(20131227 151) nil "Secondary selection commands" single ";;; Commentary:
;;
;;    Commands that use the secondary selection.
;;
;;
;;  Commands defined here:
;;
;;    `isearch-yank-secondary', `primary-to-secondary',
;;    `rotate-secondary-selection-yank-pointer', `secondary-dwim',
;;    `secondary-save-then-kill', `secondary-swap-region',
;;    `secondary-to-primary', `set-secondary-start',
;;    `yank-pop-commands', `yank-pop-secondary', `yank-secondary'.
;;
;;  User options defined here:
;;
;;    `secondary-selection-ring-max',
;;    `secondary-selection-yank-commands',
;;    `secondary-selection-yank-secondary-commands',
;;
;;  Non-interactive functions defined here:
;;
;;    `add-secondary-to-ring', `current-secondary-selection',
;;    `second-sel-msg'.
;;
;;  Internal variables defined here:
;;
;;    `secondary-selection-ring',
;;    `secondary-selection-ring-yank-pointer',
;;    `secondary-selection-save-posn', `yank-undo-function'.
;;
;;
;;  ***** NOTE: The following functions defined in `mouse.el'
;;              have been REDEFINED or ADVISED HERE:
;;
;;    `mouse-drag-secondary', `mouse-save-then-kill-delete-region',
;;    `mouse-secondary-save-then-kill'.
;;
;;
;;  Suggested key bindings:
;;
;;   (global-set-key (kbd \"C-M-y\")               'secondary-dwim)
;;   (define-key esc-map \"y\"                     'yank-pop-commands)
;;   (define-key isearch-mode-map (kbd \"C-M-y\")  'isearch-yank-secondary)
;;   (global-set-key (kbd \"C-x C-M-SPC\")         'set-secondary-start)
;;   (global-set-key (kbd \"C-x C-M-<return>\")    'secondary-save-then-kill)
;;
;;
;;  You can enhance what `second-sel.el' offers in these ways:
;;
;;  1. Use library `browse-kill-ring+.el'.
;;
;;     This lets you use `M-y' at the top level to browse either the
;;     `kill-ring' or the `secondary-selection-ring', or both, to
;;     choose a selection to yank.
;;
;;     And `M-y' following a yank from either of these rings replaces
;;     that yank with the next (or prefix-argth) ring entry.  IOW, it
;;     does a `yank-pop' or a `yank-pop-secondary', as appropriate.
;;
;;     (If you use `browse-kill-ring+.el', load `second-sel.el'
;;     first.)
;;
;;  2. Use Icicles (library `icicles.el').
;;
;;     If you do that then the behavior is similar to that provided by
;;     `browse-kill-ring+.el', except that `M-y' at the top level lets
;;     you choose a selection from either ring using completion
;;     against the ring entries.  And during completion you can use
;;     `S-delete' to delete entries from the ring.
;;
;;     (This is the case by default, but you can customize Icicles to
;;     not do this by removing the `M-y' binding, if, for example, you
;;     prefer the `browse-kill-ring+.el' behavior to completing.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (scss-mode . [(20130105 1411) nil "Major mode for editing SCSS files" single ";;; Commentary:
;;
;; Command line utility sass is required, see http://sass-lang.com/
;; To install sass:
;; gem install sass
;;
;; Also make sure sass location is in emacs PATH, example:
;; (setq exec-path (cons (expand-file-name \"~/.gem/ruby/1.8/bin\") exec-path))
;; or customize `scss-sass-command' to point to your sass executable.
;;
"]) (screenshot . [(20120509 1105) nil "Take a screenshot in Emacs" single ";;; Commentary:

;; Take a screenshot by ImageMagick in Emacs easily. Then send the
;; image to remote host by scp (optional). Finally the URL or filename
;; is in the kill-ring. Execute 
;;
;; M-x screenshot
;;
;; See docstring for detail.
;; [EVAL IT] (describe-function 'screenshot)
;; [EVAL IT] (describe-function 'screenshot-take)

"]) (scratch-pop . [(20131108 330) nil "popup \"scratch\"es" single ";;; Commentary:

;; To install, put code like
;;
;;   (require 'scratch-pop)
;;
;; in your .emacs file. You can popup scratch with \"M-x scratch-pop\". If
;; a scratch is already displayed, another is made. You may bind some keys
;; to \"scratch-pop\", if you want.

"]) (scratch-palette . [(20131108 329) nil "save scratch notes on each file" single ";;; Commentary:

;; To install, put code like
;;
;;   (require 'scratch-palette)
;;
;; in your .emacs file. You can display and edit scratch note for the
;; currently-editing file, with \"M-x scratch-palette-popup\". If there's
;; no scratch notes yet, a new scratch note is created. Scratch note is
;; is hidden when pressed \"C-g\", \"C-x C-s\" or \"C-x C-k\", saving contents.
;; All scratch notes are stored in scratch-palette-directory. You can also
;; change the directory with code like
;;
;;   (setq scratch-palette-directory \"~/.emacs.d/palette/\")

"]) (scratch-log . [(20120130 1521) nil "Utility for *scratch* buffer." single ";;; Commentary:

;;; Installation:

;; Put this file into load-path'ed directory, and byte compile it if
;; desired.  And put the following expression into your ~/.emacs.
;;
;; (require 'scratch-log)

"]) (scratch-ext . [(20140103 2116) nil "Extensions for *scratch*" single ";;; Commentary:
;;
;; scratch-ext.el is extensions for *scratch* buffer.
;;
;; This enables you to dump *scratch* buffer automatically
;; when it is killed or Emacs quits.
;;
;; In addition,
;; * killing *scratch* becomes simply (erase-buffer) it.
;;   So you can easily undo it.
;; * After you save *scratch* to file by hand, new *scratch* buffer is created.
;;

"]) (scratch . [(20120830 1028) nil "Mode-specific scratch buffers" tar ";;; Commentary:
;;
;;   (autoload 'scratch \"scratch\" nil t)
;;

"]) (scpaste . [(20110617 1856) ((htmlfontify (0 21))) "Paste to the web via scp." single ";;; Commentary:

;; This will place an HTML copy of a buffer on the web on a server
;; that the user has shell access on.

;; It's similar in purpose to services such as http://paste.lisp.org
;; or http://rafb.net, but it's much simpler since it assumes the user
;; has an account on a publicly-accessible HTTP server. It uses `scp'
;; as its transport and uses Emacs' font-lock as its syntax
;; highlighter instead of relying on a third-party syntax highlighter
;; for which individual language support must be added one-by-one.

;;; Install

;; To install, copy this file into your Emacs source directory, set
;; `scpaste-http-destination' and `scpaste-scp-destination' to
;; appropriate values, and add this to your .emacs file:

;; (autoload 'scpaste \"scpaste\" \"Paste the current buffer.\" t nil)
;; (setq scpaste-http-destination \"http://p.hagelb.org\"
;;       scpaste-scp-destination \"p.hagelb.org:p.hagelb.org\")

;;; Usage

;; M-x scpaste, enter a name, and press return. The name will be
;; incorporated into the URL by escaping it and adding it to the end
;; of `scpaste-http-destination'. The URL for the pasted file will be
;; pushed onto the kill ring.

;; You can autogenerate a splash page that gets uploaded as index.html
;; in `scpaste-http-destination' by invoking M-x scpaste-index. This
;; will upload an explanation as well as a listing of existing
;; pastes. If a paste's filename includes \"private\" it will be skipped.

;; You probably want to set up SSH keys for your destination to avoid
;; having to enter your password once for each paste. Also be sure the
;; key of the host referenced in `scpaste-scp-destination' is in your
;; known hosts file--scpaste will not prompt you to add it but will
;; simply hang.

"]) (sclang-snippets . [(20130513 51) ((yasnippet (0 8 0))) "Snippets for the SuperCollider Emacs mode" tar nil]) (sclang-extensions . [(20131117 1439) ((auto-complete (1 4 0)) (s (1 3 1)) (dash (1 2 0)) (emacs (24 1))) "Extensions for the SuperCollider Emacs mode." tar ";;; Commentary:

;; Extensions for the SuperCollider Emacs mode. Each extension is implemented as
;; a minor-mode; you can enable them individually, or enable all of them by
;; activating `sclang-extensions-mode'.

;;; Installation:

;; Add this mode to your sclang hooks:
;;
;;   (add-hook 'sclang-mode-hook 'sclang-extensions-mode)
;;

"]) (scion . [(20130315 555) nil "Haskell Minor Mode for Interacting with the Scion Library" single nil]) (scheme-here . [(20131105 338) nil "cmuscheme extension for multiple inferior processes" single ";;; Commentary:
;; This is an extension of cmuscheme for multiple buffer-local
;; inferior scheme processes.
;;
"]) (scheme-complete . [(20130220 403) nil "Smart tab completion for Scheme in Emacs" single ";;; Commentary:
;;; This file provides a single function, `scheme-smart-complete',
;;; which you can use for intelligent, context-sensitive completion
;;; for any Scheme implementation.  To use it just load this file and
;;; bind that function to a key in your preferred mode:
;;;
;;; (autoload 'scheme-smart-complete \"scheme-complete\" nil t)
;;; (eval-after-load 'scheme
;;;   '(define-key scheme-mode-map \"\\e\\t\" 'scheme-smart-complete))
;;;
;;; Alternately, you may want to just bind TAB to the
;;; `scheme-complete-or-indent' function, which indents at the start
;;; of a line and otherwise performs the smart completion:
;;;
;;; (eval-after-load 'scheme
;;;   '(define-key scheme-mode-map \"\\t\" 'scheme-complete-or-indent))
;;;
;;;   Note: the completion uses a somewhat less common style than
;;;   typically found in other modes.  The first tab will complete the
;;;   longest prefix common to all possible completions.  The second
;;;   tab will show a list of those completions.  Subsequent tabs will
;;;   scroll that list.  You can't use the mouse to select from the
;;;   list - when you see what you want, just type the next one or
;;;   more characters in the symbol you want and hit tab again to
;;;   continue completing it.  Any key typed will bury the completion
;;;   list.  This ensures you can achieve a completion with the
;;;   minimal number of keystrokes without the completions window
;;;   lingering and taking up space.
;;;
;;; If you use eldoc-mode (included in Emacs), you can also get live
;;; scheme documentation with:
;;;
;;; (autoload 'scheme-get-current-symbol-info \"scheme-complete\" nil t)
;;; (add-hook 'scheme-mode-hook
;;;   (lambda ()
;;;     (make-local-variable 'eldoc-documentation-function)
;;;     (setq eldoc-documentation-function 'scheme-get-current-symbol-info)
;;;     (eldoc-mode)))
;;;
;;; You can enable slightly smarter indentation with
;;;
;;; (setq lisp-indent-function 'scheme-smart-indent-function)
;;;
;;; which basically ignores the scheme-indent-function property for
;;; locally overridden symbols (e.g. if you use the (let loop () ...)
;;; idiom it won't use the special loop indentation inside).
;;;
;;; There's a single custom variable, `scheme-default-implementation',
;;; which you can use to specify your preferred implementation when we
;;; can't infer it from the source code.
;;;
;;; That's all there is to it.

"]) (scf-mode . [(20111202 707) nil "shorten file-names in compilation type buffers" single ";;; Commentary:

;; Shorten long file-name targets to just the `base-name' without directories
;;
;; I only show how to install in `grep-mode', but scf-mode should work for all
;; compilation-mode derived major-modes.
;;
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

"]) (scala-mode2 . [(20131115 2347) nil "Major mode for editing Scala >= 2.9" tar nil]) (scala-mode . [(20131018 1325) nil "Major mode for editing Scala code." tar nil]) (sbt-mode . [(20131123 129) ((scala-mode2 (0 22))) "Major mode for sbt >= 0.12 with scala >= 2.9" tar nil]) (savekill . [(20130130 2151) nil "Save kill ring to disk" single ";;; Commentary:
;;
;; Save kill ring to disk every time `kill-ring' is updated.
;; It is a risk hedge of Emacs sudden death.

"]) (save-visited-files . [(20131224 1528) nil "save opened files across sessions" single ";;; Commentary:

;; save-visited-files is a lightweight version of Desktop.el that
;; only save the files you have open(currently).  This was created because I
;; couldn't ever get Desktop to work and wanted to persist open files across
;; sessions.  This file is the result.

;;; Installation:

;; To install, put this file somewhere in your load-path and add the following
;; to your .emacs file:
;;
;; (require 'save-visited-files)
;; (turn-on-save-visited-files-mode)
;;
;; This will load the set of saved files on startup, as well as updating this
;; list whenever the auto-save-timer is run.  This does not wait to save on
;; closing emacs because I wanted it to be useful even if emacs crashed.  To
;; save the visited files at any time, you can call M-x save-visited-files-save.
;; M-x save-visited-files-restore will open all files saved this way.  To turn
;; off the saving of files, you need to run (turn-off-save-visited-files-mode)

;; Changelog:
;; 1.2
;;  * Changed default value of save-visited-files-location to ~/.emacs.d/emacs-visisted-files
;;  * Improvements/rewriting by Jonathan Kotta
;;  ** Checks save-visited-files-location is writable, and gives a message if not
;;  ** Changed to use define-minor-mode
;;  ** Moved (setq save-visited-files-already-restored t) to the end of
;;  ** save-visited-files-restore from save-visited-files-mode.
;;  ** Doesn't print a message in the echo area every time it saves the file list.
;; 1.1
;;  * Improvements/rewriting by Ryan Thomson
;;  ** Use auto-save-hook instead of a periodic timer
;;  ** More consistent naming conventions
;;  ** Customization ability via M-x customize-group save-visited-files
;;  ** Better handling of the temp buffer
;; 1.0
;;  * Initial Release

"]) (save-sexp . [(20130106 642) nil "save variables in files using setter forms like `setq'" tar ";;; Commentary:

;; Persistently save the value of variables by replacing the textual
;; representations of the setter S-expression (e.g. `setq') used to
;; set it's value in some file.

;; This is similar to how Custom saves options and faces; but instead
;; of using exactly one instance of `custom-set-variables' to set the
;; values of all customized variables, this package saves each
;; variable separatly using an instance of some form that sets the
;; value of a variable, like e.g. `setq', `defvar' or `defconst'.

;;   (save-sexp-save-setq \"~/file.el\" 'variable)

;; This removes all top-level (setq variable ...) forms and inserts a
;; new `setq' form where the first match was removed, setting VARIABLE
;; to it's current value.

;; `save-sexp-save' can be used to replace any setter of the form:

;;   (SETTER '?VARIABLE VALUE [DOC-STRING])

;; See `save-sexp-save's doc-string for how ways to control
;; intentation etc. `save-sexp-save-setq' and similar functions can
;; also be used interactively.

"]) (save-load-path . [(20131228 1952) nil "save load-path and reuse it to test" single ";;; Commentary:
;;
;; Prepare `load-path' for testing in emacs -Q.
;; First, save your `load-path' in your .emacs.
;; Then, invoke emacs with command:
;;   $ emacs -Q -l ~/.emacs.d/saved-load-path.el
;; It is ready for all emacs lisp programs you have!

"]) (sauron . [(20130818 1134) nil "Track (erc/org/dbus/...) events and react to them." tar nil]) (sass-mode . [(20120224 1117) ((haml-mode (3 0 15))) "Major mode for editing Sass files" single ";;; Commentary:

;; Because Sass's indentation schema is similar
;; to that of YAML and Python, many indentation-related
;; functions are similar to those in yaml-mode and python-mode.

;; To install, save this on your load path and add the following to
;; your .emacs file:
;;
;; (require 'sass-mode)

;; sass-mode requires haml-mode, which can be found at http://github.com/nex3/haml-mode.

"]) (sackspace . [(20130719 256) nil "A better backspace" single ";;; Commentary:

;; Install:
;; Put file into load-path and (require 'sackspace).
;;
;; Usage:
;; (global-sackspace-mode 1)
;; See (describe-function 'sackspace-mode)
;;
;; Support for other packages:
;; * Supports `subword-mode`, and `paredit-mode`.
;;   To disable this support change the \"honor\" customs in
;;   `M-x customize-group RET sackspace RET`.
;;
;; * Supports `evil` directly by prohibiting edits in non-editing states if evil is enabled.
;;
;; Limitations:
;; * Within `term-mode` `sacks/whitespace` won't work (it will delete the chars
;;   from the emacs buffer, but not from the terminal).
;; * C-<backspace> and S-<backspace> are not available in a terminal emacs

;; Homepage: http://github.com/cofi/sackspace.el
;; Git-Repository: git://github.com/cofi/sackspace.el.git

;; Known Bugs:
;; See http://github.com/cofi/sackspace.el/issues

"]) (s-buffer . [(20130605 1424) ((s (1 6 0)) (noflet (0 0 3))) "s operations for buffers" single ";;; Commentary:

;; The awesome s library for EmacsLisp has great extensions for doing
;; string operations. Some of those operations would be useful on
;; buffers. So this is those operations fitted for buffers.

"]) (s . [(20131223 944) nil "The long lost Emacs string manipulation library." single ";;; Commentary:

;; The long lost Emacs string manipulation library.
;;
;; See documentation on https://github.com/magnars/s.el#functions

"]) (rvm . [(20140109 319) nil "Emacs integration for rvm" single ";;; Commentary:

;; M-x rvm-use-default prepares the current Emacs session to use
;; the default ruby configured with rvm.

;; M-x rvm-use allows you to switch the current session to the ruby
;; implementation of your choice. You can also change the active gemset.

;;; Compiler support:

(eval-when-compile (require 'cl))
(defvar eshell-path-env)
(defvar persp-mode)
(defvar perspectives-hash)
(declare-function persp-switch \"perspective\" (name))

"]) (rust-mode . [(20140101 102) nil "A major emacs mode for editing Rust source code" single nil]) (runner . [(20140106 758) nil "Improved \"open with\" suggestions for dired" single ";;; Commentary:
;;
;; This library allows for a set of shell commands to be linked to
;; file or directory names. These commands can then be used in dired
;; mode using `dired-do-shell-command' (or pressing \"!\"). Since this
;; library modifies the behavior of `dired-guess-shell-alist-user',
;; the command syntax will follow that variable's syntax (see the
;; documentation of `dired-do-shell-command' for more).
;;
"]) (ruby-tools . [(20140113 45) nil "Collection of handy functions for ruby-mode." tar nil]) (ruby-test-mode . [(20131205 209) ((ruby-mode (1 0))) "Minor mode for Behaviour and Test Driven" single nil]) (ruby-refactor . [(20140104 1354) ((ruby-mode (1 2))) "A minor mode which presents various Ruby refactoring helpers." single ";;; Commentary:

;; Ruby refactor is inspired by the Vim plugin vim-refactoring-ruby,
;; currently found at https://github.com/ecomba/vim-ruby-refactoring.

;; I've implemented 5 refactorings
;;  - Extract to Method
;;  - Extract Local Variable
;;  - Extract Constant
;;  - Add Parameter
;;  - Extract to Let

; ## Install
;; Add this file to your load path.
;; (require 'ruby-refactor)  ; if not installed from a package
;; (add-hook 'ruby-mode-hook 'ruby-refactor-mode-launch)

;; ## Extract to Method:
;; Select a region of text and invoke 'ruby-refactor-extract-to-method'.
;; You'll be prompted for a method name. The method will be created
;; above the method you are in with the method contents being the
;; selected region. The region will be replaced w/ a call to method.

;; ## Extract Local Variable:
;; Select a region of text and invoke `ruby-refactor-extract-local-variable`.
;; You'll be prompted for a variable name.  The new variable will
;; be created directly above the selected region and the region
;; will be replaced with the variable.

;; ## Extract Constant:
;; Select a region of text and invoke `ruby-refactor-extract-contant`.
;; You'll be prompted for a constant name.  The new constant will
;; be created at the top of the enclosing class or module directly
;; after any include or extend statements and the regions will be
;; replaced with the constant.

;; ## Add Parameter:
;; 'ruby-refactor-add-parameter'
;; This simply prompts you for a parameter to add to the current
;; method definition. If you are on a text, you can just hit enter
;; as it will use it by default. There is a custom variable to set
;; if you like parens on your params list.  Default values and the
;; like shouldn't confuse it.

;; ## Extract to Let:
;; This is really for use with RSpec

;; 'ruby-refactor-extract-to-let'
;; There is a variable for where the 'let' gets placed. It can be
;; \"top\" which is top-most in the file, or \"closest\" which just
;; walks up to the first describe/context it finds.
;; You can also specify a different regex, so that you can just
;; use \"describe\" if you want.
;; If you are on a line:
;;   a = Something.else.doing
;;     becomes
;;   let(:a){ Something.else.doing }

;; If you are selecting a region:
;;   a = Something.else
;;   a.stub(:blah)
;;     becomes
;;   let :a do
;;     _a = Something.else
;;     _a.stub(:blah)
;;     _a
;;   end

;; In both cases, you need the line, first line to have an ' = ' in it,
;; as that drives conversion.

;; There is also the bonus that the let will be placed *after* any other
;; let statements. It appends it to bottom of the list.

;; Oh, if you invoke with a prefix arg (C-u, etc.), it'll swap the placement
;; of the let.  If you have location as top, a prefix argument will place
;; it closest.  I kinda got nutty with this one.


;; ## TODO
;; From the vim plugin, these remain to be done (I don't plan to do them all.)
;;  - remove inline temp (sexy!)
;;  - convert post conditional

"]) (ruby-interpolation . [(20131112 852) nil "Ruby string interpolation helpers" single ";;; Commentary:
;;
;;    A little minor mode providing electric keys for #{} interpolation
;;  in ruby
;;
;;; Installation:
;;
;;    Drop into your `vendor` directory and `(require 'ruby-interpolation)`
;;
;;; Code

(defvar ruby-interpolation-key \"#\"
  \"The key to invoke ruby string interpolation via #{}\")

(defvar ruby-interpolation-mode-map
  (let ((map (make-sparse-keymap))
        (key (read-kbd-macro ruby-interpolation-key)))
    (define-key map key 'ruby-interpolation-insert)
    map)
  \"Keymap for `ruby-interpolation-mode`.\")

(defun ruby-interpolation-string-at-point-p()
  (cond ((and ruby-interpolation-mode
	      (consp (memq 'font-lock-string-face (text-properties-at (point)))))
	 (save-excursion
	   (search-backward-regexp \"\\\"\\\\|'\" nil t)
	   (string= \"\\\"\" (string (char-after (point))))
	   ))))

(defun ruby-interpolation-insert ()
  \"Called when interpolation key is pressed\"
  (interactive)
  (if (ruby-interpolation-string-at-point-p)
      (progn (save-excursion (insert \"#{}\"))
             (forward-char 2))
    (insert \"#\")))

;;;###autoload
(define-minor-mode ruby-interpolation-mode
  \"Automatic insertion of ruby string interpolation.\"
  :init-value nil
  :lighter \" #{}\"
  :keymap ruby-interpolation-mode-map)

(add-hook 'ruby-mode-hook 'ruby-interpolation-mode)

(provide 'ruby-interpolation)

;;; ruby-interpolation.el ends here
"]) (ruby-hash-syntax . [(20131113 1032) nil "Toggle ruby hash syntax between classic and 1.9 styles" single ";;; Commentary:

;; Adapted from the method used by TextMate, this library provides
;; a command `ruby-hash-syntax-toggle' which attempts to automatically
;; convert the selected region of ruby code between 1.8 and 1.9 hash styles.

"]) (ruby-end . [(20131016 37) nil "Automatic insertion of end blocks for Ruby" single ";;; Commentary:

;; ruby-end is a minor mode for Emacs that can be used with ruby-mode
;; to automatically close blocks by inserting \"end\" when typing a
;; block-keyword, followed by a space.
;;
;; To use ruby-end-mode, make sure that this file is in Emacs load-path:
;;   (add-to-list 'load-path \"/path/to/directory/or/file\")
;;
;; Then require ruby-end:
;;   (require 'ruby-end)
;;
;; ruby-end-mode is automatically started in ruby-mode.


"]) (ruby-electric . [(20131217 33) nil "Minor mode for electrically editing ruby code" single ";;; Commentary:
;;
;; `ruby-electric-mode' accelerates code writing in ruby by making
;; some keys \"electric\" and automatically supplying with closing
;; parentheses and \"end\" as appropriate.
;;
;; This work was originally inspired by a code snippet posted by
;; [Frederick Ros](https://github.com/sleeper).
;;
;; Add the following line to enable ruby-electric-mode under
;; ruby-mode.
;;
;;     (eval-after-load \"ruby-mode\"
;;       '(add-hook 'ruby-mode-hook 'ruby-electric-mode))
;;
;; Type M-x customize-group ruby-electric for configuration.

"]) (ruby-dev . [(20130811 151) nil "Interactive developement environment for Ruby." tar ";;; Commentary:

"]) (ruby-compilation . [(20130429 611) ((inf-ruby (2 2 1))) "run a ruby process in a compilation buffer" single ";;; Commentary:

;; Allow for execution of ruby processes dumping the results into a
;; compilation buffer.  Useful for executing tests, or rake tasks
;; where the ability to jump to errors in source code is desirable.
;;
;; The functions you will probably want to use are
;;
;; ruby-compilation-run
;; ruby-compilation-rake
;; ruby-compilation-this-buffer (C-x t)
;; ruby-compilation-this-test (C-x T)
;;

"]) (ruby-block . [(20131211 331) nil "highlight matching block" single ";;; Commentary:

"]) (ruby-additional . [(20131030 2113) ((emacs (24 3)) (ruby-mode (1 2))) "ruby-mode extensions yet to be merged into Emacs" tar ";;; Commentary:
;;
;; This package contains ruby-mode extensions yet to be merged into
;; the latest released version of Emacs distribution.  For older
;; versions of Emacs, use ruby-mode.el bundled with CRuby.

"]) (rubocop . [(20131101 1142) ((dash (1 0 0))) "An Emacs interface for RuboCop" single ";;; Commentary:
;;
;; This library allows the user to easily invoke rubocop to get feedback
;; about stylistic issues in Ruby code.
;;
"]) (rspec-mode . [(20140110 235) ((ruby-mode (1 0))) "Enhance ruby-mode for RSpec" tar ";;; Commentary:
;;
;; This minor mode provides some enhancements to ruby-mode in
;; the contexts of RSpec specifications.  Namely, it provides the
;; following capabilities:
;;
;;  * toggle back and forth between a spec and it's target (bound to
;;    `\\C-c ,t`)
;;
;;  * verify the spec file associated with the current buffer (bound to `\\C-c ,v`)
;;
;;  * verify the spec defined in the current buffer if it is a spec
;;    file (bound to `\\C-c ,v`)
;;
;;  * verify the example defined at the point of the current buffer (bound to `\\C-c ,s`)
;;
;;  * re-run the last verification process (bound to `\\C-c ,r`)
;;
;;  * toggle the pendingness of the example at the point (bound to
;;    `\\C-c ,d`)
;;
;;  * disable the example at the point by making it pending
;;
;;  * reenable the disabled example at the point
;;
;;  * run all specs related to the current buffer (`\\C-c ,m`)
;;
;;  * run the current spec and all after it (`\\C-c ,c`)
;;
;;  * run spec for entire project (bound to `\\C-c ,a`)
;;
;; You can choose whether to run specs using 'rake spec' or the 'spec'
;; command. Use the customization interface (customize-group
;; rspec-mode) or override using (setq rspec-use-rake-when-possible TVAL).
;;
;; Options will be loaded from spec.opts or .rspec if it exists and
;; rspec-use-opts-file-when-available is not set to nil, otherwise it
;; will fallback to defaults.
;;
;; You can also launch specs from Dired buffers, to do that, add this:
;;
;;   (add-hook 'dired-mode-hook 'rspec-dired-mode)
;;
;; It has almost the same keybindings, but there's no toggle-spec
;; command, and `rspec-dired-verify-single' runs all marked files, or
;; the file at point.
;;
;; Dependencies:
;;
;; If `rspec-use-rvm` is set to true `rvm.el' is required.
;;
;; The expectations depend on `el-expectations.el'.
;;
"]) (rsense . [(20100510 2105) nil "RSense client for Emacs" single ";;; Commentary:

;; 

"]) (rpm-spec-mode . [(20130922 2348) nil "RPM spec file editing commands for Emacs/XEmacs" single ";;; Commentary:

;; This mode is used for editing spec files used for building RPM packages.
;;
;; Most recent version is available from:
;;  <https://github.com/bjorlykke/rpm-spec-mode>
;;
;; Put this in your .emacs file to enable autoloading of rpm-spec-mode,
;; and auto-recognition of \".spec\" files:
;;
;;  (autoload 'rpm-spec-mode \"rpm-spec-mode.el\" \"RPM spec mode.\" t)
;;  (setq auto-mode-alist (append '((\"\\\\.spec\" . rpm-spec-mode))
;;                                auto-mode-alist))
;;------------------------------------------------------------
;;

"]) (roy-mode . [(20121208 358) nil "Roy major mode" single ";;; Commentary:
;; This mode is based on generic mode
;; (http://www.emacswiki.org/emacs/GenericMode),
;; therefore, it is required.
;;

"]) (robe . [(20131228 424) ((inf-ruby (2 3 0))) "Code navigation, documentation lookup and completion for Ruby" tar ";;; Commentary:

;; You can jump to or read the documentation for the method, module (jump only),
;; `super` or constructor definition at point.
;;
;; ElDoc support and constant and method completion are also provided.

;;; Usage

;; (add-hook 'ruby-mode-hook 'robe-mode)
;;
;;  - M-. to jump to the definition
;;  - M-, to jump back
;;  - C-c C-d to see the documentation
;;  - C-c C-k to refresh Rails environment
;;  - C-M-i to complete the symbol at point

"]) (rnc-mode . [(20121227 1502) nil "A major mode for editing RELAX NG Compact syntax." single nil]) (rings . [(20140102 1536) nil "Buffer rings. Like tabs, but better." single nil]) (rinari . [(20131117 737) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) "Rinari Is Not A Rails IDE" single ";;; Commentary:

;; Rinari Is Not A Ruby IDE.

;; Well, ok it kind of is.  Rinari is a set of Emacs Lisp modes that is
;; aimed towards making Emacs into a top-notch Ruby and Rails
;; development environment.

;; Rinari can be installed through ELPA (see http://tromey.com/elpa/)

;; To install from source, copy the directory containing this file
;; into your Emacs Lisp directory, assumed here to be ~/.emacs.d.  Add
;; these lines of code to your .emacs file:

;; ;; rinari
;; (add-to-list 'load-path \"~/.emacs.d/rinari\")
;; (require 'rinari)
;; (global-rinari-mode)

;; Whether installed through ELPA or from source you probably want to
;; add the following lines to your .emacs file:

;; ;; ido
;; (require 'ido)
;; (ido-mode t)

;; Note: if you cloned this from a git repo, you will have to grab the
;; submodules which can be done by running the following commands from
;; the root of the rinari directory

;;  git submodule init
;;  git submodule update

"]) (rhtml-mode . [(20130422 611) nil "major mode for editing RHTML files" tar nil]) (rfringe . [(20110405 1520) nil "display the relative location of the region, in the fringe." single ";;; Commentary:
;;
;; This is a module to allow the use of the fringe to indicate locations
;; relative to the bounds of the buffer.  rfringe = \"relative fringe\".
;;
;; In emacs, displaying fringe indicators is done via text overlays. In
;; that way, bitmaps in the fringe are attached to the lines of text
;; shown in the buffer window.
;;
;; This works nicely when the fringe is used to indicate information
;; that is relevant to the adjacent line; for example, text overflow, or
;; something similar. But, there isn't a simple way for an application
;; or module to use the fringe to display buffer-relative information -
;; for example, the location of compiler error messages.
;;
;; In fact, using the fringe to communicate this kind of information -
;; buffer-relative positions - is probably more intuitive and is
;; certainly more useful for the user. For example, consider the
;; scrollbar. The position and size of the scrollbar indicates to the
;; user the position and size of the current window relative to the
;; entire buffer. This is information that cound not be easily or
;; appropriately conveyed within the visual text. The fringe is
;; perfectly suited for this purpose.
;;
;; Along those lines, a useful integration of fringe with flymake would
;; be to use fringe bitmaps visually indicate the position of all
;; flymake errors and warnings in the buffer, relative to the beginning
;; and end of the buffer. A quick glance at the fringe would give a
;; visual indication of the number of errors or warnings and their
;; approximate positions.
;;
;; Likewise, a diff mode might want to display fringe indicators for the
;; number and approximate relative position of differences.
;;
;; Doing this is not simple, because of the dependency of fringe bitmaps
;; on text overlays that I described above.  To use the fringe to
;; communicate information regarding buffer-relative positions requires
;; a transformation from \"buffer position\" to \"window position\".  And
;; this transformation must be re-computed each time a window scrolls or
;; changes size.
;;
;; This module addresses that need, and provides that transformation. It
;; allows you to set an indicator that is buffer-relative in the fringe;
;; the indicator automatically redisplays if the window changes size, or
;; scrolls.
;;
;; Examples:
;;
;; 1. In the simplest case, you can use rfringe to provide a visual
;;    indicator of the top of the region in the buffer, like so:
;;
;;       (rfringe-show-region)
;;
;;    To turn off the indicator, do this:
;;
;;       (rfringe-hide-region)
;;
;;
;; 2. You can also use rfringe to display a set of indicators,
;;    corresponding to a set of locations in the buffer. These might be
;;    the locations of compiler errors, or section beginnings, or
;;    whatever you like.
;;
;;       (setq posns '(79 1000 2000 3000 4000 5000 6000 9000 10000))
;;       (mapc 'rfringe-create-relative-indicator posns)
;;
;;    As you scroll through the buffer, the indicators in the fringe remain fixed.
;;
;;    To remove the indicators, do this:
;;
;;       (rfringe-remove-managed-indicators)
;;
;;    By default, rfringe defines advice to extend flymake to display
;;    indicators this way.  This is not the only intended use of rfringe.el,
;;    but it is a good example.
;;


(require 'fringe)

(defvar rfringe-region-indicator-ovly nil
  \"the overlay used internally for the region; see `rfringe-show-region-indicator'.

Applications should not set this value directly. It is intended
for use internally by rfringe.el .
\" )

(defvar rfringe-managed-indicators nil
  \"a list holding the position and actual overlay for all
\\\"managed\\\" indicators. They are managed in the sense that they
automatically update their positions when the window changes
configuration or scrolls, and they can be deleted as a set via
`rfringe-remove-managed-indicators'.

Each element in this list is a cons cell, (POS . OVLY) where POS
is the character position and OVLY is the actual overlay.

Applications should not set this value directly. It is intended
for use internally by rfringe.el .
\")


(make-variable-buffer-local 'rfringe-managed-indicators)
(make-variable-buffer-local 'rfringe-region-indicator-ovly)

;; rfringe displays only one kind of bitmap - a thin dash. Create it here.
(define-fringe-bitmap 'rfringe-thin-dash [255 0])

(defun rfringe--compute-position (lines start-pos)
  \"computes a position that is LINES ahead of START-POS\"
  (save-excursion
    (goto-char start-pos)
    (while (> lines 0)
      (forward-line 1)
      (decf lines))
    ;;(message \"l(%d) sp(%d) =x(%d)\" lines start-pos (point))
    (point)))


(defun rfringe-hide-region ()
  \"Hide any bitmap currently displayed in the fringe indicating the region.\"
  (interactive)
  (if rfringe-region-indicator-ovly
      (progn
        (delete-overlay rfringe-region-indicator-ovly)
        (setq rfringe-region-indicator-ovly nil))))



(defun rfringe-update-region-indicator (&optional buf)
  \"update any fringe indicator for the region, in the buffer BUF.\"
  (if (not buf)
      (setq buf (current-buffer)))
  (with-current-buffer buf
    (if rfringe-region-indicator-ovly
        (rfringe-show-region-indicator buf))))



(defun rfringe-insert-bitmap (bitmap pos &optional side face)
  \"Insert a fringe bitmap at POS.

BITMAP is the name of a bitmap defined with `define-fringe-bitmap'.
SIDE defaults to 'left-fringe and can also be
'right-fringe.  FACE is used to determine the bitmap's color.

The function returns an overlay object.
It should be removed when no longer needed via `delete-overlay'.
\"

  (let* ((display-string `(,(or side 'left-fringe) ,bitmap .
                           ,(when face (cons face nil))))
          (before-string (propertize \"!\" 'display display-string))
          (ov (make-overlay pos pos)))
    (overlay-put ov 'before-string before-string)
    (overlay-put ov 'fringe-helper t)
    ov))




(defun rfringe-create-relative-indicator (pos &optional dont-manage)
  \"Display an indicator in the fringe in the current buffer, for
the position POS relative to the buffer size, via a simple bitmap
dash.

If optional DONT-MANAGE is nil, or not present, the overlay is
stored and remembered.  In this case, if the window changes size,
or scrolls, the bitmap will be automatically moved. It can also
be deleted with `rfringe-remove-managed-indicators'. Passing
DONT-MANAGE as t does not do this.

For example, for a buffer of length 10000, if you pas a POS of
5000, then this funciton will display a dash in the fringe,
halfway down, regardless of whether char position 5000 is
visible in the window.

\"
  (let* ((top-of-window (window-start))
         (line-delta (scroll-bar-scale (cons pos (point-max)) (window-body-height)))
         (pos-of-indicator
          (rfringe--compute-position line-delta top-of-window))
         ov)
    ;;(message \"tow(%d) ld(%d)\" top-of-window line-delta)
    ;;(message \"compute x=>x1: %d => %d\" pos pos-of-indicator)
    (setq ov (rfringe-insert-bitmap
              'rfringe-thin-dash
              pos-of-indicator
              'right-fringe
              'font-lock-warning-face))
    (if (not dont-manage)
        ;; save the location, and the actual overlay object
        (push (cons pos ov) rfringe-managed-indicators))
    ov))




(defun rfringe-show-region-indicator (buf)
  \"Display an indicator in the fringe of the position of the region
in the buffer BUF, via a bitmap dash.

For example, if the region is at the top of the buffer, then a
dash will appear at the top of the fringe, regardless of whether
any part of the region is in fact visible in the window.\"

  (with-current-buffer buf
    (rfringe-hide-region)
    (if (mark) ;; the mark is set
        (setq rfringe-region-indicator-ovly
              (rfringe-create-relative-indicator (min (point) (mark)) t)))))



(defun rfringe-remove-managed-indicators ()
  \"Removes all rfringe-managed indicators for the current buffer.\"
  (if rfringe-managed-indicators
      (progn
        (mapc (lambda (pair)
                (delete-overlay (cdr pair)))
              rfringe-managed-indicators)
        (setq rfringe-managed-indicators nil))))



(defun rfringe-show-region ()
  \"Display an indicator in the fringe, for the top of the region.\"
  (interactive)
  (rfringe-show-region-indicator (current-buffer)))



;; hooks

(defun rfringe--update-region-on-window-scroll (wnd new-start)
  \"a sort-of-hook that gets called as each window is scrolled.
The window is given by WND and the new start position is given
by NEW-START.

See `window-scroll-functions' for more info.
\"
  (if wnd
      (rfringe-update-region-indicator (window-buffer wnd))))



(defun rfringe--reset-region-indicator-on-window-config-change ()
  \"a sort-of-hook that gets called as a window's
\\\"configuration\\\" changes. Configuration includes size, width (I
guess), and so on. If the user splits or unsplits the window,
then the configuration changes, and this hook gets called.

This one resets the region indicator, if it is visible.

See `window-configuration-change-hook' for more info.
\"
  (if rfringe-region-indicator-ovly
      (rfringe-show-region)))




(defun rfringe--reset-visible-indicators ()
  \"a sort-of-hook that gets called as a window's
\\\"configuration\\\" changes. Configuration includes size, width (I
guess), and so on. Also, if the user splits or unsplits the
window, then the configuration changes, and this hook gets
called.

This fn moves all managed indicators.

See`window-configuration-change-hook' for more info.
\"
  (if rfringe-managed-indicators
      (progn
        ;;(message \"rfringe resetting...\")
        (let* ((top-of-window (window-start))
               (bdy-height (window-body-height))
               (mx (point-max))
               (move-one
                (lambda (pair)
                  (let* ((pos (car pair))
                         (ov (cdr pair))
                         (line-delta (scroll-bar-scale (cons pos mx) bdy-height))
                         (ipos (rfringe--compute-position line-delta top-of-window)))
                    ;; (message \"move %s to %s\"
                    ;;          (prin1-to-string ov)
                    ;;          (prin1-to-string ipos))
                    (move-overlay ov ipos ipos)))))
          (mapc move-one rfringe-managed-indicators)))))



(defun rfringe--update-managed-indicators-on-window-scroll (wnd new-start)
  \"a sort-of-hook that gets called as each window is scrolled.
The window is given by WND and the new start position is given
by NEW-START.

See `window-scroll-functions' for more info.
\"
  (if wnd
      (with-current-buffer (window-buffer wnd)
        (rfringe--reset-visible-indicators))))



;; hooks for managing the 'special' region indicator
(add-hook 'window-scroll-functions 'rfringe--update-region-on-window-scroll)
(add-hook 'window-configuration-change-hook
          'rfringe--reset-region-indicator-on-window-config-change)
(add-hook 'activate-mark-hook 'rfringe-update-region-indicator)


;; hooks for managing all managed indicators
(add-hook 'window-scroll-functions 'rfringe--update-managed-indicators-on-window-scroll)
(add-hook 'window-configuration-change-hook 'rfringe--reset-visible-indicators)


(defun rfringe--char-pos-for-line (line-no)
  (save-excursion
    (goto-line line-no)
    (point)))


;; extend flymake to show fringe indicators
(defadvice flymake-post-syntax-check (after
                                      rfringe-indicate-flymake-status
                                      activate compile)
  (rfringe-remove-managed-indicators)
  (let ((err-count (flymake-get-err-count flymake-err-info \"e\"))
        (warn-count (flymake-get-err-count flymake-err-info \"w\")))

    (if (or (/= 0 err-count) (/= 0 warn-count))
       (mapc (lambda (item)
               (message \"rfringe: marking error at line %d\" (car item))
               (rfringe-create-relative-indicator (rfringe--char-pos-for-line (car item))))
             flymake-err-info))))


(provide 'rfringe)


;;; rfringe.el ends here
"]) (revive . [(20121022 411) nil "Resume Emacs" single ";;; Commentary:
;;;
;;;		Resume Emacs:		revive.el
;;;
;;;[What is `revive'?]
;;;
;;;	  Revive.el  saves current editing  status including  the window
;;;	splitting   configuration,   which   can't   be   recovered   by
;;;	`desktop.el' nor by `saveconf.el', into a file  and reconstructs
;;;	that status correctly.
;;;
;;;[Installation]
;;;
;;;	  Put revive.el into your elisp  directory included in load-path
;;;	and write the next expressions.
;;;
;;;	  (autoload 'save-current-configuration \"revive\" \"Save status\" t)
;;;	  (autoload 'resume \"revive\" \"Resume Emacs\" t)
;;;	  (autoload 'wipe \"revive\" \"Wipe Emacs\" t)
;;;
;;;	And define favorite keys to those functions.  Here is a sample.
;;;
;;;	  (define-key ctl-x-map \"S\" 'save-current-configuration)
;;;	  (define-key ctl-x-map \"F\" 'resume)
;;;	  (define-key ctl-x-map \"K\" 'wipe)
;;;
;;;[How to use]
;;;
;;;	 Call `save-current-configuration' (`C-x S' if you define key as
;;;	above) when  you want to   save current editing status  and call
;;;	`resume' to restore it.  Numerical prefix  arg to them specifies
;;;	the buffer number in which the editing status will be saved.
;;;
;;;		[Sample Operations]
;;;		C-u 2 C-x S		;save status into the buffer #2
;;;		C-u 3 C-x F		;load status from the buffer #3
;;;
;;;[Save Variables]
;;;
;;;	  Revive.el can save global or local variables.  The default
;;;	variables to be saved are in revive:save-variables-global-default
;;;	and revive:save-variables-local-default.  If you want to save other
;;;	global/local variables, define them in
;;;	revive:save-variables-global-private or
;;;	revive:save-variables-local-private in a form of a list.  If you
;;;	are using `gmhist', the next expression in ~/.emacs is useful.
;;;
;;;		(setq revive:save-variables-global-private
;;;		      '(file-history buffer-history minibuffer-history))
;;;
;;;[Restoring abnormal buffers]
;;;
;;;	  The variable revive:major-mode-command-alist-default holds the
;;;	list of  major-mode  name  vs.   command  name.   For  example,
;;;	mh-rmail  command sees the directory ~/Mail/inbox/ and sets  the
;;;	major-mode  to  'mh-folder-mode.   And  gnus  command  sets  the
;;;	major-mode to  'gnus-Group-mode.   If  you want to define  other
;;;	relations between major-mode and command,  set the user variable
;;;	revive:major-mode-command-alist-private as follows:
;;;
;;;		(setq revive:major-mode-command-alist-private
;;;		  '((your-own-mode	. your-own)
;;;		    (foo-mode		. foo)
;;;		    (\"*Hanoi*\"		. hanoi)
;;;
;;;	it tells revive.el to execute the corresponding command when the
;;;	saved configuration has the buffer with that major-mode. To know
;;;	the major-mode of a certain buffer, type `M-ESC' and `major-mode
;;;	CR'.   And as  you  see above, buffer-name  string  can be  used
;;;	instead of major-mode symbol.
;;;
;;;	  For  other  special modes that  cannot be resumed by executing
;;;	certain function,  define a function to resume and declare it in
;;;	the  variable revive:major-mode-command-alist-private.  In  that
;;;	function, the following values are available.
;;;
;;;		(revive:prop-file-name x)	;file name
;;;		(revive:prop-buffer-name x)	;buffer name
;;;		(revive:prop-major-mode x)	;major-mode
;;;		(revive:prop-point x)		;(point)
;;;		(revive:prop-mark x)		;(mark)
;;;		(revive:prop-varlist x)		;alist of pairs of (var . val)
;;;
;;;[For programmers]
;;;
;;;	  This program provides two powerful functions:
;;;
;;;		* current-window-configuration-printable
;;;		* restore-window-configuration
;;;
;;;	When you want to save a screen your program manages into a file,
;;;	and  restore  it,  save  the  return  value  of  current-window-
;;;	configuration-printable, and read and give it to restore-window-
;;;	configuration.
;;;
;;;	*Sample*
;;;	;;To save
;;;	(insert (prin1-to-string (current-window-configuration-printable)))
;;;	;;To restore
;;;	(restore-window-configuration (read (current-buffer)))
;;;
;;;	Since set-window-configuration cannot set the configuration of
;;;	other frame, the program as below should be useful.
;;;
;;;	*Sample*
;;;	(defun frame-copy-configuration (nth)
;;;	  \"Copy confinguration of current frame to NTH next frame.\"
;;;	  (let ((config (current-window-configuration-printable)))
;;;	    (other-frame nth)
;;;	    (restore-window-configuration config)))
;;;
;;;[Copying]
;;;
;;;	  This program is distributed as a free  software. The author is
;;;	not responsible  for  any  possible   defects   caused  by  this
;;;	software.
;;;
;;;	  Comments  and bug   reports  are welcome. Don't  hesitated  to
;;;	report.  My possible e-mail address is following.
;;;
;;;							yuuji@gentei.org
;;;
;;; Japanese Document follows:
;;;
;;;\343\200\220revive\343\201\250\343\201\257\343\200\221
;;;
;;;	  revive.el \343\202\222\344\275\277\343\201\206\343\201\250\343\200\201Emacs \344\275\277\347\224\250\346\231\202\343\201\256\347\212\266\346\205\213\343\202\222\343\203\225\343\202\241\343\202\244\343\203\253\343\201\253\343\202\273\343\203\274\343\203\226\343\201\227\343\201\246\343\200\201
;;;	\346\254\241\345\233\236 Emacs \343\202\222\350\265\267\345\213\225\343\201\231\343\202\213\346\231\202\343\201\253\343\201\235\343\201\256\347\212\266\346\205\213\343\201\253\345\276\251\345\270\260\343\201\231\343\202\213\343\201\223\343\201\250\343\201\214\343\201\247\343\201\215\343\201\276\343\201\231\343\200\202\343\202\202\343\201\241
;;;	\343\202\215\343\202\223\343\202\246\343\202\243\343\203\263\343\203\211\343\202\246\343\201\256\345\210\206\345\211\262\347\212\266\346\205\213\343\202\202\345\276\251\345\205\203\343\201\225\343\202\214\343\202\213\343\201\256\343\201\247 saveconf \343\202\204 desktop \343\201\247
;;;	\343\201\204\343\202\211\343\201\204\343\202\211\343\201\227\343\201\246\343\201\204\343\201\237\344\272\272\343\201\253\343\202\202\343\201\212\345\213\247\343\202\201\343\201\247\343\201\231\343\200\202
;;;
;;;\343\200\220\347\265\204\343\201\277\350\276\274\343\201\277\346\226\271\343\200\221
;;;
;;;	  revive.el \343\202\222 load-path \343\201\256\351\200\232\343\201\243\343\201\237\343\203\207\343\202\243\343\203\254\343\202\257\343\203\210\343\203\252\343\201\253\345\205\245\343\202\214\343\200\201~/.emacs \343\201\253
;;;	\344\273\245\344\270\213\343\201\256\350\250\230\350\277\260\343\202\222\345\205\245\343\202\214\343\201\246\343\201\217\343\201\240\343\201\225\343\201\204\343\200\202
;;;
;;;	  (autoload 'save-current-configuration \"revive\" \"Save status\" t)
;;;	  (autoload 'resume \"revive\" \"Resume Emacs\" t)
;;;	  (autoload 'wipe \"revive\" \"Wipe emacs\" t)
;;;
;;;	\343\201\235\343\201\227\343\201\246\344\270\212\343\201\256\351\226\242\346\225\260\343\202\222\345\245\275\343\201\215\343\201\252\343\202\255\343\203\274\343\201\253\345\211\262\343\202\212\345\275\223\343\201\246\343\201\246\343\201\217\343\201\240\343\201\225\343\201\204\343\200\202\344\273\245\344\270\213\343\201\257\344\276\213\343\201\247\343\201\231\343\200\202
;;;
;;;	  (define-key ctl-x-map \"S\" 'save-current-configuration)
;;;	  (define-key ctl-x-map \"F\" 'resume)
;;;	  (define-key ctl-x-map \"K\" 'wipe)
;;;
;;;\343\200\220\344\275\277\343\201\204\346\226\271\343\200\221
;;;
;;;	  \344\270\212\343\201\256 define-key \343\202\222\343\201\227\343\201\237\345\240\264\345\220\210\343\201\253\343\201\257\343\200\201C-x S \343\201\247\347\217\276\345\234\250\343\201\256\347\267\250\351\233\206\347\212\266\346\205\213\343\202\222\343\202\273\343\203\274\343\203\226
;;;	\343\201\231\343\202\213\343\201\223\343\201\250\343\201\214\343\201\247\343\201\215\343\201\276\343\201\231\343\200\202save-current-configuration \351\226\242\346\225\260\343\201\253\346\225\260\345\274\225\346\225\260\343\202\222\343\201\244
;;;	\343\201\221\343\202\213\343\201\250\350\244\207\346\225\260\343\201\256\347\212\266\346\205\213\343\202\222\345\210\245\343\200\205\343\201\253\343\202\273\343\203\274\343\203\226\343\201\247\343\201\215\343\201\276\343\201\231\343\200\202\343\200\214C-u 2 C-x S\343\200\215\343\201\250\343\201\231\343\202\213\343\201\2502
;;;	\347\225\252\343\201\256\343\203\220\343\203\203\343\203\225\343\202\241\343\201\253\347\217\276\347\212\266\343\202\222\343\202\273\343\203\274\343\203\226\343\201\247\343\201\215\343\201\276\343\201\231\343\200\202\343\201\223\343\202\214\343\202\222\343\203\255\343\203\274\343\203\211\343\201\231\343\202\213\346\231\202\343\202\202\345\220\214\346\247\230\343\201\253
;;;	\343\200\214C-u 2 C-x F\343\200\215\343\201\250\343\202\277\343\202\244\343\203\227\343\201\231\343\202\213\343\201\2502\347\225\252\343\201\256\343\203\220\343\203\203\343\203\225\343\202\241\343\201\213\343\202\211\347\212\266\346\205\213\343\202\222\343\203\255\343\203\274\343\203\211\343\201\227\343\201\276\343\201\231\343\200\202
;;;
;;;\343\200\220\345\244\211\346\225\260\343\201\256\343\202\273\343\203\274\343\203\226\343\200\221
;;;
;;;	  \345\244\211\346\225\260\343\201\256\345\200\244\343\202\202\343\202\273\343\203\274\343\203\226\343\201\227\343\201\246\343\201\212\343\201\217\343\201\223\343\201\250\343\201\214\343\201\247\343\201\215\343\201\276\343\201\231\343\200\202\343\203\207\343\203\225\343\202\251\343\203\253\343\203\210\343\201\247\343\202\273\343\203\274\343\203\226\343\201\231\343\202\213
;;;	global \345\244\211\346\225\260\343\201\257 revive:save-variables-global-default \343\201\253\343\200\201local \345\244\211
;;;	\346\225\260\343\201\257 revive:save-variables-local-default \343\201\253\345\256\232\347\276\251\343\201\225\343\202\214\343\201\246\343\201\204\343\201\276\343\201\231\343\200\202\343\201\273
;;;	\343\201\213\343\201\256\345\244\211\346\225\260\343\202\202\344\277\235\345\255\230\343\201\227\343\201\237\343\201\204\345\240\264\345\220\210\343\201\257\343\200\201revive:save-variables-global-private
;;;	\343\201\253 global \345\244\211\346\225\260\345\220\215\343\202\222\343\200\201revive:save-variables-local-private \343\201\253 local
;;;	\345\244\211\346\225\260\345\220\215\343\202\222\343\201\235\343\202\214\343\201\236\343\202\214\343\203\252\343\202\271\343\203\210\343\201\256\345\275\242\343\201\247\345\256\232\347\276\251\343\201\227\343\201\246\343\201\212\343\201\215\343\201\276\343\201\231\343\200\202\344\276\213\343\201\210\343\201\260 gmhist \343\202\222\344\275\277\343\201\243
;;;	\343\201\246\343\201\204\343\202\213\345\240\264\345\220\210\343\201\253\343\201\257\343\200\201
;;;
;;;		(setq revive:save-variables-global-private
;;;		      '(file-history buffer-history minibuffer-history))
;;;
;;;	\343\201\252\343\201\251\343\201\250 ~/.emacs \343\201\253\346\233\270\343\201\204\343\201\246\343\201\212\343\201\217\343\201\250\345\277\253\351\201\251\343\201\247\343\201\227\343\202\207\343\201\206\343\200\202
;;;
;;;\343\200\220\346\231\256\351\200\232\343\201\247\343\201\252\343\201\204\343\203\220\343\203\203\343\203\225\343\202\241\343\201\256\346\211\261\343\201\204\343\200\221
;;;
;;;	  mh-rmail \343\201\247\343\201\257\343\202\253\343\203\254\343\203\263\343\203\210\343\203\220\343\203\203\343\203\225\343\202\241\343\201\214 mh-folder-mode, gnus \343\201\247\343\201\257\343\202\253\343\203\254
;;;	\343\203\263\343\203\210\343\203\220\343\203\203\343\203\225\343\202\241\343\201\214 gnus-Group-mode \343\201\253\343\201\252\343\202\212\343\201\276\343\201\231\343\200\202\343\201\223\343\201\256\345\257\276\345\277\234\351\226\242\344\277\202\343\201\257\343\200\201\345\244\211\346\225\260
;;;	revive:major-mode-command-alist-default \343\201\253\346\233\270\343\201\213\343\202\214\343\201\246\343\201\204\343\201\276\343\201\231\343\200\202\343\201\223\343\201\256\345\244\211
;;;	\346\225\260\343\201\253\347\231\273\351\214\262\343\201\225\343\202\214\343\201\246\343\201\204\343\202\213\344\273\245\345\244\226\343\201\256\343\202\202\343\201\256\343\202\222\345\256\232\347\276\251\343\201\227\343\201\237\343\201\204\345\240\264\345\220\210\343\201\257\343\200\201
;;;
;;;		(setq revive:major-mode-command-alist-private
;;;		  '((hogehoge-mode	. hoge)
;;;		    (herohero-mode	. herohero)
;;;		    (\"\343\202\277\343\202\244\343\203\227\357\274\206\343\203\241\343\203\213\343\203\245\343\203\274\"	. trr)))
;;;
;;;	\343\201\256\343\202\210\343\201\206\343\201\253 revive:major-mode-command-alist-private \343\201\256\345\200\244\343\202\222\350\250\255\345\256\232\343\201\231\343\202\213
;;;	\343\201\250\346\254\241\345\233\236 resume \343\201\227\343\201\237\346\231\202\343\201\253\350\207\252\345\213\225\347\232\204\343\201\253\345\257\276\345\277\234\343\201\231\343\202\213\343\202\263\343\203\236\343\203\263\343\203\211\343\201\214\350\265\267\345\213\225\343\201\225\343\202\214\343\201\276\343\201\231\343\200\202\343\201\276
;;;	\343\201\237\344\270\212\343\201\256\344\276\213\343\201\253\343\201\202\343\202\213\343\202\210\343\201\206\343\201\253\343\200\201major-mode(\343\202\267\343\203\263\343\203\234\343\203\253)\343\201\256\344\273\243\343\202\217\343\202\212\343\201\253 buffer-name
;;;	(\346\226\207\345\255\227\345\210\227)\343\202\222\346\214\207\345\256\232\343\201\231\343\202\213\343\201\223\343\201\250\343\202\202\343\201\247\343\201\215\343\201\276\343\201\231\343\200\202
;;;
;;;	  \343\201\276\343\201\237\343\200\201SKK\343\201\256\350\276\236\346\233\270\343\201\256\343\202\210\343\201\206\343\201\253\343\203\252\343\202\270\343\203\245\343\203\274\343\203\240\343\201\231\343\202\213\343\201\250\343\201\206\343\201\276\343\201\217\345\213\225\343\201\213\343\201\252\343\201\217\343\201\252\343\201\243\343\201\246\343\201\227
;;;	\343\201\276\343\201\206\343\203\220\343\203\203\343\203\225\343\202\241\343\201\214\343\201\202\343\202\213\345\240\264\345\220\210\343\201\257\343\200\201\345\244\211\346\225\260 revive:ignore-buffer-pattern \343\201\253\343\201\235
;;;	\343\201\256\343\203\220\343\203\203\343\203\225\343\202\241\345\220\215\343\201\214\343\203\236\343\203\203\343\203\201\343\201\231\343\202\213\343\202\210\343\201\206\343\201\252\346\255\243\350\246\217\350\241\250\347\217\276\343\202\222\350\250\255\345\256\232\343\201\227\343\201\246\343\201\217\343\201\240\343\201\225\343\201\204\343\200\202
;;;
;;;\343\200\220\343\203\227\343\203\255\343\202\260\343\203\251\343\203\240\343\201\213\343\202\211\344\275\277\343\201\206\343\200\221
;;;
;;;	  \350\213\261\350\252\236\347\211\210\343\203\211\343\202\255\343\203\245\343\203\241\343\203\263\343\203\210 [For programmers] \343\201\256\351\240\205\343\202\222\345\217\202\347\205\247\343\201\227\343\201\246\343\201\217\343\201\240\343\201\225\343\201\204\343\200\202
;;;
;;;\343\200\220\343\201\202\343\201\250\343\201\214\343\201\215\343\200\221
;;;
;;;	  \346\234\200\345\210\235\343\201\257 resume \343\201\250\343\201\204\343\201\206\343\203\225\343\202\241\343\202\244\343\203\253\345\220\215\343\201\240\343\201\243\343\201\237\343\201\256\343\201\247\343\201\231\343\201\214\343\200\201Emacs 19 \343\201\256\343\203\207\343\202\243
;;;	\343\203\254\343\202\257\343\203\210\343\203\252\343\201\253 resume.el \343\201\250\343\201\204\343\201\206\343\203\225\343\202\241\343\202\244\343\203\253\343\201\214\343\201\202\343\201\243\343\201\246\343\202\267\343\203\247\343\203\203\343\202\257\343\202\222\345\217\227\343\201\221\343\201\276\343\201\227\343\201\237\343\200\202
;;;	\343\201\223\343\201\241\343\202\211\343\201\257\343\202\263\343\203\236\343\203\263\343\203\211\343\203\251\343\202\244\343\203\263\343\201\247\344\275\225\345\233\236 emacs \343\201\250\346\211\223\343\201\243\343\201\246\343\202\202\343\200\201\346\227\242\343\201\253\350\265\267\345\213\225\343\201\227\343\201\246\343\201\204\343\202\213
;;;	emacs \343\201\253\343\203\225\343\202\241\343\202\244\343\203\253\343\202\222\346\270\241\343\201\231\343\201\250\343\201\204\343\201\206\343\201\240\343\201\221\343\201\256(\343\203\224\343\203\274\343\203\274)\343\203\227\343\203\255\343\202\260\343\203\251\343\203\240\343\201\247\343\200\214\343\201\251\343\201\223\343\201\214
;;;	resume \343\202\204\343\201\255\343\202\223\343\200\215\343\201\250\350\250\200\343\201\204\343\201\237\343\201\217\343\201\252\343\202\212\343\201\276\343\201\227\343\201\237\343\201\214\346\210\221\346\205\242\343\201\227\343\201\246 revive.el \343\201\253\343\203\252\343\203\215\343\203\274
;;;	\343\203\240\343\201\227\343\201\276\343\201\227\343\201\237\343\200\202\343\201\202\343\201\202\343\201\276\343\201\243\343\201\237\343\201\217\343\200\201saveconf \343\201\247\343\202\202 desktop \343\201\247\343\202\202\343\201\252\343\201\227\345\276\227\343\201\252\343\201\213\343\201\243
;;;	\343\201\237\343\202\246\343\202\243\343\203\263\343\203\211\343\202\246\345\210\206\345\211\262\347\212\266\346\205\213\343\201\256\345\276\251\345\205\203\343\202\222\343\202\265\343\203\235\343\203\274\343\203\210\343\201\227\343\201\237\343\201\250\350\250\200\343\201\206\343\201\256\343\201\253\342\200\246\343\200\201\343\201\252\343\202\223\343\201\246\343\201\223\343\201\250
;;;	\343\201\257\350\213\261\350\252\236\347\211\210\343\201\253\343\201\257\346\233\270\343\201\221\343\201\252\343\201\204\343\201\252:-)\343\200\202
;;;
;;;\343\200\220\345\217\226\343\202\212\346\211\261\343\201\204\343\200\221
;;;
;;;	  \343\201\223\343\201\256\343\203\227\343\203\255\343\202\260\343\203\251\343\203\240\343\201\257\343\200\201\343\203\225\343\203\252\343\203\274\343\202\275\343\203\225\343\203\210\343\202\246\343\202\247\343\202\242\343\201\250\343\201\204\343\201\237\343\201\227\343\201\276\343\201\231\343\200\202\343\201\223\343\201\256\343\203\227\343\203\255\343\202\260\343\203\251
;;;	\343\203\240\343\202\222\344\275\277\347\224\250\343\201\227\343\201\246\347\224\237\343\201\230\343\201\237\343\201\204\343\201\213\343\201\252\343\202\213\347\265\220\346\236\234\343\201\253\345\257\276\343\201\227\343\201\246\343\202\202\344\275\234\350\200\205\343\201\257\344\270\200\345\210\207\343\201\256\350\262\254\344\273\273\343\202\222\350\262\240\343\202\217\343\201\252
;;;	\343\201\204\343\202\202\343\201\256\343\201\250\343\201\204\343\201\237\343\201\227\343\201\276\343\201\231\343\201\214\343\200\201\343\202\263\343\203\241\343\203\263\343\203\210\343\202\204\343\203\220\343\202\260\343\203\254\343\203\235\343\203\274\343\203\210\343\201\257\345\244\247\343\201\204\343\201\253\346\255\223\350\277\216\343\201\204\343\201\237\343\201\227\343\201\276
;;;	\343\201\231\343\200\202\343\201\212\346\260\227\350\273\275\343\201\253\343\201\224\351\200\243\347\265\241\344\270\213\343\201\225\343\201\204\343\200\202\351\200\243\347\265\241\343\201\257\344\273\245\344\270\213\343\201\256\343\202\242\343\203\211\343\203\254\343\202\271\343\201\276\343\201\247\343\201\212\351\241\230\343\201\204\343\201\204\343\201\237\343\201\227\343\201\276
;;;	\343\201\231(2012/8\347\217\276\345\234\250)\343\200\202
;;;							yuuji@gentei.org

"]) (review-mode . [(20140102 2133) nil "major mode for ReVIEW" single ";;; Commentary:

;; ReVIEW\347\267\250\351\233\206\346\224\257\346\217\264\343\203\242\343\203\274\343\203\211
;; License:
;;   GNU General Public License version 2 (see COPYING)
;;
;; C-c C-a \343\203\246\343\203\274\343\202\266\343\203\274\343\201\213\343\202\211\347\267\250\351\233\206\350\200\205\343\201\270\343\201\256\343\203\241\343\203\203\343\202\273\343\203\274\343\202\270\346\223\254\344\274\274\343\203\236\343\203\274\343\202\253\343\203\274
;; C-c C-k \343\203\246\343\203\274\343\202\266\343\203\274\346\263\250\351\207\210\343\201\256\346\223\254\344\274\274\343\203\236\343\203\274\343\202\253\343\203\274
;; C-c C-d DTP\346\213\205\345\275\223\343\201\270\343\201\256\343\203\241\343\203\203\343\202\273\343\203\274\343\202\270\346\223\254\344\274\274\343\203\236\343\203\274\343\202\253\343\203\274
;; C-c C-r \345\217\202\347\205\247\345\205\210\343\202\222\343\201\202\343\201\250\343\201\247\347\242\272\350\252\215\343\201\231\343\202\213\346\223\254\344\274\274\343\203\236\343\203\274\343\202\253\343\203\274
;; C-c !   \344\275\234\346\245\255\351\200\224\344\270\255\343\201\256\346\223\254\344\274\274\343\203\236\343\203\274\343\202\253\343\203\274
;; C-c C-t 1 \344\275\234\346\245\255\350\200\205\345\220\215\343\201\256\345\244\211\346\233\264
;; C-c C-t 2 DTP\346\213\205\345\275\223\343\201\256\345\244\211\346\233\264
;;
;; C-c C-e \351\201\270\346\212\236\347\257\204\345\233\262\343\202\222\343\203\226\343\203\255\343\203\203\343\202\257\343\202\277\343\202\260\343\201\247\345\233\262\343\202\200
;; C-c C-f b \345\244\252\345\255\227\343\202\277\343\202\260(@<b>)\343\201\247\345\233\262\343\202\200
;; C-c C-f C-b \345\220\214\344\270\212
;; C-c C-f k \343\202\255\343\203\274\343\203\257\343\203\274\343\203\211\343\202\277\343\202\260(@<kw>)\343\201\247\345\233\262\343\202\200
;; C-c C-f C-k \343\202\255\343\203\274\343\203\257\343\203\274\343\203\211\343\202\277\343\202\260(@<kw>)\343\201\247\345\233\262\343\202\200
;; C-c C-f i \343\202\244\343\202\277\343\203\252\343\203\203\343\202\257\343\202\277\343\202\260(@<i>)\343\201\247\345\233\262\343\202\200
;; C-c C-f C-i \345\220\214\344\270\212
;; C-c C-f e \345\220\214\344\270\212
;; C-c C-f C-e \345\220\214\344\270\212
;; C-c C-f t \347\255\211\345\271\205\343\202\277\343\202\260(@<tt>)\343\201\247\345\233\262\343\202\200
;; C-c C-f C-t \345\220\214\344\270\212
;; C-c C-f u \345\220\214\344\270\212
;; C-c C-f C-u \345\220\214\344\270\212
;; C-c C-f a \347\255\211\345\271\205\343\202\244\343\202\277\343\203\252\343\203\203\343\202\257\343\202\277\343\202\260(@<tti>)\343\201\247\345\233\262\343\202\200
;; C-c C-f C-a \345\220\214\344\270\212
;; C-c C-f C-h \343\203\217\343\202\244\343\203\221\343\203\274\343\203\252\343\203\263\343\202\257\343\202\277\343\202\260(@<href>)\343\201\247\345\233\262\343\202\200
;; C-c C-f C-c \343\202\263\343\203\274\343\203\211\343\202\277\343\202\260(@<code>)\343\201\247\345\233\262\343\202\200
;; C-c C-f C-n \345\207\272\345\212\233\344\273\230\343\201\215\347\264\242\345\274\225\345\214\226(@<idx>)\343\201\231\343\202\213
;;
;; C-c C-p =\350\246\213\345\207\272\343\201\227\346\214\277\345\205\245(\343\203\254\343\203\231\343\203\253\343\202\222\346\214\207\345\256\232)
;; C-c C-b \345\220\271\343\201\215\345\207\272\343\201\227\343\202\222\345\205\245\343\202\214\343\202\213
;; C-c CR  \351\232\240\343\201\227\347\264\242\345\274\225(@<hidx>)\343\202\222\345\205\245\343\202\214\343\202\213
;; C-c <   raw\343\201\256HTML\351\226\213\343\201\215\343\202\277\343\202\260\343\202\222\345\205\245\343\202\214\343\202\213
;; C-c >   raw\343\201\256HTML\351\226\211\343\201\230\343\202\277\343\202\260\343\202\222\345\205\245\343\202\214\343\202\213
;;
;; C-c 1   \350\277\221\346\211\200\343\201\256URI\343\202\222\346\244\234\347\264\242\343\201\227\343\201\246\343\203\226\343\203\251\343\202\246\343\202\266\343\202\222\351\226\213\343\201\217
;; C-c 2   \347\257\204\345\233\262\343\202\222URI\343\201\250\343\201\227\343\201\246\343\203\226\343\203\251\343\202\246\343\202\266\343\202\222\351\226\213\343\201\217
;; C-c (   \345\205\250\350\247\222(
;; C-c 8   \345\220\214\344\270\212
;; C-c )   \345\205\250\350\247\222)
;; C-c 9   \345\220\214\344\270\212
;; C-c [   \343\200\220
;; C-c ]    \343\200\221
;; C-c -    \345\205\250\350\247\222\343\203\200\343\203\274\343\202\267
;; C-c *    \345\205\250\350\247\222\357\274\212
;; C-c /    \345\205\250\350\247\222\357\274\217
;; C-c \\    \357\277\245
;; C-c SP   \345\205\250\350\247\222\343\202\271\343\203\232\343\203\274\343\202\271
;; C-c :    \345\205\250\350\247\222\357\274\232

"]) (reverse-theme . [(20130402 312) nil "Reverse theme for Emacs" single ";;; Commentary:
;;
;; Color theme as 'emacs -r' or 'emacs --reverse-video'.
;; Frames created by `make-frame-command' or 'emacsclient --create-frame'
;; are not applied reverse color with '-r' or 'reverse-video' option
;;

"]) (restclient . [(20131204 607) nil "An interactive HTTP client for Emacs" tar nil]) (requirejs-mode . [(20130215 1304) nil "Improved AMD module management" single ";;; Commentary:

;; This mode helps to manage dependencies in an AMD javascript module.
;; See https://github.com/ricardmo/requirejs-mode for full documentation.

"]) (request . [(20130526 1015) nil "Compatible layer for URL request in Emacs" tar ";;; Commentary:

;; Request.el is a HTTP request library with multiple backends.  It
;; supports url.el which is shipped with Emacs and curl command line
;; program.  User can use curl when s/he has it, as curl is more reliable
;; than url.el.  Library author can use request.el to avoid imposing
;; external dependencies such as curl to users while giving richer
;; experience for users who have curl.

;; Following functions are adapted from GNU Emacs source code.
;; Free Software Foundation holds the copyright of them.
;; * `request--process-live-p'
;; * `request--url-default-expander'

"]) (req-package . [(20140103 817) ((use-package (1 0))) "A use-package wrapper for package runtime dependencies management" single ";;; Commentary:

;; Description

;; req-package is a macro wrapper on top of use-package.
;; It's goal is to simplify package dependencies management,
;; when using use-package for your .emacs.

;; Usage

;; 1) Load req-package:

;;    (require 'req-package)

;; 2) Define required packages with dependencies using :require like this:

;;    (req-package dired) ;; you can omit this empty requirement because of dired-single

;;    (req-package dired-single
;;                 :require dired
;;                 :init (...))

;;    (req-package lua-mode
;;                 :init (...))

;;    (req-package flymake)

;;    (req-package flymake-lua
;;                 :require (flymake lua-mode)
;;                 :init (...))

;; 3) To start loading packages in right order:

;;    (req-package-finish)

;; After calling req-package-finish targets list is cleaned and
;; you can start requiring and loading a new bunch of packages.
;; It may be useful when you need to load some package after all.

;; Migrate from use-package

;;    Just replace all (use-package ...) with (req-package [:require DEPS] ...)
;;    and add (req-package-finish) at the end of your configuration file.

;; Note

;;    All use-package parameters are supported, see use-package manual for additional info.

;;    Also there are possible troubles with :defer keyword provided by use-package.
;;    If you want to use it, try :defer all packages in one dependency tree.

;; Changelog:

;;    v0.4-all-cycles:
;;       All cycles of your dependencies will be printed.
;;       Also there are more handy log messages and some bug fixes.
;;    v0.3-cycles:
;;       There are nice error messages about cycled dependencies now.
;;       Cycles printed in a way: pkg1 -> [pkg2 -> ...] pkg1.
;;       It means there is a cycle around pkg1.
;;    v0.2-auto-fetch:
;;       There is no need of explicit :ensure in your code now.
;;       When you req-package it adds :ensure if package is available in your repos.
;;       Also package deps :ensure'd automatically too.
;;       Just write (req-package pkg1 :require pkg2) and all you need will be installed.

"]) (replace-from-region . [(20130918 308) nil "Replace commands whose query is from region" single ";;; Commentary: 
;; 
;; Replace commands whose query is from region
;; `query-replace' -> `query-replace-from-region'
;; `query-replace-regexp' -> `query-replace-regexp-from-region'

"]) (replace+ . [(20140113 1710) nil "Extensions to `replace.el'." single ";;; Commentary:
;;
;;    Extensions to `replace.el'.
;;
;;  Commands defined here:
;;
;;    `occur-unhighlight-visited-hits', `query-replace-w-options',
;;    `toggle-replace-w-completion',
;;    `toggle-search/replace-region-as-default'.
;;
;;  Faces defined here:
;;
;;    `occur-highlight-linenum', `replacep-msg-emphasis',
;;    `replacep-msg-emphasis2'.
;;
;;  User options defined here:
;;
;;    `replace-w-completion-flag',
;;    `search/replace-region-as-default-flag',
;;    `search/replace-2nd-sel-as-default-flag',
;;    `search/replace-default-fn'.
;;
;;  Non-interactive functions defined here:
;;
;     `replacep-propertize', `replacep-remove-property',
;     `replacep-string-match-p.', `search/replace-default',
;     `usable-region'.
;;
;;  Internal variable defined here:
;;
;;    `occur-regexp', `occur-searched-buffers'.
;;
;;
;;  ***** NOTE: The following functions defined in `replace.el' have
;;              been REDEFINED or ADVISED HERE:
;;
;;    `flush-lines' - (Not needed for Emacs 21)
;;                    1. The prompt mentions that only lines after
;;                       point are affected.
;;                    2. The default input is provided by
;;                       `search/replace-region-as-default-flag' or
;;                       `search/replace-2nd-sel-as-default-flag' or
;;                       `search/replace-default-fn', in that order.
;;                    3. An in-progress message has been added.
;;    `how-many' - (Not needed for Emacs 21)
;;                 1. Prompt mentions tlines after point are affected.
;;                 2. The default input is provided by
;;                    `search/replace-region-as-default-flag' or
;;                    `search/replace-2nd-sel-as-default-flag' or
;;                    `search/replace-default-fn', in that order.
;;                 3. An in-progress message has been added.
;;    `keep-lines' - Same as `flush-lines'. (Not needed for Emacs 21)
;;    `occur' - Default from `search/replace-region-as-default-flag'
;;              or `search/replace-2nd-sel-as-default-flag'
;;              or `search/replace-default-fn' (Emacs 20 only)
;;    `occur', `multi-occur', `multi-occur-in-matching-buffers' -
;;              Regexp is saved as `occur-regexp' for use by
;;              `occur-mode-mouse-goto'
;;    `occur-engine' - Save list of searched buffers in
;;                     `occur-searched-buffers' (Emacs 22+)
;;    `occur-mode-goto-occurrence', `occur-mode-display-occurrence',
;;    `occur-mode-goto-occurrence-other-window',
;;    `occur-mode-mouse-goto' - Highlight regexp in source buffer
;;                              and visited linenum in occur buffer.
;;    `occur-read-primary-args' - (Emacs 21 only) Default regexps via
;;                                `search/replace-default'.
;;    `query-replace', `query-replace-regexp', `replace-string',
;;      `replace-regexp'        - No \" in region\" in prompt if
;;                                `*-region-as-default-flag'.
;;    `query-replace-read-args' - 1. Uses `completing-read' if
;;                                   `replace-w-completion-flag' is
;;                                   non-nil.
;;                                2. Default regexps are obtained via
;;                                   `search/replace-default'.
;;                                3. Deactivates region if
;;                                   `*-region-as-default-flag'.
;;    `query-replace-read-(from|to)' - Like `query-replace-read-args',
;;                                     but for Emacs 21+.
;;    `read-regexp' (Emacs 23-24.2) -
;;                        1. Allow DEFAULTS to be a list of strings.
;;                        2. Prepend DEFAULTS to the vanilla defaults.
;;
;;
;;  This file should be loaded after loading the standard GNU file
;;  `replace.el'.  So, in your `~/.emacs' file, do this:
;;  (eval-after-load \"replace\" '(progn (require 'replace+)))
;;
;;  For Emacs releases prior to Emacs 22, these Emacs 22 key bindings
;;  are made here:
;;
;;   (define-key occur-mode-map \"o\" 'occur-mode-goto-occurrence-other-window)
;;   (define-key occur-mode-map \"\\C-o\" 'occur-mode-display-occurrence))
;;
;;  Suggested additional key binding:
;;
;;   (substitute-key-definition 'query-replace 'query-replace-w-options
;;                              global-map)
;;
;;  If you want the highlighting of regexp matches in the searched
;;  buffers to be removed when you quit occur or multi-occur, then add
;;  function `occur-unhighlight-visited-hits' to an appropripate hook.
;;  For example, to have this happen when you kill the occur buffer,
;;  add it to `kill-buffer-hook':
;;
;;    (add-hook 'kill-buffer-hook 'occur-unhighlight-visited-hits)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (repl-toggle . [(20140113 1103) ((fullframe (0 0 1))) "Switch to/from repl buffer for current major-mode" single ";;; Commentary:
;;
;; This is a generalization of an idea by Mickey Petersen of
;; masteringemacs fame: Use one keystroke to jump from a code buffer
;; to the corresponding repl buffer and back again.  This works even if
;; you do other stuff in between, as the last buffer used to jump to a
;; repl is stored in a buffer local variable in the repl buffer.
;;
;; Currently this assumes that the stored command to start the repl
;; will switch to an already open repl buffer if it exists.
;;
;; There are no repl/mode combinations preconfigured, put something
;; like the following in your Emacs setup for php and elisp repl:
;;
;;     (require 'repl-toggle)
;;     (setq rtog/mode-repl-alist '((php-mode . php-boris) (emacs-lisp-mode . ielm)))
;; 
;; This defines a global minor mode, indicated at with 'rt' in the modeline, that
;; grabs \"C-c C-z\" as repl toggling keybinding.
;;
;; I don't know with wich repl modes this actualy works.  If you use
;; this mode, please tell me your rtog/mode-repl-alist, so that I can
;; update the documentation.
;;
;; Known to work:
;;
;; - ~(php-mode . php-boris)~
;; - ~(emacs-lisp-mode . ielm)~
;; - ~(elixir-mode . elixir-mode-iex)~
;; - ~(ruby-mode . inf-ruby)~
;;
;; If you supply the universal prefix argument you can
;;
;; - C-u pass the current line
;; - C-u C-u pass the current defun
;; - C-u C-u C-u pass the the whole current buffer
;;
;; to the repl buffer you switch to.
;;
;; If you set rtog/fullscreen to true, prior to loading this module,
;; the repl-commands will be executed fullscreen, i.e. as single
;; frame, restoring the window-layout on stwitching back to the
;; buffer.
;;
"]) (relax . [(20131029 1434) ((json (1 2))) "For browsing and interacting with CouchDB" single ";;; Commentary:

;; Interact with CouchDB databases from within Emacs, with ease!

;; M-x relax to get started. From there hit C-h b.

;;; Installation:

;; Use ELPA. (http://tromey.com/elpa/install.html)

;; If installing by hand for some reason, place on your load path and
;; put this in your init file:

;; (autoload 'relax \"relax\" \"Connect to the CouchDB database at db-url.\" t)

;; It depends on json.el and js.el. These are available
;; through ELPA or if you need to get them manually download from
;; http://edward.oconnor.cx/elisp/json.el and
;; http://download.savannah.gnu.org/releases-noredirect/espresso/espresso.el

;; Tested with CouchDB 0.9.

"]) (region-bindings-mode . [(20130430 1447) nil "Enable custom bindings when mark is active." single ";;; Commentary:

;; Minor mode that enables the ability of having a custom keys for
;; working with regions.  This is a pretty good way to keep the global
;; bindings clean.

;;; Installation:

;; Add this to your .emacs:

;; (add-to-list 'load-path \"/folder/containing/file\")
;; (require 'region-bindings-mode)
;; (region-bindings-mode-enable)

"]) (regex-tool . [(20131104 1434) nil "A regular expression evaluation tool for programmers" single ";;; Commentary:

;; This program currently uses frames only.
;;
;; After you type M-x regex-tool, you will see three buffers: *Regex*, *Text*
;; and *Groups*.  The *Regex* buffer contains your regular expression.  By
;; default, this tool uses Emacs regular expressions.  If you customize the
;; variable `regex-tool-backend', you can switch to using full Perl regular
;; expressions.
;;
;; The *Text* buffer contains the sample text you want to match against.
;; Change this however you like.
;;
;; The *Groups* buffer will list out any regular expression groups that match.
;; Your regular expression is searched for as many times as it appears in the
;; buffer, and any groups that match will be repeated.
;;
;; The results are updated as you type in either the *Regex* or *Text* buffer.
;; Use C-c C-c to force an update.  Use C-c C-k to quit all the regex-tool
;; buffers and remove the frame.

;;; Version History:

;; 1.1 - Don't die horribly if the user simply types '^' or '$'
;; 1.2 - Include cl.el at compile time

(eval-when-compile
  (require 'cl))

(defgroup regex-tool nil
  \"Outline-based notes management and organizer.\"
  :tag \"Org\"
  :group 'programming)

(defvar regex-tool-mode-map (make-sparse-keymap))
(defvar regex-tool-mode-abbrev-table)

(define-derived-mode regex-tool-mode text-mode \"Regex Tool\"
  \"This is regex-tool mode.\"
  (define-key regex-tool-mode-map [(control ?c) (control ?c)]
    'regex-tool-markup-text)
  (define-key regex-tool-mode-map [(control ?c) (control ?k)]
    'regex-tool-quit)
  (add-hook 'after-change-functions 'regex-tool-markup-text nil t))

(defface regex-tool-matched-face
  '((((background light)) (:foreground \"Red\" :bold t))
    (((background dark)) (:foreground \"Orange\" :bold t)))
  \"\"
  :group 'regex-tool)

(defcustom regex-tool-backend 'emacs
  \"The backend used to process regular expressions.
The `emacs' backend handles regular expressions directly.
The `perl' backend talks to a perl subprocess to do the handling.\\\"
\"
  :type '(choice
	  (const :tag \"Emacs\" emacs)
	  (const :tag \"Perl\" perl))
  :group 'regex-tool)

(defun regex-render-perl (regex sample)
  (with-temp-buffer
    (insert (format \"@lines = <DATA>;
$line = join(\\\"\\\", @lines);
print \\\"(\\\";
while ($line =~ m/%s/mg) {
  print \\\"(\\\", length($`), \\\" \\\", length($&), \\\" \\\";
  for $i (1 .. 20) {
    if ($$i) {
      my $group = $$i;
      $group =~ s/([\\\\\\\\\\\"])/\\\\\\\\\\\\1/g;
      print \\\"(\\\", $i, \\\" . \\\\\\\"\\\", $group, \\\"\\\\\\\") \\\";
    }
  }
  print \\\")\\\";
}
print \\\")\\\";
__DATA__
%s\" regex sample))
   (call-process-region (point-min) (point-max) \"perl\" t t)
   (goto-char (point-min))
   (read (current-buffer))))

(defvar regex-expr-buffer nil)
(defvar regex-text-buffer nil)
(defvar regex-group-buffer nil)

;;;###autoload
(defun regex-tool ()
  (interactive)
  (select-frame (make-frame-command))
  (split-window-vertically)
  (split-window-vertically)
  (balance-windows)
  (setq regex-expr-buffer (get-buffer-create \"*Regex*\"))
  (switch-to-buffer regex-expr-buffer)
  (regex-tool-mode)
  (other-window 1)
  (setq regex-text-buffer (get-buffer-create \"*Text*\"))
  (switch-to-buffer regex-text-buffer)
  (goto-char (point-min))
  (if (eolp)
      (insert \"Hello, this is text your regular expression will match against.\"))
  (regex-tool-mode)
  (other-window 1)
  (setq regex-group-buffer (get-buffer-create \"*Groups*\"))
  (switch-to-buffer regex-group-buffer)
  (other-window 1))

(defun regex-tool-markup-text (&optional beg end len)
  (interactive)
  (let ((regex (with-current-buffer regex-expr-buffer
		 (buffer-string)))
	previous-point)
    (when (> (length regex) 0)
      (with-current-buffer regex-group-buffer
	(erase-buffer))
      (with-current-buffer regex-text-buffer
	(remove-overlays)
	(save-excursion
	  (ignore-errors
	    (goto-char (point-min))
	    (if (eq regex-tool-backend 'emacs)
		(while (and (setq previous-point (point))
			    (re-search-forward regex nil t))
		  (if (= (point) previous-point)
		      (forward-char 1)
		    (overlay-put (make-overlay (match-beginning 0)
					       (match-end 0))
				 'face 'regex-tool-matched-face)
		    (dotimes (i 10)
		      (let ((text (match-string i)))
			(if text
			    (save-match-data
			      (with-current-buffer regex-group-buffer
				(goto-char (point-max))
				(insert (format \"Group %d: '%s'\\n\" i text)))))))
		    (with-current-buffer regex-group-buffer
		      (insert ?\\n))))
	      (let ((results (regex-render-perl regex (buffer-string))))
		(dolist (result results)
		  (let ((offset (nth 0 result))
			(length (nth 1 result))
			(matches (nthcdr 2 result)))
		    (overlay-put (make-overlay (1+ offset) (+ offset length 1))
				 'face 'regex-tool-matched-face)
		    (let ((match-zero (buffer-substring (1+ offset)
							(+ offset length 1))))
		      (with-current-buffer regex-group-buffer
			(insert (format \"Group 0: '%s'\\n\" match-zero))))
		    (dolist (match matches)
		      (with-current-buffer regex-group-buffer
			(goto-char (point-max))
			(insert (format \"Group %d: '%s'\\n\" (car match)
					(cdr match)))))
		    (with-current-buffer regex-group-buffer
		      (insert ?\\n)))))))))
      (with-current-buffer regex-group-buffer
	(goto-char (point-min))))))

(defun regex-tool-quit ()
  (interactive)
  (kill-buffer regex-expr-buffer)
  (kill-buffer regex-text-buffer)
  (kill-buffer regex-group-buffer)
  (delete-frame))

(provide 'regex-tool)

;;; regex-tool.el ends here
"]) (regex-dsl . [(20100124 228) nil "lisp syntax for regexps" single ";;; Commentary:

;; 

"]) (refheap . [(20140112 1302) ((json (1 2))) "A library for pasting to https://refheap.com" single nil]) (redshank . [(20120510 1230) nil "No description available." tar nil]) (redo+ . [(20131117 1151) nil "Redo/undo system for Emacs" single ";;; Commentary:

;; redo+.el is bug fix and extended version of XEmacs' redo package.

;; Emacs' normal undo system allows you to undo an arbitrary
;; number of buffer changes.  These undos are recorded as ordinary
;; buffer changes themselves.  So when you break the chain of
;; undos by issuing some other command, you can then undo all
;; the undos.  The chain of recorded buffer modifications
;; therefore grows without bound, truncated only at garbage
;; collection time.
;;
;; The redo/undo system is different in two ways:
;;   1. The undo/redo command chain is only broken by a buffer
;;      modification.  You can move around the buffer or switch
;;      buffers and still come back and do more undos or redos.
;;   2. The `redo' command rescinds the most recent undo without
;;      recording the change as a _new_ buffer change.  It
;;      completely reverses the effect of the undo, which
;;      includes making the chain of buffer modification records
;;      shorter by one, to counteract the effect of the undo
;;      command making the record list longer by one.

;;
;; Installation:
;;
;; Save this file as redo+.el, byte compile it and put the
;; resulting redo.elc file in a directory that is listed in
;; load-path.
;;
;; In your .emacs file, add
;;   (require 'redo+)
;; and the system will be enabled.
;;
;; In addition, if you don't want to redo a previous undo, add
;;   (setq undo-no-redo t)
;; You can also use a function `undo-only' instead of `undo'
;; in GNU Emacs 22 or later.


;; History:
;; 2013-11-17  S. Irie
;;         * Fix the time entry not properly generated on Emacs 24
;;         * Use `user-error' if available
;;         * Version 1.19
;;
;; 2013-10-19  S. Irie
;;         * Fix package.el/MELPA issue (\"---\" in the first line required)
;;         * Version 1.18
;;
;; 2013-10-12  S. Irie
;;         * Fix errors that occur on Emacs 22/24
;;           (The fix in 1.16 was incorrect.  It actually did nothing.)
;;         * Version 1.17
;;
;; 2013-04-23  HenryVIII
;;         * Fix for GNU bug report #12581
;;         * Version 1.16
;;
;; 2009-01-07  S. Irie
;;         * Delete unnecessary messages
;;         * Bug fix
;;         * Version 1.15
;;
;; 2008-05-23  S. Irie
;;         * Bug fix
;;         * Version 1.14
;;
;; 2008-05-11  S. Irie
;;         * Record unmodified status entry when redoing
;;         * Version 1.13
;;
;; 2008-05-10  S. Irie
;;         * Bug fix
;;         * Version 1.12
;;
;; 2008-05-09  S. Irie
;;         * Bug fix
;;         * Version 1.11
;;
;; 2008-04-02  S. Irie
;;         * undo-no-redo available
;;         * GNU Emacs menu-bar and tool-bar item
;;         * Bug fix
;;         * Version 1.10

;; ToDo:
;;
;; - undo/redo in region

"]) (recursive-narrow . [(20111019 1608) nil "narrow-to-region that operates recursively" single ";;; Commentary:

;; This package defines two functions, recursive-narrow-to-region and
;; recursive-widen that replace the builtin functions narrow-to-region and
;; widen.  These functions operate the same way, except in the case of multiple
;; calls to recursive-narrow-to-region.  In this case, recursive-widen will go
;; to the previous buffer visibility, not make the entire buffer visible.

;;; Installation:

;; To install, put this file somewhere in your load-path and add the following
;; to your .emacs file:
;;
;; (require 'recursive-narrow)
;; (global-set-key (kbd \"C-x n n\") 'recursive-narrow-to-region)
;; (global-set-key (kbd \"C-x n w\") 'recursive-widen)
;;

"]) (rect+ . [(20130811 1744) nil "Extensions to rect.el" single ";;; Commentary:

;; rect+.el provides extensions to rect.el

"]) (recentf-ext . [(20130130 2150) nil "Recentf extensions" single ";;; Commentary:
;;
;; Extension of `recentf' package.
;;
;; * `dired' buffers can be handled.
;; * Switching to file buffer considers it as most recent file.

"]) (rebox2 . [(20121113 500) nil "Handling of comment boxes in various styles." single ";;; Commentary:

                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                     ;; Hi, I'm a box. My style is 525 ;;
                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Features first:
;;
;; ** minor-mode features
;;
;;    - auto-fill boxes (install filladapt for optimal filling)
;;    - motion (beginning-of-line, end-of-line) within box
;;    - S-return rebox-newline
;;    - kill/yank (within box) only text, not box borders
;;    - move box by using space, backspace / center with M-c
;;      - point has to be to the left of the border
;;
;; ** interesting variables for customization
;;
;;    - `rebox-style-loop'
;;    - `rebox-min-fill-column'
;;    - `rebox-allowance'


;;; Installation:
;;
;; 1. Add rebox2.el to a directory in your load-path.
;;
;; 2. Basic install - add to your \".emacs\":
;;
;;        (setq rebox-style-loop '(24 16))
;;        (require 'rebox2)
;;        (global-set-key [(meta q)] 'rebox-dwim)
;;        (global-set-key [(shift meta q)] 'rebox-cycle)
;;
;;    Note that if you do not need to specify the HUNDREDS digit of the style,
;;    rebox will figure it out based on the major-moe.
;;
;; 3. Full install - use `rebox-mode' in major-mode hooks:
;;
;;        ;; setup rebox for emacs-lisp
;;        (add-hook 'emacs-lisp-mode-hook (lambda ()
;;                                          (set (make-local-variable 'rebox-style-loop) '(25 17 21))
;;                                          (set (make-local-variable 'rebox-min-fill-column) 40)
;;                                          (rebox-mode 1)))
;;
;;    Default `rebox-style-loop' should work for most programming modes, however,
;;    you may want to set the style you prefer.
;;
;;    Here is an customization example that
;;
;;      - sets comments to use \"/* ... */\" style in c++-mode
;;      - adds Doxygen box style for C++

;;        (defun my-c++-setup ()
;;          (setq comment-start \"/* \"
;;                comment-end \" */\")
;;          (unless (memq 46 rebox-style-loop)
;;            (make-local-variable 'rebox-style-loop)
;;            (nconc rebox-style-loop '(46))))
;;        (add-hook 'c++-mode-hook #'my-c++-setup)
;;
;;; Ideas removed from Fran\303\247ois Pinard's original version
;;
;; * Building styles on top of each other.
;;

;;; Future improvement ideas:
;;
;; * remove reliance on dynamic binding using `destructuring-bind' or a hash
;; * allow mixed borders \"-=-=-=-=-=-\"
;; * optimize functions that modify the box contents so they don't unbuild and
;;   rebuild boxes all the time.
;; * style selection can use some kind of menu completion where all styles are
;;   presented and the user navigates
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (realgud . [(20131222 249) nil "A modular front-end for interacting with external debuggers" tar ";;; Commentary:

;; Once upon a time in an Emacs far far away and a programming-style
;; long gone, there was a monolithic Cathederal-like debugger
;; front-end. This interfaced with a number of debuggers, some of them
;; now dead. Is there anyone still alive that remembers sdb from
;; UNIX/32V?  http://en.wikipedia.org/wiki/UNIX/32V
;;
;; This isn't that. Here we make use of more modern programming
;; practices, more numerous and smaller files, unit tests, and better
;; use of emacs primitives (e.g. buffer marks, buffer-local variables,
;; structures, rings, hash tables). Although there is still much to be
;; desired, this code is more scalable and suitable as a common base for
;; an Emacs front-end to modern debuggers.
;;
;; Oh, and because global variables are largely banned, we can support
;; several simultaneous debug sessions.
;;
;;
;; The debuggers we currently support are:

;;   NAME           INVOCATION**  WHAT
;    -----------------------------------
;;   bashdb         bashdb        bash
;;   Devel::Trepan  trepan.pl     Perl5
;;   gdb            realgud-gdb   gdb
;;   kshdb          kshdb         Korn Shell 93u+
;;   pdb            pdb           stock C Python debugger
;;   perldb         perldb        stock Perl5 debugger
;;   pydb           pydb          slighly enhanced pdb for Python 2.x
;;   pydbgr         pydbgr        obsolete trepanning debugger for Python 2.x
;;   rb8-trepanning trepan8       MRI Ruby 1.8 and an unpatched YARV 1.9
;;   rbx-trepanning trepanx       trepanning debugger for Rubinius Ruby
;;   remake         remake        GNU Make
;;   ruby-debug     rdebug        Ruby
;;   trepanning     trepan        trepanning debugger for a patched Ruby 1.9
;;   trepan2        trepan2       trepanning debugger for Python 2.x
;;   trepan3k       trepan3k      trepanning debugger for Python 3.x
;;   zshdb          zshdb         Zsh
;;
;; And possibly (commented out for now):
;;   gub            gub           Go SSA debugger
;;
;; **gdb invocation requires the realgud- preface to disambiguate it
;; from the older, preexisting emacs command. The other invocations
;; also accept realgud- prefaces, e.g. realgud-bashdb or realgud-pdb.
;; Alas there is older obsolete Emacs code out there for bashdb,
;; kshdb, and rdebug.

;; If you don't see your favorite debugger above, see
;; https://github.com/rocky/emacs-dbgr/wiki/How-to-add-a-new-a-debugger
;; for how you can add your own.

;; The debugger is run out of a comint process buffer, or you can use
;; a `track-mode' inside an existing shell.

;; To install you will need a couple of other Emacs packages
;; installed. If you install via Melpa these will be pulled in
;; automatically. See the installation instructions
;; https://github.com/rocky/emacs-dbgr/wiki/How-to-Install for how to
;; install.

"]) (readline-complete . [(20120705 243) nil "offers completions in shell mode" single ";;; Commentary:

;; I find it particularly annoying that Emacs *shell* buffers do not
;; offer satisfactory completions, but xterm does. I even used
;; ansi-term for a while because of this (oh god). What I really
;; wanted was for Emacs to show completions via auto-complete.el, like
;; every other mode I use often. This package hopes to deliver on that
;; promise.

;; xterm and friends get their completions from readline, a GNU
;; library that is aware of your context and monitors your keystrokes
;; for TABs and what not so you can be shown a list of
;; completions. readline-complete.el gives you a process filter that
;; tries to parse readline completion menus and give Emacs a list of
;; strings that are valid for completion in the current context.

;;; Installation:

;; There is no one \"right\" way to install this package, because it
;; does not provide any user level commands. I find that it works
;; particularly well with shell-mode and auto-complete.el, so I'll
;; describe how my setup works.

;; First, let us setup shell-mode. shell-mode, by default, does not
;; create a tty (terminal) and does not echo input, both of which are
;; required for proper operation. To fix this, adjust the arguments to
;; your shell:

;; (setq explicit-shell-file-name \"bash\")
;; (setq explicit-bash-args '(\"-c\" \"export EMACS=; stty echo; bash\"))
;; (setq comint-process-echoes t)

;; ASIDE: if you call ssh from shell directly, add \"-t\" to explicit-ssh-args to enable terminal.

;; Second, we need to install auto-complete.el. Go ahead and get that
;; from http://cx4a.org/software/auto-complete/, and follow the
;; instructions for setup.

;; Third, we need to setup readline-complete and enable auto-complete.

;; (require 'readline-complete)
;;
;; (add-to-list 'ac-modes 'shell-mode)
;; (add-hook 'shell-mode-hook 'ac-rlc-setup-sources)

;; Finally, M-x shell, and start typing!

;; For customization, see the docstrings of `rlc-timeout`,
;; `rlc-attempts`, and `ac-rlc-prompts`.

"]) (rdp . [(20120928 1854) nil "Recursive Descent Parser library" single ";;; Commentary:

;; This library provides a recursive descent parser for parsing
;; languages in buffers. Some support is provided for implementing
;; automatic indentation based on the parser.

;; In general, the only two functions you need to worry about are:

;; * `rdp-parse'        -- parse the current buffer
;; * `rdp-parse-string' -- parse a string (in a temp buffer)

;; A grammar is provided to the parser as an alist of patterns.
;; Patterns are named by symbols, which can reference other
;; patterns. The lisp object type indicates the type of the pattern:

;; * string -- an Emacs regular expression
;; * list   -- \"and\" relationship, each pattern must match in order
;; * vector -- \"or\" relationship, one of the patterns must match
;; * symbol -- recursive reference to another pattern in the alist

;; The global variable `rdp-best' indicates the furthest point reached
;; in the buffer by the parser. If parsing failed (i.e. `rdp-best' is
;; not at the end of the buffer), this is likely to be the position of
;; the syntax error.

;; For example, this grammar parses simple arithmetic with operator
;; precedence and grouping.

;;     (defvar arith-tokens
;;       '((sum       prod  [([+ -] sum)  no-sum])
;;         (prod      value [([* /] prod) no-prod])
;;         (num     . \"-?[0-9]+\\\\(\\\\.[0-9]*\\\\)?\")
;;         (+       . \"\\\\+\")
;;         (-       . \"-\")
;;         (*       . \"\\\\*\")
;;         (/       . \"/\")
;;         (pexpr     \"(\" [sum prod num pexpr] \")\")
;;         (value   . [pexpr num])
;;         (no-prod . \"\")
;;         (no-sum  . \"\")))

;; Given just this grammar to `rdp-parse' it will return an
;; s-expression of the input where each token match is `cons'ed with
;; the token name. To make this more useful, the s-expression can be
;; manipulated as it is read using an alist of token names and
;; functions. This could be used to simplify the s-expression, build
;; an interpreter that interprets during parsing, or even build a
;; compiler.

;; For example, this function alist evaluates the arithmetic as it is
;; parsed:

;;     (defun arith-op (expr)
;;       (destructuring-bind (a (op b)) expr
;;         (funcall op a b)))
;;
;;     (defvar arith-funcs
;;       `((sum     . ,#'arith-op)
;;         (prod    . ,#'arith-op)
;;         (num     . ,#'string-to-number)
;;         (+       . ,#'intern)
;;         (-       . ,#'intern)
;;         (*       . ,#'intern)
;;         (/       . ,#'intern)
;;         (pexpr   . ,#'cadr)
;;         (value   . ,#'identity)
;;         (no-prod . ,(lambda (e) '(* 1)))
;;         (no-sum  . ,(lambda (e) '(+ 0)))))

;; Putting this all together:

;; (defun arith (string)
;;   (rdp-parse-string string arith-tokens arith-funcs))
;;
;; (arith \"(1 + 2 + 3 + 4 + 5) * -3/4.0\")

;; Tips:

;; Recursive descent parsers *cannot* be left-recursive. It is
;; important that a pattern does not recurse without first consuming
;; some input. Any grammar can be made non-left-recursive but not
;; necessarily simplistically.

;; The parser requires a lot of stack! Consider increasing
;; `max-lisp-eval-depth' by some factor before calling
;; `rdp-parse'. After increasing it, running out of stack space is
;; likely an indication of left-recursion somewhere in the grammar.

;; Token functions should not have side effects. Due to the
;; backtracking of the parser, just because the function was called
;; doesn't mean there was actually a successful match. Also, these
;; functions are free to return nil or the empty list as such a return
;; is *not* an indication of failure.

;; By default, whitespace is automatically consumed between matches
;; using the function `rdp-skip-whitespace'. If some kinds of
;; whitespace are important or if there are other characters that need
;; to be skipped, temporarily override this function with your own
;; definition using `flet' when calling `rdp-parse'.

;; In general don't try to parse comments in the grammar. Strip them
;; from the buffer before calling the parser.

;; Indentation facilities:

;; To find out where in the parse tree a point lies, set `rdp-start'
;; to the desired point before starting parsing. After parsing, either
;; successfully or not,`rdp-point-stack' will contain a stack of
;; tokens indicating roughly where in the parse tree the point
;; lies.

;; To use this for rudimentary indentation, set `rdp-start' to the
;; `beginning-of-line' of the current point and count how many
;; indent-worthy tokens are in the stack once parsing is complete.

;; See also:

;; * http://emacswiki.org/emacs/peg.el
;; * http://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE.html
;; * http://cedet.sourceforge.net/semantic.shtml
;; * http://en.wikipedia.org/wiki/Recursive_descent_parser
;; * http://en.wikipedia.org/wiki/Parsing_expression_grammar

"]) (rcirc-notify . [(20140113 2310) nil "libnotify popups" single ";;; Commentary:
;;
;; This code is inspired in part by erc-page-me.el and offers
;; the same functionality as it, but for rcirc.
;;
;;
;; * `my-rcirc-notify-message` contains the message contents for
;;    the notification
;;
;; * `my-rcirc-notify-message-private` contains the message
;;    contents for a private message notification
;;
;; * `my-rcirc-notify-nick-alist` is a list containing the last
;;    folks who notified you, and what times they did it at
;;
;; * `my-rcirc-notify-timeout` controls the number of seconds
;;    in between notifications from the same nick.

;; Grow For Windows
;; Run something like this from eshell before you use rcirc-notify:
;; /Programme/Growl\\ for\\ Windows/growlnotify.com /t:IRC \\
;; /ai:http://www.emacswiki.org/pics/static/CarbonEmacsPackageIcon.png \\
;; /a:Emacs /r:IRC /n:IRC foo

(require 'rcirc)

(defgroup rcirc-notify nil
  \"Libnotify popups for rcirc irc mode.\"
  :group 'rcirc)

(defcustom my-rcirc-notify-message \"%s mentioned you: %s\"
  \"Format of the message to display in the popup.
The first %s will expand to the nick that notified you,
the second %s (if any) will expand to the message text itself.\"
  :type 'string
  :group 'rcirc-notify)

(defcustom my-rcirc-notify-keywords t
  \"Non-nil means matches of `rcirc-keywords' will result in notification.
See `my-rcirc-notify-keyword' for the message format to use.\"
  :type 'boolean
  :group 'rcirc-notify)

(defcustom my-rcirc-notify-keyword \"%s mentioned the keyword(s) %s: %s\"
  \"Format of the message to display in the popup.
The first %s will expand to the nick that mentioned the keyword,
the second %s (if any) will expand to the keyword used,
the third %s (if any) will expand to the message text itself.
This only happens if `my-rcirc-notify-keywords' is non-nil.\"
  :type 'string
  :group 'rcirc-notify)

(defcustom my-rcirc-notify-message-private \"%s sent a private message: %s\"
  \"Format of the message to display in the popup.
The first %s will expand to the nick that notified you,
the second %s (if any) will expand to the message text itself.\"
  :type 'string
  :group 'rcirc-notify)

(defvar my-rcirc-notify-nick-alist nil
  \"An alist of nicks and the last time they tried to trigger a
notification.\")

(defcustom my-rcirc-notify-timeout 60
  \"Number of seconds that will elapse between notifications from the
same person.\"
  :type 'integer
  :group 'rcirc-notify)

(defun my-page-me (msg)
  (cond
    ((executable-find \"notify-send\")
     (start-process \"page-me\" nil
                    ;; 8640000 ms = 1 day
                    \"notify-send\" \"-u\" \"normal\" \"-i\" \"gtk-dialog-info\"
                    \"-t\" \"8640000\" \"rcirc\"
                    msg))
    ((executable-find \"growlnotify.com\")
     (start-process \"page-me\" \"*debug*\" \"growlnotify.com\" \"/a:Emacs\" \"/n:IRC\" msg))
    ((executable-find \"growlnotify\")
     (start-process \"page-me\" \"*debug*\" \"growlnotify\" \"-a\" \"Emacs\" \"-n\" \"irc\" \"-m\" msg))
    ((executable-find \"osascript\")
     (apply 'start-process `(\"page-me\" nil
			     \"osascript\"
			     \"-e\" \"tell application \\\"GrowlHelperApp\\\"\"
			     \"-e\" \"register as application \\\"Emacs\\\" all notifications {\\\"rcirc\\\"} default notifications {\\\"rcirc\\\"}\"
			     \"-e\" ,(concat \"notify with name \\\"rcirc\\\" title \\\"rcirc\\\" description \\\"\"
					   msg \"\\\" application name \\\"Emacs\\\"\")
			     \"-e\" \"end tell\")))
    (t (error \"No method available to page you.\"))))

(defun my-rcirc-notify (sender &optional text)
  (when window-system
    ;; Set default dir to appease the notification gods
    (let ((default-directory \"~/\"))
      (my-page-me (format my-rcirc-notify-message sender text)))))

(defun my-rcirc-notify-keyword (sender &optional keyword text)
  (when window-system
    ;; Set default dir to appease the notification gods
    (let ((default-directory \"~/\"))
      (if (listp keyword)
          (setq keyword (mapconcat 'identity keyword \", \")))
      (my-page-me (format my-rcirc-notify-keyword sender keyword text)))))

(defun my-rcirc-notify-private (sender &optional text)
  (when window-system
    ;; Set default dir to appease the notification gods
    (let ((default-directory \"~/\"))
      (my-page-me (format my-rcirc-notify-message-private sender text)))))

(defun my-rcirc-notify-allowed (nick &optional delay)
  \"Return non-nil if a notification should be made for NICK.
If DELAY is specified, it will be the minimum time in seconds
that can occur between two notifications.  The default is
`my-rcirc-notify-timeout'.\"
  (unless delay (setq delay my-rcirc-notify-timeout))
  (let ((cur-time (float-time (current-time)))
        (cur-assoc (assoc nick my-rcirc-notify-nick-alist))
        (last-time))
    (if cur-assoc
        (progn
          (setq last-time (cdr cur-assoc))
          (setcdr cur-assoc cur-time)
          (> (abs (- cur-time last-time)) delay))
      (push (cons nick cur-time) my-rcirc-notify-nick-alist)
      t)))

(defun my-rcirc-notify-me (proc sender response target text)
  \"Notify the current user when someone sends a message that
matches the current nick or keywords.\"
  (interactive)
  (when (and (not (string= (rcirc-nick proc) sender))
	     (not (string= (rcirc-server-name proc) sender)))
    (cond ((and (string-match (concat \"\\\\b\" (rcirc-nick proc) \"\\\\b\") text)
                (my-rcirc-notify-allowed sender))
	   (my-rcirc-notify sender text))
	  (my-rcirc-notify-keywords
	   (let (keywords)
             (dolist (key rcirc-keywords keywords)
               (when (string-match (concat \"\\\\<\" key \"\\\\>\")
                                   text)
                 (push key keywords)))
	     (when keywords
               (if (my-rcirc-notify-allowed sender)
                   (my-rcirc-notify-keyword sender keywords text))))))))

(defun my-rcirc-notify-privmsg (proc sender response target text)
  \"Notify the current user when someone sends a private message
to them.\"
  (interactive)
  (when (and (string= response \"PRIVMSG\")
             (not (string= sender (rcirc-nick proc)))
             (not (rcirc-channel-p target))
             (my-rcirc-notify-allowed sender))
    (my-rcirc-notify-private sender text)))

(add-hook 'rcirc-print-hooks 'my-rcirc-notify-privmsg)
(add-hook 'rcirc-print-hooks 'my-rcirc-notify-me)

(provide 'rcirc-notify)
;;; rcirc-notify.el ends here
"]) (rcirc-groups . [(20131223 404) nil "an emacs buffer in rcirc-groups major mode" single nil]) (rcirc-controls . [(20140106 954) nil "control sequences" single nil]) (rcirc-color . [(20140110 948) nil "color nicks" single ";;; Commentary:

;; Use /COLOR to list all colored nicks with their color
;; Use /COLOR NICK COLOR to color NICK using COLOR

"]) (rcirc-alert . [(20140110 929) nil "Configurable alert messages on top of RCIRC" tar ";;; Commentary:
;;
;; This code implements a notification (alert) library on top of emacs rcirc IRC client.
;;
;; This code integrates part of the original sources. It departs from the original in two ways
;;
;; - alerts are considered as a trigger action; any trigger action executes one script file (or anything else)
;;
;; - five different types of alerts are considered here, three of them may be disabled
;;
;;   \"message\" - someone talks to the user by classical \"user_nick: ... \" (always enabled)
;;   \"keyword\" - keyword detected
;;   \"private\" - private message (always enabled)
;;   \"nick\"    - given nicks changes status (join, ...)
;;   \"always\"  - alert of any message
;;
;; As long as this code only triggers an action, an example a bash script ('rcirc-alert.sh') is necessary
;; the alerts. This script will create a notification or whatever the user needs. It accepts four input
;; arguments, being the first argument the alert type. Refer to the example provided script file for more details.
;; This scripts provides an example configuration file showing a setup and how to use this library.
;;
;; Useful variables to customize alerts are described in the *Variables section of this file.
;;
;; ** Messages
;; ** Enables
;; ** Action script
;; ** Lists of alert triggers

;; These may be used in a per-buffer basis to specify individual needs on given chats (notify anything on twitter channel, alert when
;; given nick appears online at #emacs, keywords on #archlinux, etc.)

;;; TODO

;;; Code


(require 'rcirc)

;;; * GROUP

(defgroup rcirc-alert nil
  \"Alerts thought a script for rcirc irc mode.\"
  :group 'rcirc)

;;; * Variables

;;; ** Alert Messages
;; Text to be displayed in the alert for each type of notification

(defcustom rcirc-alert-message-message \"%s mentioned you: %s\"
  \"Format of the message to display in the popup.
The first %s will expand to the nick that notified you,
the second %s (if any) will expand to the message text itself.\"
  :type 'string
  :group 'rcirc-alert)

(defcustom rcirc-alert-message-keyword \"%s mentioned the keyword(s) %s: %s\"
  \"Format of the message to display in the popup.
The first %s will expand to the nick that mentioned the keyword,
the second %s (if any) will expand to the keyword used,
the third %s (if any) will expand to the message text itself.
This only happens if `rcirc-enable-alert-keywords' is non-nil.\"
  :type 'string
  :group 'rcirc-alert)

(defcustom rcirc-alert-message-nick \"Nick  %s  has %s\"
  \"Format of the message to display in the popup.
The first %s will expand to the nick that changed status,
the second %s (if any) will expand to the new status,
This only happens if `rcirc-enable-alert-nick' is non-nil.\"
  :type 'string
  :group 'rcirc-alert)

(defcustom rcirc-alert-message-private \"%s sent a private message: %s\"
  \"Format of the message to display in the popup.
The first %s will expand to the nick that notified you,
the second %s (if any) will expand to the message text itself.\"
  :type 'string
  :group 'rcirc-alert)

(defcustom rcirc-alert-message-always \"%s sent a message: %s\"
  \"Format of the message to display in the popup.
The first %s will expand to the nick that notified,
the second %s (if any) will expand to the message text itself,
This only happens if `rcirc-enable-alert-always' is non-nil.\"
  :type 'string
  :group 'rcirc-alert)

;;; ** Enable / Disable Alerts
;; \"message\" and \"private\" are always enabled, the remaining may be disabled

(defcustom rcirc-enable-alert-keywords t
  \"Non-nil means matches of `rcirc-alert-keywords' will result in alert.
See `rcirc-alert-message-keyword' for the message format to use.\"
  :type 'boolean
  :group 'rcirc-alert)

(defcustom rcirc-enable-alert-nick t
  \"Non-nil means matches of `rcirc-alert-nicks' will result in alert.
See `rcirc-alert-message-nick' for the message format to use.\"
  :type 'boolean
  :group 'rcirc-alert)

(defcustom rcirc-enable-alert-always t
  \"Non-nil means any new message will result in notification.\"
  :type 'boolean
  :group 'rcirc-alert)

;;; ** Action script

(defcustom my-rcirc-notification-script (concat user-emacs-directory \"rcirc-alert.sh\")
  \"Script to trigger when a notification condition is met.
This script manages all types of notifications internally following its first argument.\"
  :type 'string
  :group 'rcirc-alert)

;;; ** Lists of alert triggers

(defcustom rcirc-alert-nicks nil
  \"List of nicks whose new status triggers a notification of type 'nick'\"
  :type '(repeat string)
  :group 'rcirc-alert)

(defcustom rcirc-alert-keywords nil
  \"List of keywords that trigger a notification of type 'keyword'\"
  :type '(repeat string)
  :group 'rcirc-alert)

;;; **

(defvar rcirc-alert-nick-alist nil
  \"An alist of nicks and the last time they tried to trigger a
notification.\")

(defcustom rcirc-alert-timeout 60
  \"Number of seconds that will elapse between notifications from the
same person.\"
  :type 'integer
  :group 'rcirc-alert)


;;; * Notification Action
;; Comment

(defun my-page-me-notify (type title msg)
  \"If notification script is in path, run it for this type of notification
.\"
  (cond
   ((executable-find my-rcirc-notification-script)
      ;; (start-process \"page-me\" nil my-rcirc-notification-script type title msg (substring (buffer-name) 0 (string-match-p (regexp-quote \"@\") (buffer-name))))
    (if rcirc-target
      (start-process \"page-me\" nil my-rcirc-notification-script type title msg rcirc-target)
        )
    )
    (t (error \"No method available to page you.\"))))


;;; * Notificators
;; wrappers around the notification action

(defun my-rcirc-alert-message (sender &optional text)
  (when window-system
    ;; Set default dir to appease the notification gods
    (let ((default-directory \"~/\"))
      (my-page-me-notify \"message\" \"rcIRC Message\" (format rcirc-alert-message-message (upcase sender) text)))))

(defun my-rcirc-alert-keyword (sender &optional keyword text)
  (when window-system
    ;; Set default dir to appease the notification gods
    (let ((default-directory \"~/\"))
      (if (listp keyword)
          (setq keyword (mapconcat 'identity keyword \", \")))
      (my-page-me-notify \"keyword\" \"rcIRC KeyWord\" (format rcirc-alert-message-keyword (upcase sender) (upcase keyword) text)))))

(defun my-rcirc-alert-private (sender &optional text)
  (when window-system
    ;; Set default dir to appease the notification gods
    (let ((default-directory \"~/\"))
      (my-page-me-notify \"private\" \"rcIRC Private Message\" (format rcirc-alert-message-private (upcase sender) text)))))

(defun my-rcirc-alert-nick (sender &optional keyword)
  (when window-system
    ;; Set default dir to appease the notification gods
    (let ((default-directory \"~/\"))
      (if (listp keyword)
          (setq keyword (mapconcat 'identity keyword \", \"))
        )
      (my-page-me-notify \"nick\" \"rcIRC New Nick Status\" (format rcirc-alert-message-nick (upcase sender) keyword)))))

(defun my-rcirc-alert-always (sender &optional text)
  (when window-system
    ;; Set default dir to appease the notification gods
    (let ((default-directory \"~/\"))
      (my-page-me-notify \"always\" \"rcIRC Message\" (format rcirc-alert-message-always (upcase sender) text)))))


;;; * Allowed Senders
;; Comment

(defun my-rcirc-alert-allowed (nick &optional delay)
  \"Return non-nil if a notification should be made for NICK.
If DELAY is specified, it will be the minimum time in seconds
that can occur between two notifications.  The default is
`rcirc-alert-timeout'.\"
  (unless delay (setq delay rcirc-alert-timeout))
  (let ((cur-time (float-time (current-time)))
        (cur-assoc (assoc nick rcirc-alert-nick-alist))
        (last-time))
    (if cur-assoc
        (progn
          (setq last-time (cdr cur-assoc))
          (setcdr cur-assoc cur-time)
          (> (abs (- cur-time last-time)) delay))
      (push (cons nick cur-time) rcirc-alert-nick-alist)
      t)))


;;; * Criteria to trigger notifications

;;; ** notifications 1 and 2 : message and keyword
(defun rcirc-alert-message (proc sender response target text)
  \"Notify the current user when someone sends a message that
matches the current nick or keywords.\"
  (interactive)
  (when (and (not (string= (rcirc-nick proc) sender))
             (not (string= (rcirc-server-name proc) sender)))
    (cond
     ;; Cond 1 :
     (
      (and (string-match (concat \"\\\\b\" (rcirc-nick proc) \"\\\\b\") text)
           (my-rcirc-alert-allowed sender))
      (my-rcirc-alert-message sender text)
      )
     ;; Cond 1
     ;; Cond 2 : keyword
     (rcirc-enable-alert-keywords
      (let (keywords)
        (dolist (key rcirc-alert-keywords keywords)
          (when (string-match (concat \"\\\\<\" key \"\\\\>\")
                              text)
            (push key keywords)))
        (when keywords
          (if (my-rcirc-alert-allowed sender)
              (my-rcirc-alert-keyword sender keywords text))
          )
        )
      )
     ;; Cond 2
     ) ;; cond
    ) ;; when
  )

;;; ** notification 3 (private message)
(defun rcirc-alert-private (proc sender response target text)
  \"Notify the current user when someone sends a private message
to him.\"
  (interactive)
  (when (and (string= response \"PRIVMSG\")
             (not (string= sender (rcirc-nick proc)))
             (not (rcirc-channel-p target))
             (my-rcirc-alert-allowed sender))
    (my-rcirc-alert-private sender text)
    ))

;;; ** notification 4 (new nick status)
(defun rcirc-alert-nick (proc sender response target text)
  \"Notify the current a nick in the list changes status.\"
  (interactive)
  (when (and (not (string= (rcirc-nick proc) sender))
             (not (string= (rcirc-server-name proc) sender))
             ;;not nil sender
             (not (string= nil sender))
             )
    (cond
     ;; Cond
     (rcirc-enable-alert-nick
      ;; use the member function
      (let (keywords)
        (dolist (key rcirc-alert-nicks keywords)
          (when
              (and
               ;; when the sender is in the list rcirc-alert-nicks
               ;; (string-match (concat \"\\\\<\" key \"\\\\>\") sender)
               (string-match key sender)
               ;; when it changes to these states
               (member response '(\"QUIT\" \"PART\" \"JOIN\" \"AWAY\"))
               )
            (progn 
              (push key keywords)
              ;; (message response)
              )
            ;; (push key keywords)
            )
          ) ;; dolist
        (when keywords
          (if (my-rcirc-alert-allowed sender)
              (my-rcirc-alert-nick sender response))
          )
        )
      )
     ;; Cond
     ) ;; cond
    ) ;; when
  )

;;; ** notification 5 : notificate always
(defun rcirc-alert-always (proc sender response target text)
  \"
    .\"
  (interactive)
  (when (and (not (string= (rcirc-nick proc) sender))
             (not (string= (rcirc-server-name proc) sender)))
    (cond
     (rcirc-enable-alert-always
      (my-rcirc-alert-always sender text)
      ) ;; cond
     ) ;; cond
    ) ;; when
  )


;;; * Hooks
;; When something gets printed, trigger an action

;; Message and keyword notification (1 & 2)
(add-hook 'rcirc-print-functions 'rcirc-alert-message)

;; Private message notification (3)
(add-hook 'rcirc-print-functions 'rcirc-alert-private)

;; Nick status change notification (4)
(add-hook 'rcirc-print-functions 'rcirc-alert-nick)

;; Always notification (5)
(add-hook 'rcirc-print-functions 'rcirc-alert-always)

(provide 'rcirc-alert)

;;; rcirc-alert.el ends here
"]) (rbenv . [(20140108 0) nil "Emacs integration for rbenv" single ";;; Commentary:

;; M-x global-rbenv-mode toggle the configuration done by rbenv.el

;; M-x rbenv-use-global prepares the current Emacs session to use
;; the global ruby configured with rbenv.

;; M-x rbenv-use allows you to switch the current session to the ruby
;; implementation of your choice.

;;; Compiler support:

;; helper function used in variable definitions
(defcustom rbenv-installation-dir (or (getenv \"RBENV_ROOT\")
                                      (concat (getenv \"HOME\") \"/.rbenv/\"))
  \"The path to the directory where rbenv was installed.\"
  :group 'rbenv
  :type 'directory)

(defun rbenv--expand-path (&rest segments)
  (let ((path (mapconcat 'identity segments \"/\"))
        (installation-dir (replace-regexp-in-string \"/$\" \"\" rbenv-installation-dir)))
    (expand-file-name (concat installation-dir \"/\" path))))

(defcustom rbenv-interactive-completion-function
  (if ido-mode 'ido-completing-read 'completing-read)
  \"The function which is used by rbenv.el to interactivly complete user input\"
  :group 'rbenv
  :type 'function)

(defcustom rbenv-show-active-ruby-in-modeline t
  \"Toggles wether rbenv-mode shows the active ruby in the modeline.\"
  :group 'rbenv
  :type 'boolean)

(defcustom rbenv-modeline-function 'rbenv--modeline-with-face
  \"Function to specify the rbenv representation in the modeline.\"
  :group 'rbenv
  :type 'function)

(defvar rbenv-executable (rbenv--expand-path \"bin\" \"rbenv\")
  \"path to the rbenv executable\")
  
(defvar rbenv-ruby-shim (rbenv--expand-path \"shims\" \"ruby\")
  \"path to the ruby shim executable\")

(defvar rbenv-global-version-file (rbenv--expand-path \"version\")
  \"path to the global version configuration file of rbenv\")

(defvar rbenv-version-environment-variable \"RBENV_VERSION\"
  \"name of the environment variable to configure the rbenv version\")

(defvar rbenv-binary-paths (list (cons 'shims-path (rbenv--expand-path \"shims\"))
                                 (cons 'bin-path (rbenv--expand-path \"bin\")))
  \"these are added to PATH and exec-path when rbenv is setup\")

(defface rbenv-active-ruby-face
  '((t (:weight bold :foreground \"Red\")))
  \"The face used to highlight the current ruby on the modeline.\")

(defvar rbenv--initialized nil
  \"indicates if the current Emacs session has been configured to use rbenv\")

(defvar rbenv--modestring nil
  \"text rbenv-mode will display in the modeline.\")
(put 'rbenv--modestring 'risky-local-variable t)

;;;###autoload
(defun rbenv-use-global ()
  \"activate rbenv global ruby\"
  (interactive)
  (rbenv-use (rbenv--global-ruby-version)))

;;;###autoload
(defun rbenv-use-corresponding ()
  \"search for .ruby-version and activate the corresponding ruby\"
  (interactive)
  (let ((version-file-path (or (rbenv--locate-file \".ruby-version\")
                               (rbenv--locate-file \".rbenv-version\"))))
    (if version-file-path (rbenv-use (rbenv--read-version-from-file version-file-path))
      (message \"[rbenv] could not locate .ruby-version or .rbenv-version\"))))

;;;###autoload
(defun rbenv-use (ruby-version)
  \"choose what ruby you want to activate\"
  (interactive
   (let ((picked-ruby (rbenv--completing-read \"Ruby version: \" (rbenv/list))))
     (list picked-ruby)))
  (rbenv--activate ruby-version)
  (message (concat \"[rbenv] using \" ruby-version)))

(defun rbenv/list ()
  (split-string (rbenv--call-process \"versions\" \"--bare\") \"\\n\"))

(defun rbenv--setup ()
  (when (not rbenv--initialized)
    (dolist (path-config rbenv-binary-paths)
      (let ((bin-path (cdr path-config)))
        (setenv \"PATH\" (concat bin-path \":\" (getenv \"PATH\")))
        (add-to-list 'exec-path bin-path)))
    (setq eshell-path-env (getenv \"PATH\"))
    (setq rbenv--initialized t)
    (rbenv--update-mode-line)))

(defun rbenv--teardown ()
  (when rbenv--initialized
    (dolist (path-config rbenv-binary-paths)
      (let ((bin-path (cdr path-config)))
        (setenv \"PATH\" (replace-regexp-in-string (regexp-quote (concat bin-path \":\")) \"\" (getenv \"PATH\")))
        (setq exec-path (remove bin-path exec-path))))
    (setq eshell-path-env (getenv \"PATH\"))
    (setq rbenv--initialized nil)))

(defun rbenv--activate (ruby-version)
  (setenv rbenv-version-environment-variable ruby-version)
  (rbenv--update-mode-line))

(defun rbenv--completing-read (prompt options)
  (funcall rbenv-interactive-completion-function prompt options))

(defun rbenv--global-ruby-version ()
  (rbenv--read-version-from-file rbenv-global-version-file))

(defun rbenv--read-version-from-file (path)
  (with-temp-buffer
    (insert-file-contents path)
    (rbenv--replace-trailing-whitespace (buffer-substring-no-properties (point-min) (point-max)))))

(defun rbenv--locate-file (file-name)
  \"searches the directory tree for an given file. Returns nil if the file was not found.\"
  (let ((directory (locate-dominating-file default-directory file-name)))
    (when directory (concat directory file-name))))

(defun rbenv--call-process (&rest args)
  (with-temp-buffer
    (let* ((success (apply 'call-process rbenv-executable nil t nil
                           (delete nil args)))
           (raw-output (buffer-substring-no-properties
                        (point-min) (point-max)))
           (output (rbenv--replace-trailing-whitespace raw-output)))
      (if (= 0 success)
          output
        (message output)))))

(defun rbenv--replace-trailing-whitespace (text)
  (replace-regexp-in-string \"[[:space:]]\\\\'\" \"\" text))

(defun rbenv--update-mode-line ()
  (setq rbenv--modestring (funcall rbenv-modeline-function
                                   (rbenv--active-ruby-version))))

(defun rbenv--modeline-with-face (current-ruby)
  (append '(\" [\")
          (list (propertize current-ruby 'face 'rbenv-active-ruby-face))
          '(\"]\")))

(defun rbenv--modeline-plain (current-ruby)
  (list \" [\" current-ruby \"]\"))

(defun rbenv--active-ruby-version ()
  (or (getenv rbenv-version-environment-variable) (rbenv--global-ruby-version)))

;;;###autoload
(define-minor-mode global-rbenv-mode
  \"use rbenv to configure the ruby version used by your Emacs.\"
  :global t
  (if global-rbenv-mode
      (progn
        (when rbenv-show-active-ruby-in-modeline
          (unless (memq 'rbenv--modestring global-mode-string)
            (setq global-mode-string (append (or global-mode-string '(\"\"))
                                             '(rbenv--modestring)))))
        (rbenv--setup))
    (setq global-mode-string (delq 'rbenv--modestring global-mode-string))
    (rbenv--teardown)))

(provide 'rbenv)

;;; rbenv.el ends here
"]) (rase . [(20120928 1345) nil "Run At Sun Event daemon" single ";;; Commentary:
;; This is an Emacs extension that allows user provided set of
;; functions to be run at some sun events.

"]) (rainbow-delimiters . [(20131015 404) nil "Highlight nested parens, brackets, braces a different color at each depth." single ";;; Commentary:
;;
;; Rainbow-delimiters is a \342\200\234rainbow parentheses\342\200\235-like mode which highlights
;; parentheses, brackets, and braces according to their depth. Each
;; successive level is highlighted in a different color. This makes it easy
;; to spot matching delimiters, orient yourself in the code, and tell which
;; statements are at a given level.
;;
;; Great care has been taken to make this mode FAST. You shouldn't see
;; any discernible change in scrolling or editing speed while using it,
;; even in delimiter-rich languages like Clojure, Lisp, and Scheme.
;;
;; Default colors are subtle, with the philosophy that syntax highlighting
;; shouldn't be visually intrusive. Color schemes are always a matter of
;; taste.  If you take the time to design a new color scheme, please share
;; (even a simple list of colors works) on the EmacsWiki page or via github.
;; EmacsWiki: http://www.emacswiki.org/emacs/RainbowDelimiters
;; Github: http://github.com/jlr/rainbow-delimiters


;;; Installation:

;; 1. Place rainbow-delimiters.el on your emacs load-path.
;;
;; 2. Compile the file (necessary for speed):
;; M-x byte-compile-file <location of rainbow-delimiters.el>
;;
;; 3. Add the following to your dot-emacs/init file:
;; (require 'rainbow-delimiters)
;;
;; 4. Activate the mode in your init file.
;;    You can choose to enable it only in certain modes, or Emacs-wide:
;;
;; - To enable it only in certain modes, add lines like the following:
;; (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
;;
;; - To enable it in all programming-related emacs modes (Emacs 24+):
;; (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
;;
;; - To activate the mode globally, add to your init file:
;; (global-rainbow-delimiters-mode)
;;
;; - To temporarily activate rainbow-delimiters mode in an open buffer:
;; M-x rainbow-delimiters-mode
;;
;; - To toggle global-rainbow-delimiters-mode:
;; M-x global-rainbow-delimiters-mode

;;; Customization:

;; To customize various options, including the color scheme:
;; M-x customize-group rainbow-delimiters
;;
;; deftheme / color-theme.el users:
;; You can specify custom colors by adding the appropriate faces to your theme.
;; - Faces take the form of:
;;   'rainbow-delimiters-depth-#-face' with # being the depth.
;;   Depth begins at 1, the outermost color.
;;   Faces exist for depths 1-9.
;; - The unmatched delimiter face (normally colored red) is:
;;   'rainbow-delimiters-unmatched-face'


"]) (railgun . [(20121016 2257) nil "No description available." single nil]) (racket-mode . [(20140108 1753) nil "Major mode for Racket language." tar ";;; Commentary:

;; Goals:
;; - Focus on Racket (not various Schemes).
;; - Fontify all Racket keywords, builtins, and so on.
;; - Fontify variations of define for functions and variables.
;; - Indent Racket forms (even `for/fold` and `for*/fold`).
;; - Follow DrRacket concepts where applicable.
;; - Compatible with Emacs 24.2+.
;;
;; Acknowledgements:
;;
;; - Obviously the existing Emacs Scheme mode and Inferior Scheme mode.
;;
;; - The source code for Neil Van Dyke's Quack provided a model for
;;   many of the scheme-indent-function settings, smart paren closing,
;;   and pretty lambda.
;;
;; Details: https://github.com/greghendershott/racket-mode

"]) (r-autoyas . [(20140101 710) ((ess (0)) (yasnippet (0 8 0))) "Provides automatically created yasnippets for R function argument lists." tar ";;; Commentary:
;; 
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (quickrun . [(20140114 2238) nil "Run commands quickly" single ";;; Commentary:

;; quickrun.el executes editing buffer. quickrun.el selects commands to execute
;; buffer automatically. Please see https://github.com/syohex/emacs-quickrun
;; for more information.
;;
;; This package respects `quickrun.vim' developed by thinca
;;   - https://github.com/thinca/vim-quickrun
;;
;; To use this package, add these lines to your .emacs file:
;;     (require 'quickrun)
;;
;; And you call 'M-x quickrun'.
;;

"]) (quickref . [(20130113 1500) ((dash (1 0 3)) (s (1 0 0))) "Display relevant notes-to-self in the echo area" single nil]) (quick-buffer-switch . [(20130303 1629) nil "Quick switch to file or dir buffers." single ";;; Commentary:
;;
;; Allows to qui switch to a buffer visiting a particular file or directory.
;;
;; To install:
;;   (require 'quick-buffer-switch)
;;   ;; To preserve C-x C-x uncomment next line
;;   ;; (setq qbs-prefix-key \"C-x C-a\")
;;   (qbs-init)
;;
;; Note that C-x C-c (`save-buffers-kill-terminal') is shadowed.

"]) (qml-mode . [(20130417 744) nil "Major mode for editing QT Declarative (QML) code." single ";;; Commentary:

;;; INTRODUCTION
;;
;; You need this if you are writing Ubuntu Phone apps with Emacs.
;;

;;; USAGE
;;
;; Type `M-x package-install qml-mode`, and add this to your init file:
;;
;;     (autoload 'qml-mode \"qml-mode\" \"Editing Qt Declarative.\" t)
;;     (add-to-list 'auto-mode-alist '(\"\\\\.qml$\" . qml-mode))
;;

(require 'generic-x)
(require 'font-lock)

(defvar qml-mode-indent-offset 4
  \"Indentation offset for `qml-mode'\")

(defvar qml-mode-keywords
  '(\"Qt\" \"import\" \"property\"
    \"State\" \"PropertyChanges\" \"StateGroup\" \"ParentChange\"
    \"StateChangeScript\" \"AnchorChanges\" \"PropertyAnimation\" \"NumberAnimation\"
    \"ColorAnimation\" \"RotationAnimation\" \"SequentialAnimation\" \"ParallelAnimation\"
    \"PauseAnimation\" \"ParentAnimation\" \"AnchorAnimation\" \"SmoothedAnimation\"
    \"PropertyAction\" \"ScriptAction\" \"Transition\" \"SpringFollow\"
    \"Behavior\" \"Binding\" \"ListModel\" \"ListElement\"
    \"VisualItemModel\" \"VisualDataModel\" \"Package\" \"XmlListModel\"
    \"XmlRole\" \"Connections\" \"Component\" \"Timer\"
    \"QtObject\" \"WorkerScript\" \"Item\" \"Rectangle\"
    \"Image\" \"BorderImage\" \"Text\" \"TextInput\"
    \"TextEdit\" \"MouseArea\" \"FocusScope\" \"Flickable\"
    \"Flipable\" \"GestureArea\" \"Loader\" \"Repeater\"
    \"SystemPalette\" \"LayoutItem\" \"Scale\" \"Rotation\"
    \"Translate\" \"ViewsPositionersMediaEffects\" \"ListView\" \"GridView\"
    \"PathView\" \"Path\" \"PathLine\" \"PathQuad\"
    \"PathCubic\" \"PathAttribute\" \"PathPercent\" \"WebView\"
    \"Column\" \"Row\" \"Grid\" \"Flow\"
    \"SoundEffect\" \"Audio\" \"Video\" \"Particles\"
    \"ParticleMotionLinear\" \"ParticleMotionGravity\" \"ParticleMotionWander\"
    ;; javascript keywords
    \"break\"
    \"case\" \"catch\" \"const\" \"continue\"
    \"debugger\" \"default\" \"delete\" \"do\"
    \"else\" \"enum\"
    \"false\" \"finally\" \"for\" \"function\"
    \"if\" \"in\" \"instanceof\" \"import\"
    \"let\"
    \"new\" \"null\"
    \"return\"
    \"switch\"
    \"this\" \"throw\" \"true\" \"false\" \"try\" \"typeof\"
    \"var\" \"void\"
    \"while\" \"with\"
    \"yield\"
    \"undefined\"
    ))

(defvar qml-mode-types
  '(\"int\" \"bool\" \"double\" \"real\"
    \"string\" \"url\" \"color\" \"date\"
    \"variant\" \"alias\"
    \"signal\" \"on\" \"parent\" \"as\"))

(defvar qml-mode-constants
  '(\"NoButton\" \"LeftButton\" \"RightButton\" \"MidButton\"
    \"MiddleButton\"
    \"Horizontal\" \"Vertical\"
    \"AlignLeft\" \"AlignRight\" \"AlignHCenter\" \"AlignTop\"
    \"AlignBottom\" \"AlignVCenter\" \"AlignCenter\"
    \"Easing\" \"Linear\" \"InQuad\" \"OutQuad\"
    \"InOutQuad\" \"OutInQuad\" \"InCubic\" \"OutCubic\"
    \"InOutCubic\" \"OutInCubic\" \"InQuart\" \"OutQuart\"
    \"InOutQuart\" \"OutInQuart\" \"InQuint\" \"InQuint\"
    \"OutQuint\" \"InOutQuint\" \"OutInQuint\" \"InSine\"
    \"OutSine\" \"InExpo\" \"OutExpo\" \"InOutExpo\"
    \"OutInExpo\" \"InCirc\" \"OutCirc\" \"InOutCirc\"
    \"OutInCirc\" \"InElastic\" \"OutElastic\" \"InOutElastic\"
    \"OutInElastic\" \"InBack\" \"OutBack\" \"InOutBack\"
    \"OutInBack\" \"InBounce\" \"OutBounce\" \"InOutBounce\"
    \"OutInBounce\"))


(defun qml-mode:list-to-string (list)
  \"\"
  (concat \"\\\\(\"
          (mapconcat 'identity list \"\\\\|\")
          \"\\\\)\"))

;;;###autoload
(define-generic-mode qml-mode
  ;; comments
  '(\"//\" (\"/*\" . \"*/\"))
  ;; keywords
  qml-mode-keywords
  ;; other fontlock
  (list
   (eval-when-compile
     (generic-make-keywords-list qml-mode-types 'font-lock-type-face))
   (eval-when-compile
     (generic-make-keywords-list qml-mode-constants 'font-lock-constant-face))
   (list \"\\\\<id[ \\t]*:[ \\t]*\\\\([a-zA-Z0-9_]+\\\\)\" 1 'font-lock-constant-face)
   (list
    (concat \"property[ \\t]+\" (qml-mode:list-to-string qml-mode-types) \"+[ \\t]+\\\\([a-zA-Z_]+[a-zA-Z0-9_]*\\\\)\") 2 'font-lock-variable-name-face)
   (list \"\\\\(function\\\\|signal\\\\)\\\\{1\\\\}[ \\t]+\\\\([a-zA-Z_]+[a-zA-Z0-9_]*\\\\)\" 2 'font-lock-function-name-face)
   (list \"\\\\([a-zA-Z_\\\\.]+[a-zA-Z0-9_]*\\\\)[ \\t]*:\" 1 'font-lock-type-face)
   (list \"\\\\([+-]?\\\\<[0-9]*\\\\.?[0-9]+[xX]?[0-9a-fA-F]*\\\\)\" 1 'font-lock-constant-face)
   (list \"\\\\([a-zA-Z0-9]+\\\\)[ \\t]*{\" 1 'font-lock-builtin-face)
   (list \"\\\\('[[:alpha:]]*'\\\\)\" 1 'font-lock-string-face)
   )
  ;; filetype
  '(\"\\\\.qml$\")

  ;; initializer
  (list
   (function
    (lambda ()
      (add-hook 'qml-mode-hook
                (lambda ()

                  ;; tab width
                  (set (make-local-variable 'tab-width) qml-mode-indent-offset)
                  (set (make-local-variable 'indent-tabs-mode) nil)
                  (set (make-local-variable 'indent-line-function) 'qml-mode-indent-line)
                  (set (make-local-variable 'indent-region-function) 'qml-mode-indent-region)

                  )
                nil 'local)
      ))))

(defun qml-in-comment-p ()
  \"Check whether we are currently in a comment\"
  (let ((here (point)))
    (and (search-backward \"/*\" nil t)
         (prog1
             (not (search-forward \"*/\" here t))
           (goto-char here) ))))


(defun qml-mode-indent-line ()
  \"Indent the current line\"
  (if (or (qml-in-comment-p)
          (looking-at \"[ \\t]*/\\\\*\") )
      nil
    (save-excursion
      (let ((here (point))
            (depth 0))
        (while (and (forward-line -1)
                    (or (looking-at \"^[ \\t]*$\")
                        (qml-in-comment-p) ))
          ;; Jump to a non comment/white-space line
          )
        (cond ((looking-at \"\\\\([ \\t]*\\\\)\\\\([^ \\t].*\\\\)?{[ \\t]*$\")
               (setq depth (+ (- (match-end 1) (match-beginning 1))
                              qml-mode-indent-offset )))
              ((looking-at \"\\\\([ \\t]*\\\\)[^ \\t]\")
               (setq depth (- (match-end 1) (match-beginning 1))) )
              (t (setq depth 0)) )
        (goto-char here)
        (beginning-of-line)
        (if (looking-at \"[ \\t]*}\")
            (setq depth (max (- depth qml-mode-indent-offset) 0)) )
        (if (looking-at \"\\\\([ \\t]*\\\\)\")
            (if (= depth (- (match-end 1) (match-beginning 1)))
                nil
              (delete-region (match-beginning 1) (match-end 1))
              (indent-to depth))
          (if (> depth 0)
              (indent-to depth)))))
    (if (looking-at \"[ \\t]*\")
        (end-of-line) )))


(defun qml-mode-indent-region (start end)
  (let ((indent-region-function nil))
    (indent-region start end nil)))


(provide 'qml-mode)

;;; qml-mode.el ends here
"]) (python-magic . [(20120505 1355) nil "outline mode extension for python mode" single ";;; Commentary:

;; require outline-magic.el by CarstenDominik found here: 
;; http://www.astro.uva.nl/~dominik/Tools/outline-magic.el
;; code taken from:
;; http://stackoverflow.com/a/4093889
;; modified code here by Nikwin slightly found here: 
;; http://stackoverflow.com/a/1085551

"]) (python-info . [(20130916 620) nil "Python info manual for Emacs" tar ";;; Commentary:
;; This file is deliberately empty, since this package just contains a
;; Python manual.  Emacs, however, requires us to have *something* that
;; describes the package.

"]) (python-environment . [(20130624 339) ((deferred (0 3 1))) "virtualenv API for Emacs Lisp" tar ";;; Commentary:

;;

"]) (python-django . [(20131214 1841) nil "A Jazzy package for managing Django projects" single ";;; Commentary:

;; Django project management package with the goodies you would expect
;; and then some.  The project buffer workings is pretty much inspired
;; by the good ol' `magit-status' buffer.

;; This package relies heavily in fgallina's `python.el' available in
;; stock Emacs>=24.3 (or https://github.com/fgallina/python.el).

;; Implements File navigation (per app, STATIC_ROOT, MEDIA_ROOT and
;; TEMPLATE_DIRS), Etag building, Grep in project, Quick jump (to
;; settings, project root, virtualenv and docs), Management commands
;; and Quick management commands.

;; File navigation: After opening a project, a directory tree for each
;; installed app, the STATIC_ROOT, the MEDIA_ROOT and each
;; TEMPLATE_DIRS is created.  Several commands are provided to work
;; with the current directory at point.

;; Etags building: Provides a simple wrapper to create etags for
;; current opened project.

;; Grep in project: Provides a simple way to grep relevant project
;; directories using `rgrep'.  You can override the use of `rgrep' by
;; tweaking the `python-django-cmd-grep-function'.

;; Quick jump: fast key bindings to jump to the settings module, the
;; project root, the current virtualenv and Django official web docs
;; are provided.

;; Management commands: You can run any management command from the
;; project buffer via `python-django-mgmt-run-command' or via the
;; quick management commands accesible from the Django menu.
;; Completion is provided for all arguments and you can cycle through
;; opened management command process buffers very easily.  Another
;; cool feature is that comint processes are spiced up with special
;; processing, for instance if are using runserver and get a
;; breakpoint via pdb or ipdb the pdb-tracking provided by
;; `python-mode' will trigger or if you enter dbshell the proper
;; `sql-mode' will be used.

;; Quick management commands: This mode provides quick management
;; commands (management commands with sane defaults, smart prompt
;; completion and process extra processing) defined to work with the
;; most used Django built-in management commands like syncdb, shell,
;; runserver, test; several good ones from `django-extensions' like
;; shell_plus, clean_pyc; and `south' ones like convert_to_south,
;; migrate, schemamigration.  You can define new quick commands via
;; the `python-django-qmgmt-define' and define ways to handle when
;; it's finished by defining a callback function.

"]) (python-cell . [(20131029 1616) nil "Support for MATLAB-like cells in python mode" single ";;; Commentary:

;; Major parts of the highlighting code were taken from hl-line-mode.el.

"]) (pylint . [(20121112 435) nil "minor mode for running `pylint'" single ";;; Commentary:
;;
;; Specialized compile mode for pylint.  You may want to add the
;; following to your init.el:
;;
;;   (autoload 'pylint \"pylint\")
;;   (add-hook 'python-mode-hook 'pylint-add-menu-items)
;;   (add-hook 'python-mode-hook 'pylint-add-key-bindings)

"]) (pydoc-info . [(20110301 34) nil "Better Python support for info-lookup-symbol." tar nil]) (py-import-check . [(20130802 411) nil "Finds the unused python imports using importchecker" single nil]) (purty-mode . [(20131004 1559) nil "Safely pretty-print greek letters, mathematical symbols, or anything else." single ";;; Commentary:

;; purty-mode is a minor mode which swaps whatever-regexp-you-want for
;; whatever-symbol-you-want on the fly.  Given that the text itself is
;; left untouched, purty-mode can safely be used when writing code or
;; latex or org or whatever.

"]) (purple-haze-theme . [(20130929 1751) ((emacs (24 0))) "an overtly purple color theme for Emacs24." single ";;; Commentary:
;; Purple haze is an overtly purple theme, with support for flymake,
;; git-gutter, magit, diff, cua, isearch, font-lock and a little more.
;; Listening to All along the watchtower is not mandatory, although
;; the Jimi Hendrix version is recommended.

(unless (>= 24 emacs-major-version)
  (error \"purple-haze-theme requires Emacs 24 or later.\"))

(deftheme purple-haze
  \"purple-haze-theme By: Jason Milkins - emacsfodder.github.com\")

(custom-theme-set-variables
 'purple-haze
 '(main-line-color1 \"#191919\")
 '(main-line-color2 \"#111111\")
 '(powerline-color1 \"#191919\")
 '(powerline-color2 \"#111111\")
 '(fringe-mode 6 nil (fringe))
 '(linum-format \" %7d \")
 )

(custom-theme-set-faces
 'purple-haze

 '(default
    (
     (((class color) (min-colors 88))       (:foreground \"#fff\" :background \"#000\"))
     (t (:foreground \"#fff\" :background \"#120F14\"))
     )
    )

 '(fixed-pitch
   ((t (:family \"Monospace\"))))

 '(variable-pitch
   ((t (:family \"Sans Serif\"))))

 '(escape-glyph ;; Things like ^[ or other control chars.
   ((t (:foreground \"#d96e26\" :background \"#211d3c\"))))

 ;; Line Numbers (linum-mode)
 '(linum
   (
    (((class color) (min-colors 88))  (:background \"#000000\" :foreground \"#403047\"))
    (t (:background \"#151019\" :foreground \"#403047\" :box nil :height 100))))

 ;; Margin Fringes
 '(fringe
   (
   (((class color) (min-colors 88))  (:background \"#111111\" :foreground \"#506080\"))
   (t ( :background \"#201520\" :Foreground \"#506080\" ))))

 ;; Mode-line / status line
 '(mode-line
   (
    (((class color) (min-colors 88))  (:background \"#222222\" :foreground \"#8c86e4\"))
    (t (:background \"#2b283d\" :box nil :foreground \"#8c86e4\" :height 85))))

 '(mode-line-inactive
   (
    (((class color) (min-colors 88))  (:background \"#111111\" :foreground \"#000000\"))
    (t (:weight light :box nil :background \"#202339\" :foreground \"#000000\" :inherit (mode-line)))))

 '(mode-line-emphasis ((t (:weight bold))))

 '(mode-line-highlight ((t (:box nil (t (:inherit (highlight)))))))

 '(mode-line-buffer-id ((t (:weight bold :box nil))))

 ;; Cursor
 '(cursor ((t (:foreground \"#ffffff\" :background \"#d96e26\"))))

 '(error ((t (:foreground \"#cc3333\" ))))
 '(warning ((t (:foreground \"#d96e26\"))))

'(flymake-errline
   ((t (:underline \"#cc3333\" :foreground nil :background nil ))))
'(flymake-infoline
   ((t (:underline \"DarkGreen\" :foreground nil :background nil))))
'(flymake-warnline
   ((t (:underline \"#FF6600\" :foreground nil :background nil))))

'(git-gutter:added
  ((t (:foreground \"#609f60\" :bold t))))
'(git-gutter:modified
  ((t (:foreground \"#E09aF0\" :bold t))))
'(git-gutter:deleted
  ((t (:foreground \"#cc3333\" :bold t))))

'(magit-item-highlight ((t (:foreground \"white\" :background \"#514b6c\"))))

'(cua-rectangle ((t (:background \"#514b6c\"))))

'(diff-added                                ((t (:background \"#132013\"))))
'(diff-removed                              ((t (:background \"#290a0a\"))))
'(diff-file-header                          ((t (:background \"#362145\"))))
'(diff-context                              ((t (:foreground \"#E0E4CC\"))))
'(diff-hunk-header                          ((t (:background \"#242130\"))))

'(compilation-info  ((t (:foreground \"#a09aF0\"))))

 ;; Minibuffer
 '(minibuffer-prompt
   ((t (:weight bold :foreground \"#606a92\"))))

 '(minibuffer-message
   ((t (:foreground \"#ffffff\"))))

 ;; Region
 '(region
   ((t (:background \"#1F102f\"))))

 ;; Secondary region
 '(secondary-selection
   ((((class color) (min-colors 88) (background dark)) (:background \"#444083\"))))

 ;; font-lock - syntax
 '(font-lock-builtin-face              ((t (:foreground \"#606590\"))))
 '(font-lock-comment-face              ((t (:foreground \"#505f89\"))))
 '(font-lock-comment-delimiter-face    ((t (:foreground \"#7078a2\" ))))
 '(font-lock-doc-face                  ((t (:inherit (font-lock-string-face)))))
 '(font-lock-function-name-face        ((t (:foreground \"#8083be\"))))
 '(font-lock-keyword-face              ((t (:foreground \"#aa8da7\"))))
 '(font-lock-negation-char-face        ((t nil)))
 '(font-lock-preprocessor-face         ((t (:inherit (font-lock-builtin-face)))))
 '(font-lock-regexp-grouping-backslash ((t (:inherit (bold)))))
 '(font-lock-regexp-grouping-construct ((t (:inherit (bold)))))
 '(font-lock-string-face               ((t (:foreground \"#a0adee\"))))
 '(font-lock-constant-face             ((t (:foreground \"#9a99e7\"))))
 '(font-lock-type-face                 ((t (:foreground \"#5f5e8a\"))))
 '(font-lock-variable-name-face        ((t (:foreground \"#8e8eb8\"))))
 '(font-lock-warning-face              ((t (:weight bold :foreground \"#FF0000\"))))

 ;; Hightlight
 '(highlight
   ((((class color) (min-colors 88) (background light)) (:background \"#503453\"))
    (((class color) (min-colors 88) (background dark)) (:background \"#503450\"))))

 '(shadow
   ((((class color grayscale) (min-colors 88) (background light)) (:foreground \"#999999\"))
    (((class color grayscale) (min-colors 88) (background dark)) (:foreground \"#999999\"))))

 '(trailing-whitespace
   ((((class color) (background light)) (:background \"#ff0000\"))
    (((class color) (background dark)) (:background \"#ff0000\")) (t (:inverse-video t))))

 '(link (
         (((class color) (min-colors 88) (background light)) (:underline t :foreground \"#f0b7f0\"))
         (((class color) (background light)) (:underline t :foreground \"#a044a0\"))
         (((class color) (min-colors 88) (background dark))  (:underline t :foreground \"#a069aa\"))
         (((class color) (background dark))  (:underline t :foreground \"#a069aa\")) (t (:inherit (underline)))))

 '(link-visited ((default (:inherit (link)))
                 (((class color) (background light)) (:inherit (link)))
                 (((class color) (background dark)) (:inherit (link)))))

 '(button ((t (:inherit (link)))))

 '(tooltip ((t (:foreground \"#FFFFFF\"  :background \"#5f5e8a\" ))))

 '(isearch
   ((((class color) (min-colors 88) (background light)) (:foreground \"white\" :background \"#5533AA\"))
    (((class color) (min-colors 88) (background dark)) (:foreground \"white\" :background \"#5533AA\"))
    (t (:inverse-video t))))

 '(isearch-fail
   ((((class color) (min-colors 88) (background light)) (:foreground \"#000000\" :background \"#ffaaaa\"))
    (((class color) (min-colors 88) (background dark)) (:foreground \"#000000\" :background \"#880000\"))
    (((class color grayscale)) (:foreground \"#888888\"))
    (t (:inverse-video t))))

 '(lazy-highlight
   ((((class color) (min-colors 88) (background light)) (:foreground \"white\" :background \"#331144\"))
    (((class color) (min-colors 88) (background dark)) (:foreground \"#CCCCCC\" :background \"#331144\"))))

 '(match
   ((((class color) (min-colors 88) (background light)) (:foreground \"black\" :background \"#5c2e7a\"))
    (((class color) (min-colors 88) (background dark)) (:foreground \"white\"  :background \"#5c2e7a\"))
    (((type tty) (class mono)) (:inverse-video t))
    (t (:background \"#888888\"))))

 '(next-error ((t (:inherit (region)))))

 '(query-replace ((t (:inherit (isearch)))))

 )

;; Rainbow delimiters
(defun purple-haze-rainbow-delim-set-face ()
  (set-face-attribute 'rainbow-delimiters-depth-1-face   nil :foreground \"#a9f\" )
  (set-face-attribute 'rainbow-delimiters-depth-2-face   nil :foreground \"#959\" )
  (set-face-attribute 'rainbow-delimiters-depth-3-face   nil :foreground \"#535\" )
  (set-face-attribute 'rainbow-delimiters-depth-4-face   nil :foreground \"#639\" )
  (set-face-attribute 'rainbow-delimiters-depth-5-face   nil :foreground \"#636\" )
  (set-face-attribute 'rainbow-delimiters-depth-6-face   nil :foreground \"#639\" )
  (set-face-attribute 'rainbow-delimiters-depth-7-face   nil :foreground \"#424\" )
  (set-face-attribute 'rainbow-delimiters-depth-8-face   nil :foreground \"#646\" )
  (set-face-attribute 'rainbow-delimiters-depth-9-face   nil :foreground \"#919\" )
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil :foreground \"#F00\" ))

(eval-after-load \"rainbow-delimiters\" '(purple-haze-rainbow-delim-set-face))

;; Add to custom-theme-load-path
;;;###autoload
(when (and (boundp 'custom-theme-load-path) load-file-name)
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))


(provide-theme 'purple-haze)

;; Local Variables:
;; eval: (when (fboundp 'rainbow-mode) (rainbow-mode +1))
;; End:

;;; purple-haze-theme.el ends here
"]) (puppetfile-mode . [(20131017 833) nil "Syntax highlighting for Puppetfiles" single nil]) (puppet-mode . [(20130819 1046) nil "Major mode for Puppet manifests" single ";;; Commentary:

;; Major mode for Puppet manifests

"]) (psvn . [(20120401 1440) nil "Subversion interface for emacs" single nil]) (protobuf-mode . [(20091217 1755) nil "major mode for editing protocol buffers." single ";;; Commentary:

;; Installation:
;;   - Put `protobuf-mode.el' in your Emacs load-path.
;;   - Add this line to your .emacs file:
;;       (require 'protobuf-mode)
;;
;; You can customize this mode just like any mode derived from CC Mode.  If
;; you want to add customizations specific to protobuf-mode, you can use the
;; `protobuf-mode-hook'. For example, the following would make protocol-mode
;; use 2-space indentation:
;;
;;   (defconst my-protobuf-style
;;     '((c-basic-offset . 2)
;;       (indent-tabs-mode . nil)))
;;
;;   (add-hook 'protobuf-mode-hook
;;     (lambda () (c-add-style \"my-style\" my-protobuf-style t)))
;;
;; Refer to the documentation of CC Mode for more information about
;; customization details and how to use this mode.
;;
;; TODO:
;;   - Make highlighting for enum values work properly.
;;   - Fix the parser to recognize extensions as identifiers and not
;;     as casts.
;;   - Improve the parsing of option assignment lists. For example:
;;       optional int32 foo = 1 [(my_field_option) = 4.5];
;;   - Add support for fully-qualified identifiers (e.g., with a leading \".\").

"]) (projmake-mode . [(20130614 335) nil "Project oriented automatic builder and error highlighter, flymake for projects" tar nil]) (projector . [(20131121 804) ((alert (1 1))) "Lightweight library for managing project/repository-aware shell and command buffers" single ";;; Commentary:
;;
;; Example Installation:
;;
;;   (require 'projector)
;;   (setq projector-projects-root \"~/code/\")
;;   (setq alert-default-style 'notifier)
;;
"]) (projectile-rails . [(20140110 1141) ((projectile (1 0 0 -3)) (inflections (1 1)) (inf-ruby (2 2 6))) "Minor mode for Rails projects based on projectile-mode" single ";;; Commentary:
;;
;; To make it start alongside projectile-mode:
;;
;;    (add-hook 'projectile-mode-hook 'projectile-rails-on)
;;
"]) (projectile . [(20140114 831) ((s (1 6 0)) (dash (1 5 0)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single ";;; Commentary:
;;
;; This library provides easy project management and navigation.  The
;; concept of a project is pretty basic - just a folder containing
;; special file.  Currently git, mercurial and bazaar repos are
;; considered projects by default.  If you want to mark a folder
;; manually as a project just create an empty .projectile file in
;; it.  See the README for more details.
;;
"]) (project-persist . [(20131030 1208) nil "A minor mode to allow loading and saving of project settings." tar nil]) (project-local-variables . [(20080502 1652) nil "Set project-local variables from a file." single ";;; Commentary:

;; This file allows you to create .emacs-project files that are
;; evaluated when a file is opened. You may also create
;; .emacs-project-$MODE files that only get loaded when you open files
;; of a specific mode in the project. All files for which a
;; .emacs-project file exists in an ancestor directory will have it
;; loaded.

;; It has not been tested in versions of Emacs prior to 22.

(defvar plv-project-file \".emacs-project\"
  \"Name prefix for project files.
 Emacs appends name of major mode and looks for such a file in
 the current directory and its parents.\")

(defmacro setl (sym val)
  \"Like setq, but makes sym a local variable first.\"
  `(set (make-local-variable ',sym) ,val))

(defun plv-find-project-file (dir mode-name)
 (let ((f (expand-file-name (concat plv-project-file mode-name) dir))
       (parent (file-truename (expand-file-name \"..\" dir))))
   (cond ((string= dir parent) nil)
         ((file-exists-p f) f)
         (t (plv-find-project-file parent mode-name)))))

(defadvice hack-local-variables (before project-local-variables activate)
  (let* ((full-name (symbol-name major-mode))
         (mode-name (if (string-match \"\\\\(.*\\\\)-mode$\" full-name)
                        (match-string 1 full-name)
                      full-name))
         (pfile (plv-find-project-file default-directory (concat \"-\" mode-name)))
         (gfile (plv-find-project-file default-directory \"\")))
    (save-excursion
      (when gfile (load gfile))
      (when pfile (load pfile)))))

(add-to-list 'auto-mode-alist '(\"^\\.emacs-project\" . emacs-lisp-mode))

(provide 'project-local-variables)

;;; project-local-variables.el ends here
"]) (project-explorer . [(20140108 558) ((cl-lib (0 3)) (es-lib (0 3))) "A project explorer sidebar" single ";;; Commentary:

;; The project is hosted at https://github.com/sabof/project-explorer
;; The latest version, and all the relevant information can be found there.

"]) (prognth . [(20130920 1059) nil "Extend prog1 to arbitrary index" single ";;; Commentary:

;; Emacs provides `prog1', `prog2' and `progn' to group statements and
;; return the value of first, second or last form.  This package
;; extends this notion to allow arbitrary index.  The macro `prognth'
;; takes as a first argument the index of the form whose value is to
;; be returned.  If the index is 1, 2 or greater than length of the
;; body, the standard emacs forms are used.  Otherwise, this
;; translates to (prog1 (progn ... first INDEX forms) rest)

;; Additionally, `progX' for X from 3 to 9 are generated for easier
;; usage.

"]) (prodigy . [(20140110 50) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) "Manage external services from within Emacs" single ";;; Commentary:

"]) (processing-snippets . [(20130718 1152) ((yasnippet (0 8 0))) "Snippets for processing-mode" tar nil]) (processing-mode . [(20130912 1336) nil "Major mode for Processing 2.0" single ";;; Commentary:

;; Major mode for Processing 2.0.

"]) (proc-net . [(20130321 1712) nil "network process tools" single ";;; Commentary:

;; Tools for doing stuff with network processes.

"]) (pretty-symbols . [(20131125 26) nil "Draw tokens as Unicode glyphs." single ";;; Commentary:

;; Minor mode for drawing multi-character tokens as Unicode glyphs
;; (lambda -> \316\273).
;;
;; Only works when `font-lock-mode' is enabled.
;;
;; This mode is heavily inspired by Trent Buck's pretty-symbols-mode[1]
;; and Arthur Danskin's pretty-mode[2]; but aims to replace those modes, and
;; the many others scattered on emacswiki.org, with:
;;
;; * A simple framework that others can use to define their own symbol
;;   replacements,
;; * that doesn't turn on all sorts of crazy mathematical symbols by default,
;; * is a self-contained project under source control, open to contributions,
;; * available from the MELPA package repository[4].
;;
;; You probably won't want to use this with haskell-mode which has its own much
;; fancier fontification[3]. Eventually it would be nice if this package grew
;; in power and became part of Emacs, so other packages could use it instead of
;; rolling their own.
;;
;; Add your own custom symbol replacements to the list
;; `pretty-symbol-patterns'.
;;
;; Only tested with GNU Emacs 24.
;;
;; [1] http://paste.lisp.org/display/42335/raw
;; [2] http://www.emacswiki.org/emacs/pretty-mode.el
;; [3] https://github.com/haskell/haskell-mode/blob/master/haskell-font-lock.el
;; [4] http://melpa.milkbox.net/

"]) (pretty-mode . [(20131118 2248) nil "Redisplay parts of the buffer as pretty symbols." single ";;; Commentary:
;;
;; Minor mode for redisplaying parts of the buffer as pretty symbols
;; originally modified from Trent Buck's version at http://paste.lisp.org/display/42335,2/raw
;; Also includes code from `sml-mode'
;; See also http://www.emacswiki.org/cgi-bin/wiki/PrettyLambda
;;
;; to install:
;;
;; (require 'pretty-mode)
;; and
;; (global-pretty-mode 1)
;; or
;; (add-hook 'my-pretty-language-hook 'turn-on-pretty-mode)

"]) (pretty-lambdada . [(20131227 148) nil "Show the word `lambda' as the Greek letter." single ";;; Commentary:
;;
;;  Whenever \"lambda\" appears as a separate word, it is displayed using the
;;  Greek letter.
;;
;;  Put this in your init file (~/.emacs), to turn this display on for
;;  the modes in `pretty-lambda-auto-modes', which by default are the
;;  usual Lisp modes:
;;
;;   (require 'pretty-lambdada)
;;   (pretty-lambda-for-modes)
;;
;;  You can toggle pretty-lambda display on/off in any buffer, using
;;  command `pretty-lambda-mode'.  Use `global-pretty-lambda-mode' to
;;  toggle the display in all buffers.
;;
;;  Three alternative ways to turn on pretty-lambda display for a
;;  specific buffer mode:
;;
;;  1. (add-hook 'my-mode-hook 'turn-on-pretty-lambda-mode)
;;  2. (pretty-lambda 'my-mode)
;;  3. (add-hook 'my-mode-hook 'pretty-lambda)
;;
;;  The first way uses minor mode `pretty-lambda-mode', so you can
;;  easily toggle pretty-lambda display.  The last two just turn on
;;  the display.  To turn it off, use `turn-off-pretty-lambda-mode'.
;;
;;
;;  User options defined here:
;;
;;    `global-pretty-lambda-mode', `pretty-lambda-auto-modes',
;;    `pretty-lambda-mode'.
;;
;;  Commands defined here:
;;
;;    `global-pretty-lambda-mode', `pretty-lambda-for-modes',
;;    `pretty-lambda-mode'
;;
;;  Non-interactive functions defined here:
;;
;;    `pretty-lambda', `turn-off-pretty-lambda-mode',
;;    `turn-on-pretty-lambda-mode'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (pp-c-l . [(20131227 147) nil "Display Control-l characters in a pretty way" single ";;; Commentary:
;;
;;  Faces defined here:
;;
;;    `pp^L-highlight'.
;;
;;  User options defined here:
;;
;;    `pp^L-^L-string', `pp^L-^L-string-function',
;;    `pp^L-^L-string-post', `pp^L-^L-string-pre',
;;    `pretty-control-l-mode'.
;;
;;  Commands defined here:
;;
;;    `pp^l', `pretty-control-l-mode', `refresh-pretty-control-l'.
;;
;;  Non-interactive functions defined here:
;;
;;   `pp^L-^L-display-table-entry', `pp^L-make-glyph-code'.
;;
;;
;;  To use this library, add this to your initialization file
;;  (~/.emacs or ~/_emacs):
;;
;;    (require 'pp-c-l)           ; Load this library.
;;
;;  To turn on this mode by default, then either customize option
;;  `pretty-control-l-mode' to non-nil or add this line also to your
;;  init file:
;;
;;    (pretty-control-l-mode 1)   ; Turn on pretty display of `^L'.
;;
;;  For most of the user options defined here, if you change the value
;;  then you will need to re-enter `pretty-control-l-mode', for the
;;  new value to take effect.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (pp+ . [(20131227 147) nil "Extensions to `pp.el'." single ";;; Commentary:
;;
;;    Extensions to `pp.el'.
;;
;;  User options defined here:
;;
;;    `pp-eval-expression-print-length',
;;    `pp-eval-expression-print-level'.
;;
;;  Internal variables defined here:
;;
;;    `pp-read-expression-map'.
;;
;;
;;  ***** NOTE: The following functions defined in `pp.el' have
;;              been REDEFINED HERE:
;;
;;    `pp-display-expression', `pp-eval-expression'.
;;
;;
;;  Suggested binding:
;;
;;   (substitute-key-definition 'eval-expression 'pp-eval-expression global-map)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (powershell-mode . [(20100203 258) nil "Mode for editing Powershell scripts" single nil]) (powershell . [(20130824 1206) nil "run powershell as an inferior shell in emacs" single ";;; Commentary:
;;
;; Run Windows PowerShell v1.0 or v2.0 as an inferior shell within
;; emacs. Tested with emacs v22.2 and v23.2.
;;
;; To use it, M-x powershell .
;;
;; ==============
;;
;; TODO:
;;
;; - get TAB to do proper completion for powershell commands, filenames,
;;   etc.
;;
;;

"]) (powerline . [(20131126 1817) ((cl-lib (0 2))) "Rewrite of Powerline" tar ";;; Commentary:
;;
;; Powerline is a library for customizing the mode-line that is based on the Vim
;; Powerline. A collection of predefined themes comes with the package.
;;

"]) (pov-mode . [(20120825 716) nil "Major mode for editing POV-Ray scene files." tar nil]) (pos-tip . [(20121128 615) nil "Show tooltip at point" single ";;; Commentary:

;; The standard library tooltip.el provides the function for displaying
;; a tooltip at mouse position which allows users to easily show it.
;; However, locating tooltip at arbitrary buffer position in window
;; is not easy. This program provides such function to be used by other
;; frontend programs.

;; This program is tested on GNU Emacs 22, 23 under X window system and
;; Emacs 23 for MS-Windows.

;;
;; Installation:
;;
;; First, save this file as pos-tip.el and byte-compile in
;; a directory that is listed in load-path.
;;
;; Put the following in your .emacs file:
;;
;;   (require 'pos-tip)
;;
;; To use the full features of this program on MS-Windows,
;; put the additional setting in .emacs file:
;;
;;   (pos-tip-w32-max-width-height)   ; Maximize frame temporarily
;;
;; or
;;
;;   (pos-tip-w32-max-width-height t) ; Keep frame maximized

;;
;; Examples:
;;
;; We can display a tooltip at the current position by the following:
;;
;;   (pos-tip-show \"foo bar\")
;;
;; If you'd like to specify the tooltip color, use an expression as:
;;
;;   (pos-tip-show \"foo bar\" '(\"white\" . \"red\"))
;;
;; Here, \"white\" and \"red\" are the foreground color and background
;; color, respectively.


"]) (popwin . [(20130329 435) nil "Popup Window Manager." single ";;; Commentary:

;; Popwin makes you free from the hell of annoying buffers such like
;; *Help*, *Completions*, *compilation*, and etc.
;; 
;; To use popwin, just add the following code into your .emacs:
;; 
;;     (require 'popwin)
;;     (popwin-mode 1)
;; 
;; Then try to show some buffer, for example *Help* or
;; *Completeions*. Unlike standard behavior, their buffers may be
;; shown in a popup window at the bottom of the frame. And you can
;; close the popup window seamlessly by typing C-g or selecting other
;; windows.
;;
;; `popwin:display-buffer' displays special buffers in a popup window
;; and displays normal buffers as unsual. Special buffers are
;; specified in `popwin:special-display-config', which tells popwin
;; how to display such buffers. See docstring of
;; `popwin:special-display-config' for more information.
;;
;; The default width/height/position of popup window can be changed by
;; setting `popwin:popup-window-width', `popwin:popup-window-height',
;; and `popwin:popup-window-position'.  You can also change the
;; behavior for a specific buffer. See docstring of
;; `popwin:special-display-config'.
;;
;; If you want to use some useful commands such like
;; `popwin:popup-buffer' and `popwin:find-file' easily. you may bind
;; `popwin:keymap' to `C-z', for example, like:
;;
;;     (global-set-key (kbd \"C-z\") popwin:keymap)
;;
;; See also `popwin:keymap' documentation.
;;
;; Enjoy!

"]) (popup-switcher . [(20131220 514) ((popup (0 5 0))) "switch to other buffers and files via popup." single nil]) (popup-kill-ring . [(20131020 1154) ((popup (0 4)) (pos-tip (0 4))) "interactively insert item from kill-ring" single ";;; Commentary:

;; Manage your `kill-ring' (select and paste).

;;; Requirement:
;;
;; * popup.el   http://github.com/m2ym/auto-complete
;; * pos-tip.el http://www.emacswiki.org/emacs/PosTip

"]) (popup . [(20131230 544) ((cl-lib (0 3))) "Visual Popup User Interface" single ";;; Commentary:

;; popup.el is a visual popup user interface library for Emacs. This
;; provides a basic API and common UI widgets such as popup tooltips
;; and popup menus.
;; See README.markdown for more information.

"]) (pophint . [(20140107 1045) ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" tar ";;; Commentary:
;; 
;; This extension provides navigation like the Vimperator Hint Mode of Firefox.
;; The interface has the following flow.
;;  1. pop-up tip about the matched point for some action which user want.
;;  2. do some action for the user selecting.
;; 
;; For more infomation, see <https://github.com/aki2o/emacs-pophint/blob/master/README.md>

;;; Dependencies:
;; 
;; - popup.el ( bundled auto-complete.el. see <https://github.com/auto-complete/auto-complete> )
;; - yaxception.el ( see <https://github.com/aki2o/yaxception> )
;; - log4e.el ( see <https://github.com/aki2o/log4e> )

;;; Installation:
;;
;; Put this to your load-path.
;; And put the following lines in your .emacs or site-start.el file.
;; 
;; (require 'pophint)

;;; Configuration:
;; 
;; ;; Key Binding
;; (define-key global-map (kbd \"C-;\") 'pophint:do-flexibly)
;; (define-key global-map (kbd \"C-+\") 'pophint:do)
;; (define-key global-map (kbd \"M-;\") 'pophint:redo)
;; (define-key global-map (kbd \"C-M-;\") 'pophint:do-interactively)

;;; Customization:
;; 
;; [EVAL] (autodoc-document-lisp-buffer :type 'user-variable :prefix \"pophint:\" :docstring t)
;; `pophint:popup-chars'
;; Characters for the pop-up hint.
;; `pophint:switch-source-char'
;; Character for switching using source.
;; `pophint:switch-direction-char'
;; Character for switching direction of pop-up.
;; `pophint:switch-window-char'
;; Character for switching window of pop-up.
;; `pophint:popup-max-tips'
;; Maximum counts of the pop-up hint.
;; `pophint:default-require-length'
;; Default minimum length of matched text for pop-up.
;; `pophint:switch-direction-p'
;; Whether switch direction of pop-up.
;; `pophint:do-allwindow-p'
;; Whether do pop-up at all windows.
;; 
;;  *** END auto-documentation

"]) (pony-mode . [(20131211 809) nil "Minor mode for working with Django Projects" tar nil]) (pomodoro . [(20130117 1935) nil "A timer for the Pomodoro Technique" single nil]) (pointback . [(20100210 752) nil "Restore window points when returning to buffers" single ";;; Commentary:

;; When you have two windows X and Y showing different sections of the
;; same buffer B, then switch to a different buffer in X, and then
;; show B in X again, the new point in X will be the same as in Y.
;; With pointback-mode, window points are preserved instead, and point
;; will be where it originally was in X for B when you return to B.

;; Use M-x pointback-mode RET to enable pointback-mode for a buffer.
;; Use M-x global-pointback-mode RET to enable it for all buffers.

"]) (point-undo . [(20100504 829) nil "undo/redo position" single ";;; Commentary:

;; This package allows you to undo/redo point and window-start.
;; It is like w3m's UNDO/REDO commands.

"]) (point-stack . [(20140102 1223) nil "A forward/back stack for point" single ";;; Commentary:

;; Provides forward/back stack for point.  I use load it like so:
;;
;; (add-to-list 'load-path \"/home/matt/work/emacs/point-stack\")
;; (require 'point-stack)
;; (global-set-key '[(f5)] 'point-stack-push)
;; (global-set-key '[(f6)] 'point-stack-pop)
;; (global-set-key '[(f7)] 'point-stack-forward-stack-pop)
;;
;; Then when I know I'm going to want to come back to where I am I hit
;; f5.  This stores the location of of the point.  When I want to come
;; back to that point hit f6.  I can go forward by hitting f7.
;;
;; based on http://www.emacswiki.org/emacs/JohnConnors
;; enhanced with forward-stack

"]) (plsense . [(20130919 1912) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for PlSense that is a development tool for Perl." single ";;; Commentary:
;; 
;; This extension provides interface for PlSense.
;; PlSense is a development tool for Perl.
;; PlSense provides Completion/Help about Module/Function/Variable optimized for context.
;; 
;; For more infomation,
;; see <https://github.com/aki2o/plsense/blob/master/README.md>
;; see <https://github.com/aki2o/emacs-plsense/blob/master/README.md>

"]) (plenv . [(20130706 2316) nil "A plenv wrapper for Emacs" single ";;; Commentary:

;;; Initialize
;; (require 'plenv)
;; (plenv-global \"perl-5.16.2\") ;; initialize perl version to use

;;; Customizable Options:
;;
;; Below are customizable option list:
;;
;; `plenv-dir'
;; your plenv directory
;; default = ~/.plenv

;;; Utility
;; (guess-plenv-perl-path)    ;; return current plenv perl path. (like \"plenv which perl\". but, implemented by elisp.)
;; (guess-plenv-perl-version) ;; return current plenv perl version. (like \"plenv version\". but, implemented by elisp.)

"]) (plantuml-mode . [(20131031 1632) ((auto-complete (1 4))) "Major mode for plantuml" single ";;; Commentary:
;;
;; A major mode for plantuml, see: http://plantuml.sourceforge.net/
;; Plantuml is an open-source tool in java that allows to quickly write :
;;     - sequence diagram,
;;     - use case diagram,
;;     - class diagram,
;;     - activity diagram,
;;     - component diagram,
;;     - state diagram
;;     - object diagram
;; using a simple and intuitive language.
;;
;; to install:
;; (require 'plantuml-mode)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
"]) (pkgbuild-mode . [(20140107 458) nil "Interface to the ArchLinux package manager" single ";;; Commentary:

;; This package provides an interface to the ArchLinux package manager.

;; Put this in your .emacs file to enable autoloading of pkgbuild-mode
;; and auto-recognition of \"PKGBUILD\" files:
;;
;;  (autoload 'pkgbuild-mode \"pkgbuild-mode.el\" \"PKGBUILD mode.\" t)
;;  (setq auto-mode-alist (append '((\"/PKGBUILD$\" . pkgbuild-mode))
;;                                auto-mode-alist))

"]) (pkg-info . [(20131101 408) ((dash (1 6 0)) (epl (0 4))) "Information about packages" single ";;; Commentary:

;; This library extracts information from installed packages.

"]) (pivotal-tracker . [(20130319 1933) nil "Interact with Pivotal Tracker through its API" single ";;; Commentary:

;; Pivotal Tracker Mode provides a mode and functions for interacting
;; with Pivotal Tracker through its API.
;; It is designed to give most of the functionality that is important to a developer.

;; Before using the tracker you must customize your pivotal API key.
;; You can obtain the key from the 'My Profile' link in the Pivotal Tracker
;; web application.
;; M-x customize-group RET pivotal RET

"]) (pinot . [(20130918 1054) nil "Emacs interface to pinot-search" tar ";;; Commentary:

;;

"]) (pinboard-api . [(20131207 1124) nil "Rudimentary http://pinboard.in integration" single ";;; Commentary:

;; This allows adding URLs to http://pinboard.in

"]) (pig-snippets . [(20130912 2324) ((yasnippet (0 8 0))) "Snippets for pig-mode" tar nil]) (pig-mode . [(20140113 1321) nil "Major mode for Pig files" single ";;; Commentary:

;; pig-mode is an Emacs major mode for editing Pig scripts. Currently
;; it supports syntax highlighting and indentation for Pig versions
;; 0.2 to 0.11.1. We track the changes to Pig syntax and try to
;; support new Pig features ASAP.

;;; Installation:

;; Put this file into your Emacs lisp path (eg. site-lisp) and add the
;; following line to your ~/.emacs file:
;;
;;   (require 'pig-mode)

"]) (pier-mode . [(20131021 840) ((magit (1 2 0))) "Emacs Major mode for Pier-formatted text files" single ";;; Commentary:
;;
;; The code below is heavily based on markdown-mode and AUCTeX.
;;
"]) (pianobar . [(20120128 1301) nil "thin wrapper for Pianobar, a Pandora Radio client" single ";;; Commentary:

;; Pianobar is a command-line client for Pandora <http://pandora.com>,
;; written by Lars-Dominik Braun (and others), which can be found at
;; <http://6xq.net/html/00/17.html>.
;;
;; There is a README that should have come with this file that
;; contains more detailed information than what's here. If you can't
;; find it, you can find it on GitHub at <http://github.com/agrif/pianobar.el>.
;;
;; Suggestions, improvements, and bug reports are welcome. This is a
;; *very* early version, so expect there to be many!

;;; Installation:

;; Installation instructions:
;;
;; 1. Put this file in your emacs load path OR add the following to
;;    your .emacs file (modifying the path appropriately):
;;
;;    (add-to-list 'load-path \"/home/agrif/emacsinclude\")
;;
;; 2. Add the following to your .emacs file to load this file
;;    automatically when M-x pianobar is run:
;;
;;    (autoload 'pianobar \"pianobar\" nil t)
;;
;; 3. (Optional) Customize pianobar! See the README for information on
;;     what variables are available to set.
;;

"]) (php-mode . [(20131203 1308) nil "Major mode for editing PHP code" single ";;; Commentary:

;; PHP mode is a major mode for editing PHP source code.  It's an
;; extension of C mode; thus it inherits all C mode's navigation
;; functionality.  But it colors according to the PHP grammar and
;; indents according to the PEAR coding guidelines.  It also includes
;; a couple handy IDE-type features such as documentation search and a
;; source and class browser.

"]) (php-eldoc . [(20130328 826) nil "eldoc backend for php" tar ";;; Commentary:
;; You should find probe.php in the same directory as this file.
;;
;; The project is hosted at https://github.com/sabof/php-eldoc
;; The latest version, and all the relevant information can be found there.

"]) (php-boris . [(20130527 121) nil "Run boris php REPL" single ";;; Commentary:
;;
;; This program is derived from comint-mode and provides the following features.
;;
;;  * file name completion in string
;;  * incremental history search
;;
;;
;; Put this file in your Emacs lisp path (e.g. ~/.emacs.d/site-lisp)
;; and add the following line to your .emacs:
;;
;;    (require 'php-boris)
;;
;; Type M-x php-boris to run boris php REPL.
;; See also `comint-mode' to check key bindings.
;;

(require 'cc-mode)
(require 'comint)
(require 'ansi-color)

(defgroup php-boris nil
  \"Run boris REPL and communicate the process.\"
  :group 'processes)

(defconst php-boris-version \"0.0.1\"
  \"php-boris mode Version.\")

(defcustom php-boris-command \"boris\"
  \"boris command used in `php-boris-mode'.\"
  :group 'php-boris
  :type 'string)

(defcustom php-boris-prompt \"\\\\[\\\\d+\\\\] boris> \"
  \"boris prompt used in `php-boris-mode'.\"
  :group 'php-boris
  :type 'string)

(defvar php-boris-process-name \"boris-repl\"
  \"process name of boris REPL.\")

(defvar php-boris-temp-buffer-name \"*php-boris-command-output*\")

(defvar php-boris-mode-syntax-table
  (let ((st (make-syntax-table)))
    (c-populate-syntax-table st)
    (modify-syntax-entry ?$ \"_\" st)
    st))

(defvar php-boris-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd \"TAB\") 'comint-dynamic-complete)
    (define-key map (kbd \"C-c C-c\") 'php-boris-quit-or-cancel)
    map))

;; process.stdout.columns should be set.
;; but process.stdout.columns in Emacs is infinity because Emacs returns 0 as winsize.ws_col.
;; The completion candidates won't be displayed if process.stdout.columns is infinity.
;; see also `handleGroup` function in readline.js
(defvar php-boris-code \"\")


(defvar php-boris-input-ignoredups t
  \"If non-nil, don't add input matching the last on the input ring.

See also `comint-input-ignoredups'\")

(defvar php-boris-process-echoes t
  \"If non-nil, boris does not echo any input.

See also `comint-process-echoes'\")

(defvar php-boris-extra-espace-sequence-re \"\\\\(\\x1b\\\\[[0-9]+[GJK]\\\\)\")
(defvar php-boris-ansi-color-sequence-re \"\\\\(\\x1b\\\\[[0-9]+m\\\\)\")
;;; if send string like \"a; Ma\\t\", return a; Math\\x1b[1G> a; Math\\x1b[0K\\x1b[10G
(defvar php-boris-prompt-re-format
  (concat
   \"\\x1b\\\\[1G\"
   \"\\\\(\"
   \"\\x1b\\\\[0J%s.*\\x1b\\\\[[0-9]+G\"  ; for Node.js 0.8
   \"\\\\|\"
   \"%s.*\\x1b\\\\[0K\\x1b\\\\[[0-9]+G\"  ; for Node.js 0.4 or 0.6
   \"\\\\)\"
   \"$\"))
(defvar php-boris-prompt-re
  (format php-boris-prompt-re-format php-boris-prompt php-boris-prompt))
;;; not support Unicode characters
(defvar php-boris-require-re
  (concat
   \"\\\\(?:^\\\\|\\\\s-\\\\|[-+*/%&|><!;{}()[]\\\\|\\\\]\\\\)\"  ; delimiter
   \"require\\\\s-*(\\\\s-*\"
   \"\\\\(\"
   \"\\\"[^\\\"\\\\]*\\\\(?:\\\\\\\\.[^\\\"\\\\]*\\\\)*\"             ; double quote
   \"\\\\|\"
   \"'[^'\\\\]*\\\\(?:\\\\\\\\.[^'\\\\]*\\\\)*\"                ; single quote
   \"\\\\)\"
   \"$\"))

(defvar php-boris-cache-token \"\")
(defvar php-boris-cache-candidates ())


;;;--------------------------
;;; Private functions
;;;--------------------------
(defun php-boris--in-string-p (&optional pos)
  \"Return non-nil if point is inside string\"
  (nth 3 (syntax-ppss pos)))

(defun php-boris--extract-require-argument (string)
  (if (string-match php-boris-require-re string)
      (match-string 1 string)))

(defun php-boris--get-last-token (string)
  \"Return the last token in the string.\"
  (if (string-match \"\\\\([._$]\\\\|\\\\w\\\\)+$\" string)
      (match-string 0 string)))

"]) (php-auto-yasnippets . [(20131212 350) ((php-mode (1 11)) (yasnippet (0 8 0))) "Creates snippets for PHP functions" tar ";;; Commentary:
;;
;; This package provides a function that automatically creates
;; snippets for PHP standard library functions, for use with the
;; YASnippets package, available at:
;;
;;     https://github.com/capitaomorte/yasnippet
;;
;; This package also requires php-mode, available at:
;;
;;     https://github.com/ejmr/php-mode
;;
;; To use php-auto-yasnippets you need to do three things.  First,
;; place the package in your load-path (`C-h v load-path' for help)
;; and load it from your Emacs configuration file by adding:
;;
;;     (require 'php-auto-yasnippets)
;;
;; Second, make sure the variable `php-auto-yasnippet-php-program'
;; points to the program `Create-PHP-YASnippet.php'.  That PHP program
;; should have come with this package; if you do not have it then you
;; can get it from the project GitHub URL at the top of this file.  By
;; default this package looks for the PHP program in the same
;; directory as this Elisp file.  You can use `setq' in your
;; configuration file to set the variable to the proper path if the
;; PHP program is in a different directory, e.g:
;;
;;     (require 'php-auto-yasnippets)
;;     (setq php-auto-yasnippet-php-program \"~/path/to/Create-PHP-YASnippet.php\")
;;
;; Finally, bind the function `yas/create-php-snippet' to a key of
;; your choice.  Since this package requires php-mode, and since it is
;; most useful when writing PHP code, you may want to use a
;; key-binding that only works when using php-mode.  For example:
;;
;;     (define-key php-mode-map (kbd \"C-c C-y\") 'yas/create-php-snippet)
;;
;; Now if you type the name of a PHP function and press `C-c C-y' it
;; will expand into a snippet containing all of the parameters, their
;; names, any default values, et cetera.  If you type the name of a
;; method then you need to tell the package the name of the class that
;; implements that method, otherwise it will not be able to create the
;; snippet.  Using the prefix command, e.g. `C-u C-c C-y', prompts for
;; the class name in the minibuffer.



"]) (php+-mode . [(20121129 1252) nil "A better PHP mode with Zend Framework 1 support." tar nil]) (phoenix-dark-pink-theme . [(20130905 941) nil "Port of the Sublime Text 2 theme of the same name" single nil]) (phoenix-dark-mono-theme . [(20130306 1215) nil "Monochromatic version of the Phoenix theme" single nil]) (phi-search-mc . [(20131010 358) ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) "multiple-cursors extension for phi-search" single ";;; Commentary:
;;
;; phi-search-mc.el provides the following interactive commands:
;;
;; * phi-search-mc/mark-here
;; * phi-search-mc/mark-forward
;; * phi-search-mc/mark-backward
;; * phi-search-mc/mark-all
;;
;;   These funcitons serve as great way to add fake cursors at your
;;   desired points using phi-search.
;;
;; * phi-search-from-isearch
;; * phi-search-from-isearch-mc/mark-next
;; * phi-search-from-isearch-mc/mark-previous
;; * phi-search-from-isearch-mc/mark-all
;;
;; Run the following line to rebind `mc/mark-next-like-this',
;; `mc/mark-previous-like-this' and `mc/mark-all-like-this' in
;; phi-search buffer to `phi-search-mc/mark-next',
;; `phi-search-mc/mark-previous' and `phi-search-mc/mark-all',
;; respectively.
;
;;   (phi-search-mc/setup-keys)
;;
;; Run the following line to bind `phi-search',
;; `mc/mark-next-like-this', `mc/mark-previous-like-this' and
;; `mc/mark-all-like-this' in isearch mode to
;; `phi-search-from-isearch', `phi-search-from-isearch-mc/mark-next',
;; `phi-search-from-isearch-mc/mark-previous' and
;; `phi-search-from-isearch-mc/mark-all', respectively.
;;
;;   (add-hook 'isearch-mode-hook 'phi-search-from-isearch-mc/setup-keys)
;;
;; If you have bound multi-stroke keys to mc/mark-next-like-this etc.,
;; this may not be enough.  For example, I, the author, am binding
;; C->/C-</C-.! to mc/mark-* functions, and since they are complex
;; multi-stroke keys on a terminal emulator (where [C->] is mapped to
;; [C-x @ c >], etc.) I have to add the following lines for the
;; features to work properly.
;;
;;   (defvar phi-search-from-isearch-mc/ctl-map
;;     (let ((map (make-sparse-keymap)))
;;       (define-key map (kbd \">\")   'phi-search-from-isearch-mc/mark-next)
;;       (define-key map (kbd \"<\")   'phi-search-from-isearch-mc/mark-previous)
;;       (define-key map (kbd \". !\") 'phi-search-from-isearch-mc/mark-all)
;;       map))
;;
;;   (defadvice phi-search-from-isearch-mc/setup-keys
;;     (after for-terminal activate)
;;     (define-key isearch-mode-map (kbd \"C-x @ c\") phi-search-from-isearch-mc/ctl-map))

"]) (phi-search . [(20131207 730) nil "another incremental search command, compatible with \"multiple-cursors\"" tar ";;; Commentary:

;; Add following expression in your init file :
;;
;;   (require 'phi-search)
;;
;; and bind command \"phi-search\"
;;
;;   (global-set-key (kbd \"C-s\") 'phi-search)
;;   (global-set-key (kbd \"C-r\") 'phi-search-backward)

;; In *phi-search* buffer, following commands are available.

;; - phi-search-again-or-next (replaces \"phi-search\")
;;
;;   Move to the next matching item. If query is blank, use the last
;;   query.

;; - phi-search-again-or-previous (replaces \"phi-search-backward\")
;;
;;   Similar to phi-search-again-or-next, but move to the previous item.

;; - phi-search-scroll-up (replaces \"scroll-up\")
;;
;;   Scroll the target window up, to check candidates.

;; - phi-search-scroll-down (replaces \"scroll-down\")
;;
;;   Scroll the target window down.

;; - phi-search-recenter (replaces \"recenter\")
;;
;;   Recenter the target window.

;; - phi-search-yank-word (replaces \"kill-region\")
;;
;;   Expand query by yanking one word from the target buffer.

;; - [RET] phi-search-complete
;;
;;   Finish searching.

;; - [C-RET] phi-search-complete-at-beginning
;;
;;   Finish searching at the beginning of the match.

;; - [C-c C-c] phi-search-unlimit
;;
;;   Force update results regardless of \"phi-search-limit\"

;; - [C-g] phi-search-abort
;;
;;   Finish searching, and move back to the original position.

;; For more details, see \"Readme\".

"]) (phi-rectangle . [(20131028 2106) nil "another rectangle-mark command (rewrite of rect-mark)" single ";;; Commentary:

;; Require this script
;;
;;   (require 'phi-rectangle)
;;
;; and call function \"phi-rectangle-mode\". Then following commands are
;; available

;; - [C-RET] phi-rectangle-set-mark-command
;;
;;   Activate the rectangle mark.

;; - phi-rectangle-kill-region (replaces \"kill-region\")
;;
;;   A dwim version of \"kill-region\". If the rectangle mark is active,
;;   kill rectangle. If the normal mark is active, kill region as usual.
;;   Otherwise, kill whole line.

;; - phi-rectangle-kill-ring-save (replaces \"kill-ring-save\")
;;
;;   A dwim version of \"kill-ring-save\" like \"phi-rectangle-kill-region\".

;; - phi-rectangle-yank (replaces \"yank\")
;;
;;   A dwim version of \"yank\". If the last killed object is a rectangle,
;;   yank rectangle. Otherwise yank a kill-ring item as usual.

"]) (ph . [(20130312 1137) ((emacs (24 3))) "A global minor mode for managing multiple projects." tar nil]) (pgdevenv . [(20130527 257) nil "Manage your PostgreSQL development envs" tar nil]) (pg . [(20130731 1442) nil "Emacs Lisp interface to the PostgreSQL RDBMS" single ";;; Commentary:

;;; Overview ==========================================================
;;
;; This module lets you access the PostgreSQL object-relational DBMS
;; from Emacs, using its socket-level frontend/backend protocol. The
;; module is capable of automatic type coercions from a range of SQL
;; types to the equivalent Emacs Lisp type. This is a low level API,
;; and won't be useful to end users. Should work with GNU Emacs 19.34
;; and up, and XEmacs 20 and up. Performance is very poor when not
;; byte-compiled.

;;; Entry points =======================================================
;;
;; (with-pg-connection con (dbname user [password host port]) &body body)
;;     A macro which opens a connection to database DBNAME, executes the
;;     BODY forms then disconnects. See function `pg:connect' for details
;;     of the connection arguments.
;;
;; (with-pg-transaction con &body body)
;;     A macro which executes the BODY forms wrapped in an SQL transaction.
;;     CON is a connection to the database. If an error occurs during the
;;     execution of the forms, a ROLLBACK instruction is executed.
;;
;; (pg:connect dbname user [password host port]) -> connection
;;     Connect to the database DBNAME on HOST (defaults to localhost)
;;     at PORT (defaults to 5432) via TCP/IP and log in as USER. If
;;     the database requires a password, send PASSWORD as clear text.
;;     Set the output date type to 'ISO', and initialize our type
;;     parser tables.
;;
;; (pg:exec connection &rest sql) -> pgresult
;;     Concatenate the SQL strings and send to the backend. Retrieve
;;     all the information returned by the database and return it in
;;     an opaque record PGRESULT.
;;
;; (pg:result pgresult what &rest args) -> info
;;     Extract information from the PGRESULT. The WHAT keyword can be
;;     one of
;;          * :connection
;;          * :status
;;          * :attributes
;;          * :tuples
;;          * :tuple tupleNumber
;;          * :oid
;;     `:connection' allows you to retrieve the database connection.
;;     `:status' is a string returned by the backend to indicate the
;;     status of the command; it is something like \"SELECT\" for a
;;     select command, \"DELETE 1\" if the deletion affected a single
;;     row, etc. `:attributes' is a list of tuples providing metadata:
;;     the first component of each tuple is the attribute's name as a
;;     string, the second an integer representing its PostgreSQL type,
;;     and the third an integer representing the size of that type.
;;     `:tuples' returns all the data retrieved from the database, as a
;;     list of lists, each list corresponding to one row of data
;;     returned by the backend. `:tuple num' can be used to extract a
;;     specific tuple (numbering starts at 0). `:oid' allows you to
;;     retrieve the OID returned by the backend if the command was an
;;     insertion; the OID is a unique identifier for that row in the
;;     database (this is PostgreSQL-specific, please refer to the
;;     documentation for more details).
;;
;; (pg:disconnect connection) -> nil
;;     Close the database connection.
;;
;; (pg:for-each connection select-form callback)
;;     Calls CALLBACK on each tuple returned by SELECT-FORM. Declares
;;     a cursor for SELECT-FORM, then fetches tuples using repeated
;;     executions of FETCH 1, until no results are left. The cursor is
;;     then closed. The work is performed within a transaction. When
;;     you have a large amount of data to handle, this usage is more
;;     efficient than fetching all the tuples in one go.
;;
;;     If you wish to browse the results, each one in a separate
;;     buffer, you could have the callback insert each tuple into a
;;     buffer created with (generate-new-buffer \"myprefix\"), then use
;;     ibuffer's \"/ n\" to list/visit/delete all buffers whose names
;;     match myprefix.
;;
;; (pg:databases connection) -> list of strings
;;     Return a list of the databases available at this site (a
;;     database is a set of tables; in a virgin PostgreSQL
;;     installation there is a single database named \"template1\").
;;
;; (pg:tables connection) -> list of strings
;;     Return a list of the tables present in the database to which we
;;     are currently connected. Only include user tables: system
;;     tables are excluded.
;;
;; (pg:columns connection table) -> list of strings
;;     Return a list of the columns (or attributes) in TABLE, which
;;     must be a table in the database to which we are currently
;;     connected. We only include the column names; if you want more
;;     detailed information (attribute types, for example), it can be
;;     obtained from `pg:result' on a SELECT statement for that table.
;;
;; (pg:lo-create conn . args) -> oid
;;     Create a new large object (BLOB, or binary large object in
;;     other DBMSes parlance) in the database to which we are
;;     connected via CONN. Returns an OID (which is represented as an
;;     elisp integer) which will allow you to use the large object.
;;     Optional ARGS are a Unix-style mode string which determines the
;;     permissions of the newly created large object, one of \"r\" for
;;     read-only permission, \"w\" for write-only, \"rw\" for read+write.
;;     Default is \"r\".
;;
;;     Large-object functions MUST be used within a transaction (see
;;     the macro `with-pg-transaction').
;;
;; (pg:lo-open conn oid . args) -> fd
;;     Open a large object whose unique identifier is OID (an elisp
;;     integer) in the database to which we are connected via CONN.
;;     Optional ARGS is a Unix-style mode string as for pg:lo-create;
;;     which defaults to \"r\" read-only permissions. Returns a file
;;     descriptor (an elisp integer) which can be used in other
;;     large-object functions.
;;
;; (pg:lo-close conn fd)
;;     Close the file descriptor FD which was associated with a large
;;     object. Note that this does not delete the large object; use
;;     `pg:lo-unlink' for that.
;;
;; (pg:lo-read conn fd bytes) -> string
;;     Read BYTES from the file descriptor FD which is associated with
;;     a large object. Return an elisp string which should be BYTES
;;     characters long.
;;
;; (pg:lo-write connection fd buf)
;;     Write the bytes contained in the elisp string BUF to the
;;     large object associated with the file descriptor FD. 
;;
;; (pg:lo-lseek conn fd offset whence)
;;     Do the equivalent of a lseek(2) on the file descriptor FD which
;;     is associated with a large object; ie reposition the read/write
;;     file offset for that large object to OFFSET (an elisp
;;     integer). WHENCE has the same significance as in lseek(); it
;;     should be one of SEEK_SET (set the offset to the absolute
;;     position), SEEK_CUR (set the offset relative to the current
;;     offset) or SEEK_END (set the offset relative to the end of the
;;     file). WHENCE should be an elisp integer whose values can be
;;     obtained from the header file <unistd.h> (probably 0, 1 and 2
;;     respectively).
;;
;; (pg:lo-tell conn oid) -> integer
;;     Do the equivalent of an ftell(3) on the file associated with
;;     the large object whose unique identifier is OID. Returns the
;;     current position of the file offset for the object's associated
;;     file descriptor, as an elisp integer.
;;
;; (pg:lo-unlink conn oid)
;;     Remove the large object whose unique identifier is OID from the
;;     system (in the current implementation of large objects in
;;     PostgreSQL, each large object is associated with an object in
;;     the filesystem).
;;
;; (pg:lo-import conn filename) -> oid
;;     Create a new large object and initialize it to the data
;;     contained in the file whose name is FILENAME. Returns an OID
;;     (as an elisp integer). Note that is operation is only syntactic
;;     sugar around the basic large-object operations listed above.
;;
;; (pg:lo-export conn oid filename)
;;     Create a new file named FILENAME and fill it with the contents
;;     of the large object whose unique identifier is OID. This
;;     operation is also syntactic sugar.
;;
;;
;; Boolean variable `pg:disable-type-coercion' which can be set to
;; non-nil (before initiating a connection) to disable the library's
;; type coercion facility. Default is t.
;;
;;
;; The interface is pretty slow (byte compiling helps a lot). Maybe
;; someone can suggest a better way of reading input from the network
;; stream. Please note that your postmaster has to be started with the
;; `-i' option in order to accept TCP/IP connections (this is not the
;; default). For more information about PostgreSQL see
;; <URL:http://www.PostgreSQL.org/>.
;;
;; Thanks to Eric Ludlam <zappo@gnu.org> for discovering a bug in the
;; date parsing routines, to Hartmut Pilch and Yoshio Katayama for
;; adding multibyte support, and to Doug McNaught and Pavel Janik for
;; bug fixes.


;; SECURITY NOTE: setting up PostgreSQL to accept TCP/IP connections
;; has security implications; please consult the documentation for
;; details. pg.el supports neither the crypt authentication method,
;; nor Kerberos (support for these can't be added to Emacs due to
;; silly US crypto export regulations). However, it is possible to use
;; the port forwarding capabilities of ssh to establish a connection
;; to the backend over TCP/IP, which provides both a secure
;; authentication mechanism and encryption (and optionally
;; compression) of data passing through the tunnel. Here's how to do
;; it (thanks to Gene Selkov, Jr. <selkovjr@mcs.anl.gov> for the
;; description):
;;
;; 1. Establish a tunnel to the backend machine, like this:
;; 
;; 	ssh -L 3333:backend.dom:5432 postgres@backend.dom
;; 
;;    The first number in the -L argument, 3333, is the port number of
;;    your end of the tunnel. The second number, 5432, is the remote
;;    end of the tunnel -- the port number your backend is using. The
;;    name or the address in between the port numbers belongs to the
;;    server machine, as does the last argument to ssh that also includes
;;    the optional user name. Without the user name, ssh will try the
;;    name you are currently logged on as on the client machine. You can
;;    use any user name the server machine will accept, not necessarily
;;    those related to postgres.
;; 
;; 2. Now that you have a running ssh session, you can point pg.el to
;;    the local host at the port number which you specified in step 1.
;;    For example,
;;
;;         (pg:connect \"dbname\" \"user\" \"password\" \"localhost\" 3333)
;;
;;    You can omit the port argument if you chose 5432 as the local
;;    end of the tunnel, since pg.el defaults to this value.


;;; INSTALL =========================================================
;;
;; Place this file in a directory somewhere in the load-path, then
;; byte-compile it (do a `B' on it in dired, for example). Place a
;; line such as `(require 'pg)' in your emacs initialization file.


;;; TODO ============================================================
;;
;; * add a mechanism for parsing user-defined types. The user should
;;   be able to define a parse function and a type-name; we query
;;   pg_type to get the type's OID and add the information to
;;   pg:parsers.
;;
;; * in a future release I will probably modify the numeric conversion
;;   routines to return elisp floating point values instead of elisp
;;   integers, in order to work around possible overflow problems.


"]) (perspective . [(20131004 1658) nil "switch between named \"perspectives\" of the editor" single ";;; Commentary:

;; This package provides tagged workspaces in Emacs, similar to
;; workspaces in windows managers such as Awesome and XMonad (and
;; somewhat similar to multiple desktops in Gnome or Spaces in OS X).

;; perspective.el provides multiple workspaces (or \"perspectives\") for
;; each Emacs frame.  This makes it easy to work on many separate projects
;; without getting lost in all the buffers.

;; Each perspective is composed of a window configuration and a set of
;; buffers.  Switching to a perspective activates its window
;; configuration, and when in a perspective only its buffers are
;; available by default.

(require 'cl)

"]) (persp-mode . [(20140113 2252) ((workgroups (0 2 0))) "\"perspectives\" + save/load + shared among frames - bugs." single ";;; Commentary:

;; Based on perspective.el by Nathan Weizenbaum
;; (http://github.com/nex3/perspective-el) but perspectives shared
;; among frames + ability to save/restore perspectives to/from file
;; and it less buggy(as for me).
;;
;; Home: https://github.com/Bad-ptr/persp-mode.el

;; Installation:

;; From MELPA: M-x package-install RET persp-mode RET
;; From file: M-x package-install-file RET 'path to this file' RET
;; Or put this file into your load-path.

;; Configuration:

;; When installed through package-install:
;; (with-eval-after-load \"persp-mode-autoloads\"
;;   (setq wg-morph-on nil) ;; switch off animation of restoring window configuration
;;   (add-hook 'after-init-hook #'(lambda () (persp-mode 1))))

;; When installed without generating autoloads file:
;; (with-eval-after-load \"persp-mode\"
;;   (setq wg-morph-on nil)
;;   (add-hook 'after-init-hook #'(lambda () (persp-mode 1))))
;; (require 'persp-mode)

;; Dependencies:

;; Ability to save/restore window configurations from/to file depends
;; on workgroups.el(https://github.com/tlh/workgroups.el)

;; Keys:

;; C-x x s -- create/switch to perspective.
;; C-x x r -- rename perspective.
;; C-x x c -- kill perspective
;; (if you kill 'nil(initial or ~main~)' persp -- it'll kill all opened buffers).
;; C-x x a -- add buffer to perspective.
;; C-x x t -- switch to buffer without adding it to current perspective.
;; C-x x i -- import all buffers from another perspective.
;; C-x x k -- remove buffer from perspective.
;; C-x x w -- save perspectives to file.
;; C-x x l -- load perspectives from file.

;; Customization:

;; M-x: customize-group RET persp-mode RET


"]) (persistent-soft . [(20131106 706) ((pcache (0 2 3)) (list-utils (0 4 2))) "Persistent storage, returning nil on failure" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'persistent-soft)
;;     (persistent-soft-store 'hundred 100 \"mydatastore\")
;;     (persistent-soft-fetch 'hundred \"mydatastore\")    ; 100
;;     (persistent-soft-fetch 'thousand \"mydatastore\")   ; nil
;;
;;     quit and restart Emacs
;;
;;     (persistent-soft-fetch 'hundred \"mydatastore\")    ; 100
;;
;; Explanation
;;
;; This is a wrapper around pcache.el, providing \"soft\" fetch and
;; store routines which never throw an error, but instead return
;; nil on failure.
;;
;; There is no end-user interface for this library.  It is only
;; useful from other Lisp code.
;;
;; The following functions are provided:
;;
;;     `persistent-soft-store'
;;     `persistent-soft-fetch'
;;     `persistent-soft-exists-p'
;;     `persistent-soft-flush'
;;     `persistent-soft-location-readable'
;;     `persistent-soft-location-destroy'
;;
;; To use persistent-soft, place the persistent-soft.el library
;; somewhere Emacs can find it, and add the following to your
;; ~/.emacs file:
;;
;;     (require 'persistent-soft)
;;
;; See Also
;;
;;     M-x customize-group RET persistent-soft RET
;;
;; Notes
;;
;;     Using pcache with a more recent version of CEDET gives
;;
;;         Unsafe call to `eieio-persistent-read'.
;;         eieio-persistent-read: Wrong type argument: class-p, nil
;;
;;     This library provides something of a workaround.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.3 and lower : no
;;
;;     Uses if present: pcache.el (all operations are noops when
;;     not present)
;;
;; Bugs
;;
;;     Persistent-soft is a wrapper around pcache which is a wrapper
;;     around eieio.  Therefore, persistent-soft should probably be
;;     rewritten to use eieio directly or recast as a patch to pcache.
;;
;; TODO
;;
;;     Setting print-quoted doesn't seem to influence EIEIO.
;;     It doesn't seem right that the sanitization stuff
;;     is needed.
;;
;;     Detect terminal type as returned by (selected-terminal)
;;     as unserializable.
;;
;;     Correctly reconstitute cyclic list structures instead of
;;     breaking them.
;;
;;     Notice and delete old data files.
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (perlbrew . [(20130127 324) nil "A perlbrew wrapper for Emacs" single ";;; Commentary:

;;; Initialize
;; (require 'perlbrew)
;; (perlbrew-use \"perl-5.12.3\") ;; initialize perl version to use

;;; Customizable Options:
;;
;; Below are customizable option list:
;;
;; `perlbrew-dir'
;; your perlbrew directory
;; default = ~/perl5/perlbrew

"]) (perl-completion . [(20090527 2336) nil "No description available." single nil]) (peg . [(20130320 158) nil "Parsing Expression Grammars in Emacs Lisp" single ";;; Commentary:
;;
;; Parsing Expression Grammars (PEG) are a formalism in the spirit of
;; Context Free Grammars (CFG) with some simplifications which makes
;; the implementation of PEGs as recursive descent parser particularly
;; simple and easy to understand [Ford, Baker].
;;
;; This file implements a macro `peg-parse' which parses the current
;; buffer according to a PEG.  E.g. we can match integers with a PEG
;; like this:
;;
;;  (peg-parse (number   sign digit (* digit))
;;             (sign     (or \"+\" \"-\" \"\"))
;;             (digit    [0-9]))
;;
;; In contrast to regexps, PEGs allow us to define recursive \"rules\".
;; A \"grammar\" is a list of rules.  A rule is written as (NAME PEX...)
;; E.g. (sign (or \"+\" \"-\" \"\")) is a rule with the name \"sign\".  The
;; syntax for PEX (Parsing Expression) is a follows:
;;
;; Description   	Lisp		Traditional, as in Ford's paper
;; Sequence 		(and e1 e2)    	e1 e2
;; Prioritized Choice   (or e1 e2)	e1 / e2
;; Not-predicate 	(not e)		!e
;; And-predicate	(if e)		&e
;; Any character	(any)		.
;; Literal string	\"abc\"		\"abc\"
;; Character C		(char c)	'c'
;; Zero-or-more 	(* e)		e*
;; One-or-more 		(+ e)		e+
;; Optional		(opt e)		e?
;; Character range	(range a b)	[a-b]
;; Character set	[a-b \"+*\" ?x]	[a-b+*x]  ; note: [] is a elisp vector
;; Character classes    [ascii cntrl]
;; Beginning-of-Buffer  (bob)
;; End-of-Buffer        (eob)
;; Beginning-of-Line    (bol)
;; End-of-Line        	(eol)
;; Beginning-of-Word    (bow)
;; End-of-Word        	(eow)
;; Beginning-of-Symbol  (bos)
;; End-of-Symbol       	(eos)
;; Syntax-Class       	(syntax-class NAME)
;;
;; `peg-parse' also supports parsing actions, i.e. Lisp snippets which
;; are executed when a pex matches.  This can be used to construct
;; syntax trees or for similar tasks.  Actions are written as
;;
;;  (action FORM)          ; evaluate FORM
;;  `(VAR... -- FORM...)   ; stack action
;; 
;; Actions don't consume input, but are executed at the point of
;; match.  A \"stack action\" takes VARs from the \"value stack\" and
;; pushes the result of evaluating FORMs to that stack.  See
;; `peg-ex-parse-int' for an example.
;;
;; Derived Operators:
;;
;; The following operators are implemented as combinations of
;; primitive expressions:
;;
;; (substring E)  ; match E and push the substring for the matched region
;; (region E)     ; match E and push the corresponding start and end positions
;; (replace E RPL); match E and replace the matched region with RPL.
;; (list E)       ; match E and push a list out of the items that E produces.
;;
;; Regexp equivalents:
;;
;; Here a some examples for regexps and how those could be written as pex.
;; [Most are taken from rx.el]
;;
;; \"^[a-z]*\"
;; (and (bol) (* [a-z]))
;;
;; \"\\n[^ \\t]\"
;; (and \"\\n\" (not [\" \\t\"]) (any))
;;
;; \"\\\\*\\\\*\\\\* EOOH \\\\*\\\\*\\\\*\\n\"
;; \"*** EOOH ***\\n\"
;;
;; \"\\\\<\\\\(catch\\\\|finally\\\\)\\\\>[^_]\"
;; (and (bow) (or \"catch\" \"finally\") (eow) (not \"_\") (any))
;;
;; \"[ \\t\\n]*:\\\\([^:]+\\\\|$\\\\)\"
;; (and (* [\" \\t\\n\"]) \":\" (or (+ (not \":\") (any)) (eol)))
;;
;; \"^content-transfer-encoding:\\\\(\\n?[\\t ]\\\\)*quoted-printable\\\\(\\n?[\\t ]\\\\)*\"
;; (and (bol) 
;;      \"content-transfer-encoding:\" 
;;      (* (opt \"\\n\") [\"\\t \"])
;;      \"quoted-printable\"
;;      (* (opt \"\\n\") [\"\\t \"]))
;;
;; \"\\\\$[I]d: [^ ]+ \\\\([^ ]+\\\\) \"
;; (and \"$Id: \" (+ (not \" \") (any)) \" \" (+ (not \" \") (any)) \" \")
;;
;; \"^;;\\\\s-*\\n\\\\|^\\n\"
;; (or (and (bol) \";;\" (* (syntax-class whitespace)) \"\\n\")
;;     (and (bol) \"\\n\"))
;;
;; \"\\\\\\\\\\\\\\\\\\\\[\\\\w+\"
;; (and \"\\\\\\\\[\" (+ (syntax-class word)))
;;
;; Search forward for \";;; Examples\" for other examples.
;;
;; References:
;;
;; [Ford] Bryan Ford. Parsing Expression Grammars: a Recognition-Based
;; Syntactic Foundation. In POPL'04: Proceedings of the 31st ACM
;; SIGPLAN-SIGACT symposium on Principles of Programming Languages,
;; pages 111-122, New York, NY, USA, 2004. ACM Press.
;; http://pdos.csail.mit.edu/~baford/packrat/
;;
;; [Baker] Baker, Henry G. \"Pragmatic Parsing in Common Lisp\".  ACM Lisp
;; Pointers 4(2), April--June 1991, pp. 3--15.
;; http://home.pipeline.com/~hbaker1/Prag-Parse.html
;;

(unless (>= emacs-major-version 22)
  (error \"peg.el requires Emacs version 22 or newer\"))

"]) (peek-mode . [(20130620 1246) ((elnode (0 9 8 1))) "Serve buffers live over HTTP with elnode backend" tar ";;; Commentary:
 
;; peek-mode is a minor mode that publishes live Emacs buffers through
;; an elnode server under
;; http://<server>:<port>/peek/<buffer>. Turning on peek-mode in a
;; buffer will publish it. To unpublish a buffer, toggle peek-mode
;; off.
 
;; peek-mode is (very very!) largely based on Brian Taylor's
;; <el.wubo@gmail.com> impatient-mode
;; <https://github.com/netguy204/imp.el> However, impatient-mode does
;; not use elnode, but rather a different emacs httpd backend
;; <https://github.com/skeeto/emacs-http-server>. I consider peek-mode
;; as \"impatient-mode ported to elnode\".
 
;; Start the elnode server (`elnode-start') and visit
;; http://<server>:<port>/peek/. There will be a listing of all the
;; buffers that currently have peek-mode enabled. You can evaluate the
;; line below to start the elnode server on localhost:8008 with the
;; proper dispatcher, assuming the code in this file is available by
;; having loaded it. 
;; (elnode-start 'peek-mode-dispatcher-handler :port 8008 :host \"localhost\")

;; Because html-mode buffers are sent raw, you can use peek-mode
;; see your edits to an HTML document live!
 
;; To receive updates the browser issues a long poll on the client
;; waiting for the buffer to change -- server push. The response
;; happens in an `after-change-functions' hook. Buffers that do not
;; run these hooks will not be displayed live to clients.
 
"]) (pcsv . [(20131110 750) nil "Parser of csv" single ";;; Commentary:

;; pcsv provides parser of csv based on rfc4180
;; http://www.rfc-editor.org/rfc/rfc4180.txt

"]) (pcre2el . [(20130620 1810) ((cl-lib (0 3))) "parse, convert, and font-lock PCRE, Emacs and rx regexps" single ";;; Commentary:

;; 1 Overview
;; ==========

;;   `pcre2el' or `rxt' (RegeXp Translator or RegeXp Tools) is a utility
;;   for working with regular expressions in Emacs, based on a
;;   recursive-descent parser for regexp syntax. In addition to converting
;;   (a subset of) PCRE syntax into its Emacs equivalent, it can do the
;;   following:

;;   - convert Emacs syntax to PCRE
;;   - convert either syntax to `rx', an S-expression based regexp syntax
;;   - provide live font-locking of regexp syntax (so far only for Elisp
;;     buffers -- other modes on the TODO list)
;;   - untangle complex regexps by showing the parse tree in `rx' form and
;;     highlighting the corresponding chunks of code
;;   - show the complete list of strings (productions) matching a regexp,
;;     provided the list is finite


;; 2 Usage
;; =======

;;   Enable `rxt-minor-mode' or its global equivalent `rxt-global-mode' to
;;   get the default key-bindings. There are three sets of commands:
;;   commands that take a PCRE regexp, commands which take an Emacs regexp,
;;   and commands that try to do the right thing based on the current mode.
;;   Currently, this means Emacs syntax in `emacs-lisp-mode' and
;;   `lisp-interaction-mode', and PCRE syntax everywhere else.

;;   The default key bindings all begin with `C-c /' and have a mnemonic
;;   structure: `C-c / <source> <target>', or just `C-c / <target>' for the
;;   \"do what I mean\" commands. The complete list of key bindings is given
;;   here and explained in more detail below:

;;   - \"Do-what-I-mean\" commands:
;;     `C-c / /': `rxt-explain'
;;     `C-c / c': `rxt-convert-syntax'
;;     `C-c / x': `rxt-convert-to-rx'
;;     `C-c / '': `rxt-convert-to-strings'

;;   - Commands that work on a PCRE regexp:
;;     `C-c / p e': `rxt-pcre-to-elisp'
;;     `C-c / %': `pcre-query-replace-regexp'
;;     `C-c / p x': `rxt-pcre-to-rx'
;;     `C-c / p s': `rxt-pcre-to-sre'
;;     `C-c / p '': `rxt-pcre-to-strings'
;;     `C-c / p /': `rxt-explain-pcre'

;;   - Commands that work on an Emacs regexp:
;;     `C-c / e /': `rxt-explain-elisp'
;;     `C-c / e p': `rxt-elisp-to-pcre'
;;     `C-c / e x': `rxt-elisp-to-rx'
;;     `C-c / e s': `rxt-elisp-to-sre'
;;     `C-c / e '': `rxt-elisp-to-strings'
;;     `C-c / e t': `rxt-toggle-elisp-rx'
;;     `C-c / t': `rxt-toggle-elisp-rx'
;;     `C-c / h': `rxt-fontify-regexp-at-point'


;; 2.1 Interactive input and output
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;;   When used interactively, the conversion commands can read a regexp
;;   either from the current buffer or from the minibuffer. The output is
;;   displayed in the minibuffer and copied to the kill-ring.

;;   - When called with a prefix argument (`C-u'), they read a regular
;;     expression from the minibuffer literally, without further processing
;;     -- meaning there's no need to double the backslashes if it's an
;;     Emacs regexp. This is the same way commands like
;;     `query-replace-regexp' read input.

;;   - When the region is active, they use they the region contents, again
;;     literally (without any translation of string syntax).

;;   - With neither a prefix arg nor an active region, the behavior depends
;;     on whether the command expects an Emacs regexp or a PCRE one.

;;     Commands that take an Emacs regexp behave like `C-x C-e': they
;;     evaluate the sexp before point (which could be simply a string
;;     literal) and use its value. This is designed for use in Elisp
;;     buffers. As a special case, if point is *inside* a string, it's
;;     first moved to the string end, so in practice they should work as
;;     long as point is somewhere within the regexp literal.

;;     Commands that take a PCRE regexp try to read a Perl-style delimited
;;     regex literal *after* point in the current buffer, including its
;;     flags. For example, putting point before the `m' in the following
;;     example and doing `C-c / p e' (`rxt-pcre-to-elisp') displays
;;     `\\(?:bar\\|foo\\)', correctly stripping out the whitespace and
;;     comment:

;;     ,----
;;     | $x =~ m/  foo   |  (?# comment) bar /x
;;     `----

;;     The PCRE reader currently only works with `/ ... /' delimiters. It
;;     will ignore any preceding `m', `s', or `qr' operator, as well as the
;;     replacement part of an `s' construction.

;;     Readers for other PCRE-using languages are on the TODO list.

;;   The translation functions display their result in the minibuffer and
;;   copy it to the kill ring. When translating something into Elisp
;;   syntax, you might need to use the result either literally (e.g. for
;;   interactive input to a command like `query-replace-regexp'), or as a
;;   string to paste into Lisp code. To allow both uses,
;;   `rxt-pcre-to-elisp' copies both versions successively to the
;;   kill-ring. The literal regexp without string quoting is the top
;;   element of the kill-ring, while the Lisp string is the
;;   second-from-top. You can paste the literal regexp somewhere by doing
;;   `C-y', or the Lisp string by `C-y M-y'.


;; 2.2 Syntax conversion commands
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;;   `rxt-convert-syntax' (`C-c / c') converts between Emacs and PCRE
;;   syntax, depending on the major mode in effect when called.
;;   Alternatively, you can specify the conversion direction explicitly by
;;   using either `rxt-pcre-to-elisp' (`C-c / p e') or `rxt-elisp-to-pcre'
;;   (`C-c / e p').

;;   Similarly, `rxt-convert-to-rx' (`C-c / x') converts either kind of
;;   syntax to `rx' form, while `rxt-convert-pcre-to-rx' (`C-c / p x') and
;;   `rxt-convert-elisp-to-rx' (`C-c / e x') convert to `rx' from a
;;   specified source type.

;;   In Elisp buffers, you can use `rxt-toggle-elisp-rx' (`C-c / t' or `C-c
;;   / e t') to switch the regexp at point back and forth between string
;;   and `rx' syntax. Point should either be within an `rx' or
;;   `rx-to-string' form or a string literal for this to work.


;; 2.3 Query replace
;; ~~~~~~~~~~~~~~~~~

;;   `pcre-query-replace-regexp' does query-replace using emulated PCRE
;;   regexps. It is bound to `C-c / %' by default, by analogy with `M-%'.

;;   Put the following in your `.emacs' if you want to use PCRE query
;;   replacement everywhere:

;;   ,----
;;   | (global-set-key [(meta %)] 'pcre-query-replace-regexp)
;;   `----


;; 2.4 Syntax highlighting (font-lock)
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;;   In Elisp buffers, you can have a regular expression in a string
;;   syntax-highlighted by putting point on it and doing
;;   `rxt-fontify-regexp-at-point' (`C-c / h'). Call the command a second
;;   time to remove the highlighting, or call with a prefix argument to
;;   remove all regexp highlighting in a buffer.

;;   As long as syntax highlighting is enabled, any edits to the string are
;;   highlighted \"live\" after a small delay. You can have as many strings
;;   highlighted at once as you like, but too many might slow down display.

;;   This feature doesn't work for any other language modes yet, but it
;;   would be easy to implement.


;; 2.5 Explain regexps
;; ~~~~~~~~~~~~~~~~~~~

;;   When syntax-highlighting isn't enough to untangle some gnarly regexp
;;   you find in the wild, try the 'explain' commands: `rxt-explain' (`C-c
;;   / /'), `rxt-explain-pcre' (`C-c / p') and `rxt-explain-elisp' (`C-c /
;;   e'). These display the original regexp along with its pretty-printed
;;   `rx' equivalent in a new buffer. Moving moving point around either in
;;   the original regexp or the `rx' translation highlights the
;;   corresponding pieces of syntax, which helps in seeing things like what
;;   the scope of quantifiers is.

;;   I call them \"explain\" commands because the `rx' form is close to a
;;   plain syntax tree, and this plus the wordiness of the operators
;;   usually helps to clarify what is going on. People who dislike Lisp
;;   syntax might disagree, of course ... ;-)


;; 2.6 Generate all matching strings (productions)
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;;   Occasionally you come across a regexp which is designed to match a
;;   finite set of strings, e.g. a set of keywords, and it would be useful
;;   to recover the original set. (In Emacs you can generate such regexps
;;   using `regexp-opt'). The commands `rxt-convert-to-strings' (`C-c /
;;   \342\200\262'), `rxt-pcre-to-strings' (`C-c / p \342\200\262') or `rxt-elisp-to-strings'
;;   (`C-c / e \342\200\262') accomplish this by generating all the matching strings
;;   (\"productions\") of a regexp. (The productions are copied to the kill
;;   ring as a Lisp list).

;;   An example in Lisp code:

;;   ,----
;;   | (regexp-opt '(\"cat\" \"caterpillar\" \"catatonic\"))
;;   |    ;; => \"\\\\(?:cat\\\\(?:atonic\\\\|erpillar\\\\)?\\\\)\"
;;   | (rxt-elisp-to-strings \"\\\\(?:cat\\\\(?:atonic\\\\|erpillar\\\\)?\\\\)\")
;;   |     ;; => '(\"cat\" \"caterpillar\" \"catatonic\")
;;   `----

;;   For obvious reasons, these commands only work with regexps that don't
;;   include any unbounded quantifiers like `+' or `*'. They also can't
;;   enumerate all the characters that match a named character class like
;;   `[[:alnum:]]'. In either case they will give a (hopefully meaningful)
;;   error message. Due to the nature of permutations, it's still possible
;;   for a finite regexp to generate a huge number of productions, which
;;   will eat memory and slow down your Emacs. Be ready with `C-g' if
;;   necessary ;-)


;; 2.7 RE-Builder support
;; ~~~~~~~~~~~~~~~~~~~~~~

;;   The Emacs RE-Builder is a useful visual tool which allows using
;;   several different built-in syntaxes via `reb-change-syntax' (`C-c
;;   TAB'). It supports Elisp read and literal syntax and `rx', but it can
;;   only convert from the symbolic forms to Elisp, not the other way. This
;;   package hacks the RE-Builder to also work with emulated PCRE syntax,
;;   and to convert transparently between Elisp, PCRE and rx syntaxes. PCRE
;;   mode reads a delimited Perl-like literal of the form `/ ... /', and it
;;   should correctly support using the `x' and `s' flags.


;; 2.8 Use from Lisp
;; ~~~~~~~~~~~~~~~~~

;;   Example of using the conversion functions:
;;   ,----
;;   | (rxt-pcre-to-elisp \"(abc|def)\\\\w+\\\\d+\")
;;   |    ;; => \"\\\\(\\\\(?:abc\\\\|def\\\\)\\\\)[_[:alnum:]]+[[:digit:]]+\"
;;   `----

;;   All the conversion functions take a single string argument, the regexp
;;   to translate:

;;   - `rxt-pcre-to-elisp'
;;   - `rxt-pcre-to-rx'
;;   - `rxt-pcre-to-sre'
;;   - `rxt-pcre-to-strings'
;;   - `rxt-elisp-to-pcre'
;;   - `rxt-elisp-to-rx'
;;   - `rxt-elisp-to-sre'
;;   - `rxt-elisp-to-strings'


;; 3 Bugs and Limitations
;; ======================

;; 3.1 Limitations on PCRE syntax
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;;   PCRE has a complicated syntax and semantics, only some of which can be
;;   translated into Elisp. The following subset of PCRE should be
;;   correctly parsed and converted:

;;   - parenthesis grouping `( .. )', including shy matches `(?: ... )'
;;   - backreferences (various syntaxes), but only up to 9 per expression
;;   - alternation `|'
;;   - greedy and non-greedy quantifiers `*', `*?', `+', `+?', `?' and `??'
;;     (all of which are the same in Elisp as in PCRE)
;;   - numerical quantifiers `{M,N}'
;;   - beginning/end of string `\\A', `\\Z'
;;   - string quoting `\\Q .. \\E'
;;   - word boundaries `\\b', `\\B' (these are the same in Elisp)
;;   - single character escapes `\\a', `\\c', `\\e', `\\f', `\\n', `\\r', `\\t',
;;     `\\x', and `\\octal digits' (but see below about non-ASCII characters)
;;   - character classes `[...]' including Posix escapes
;;   - character classes `\\d', `\\D', `\\h', `\\H', `\\s', `\\S', `\\v', `\\V'
;;     both within character class brackets and outside
;;   - word and non-word characters `\\w' and `\\W' (Emacs has the same
;;     syntax, but its meaning is different)
;;   - `s' (single line) and `x' (extended syntax) flags, in regexp
;;     literals, or set within the expression via `(?xs-xs)' or `(?xs-xs:
;;     .... )' syntax
;;   - comments `(?# ... )'

;;   Most of the more esoteric PCRE features can't really be supported by
;;   simple translation to Elisp regexps. These include the different
;;   lookaround assertions, conditionals, and the \"backtracking control
;;   verbs\" `(* ...)' . OTOH, there are a few other syntaxes which are
;;   currently unsupported and possibly could be:

;;   - `\\L', `\\U', `\\l', `\\u' case modifiers
;;   - `\\g{...}' backreferences


;; 3.2 Other limitations
;; ~~~~~~~~~~~~~~~~~~~~~

;;   - The order of alternatives and characters in char classes sometimes
;;     gets shifted around, which is annoying.
;;   - Although the string parser tries to interpret PCRE's octal and
;;     hexadecimal escapes correctly, there are problems with matching
;;     8-bit characters that I don't use enough to properly understand,
;;     e.g.:
;;     ,----
;;     | (string-match-p (rxt-pcre-to-elisp \"\\\\377\") \"\\377\") => nil
;;     `----
;;     A fix for this would be welcome.

;;   - Most of PCRE's rules for how `^', `\\A', `$' and `\\Z' interact with
;;     newlines are not implemented, since they seem less relevant to
;;     Emacs's buffer-oriented rather than line-oriented model. However,
;;     the different meanings of the `.' metacharacter *are* implemented
;;     (it matches newlines with the `/s' flag, but not otherwise).

;;   - Not currently namespace clean (both `rxt-' and a couple of `pcre-'
;;          functions).


;; 3.3 TODO:
;; ~~~~~~~~~

;;   - PCRE forward- and backward-search (easy)
;;   - PCREs in isearch mode (not so easy)
;;   - Python-specific extensions to PCRE?
;;   - Language-specific stuff to enable regexp font-locking and explaining
;;     in different modes. Each language would need two functions, which
;;     could be kept in an alist:

;;     1. A function to read PCRE regexps, taking the string syntax into
;;        account. E.g., Python has single-quoted, double-quoted and raw
;;        strings raw strings with different quoting rules. PHP has the
;;        kind of belt-and-suspenders solution you would expect: regexps
;;        are in strings, /and/ you have to include the `/ ... /'
;;        delimiters! Duh.

;;     2. A function to copy faces back from the parsed string to the
;;        original buffer text. This has to recognize any escape sequences
;;        so they can be treated as a single character.


;; 4 Internal details
;; ==================

;;   Internally, `rxt' defines an abstract syntax tree data type for
;;   regular expressions, parsers for Elisp and PCRE syntax, and
;;   \"unparsers\" from to PCRE, rx, and SRE syntax. Converting from a parsed
;;   syntax tree to Elisp syntax is a two-step process: first convert to
;;   `rx' form, then let `rx-to-string' do the heavy lifting. See
;;   `rxt-parse-re', `rxt-adt->pcre', `rxt-adt->rx', and `rxt-adt->sre',
;;   and the section beginning \"Regexp ADT\" in pcre2el.el for details.

;;   This code is partially based on Olin Shivers' reference SRE
;;   implementation in scsh, although it is simplified in some respects and
;;   extended in others. See `scsh/re.scm', `scsh/spencer.scm' and
;;   `scsh/posixstr.scm' in the `scsh' source tree for details. In
;;   particular, `pcre2el' steals the idea of an abstract data type for
;;   regular expressions and the general structure of the string regexp
;;   parser and unparser. The data types for character sets are extended in
;;   order to support symbolic translation between character set
;;   expressions without assuming a small (Latin1) character set. The
;;   string parser is also extended to parse a bigger variety of
;;   constructions, including POSIX character classes and various Emacs and
;;   Perl regexp assertions. Otherwise, only the bare minimum of scsh's
;;   abstract data type is implemented.


;; 5 Soapbox
;; =========

;;   Emacs regexps have their annoyances, but it is worth getting used to
;;   them. The Emacs assertions for word boundaries, symbol boundaries, and
;;   syntax classes depending on the syntax of the mode in effect are
;;   especially useful. (PCRE has `\\b' for word-boundary, but AFAIK it
;;   doesn't have separate assertions for beginning-of-word and
;;   end-of-word). Other things that might be done with huge regexps in
;;   other languages can be expressed more understandably in Elisp using
;;   combinations of `save-excursion' with the various searches (regexp,
;;   literal, skip-syntax-forward, sexp-movement functions, etc.). IMHO, of
;;   course ;-)

;;   There's not much percentage in using `rxt-pcre-to-elisp' to put PCREs
;;   in a Lisp program you're going to maintain, since you still have to
;;   double all the backslashes. Better to just use the converted result
;;   (or better yet the `rx' form ;-)


;; 6 History
;; =========

;;   This was originally created out of an answer to a stackoverflow
;;   question:
;;   [http://stackoverflow.com/questions/9118183/elisp-mechanism-for-converting-pcre-regexps-to-emacs-regexps]

;;   Thanks to Wes Hardaker for the initial inspiration and subsequent
;;   hacking, and to priyadarshan for requesting RX/SRE support!

"]) (pcmpl-git . [(20130408 951) nil "pcomplete for git" tar ";;; Commentary:

;; Complete both git commands and their options and arguments. Type
;; '-' to complete short options and '--' to complete long options.
;; For commands that accept commit as argument, branches and tags will
;; be tried first and then the sha1's in the first few hundred
;; commits.

"]) (pcmpl-args . [(20120911 2224) nil "Enhanced shell command completion" single ";;; Commentary:
;;
;; This package extends option and argument completion of shell
;; commands read by Emacs.  It is intended to make shell completion in
;; Emacs comparable to the rather excellent completion provided by
;; both Bash and Zsh.
;;
;; This package uses `pcomplete' to define completion handlers which
;; are used whenever shell completion is performed.  This includes
;; when commands are read in the minibuffer via `shell-command' (M-!)
;; or in `shell-mode'.
;;
;; Completion support is provided for many different commands
;; including:
;;
;;   - GNU core utilities (ls, rm, mv, date, sort, cut, printf, ...)
;;
;;   - Built-in shell commands (if, test, time, ...)
;;
;;   - Various GNU/Linux commands (find, xargs, grep, man, tar, ...)
;;
;;   - Version control systems (bzr, git, hg, ...)
;;

;; Installation:
;;
;; To use this package, save `pcmpl-args.el' to your `load-path' and
;; add the following to your `init.el':
;;
;;     (require 'pcmpl-args)
;;
;; Note: This package uses `lexical-binding' so it probably will not
;; work with older versions of Emacs (prior to 24.1).
;;
;; Note: This package redefines the following functions:
;;
;;   `pcomplete/bzip2'
;;   `pcomplete/chgrp'
;;   `pcomplete/chown'
;;   `pcomplete/gdb'
;;   `pcomplete/gzip'
;;   `pcomplete/make'
;;   `pcomplete/rm'
;;   `pcomplete/rmdir'
;;   `pcomplete/tar'
;;   `pcomplete/time'
;;   `pcomplete/which'
;;   `pcomplete/xargs'
;;

;; Defining new completion commands:
;;
;; This package contains a number of utilities for defining new
;; pcomplete completion commands:
;;
;; `pcmpl-args-pcomplete'
;;      Can be used to define completion for commands that have
;;      complex option and argument parsing.
;;
;; `pcmpl-args-pcomplete-on-help'
;;      Completion via parsing the output of `COMMAND --help'.
;;
;; `pcmpl-args-pcomplete-on-man'
;;      Completion via parsing the output of `man COMMAND'.
;;

"]) (pcache . [(20131201 1159) ((eieio (1 3))) "persistent caching for Emacs" single ";;; Commentary:

;; pcache provides a persistent way of caching data, in a hashtable-like
;; structure. It relies on `eieio-persistent' in the backend, so that any
;; object that can be serialized by EIEIO can be stored with pcache.

;; pcache handles objects called \"repositories\" (`pcache-repository') and
;; \"entries\" (`pcache-entry'). Each repository is identified by a unique name,
;; that defines an entry in `pcache-directory'. Subdirectories are allowed, by
;; the use of a directory separator in the repository name.

;; Example:
;; (let ((repo (pcache-repository \"plop\")))
;;   (pcache-put repo 'foo 42) ; store value 42 with key 'foo
;;   (pcache-get repo 'foo) ; => 42
;; )

;; Keys can be pretty much any Lisp object, and are compared for equality using
;; `eql'

;; Optionally, cache entries can expire:
;; (let ((repo (pcache-repository \"plop\")))
;;   (pcache-put repo 'foo 42 1) ; store value 42 with key 'foo for 1 second
;;   (sleep-for 1)
;;   (pcache-get repo 'foo) ; => nil
;; )

"]) (path-headerline-mode . [(20130912 1519) nil "Displaying file path on headerline." single ";;; Commentary:
;;
;; `Path headerline mode' is mode for displaying file path on headerline.
;; Modeline is too short to show filepath when split window by vertical.
;; path-headerline-mode show full file path if window width is enough.
;; but if window width is too short to show full file path, show directory path exclude file name.
;;
;;; Installation
;; Make sure \"path-headerline-mode.el\" is in your load path, then place
;; this code in your .emacs file:
;;
;; (require 'path-headerline-mode)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (pastels-on-dark-theme . [(20120304 1022) nil "Pastels on Dark theme for Emacs 24" single ";;; Commentary:

;; Pastels on Dark was created by Mats Persson and popularized in
;; TextMate.app.  Ported to Emacs 24 by Shane Celis because I love it!

;; To install the theme, M-x `load-theme' then enter
;; `pastels-on-dark'.  If you run into any issues, check the
;; `custom-theme-load-path' variable.


"]) (pastehub . [(20130509 830) nil "A client for the PasteHub cloud service" single ";;; Commentary:

;; PasteHub.net Cloud-based cross-platform clipboard (copy and paste)
;; service.  PasteHub.el is an emacs client for PasteHub.net.
;;
;; PasteHub.el can synchronize kill-ring with PasteHub.net cloud
;; service automatically.  You don't have to learn new key-bindings.
;; 
;; To get you started, you need to install PasteHub client for your client OS.
;;  http://pastehub.net/
;; 
;; and then, add this line to your .emacs file:
;;  (require 'pastehub)
;;

"]) (pastebin . [(20101125 1955) nil "A simple interface to the www.pastebin.com webservice" single ";;; Commentary:
;;;
;;; Load this file and run:
;;;
;;;   M-x pastebin-buffer
;;;
;;; to send the whole buffer or select a region and run
;;;
;;;  M-x pastebin
;;;
;;; to send just the region.
;;;
;;; In either case the url that pastebin generates is left on the kill
;;; ring and the paste buffer.


"]) (paste-kde . [(20140108 1809) ((web (0 3 6))) "paste text to KDE's pastebin service" single ";;; Commentary:

;; To paste the current buffer to KDE's pastebin service, use the
;; command `paste-kde-buffer'.  To paste a region, `paste-kde-region'.
;;
;; paste-kde will lookup the language using the buffer's major mode
;; and a table in `paste-kde-langs'.  If there isn't a match,
;; paste-kde will paste the code as Text.  If you use a prefix before
;; running the paste command, you'll be asked about the language.
;;
;; Each paste is private by default.  This means that the url will
;; contain a hash in the end of it and the paste will not be listed on
;; the paste list.  Even though the paste is private, paste-kde uses
;; http to send the paste, so an adversary can eavesdrop on your
;; comunication with the server.

;; After pasting the code, the paste's url will be open using
;; `browser-url' and the server is instructed to delete the paste
;; after one week.  You can customize these and other settings with
;; M-x customize-group RET paste-kde RET.
;;
;; It's worth mentioning that the table of languages and modes are not
;; necessarily correct as it was generated programmatic.  If something
;; is wrong, please patch it.

"]) (password-vault . [(20131105 1703) ((cl-lib (0 2)) (emacs (24))) "A Password manager for Emacs." single ";;; Commentary:

;; It builds upon the pattern described in this post:
;; http://emacs-fu.blogspot.com/2011/02/keeping-your-secrets-secret.html

;; Usage: (password-vault-register-secrets-file 'secrets.el)
;; M-x password-vault

"]) (parse-csv . [(20140105 251) nil "Parse strings with CSV fields into s-expressions" single ";;; Commentary:
;;
;; Parse strings with CSV fields into s-expressions
;;
;; This file implements `parse-csv->list' and `parse-csv-string'.
;;
;; parse-csv-string is ported from Edward Marco Baringer's csv.lisp
;; http://common-lisp.net/project/bese/repos/arnesi_dev/src/csv.lisp
;; It was ported to Emacs Lisp by Matt Curtis.
;;
;; (parse-csv->list \"a,b,\\\"c,d\\\"\")
;;     => (\"a\" \"b\" \"c,d\")
;;
;; (parse-csv-string \"a;b;'c;d'\" ?\\; ?\\')
;;     => (\"a\" \"b\" \"c;d\")

"]) (parenface . [(20091203 1017) nil "Provide a face for parens in lisp modes." single nil]) (paren-face . [(20131209 800) nil "a face for parentheses in lisp modes" single ";;; Commentary:

;; This library defines a face named `parenthesis' used just for
;; parentheses and that only in lisp buffers.  The intended purpose
;; of this face is to make parentheses less visible by dimming them.

;; We lispers probably don't need to be constantly made aware of the
;; existence of the parentheses.  Dimming them might be even more
;; useful for people new to lisp who have not yet learned to
;; subconsciously blend out the parentheses.

;; To use the `parenthesis' face, turn on `global-paren-face-mode'.
;; The option `paren-face-modes' controls in what buffers the minor
;; mode `paren-face-mode' is turned on.

;; The parenthesis at or before point, as well as the parenthesis at
;; the other end of the s-expression should actually stand out, but
;; that is beyond the scope of the mode defined here.  Instead use one
;; of the modes dedicated to that, e.g. the builtin `show-paren-mode'.

"]) (paredit-menu . [(20130923 1254) nil "Adds a menu to paredit.el as memory aid" single ";;; Commentary:
;;
;; Paredit mode provides structured editing for Lisp. It achieves this by
;; ensuring that code is always well-formed while editing. While it is very
;; helpful, sometimes it leaves the less experienced user (such as the myself)
;; scratching their head over how to achieve a simple editing task.

;; One solution is to use the cheatsheet
;; (http://emacswiki.org/emacs/PareditCheatsheet). However, this is outside
;; Emacs and does not scale well. This file provides a second solution, which
;; is a menu. While slower than using the equivalent key-presses, it provides
;; an easy mechanism to look up the relevant commands. Tooltips are also
;; provided showing the examples of use.

;; Documentation and examples come directly from paredit, so the menu should
;; automatically stay in sync, regardless of changes to paredit.

;;; Installation:
;;
;; Add (require 'paredit-menu) to your .emacs. This will also force loading of
;; paredit. If you autoload paredit, then
;;
;; (eval-after-load \"paredit.el\"
;;    '(require 'paredit-menu))
;; 
;; will achieve the same effect.


(require 'paredit)

"]) (paredit-everywhere . [(20131010 318) ((paredit (22))) "Enable some paredit features in non-lisp buffers" single ";;; Commentary:

;; It turns out that a lot of the paredit key bindings work as
;; expected in non-lisp buffers, since many major modes provide
;; reasonable sexp-oriented navigation.

;; This library, then, provides a minor mode which enables a subset
;; of the `paredit' library's editing commands in non-lisp buffers.

;; Usage:
;;
;; (add-hook 'prog-mode-hook 'paredit-everywhere-mode)

"]) (paredit . [(20130722 624) nil "minor mode for editing parentheses" single nil]) (pangu-spacing . [(20131228 733) nil "Minor-mode to add space between Chinese and English characters." single ";;; Commentary:
"]) (pandoc-mode . [(20131231 248) nil "Minor mode for interacting with Pandoc" tar ";;; Commentary:

;; Pandoc-mode is a minor mode for interacting with Pandoc, a 'universal
;; document converter': <http://johnmacfarlane.net/pandoc/>.
;;
;; See the pandoc-mode manual for usage and installation instructions.

"]) (pallet . [(20131117 525) ((cask (0 5 0))) "A package management tool for Emacs, using Cask." tar nil]) (palimpsest . [(20130731 821) nil "Various deletion strategies when editing" single ";;; Documentation:
;;
;; This minor mode provides several strategies to remove text without
;; permanently deleting it, useful to prose / fiction writers.
;; Namely, it provides the following capabilities:
;;
;; - Send selected text to the bottom of the file
;; - Send selected text to a trash file
;;

"]) (palette . [(20131227 146) ((hexrgb (0))) "Color palette useful with RGB, HSV, and color names" single ";;; Commentary:
;;
;;  To use this library:
;;
;;    Add this to your initialization file (~/.emacs or ~/_emacs):
;;
;;      (require 'palette) ; Load this library.
;;      M-x palette
;;
;;    You will also need my library `hexrgb.el'; it is loaded
;;    automatically by `palette.el'.  Get it here:
;;    http://www.emacswiki.org/cgi-bin/wiki/hexrgb.el.
;;
;;  After loading, use command `palette' to display a color palette in
;;  Color Palette mode (`palette-mode').  This has three sub-palettes
;;  (from left to right):
;;
;;   - a hue x saturation palette - buffer Palette (Hue x Saturation).
;;     Hue is horizontal; saturation is vertical.  Hue is the tint of
;;     a color, independent of its brightness and grayness.
;;     Saturation is the purity of a color (opposite of grayness).
;;
;;   - a color-swatch palette - buffer Current/Original
;;
;;   - a value (brightness) palette - buffer Brightness
;;
;;  The color-swatch palette shows the current color and the original
;;  color or the last color saved.  Saving is not persistent.
;;
;;  In the color palette:
;;
;;   - `.' shows info about the current color
;;   - `mouse-1' or `?' shows info about a color at pointer or cursor
;;   - `mouse-2' or `RET' anywhere picks a color as the current color
;;   - Cursor motion is along the grid of colors, with wrapping.
;;     Shifted cursor motion updates the current color as you move.
;;   - `n', `C-s' saves the current color
;;   - `o', `C-o' restores the old (saved) color
;;   - `l', `u' swaps the current color and the last color (undo)
;;   - `c', `M-c' picks a color by name or RGB hex string
;;   - `M-h' picks a color by HSV components (decimal)
;;   - `M-r' picks a color by RGB components (decimal)
;;   - `~' picks the complement of the current color
;;   - `r', `g', `b', `h', `s', `v' decreases the red, green, blue,
;;     hue, saturation, value  component of the current color,
;;     respectively; `R', `G', `B', `H', `S', `V' increases the
;;     component
;;   - `q' quits the palette
;;   - `C-l' refreshes the palette: use if you have a display problem
;;   - `C-h m' provides info on Color Palette mode
;;
;;  Some things to keep in mind when using the Color Palette:
;;
;;  * \"Hue\" means tint; \"saturation\" means color purity or intenseness
;;    (opposite of grayness); and \"value\" means brightness.
;;    Saturation=0 is grayscale; saturation=1 is pure color (no gray).
;;    Value=0 is black (no light); value=1 is as bright as possible
;;    (100% color).
;;
;;  * Hue 0.0 and hue 1.0 are the same: pure red.  The hue x
;;    saturation palette shows this discontinuity.  Move the cursor
;;    horizontally near the right side of this palette and you will
;;    see the hue value jump between 0.0 and 1.0 at a certain point.
;;
;;  * The value (brightness) of the current color is indicated by a
;;    horizontal bar in the Brightness palette (far right).
;;
;;  * Whenever you input a color name, you can use completion against
;;    the list of all recognized colors.  If you also use my library
;;    Icicles, then you can match any part(s) of the color name.
;;
;;  * Color names supported by your Emacs release and platform are
;;    those returned by function `x-color-names'.  This often includes
;;    names that are essentially the same, as duplicates,
;;    e.g. \"LightBlue\" and \"light blue\".  By default, the Color
;;    Palette canonicalizes these names by lowercasing them and
;;    removing whitespace.  Then it removes duplicates.  This behavior
;;    is governed by option `hexrgb-canonicalize-defined-colors-flag'.
;;    Customize that option to nil if you need the original, names.
;;
;;  * You can at any time use an RGB hexadecimal color string in place
;;    of a recognized color name.  An RGB string has the form
;;    #XXXXXXXXXXXX, where each X is a hex digit (the # is optional
;;    for input).  The number of Xs must be 12 or less and a multiple
;;    of 3, with the same number of Xs for each of red, green, and
;;    blue.  Examples: #FF0099 (red: FF, green: 00, blue: 99),
;;    #0C1FA329E (red: 0C1, green: FA3, blue: 29E).
;;
;;  * For output, that is, messages and some return values, an RGB
;;    value respects user option `palette-hex-rgb-digits', which
;;    determines the number of hex digits (1 to 4) per RGB component.
;;
;;  * Once you find a color you like, you can use its RGB string
;;    anywhere in Emacs as the color definition of a face or a frame.
;;    Its RGB string is the value of `palette-current-color'.
;;
;;  * The palette should appear in its own, small frame - on my
;;    screen, the frame is about 9cm x 13cm (inside dimensions).  If
;;    the palette appears much larger than that, or if it looks weird,
;;    then your font is probably too large.  In that case, customize
;;    option `palette-font' - see it for more information.  Here is a
;;    screenshot of how the palette should appear:
;;    http://www.emacswiki.org/cgi-bin/wiki/ColorPalette.el.
;;
;;  * By default, information about the color at any location is only
;;    available upon demand, by clicking `mouse-1' or `mouse-2', or
;;    hitting `?' or `RET'.  If you prefer additional feedback, set
;;    option `palette-verbose-flag' to non-nil to display color
;;    information each time you move the cursor, pick a color, or
;;    modify a color swatch.  This can slow things down a bit, because
;;    it means additional computation of color components.
;;
;;  * The cursor is positioned in each of the windows so that it
;;    corresponds as well as possible to the other windows.  However,
;;    this correspondance is by no means exact, because of the nature
;;    of conversion betwen RGB and HSV color spaces.  In particular,
;;    the color in the main Palette buffer (`Hue x Saturation') does
;;    not necessarily reflect the current color accurately.  If you
;;    want information about the current color, then use `.', not `?',
;;    or use `?' from the color-swatch window.
;;
;;  * The commands that increase and decrease individual RGB
;;    components (r, g, b, R, G, B) are sometimes unintuitive.  If you
;;    set `palette-verbose-flag' to non-nil and then watch the RGB
;;    feedback in the echo area, these commands will make more sense.
;;    Because the palette displays colors as hue x saturation, RGB
;;    components are converted to the closest HSV components in the
;;    palette.  Increasing an RGB component does not automatically
;;    decrease the other RGB components, so, for instance, increasing
;;    red will not necessarily move directly toward the red area of
;;    the palette.  Just as for HSV component changes (cursor
;;    movements), RGB component changes cycle when you reach one end.
;;    For intance, when you decrease red past 0 it wraps around to 1.
;;
;;  * Non-nil `palette-update-cursor-color-flag' updates the frame
;;    foreground and cursor color dynamically, so that the position of
;;    the current color stands out well against the palette.  For
;;    example, if the current color is red then the foreground color
;;    becomes cyan.  The default value is nil.  When nil, you cannot
;;    see the black cursor against a black background.  When non-nil,
;;    there are two annoyances: 1) updating the cursor color causes
;;    redisplay of the frame, which is slow; 2) If you ask for
;;    information about a color that is very different from the
;;    current color, then it still might be difficult to see the
;;    cursor because of its color.  In that case, you can hit `RET' to
;;    make it the current color so its position stands out better.
;;    (Hit `l' to undo).
;;
;;  * You can at any time toggle options `palette-verbose-flag' and
;;    `palette-update-cursor-color-flag' with keys `f' (for
;;    \"feedback\") and `e' (for \"enhanced cursor color\").
;;
;;  * By default, feedback about a color includes its RGB hex string,
;;    RGB decimal components, and HSV decimal components.  If your
;;    minibuffer is too short for all of that info, or if you are
;;    interested in only some of it, then you can change the value of
;;    user option `palette-message-info' accordingly.  In addition,
;;    you can use commands `palette-hex-info', `palette-hsv-info',
;;    `palette-rgb-info' at any time to obtain only color information
;;    of one type.
;;
;;  * I am interested in suggestions for improving the interactive
;;    response.  You will find that the color palette is usable, but
;;    some palette operations can be slow.  This is due to using Emacs
;;    faces to display the colors: 10000 faces are used just for the
;;    100x100 color hue x saturation palette.  Emacs faces are, so
;;    far, not designed to be used this way (many at a time).  An
;;    alternative design would be to use an image instead of
;;    characters with faces.  I am not interested in such a design,
;;    however, at least for now.  I want to push the face envelope.
;;
;;  * If you call `palette' from Emacs-Lisp code, you can use various
;;    hook functions to do something with the latest color value.  See
;;    `palette-change-color-hook', `palette-exit-hook',
;;    and`palette-save-color-hook'.  This gives you a way to react to
;;    user palette actions.
;;
;;  ** Eye Dropper and `eyedropper.el' **
;;
;;  You can at any time, from any Emacs window, pick up the foreground
;;  or background color at the current cursor position (point),
;;  setting `palette-picked-background' or`palette-picked-foreground',
;;  as well as `palette-current-color', to it.  Use commands
;;  `eyedropper-foreground' and `eyedropper-background' to do this.
;;  You can then set any Emacs face or frame color using the value of
;;  `palette-current-color'.  With a prefix argument (`C-u'), these
;;  commands also display the color palette.
;;
;;  Library `palette.el' is a superset of the functionality provided
;;  by library `eyedropper.el'.  If you use Emacs 22 or later, then
;;  you can use `palette.el' instead of `eyedropper.el'; `palette.el'
;;  will satisfy all of the requirements by any other libraries that
;;  require `eyedropper.el'.  It does this via (provide 'eyedropper)
;;  and by providing aliases for all of the `eyedropper.el' functions
;;  and variables.  If for some reason you do load both libraries,
;;  then load `palette.el' after `eyedropper.el'.
;;
;;  ** Use with Icicles **
;;
;;  If you use this library with Icicles (`icicles.el' and associated
;;  files), which I recommend, then `c' is bound in the palette to an
;;  Icicles multi-command that lets you choose colors by name.  After
;;  you hit `c', you can hit `TAB' or `S-TAB' to use Icicles
;;  completion.  During completion, you can use `C-next', `C-prior',
;;  `C-down', `C-up', and `C-RET' to change the current color to
;;  different colors, by name, successively.  This lets you browse
;;  colors by name, seeing what they look like immediately.
;;
;;  ** Do Re Mi **
;;
;;  See also my library `doremi-frm.el' to incrementally adjust face
;;  and frame properties, including colors, using the arrow keys or a
;;  mouse wheel.  The color changes are applied instantly to the
;;  face(s) or frames, so you see the result as you make the changes.
;;
;;
;;  User options defined here:
;;
;;    `palette-change-color-hook', `palette-exit-hook',
;;    `palette-font', `palette-hex-rgb-digits',
;;    `palette-message-info', `palette-save-color-hook',
;;    `palette-update-cursor-color-flag', `palette-verbose-flag'.
;;
;;  Commands defined here:
;;
;;    `background-color', `colors', `complement',
;;    `eyedrop-background-at-mouse', `eyedrop-background-at-point',
;;    `eyedrop-foreground-at-mouse', `eyedrop-foreground-at-point',
;;    `eyedrop-pick-background-at-mouse',
;;    `eyedrop-pick-background-at-point',
;;    `eyedrop-pick-foreground-at-mouse',
;;    `eyedrop-pick-foreground-at-point', `eyedropper-background',
;;    `eyedropper-foreground', `foreground-color', `hsv', `palette',
;;    `palette-background-at-mouse', `palette-background-at-point',
;;    `palette-brightness-scale', `palette-current-color',
;;    `palette-current-rgb-to-kill-ring', `palette-decrease-blue',
;;    `palette-decrease-green', `palette-decrease-hue',
;;    `palette-decrease-red', `palette-decrease-saturation',
;;    `palette-decrease-value', `palette-down', `palette-down+pick',
;;    `palette-exit', `palette-foreground-at-mouse',
;;    `palette-foreground-at-point', `palette-help',
;;    `palette-hex-info', `palette-hsv-info', `palette-increase-blue',
;;    `palette-increase-green', `palette-increase-hue',
;;    `palette-increase-red', `palette-increase-saturation',
;;    `palette-increase-value', `palette-left', `palette-left+pick',
;;    `palette-pick-background-at-mouse',
;;    `palette-pick-background-at-point', `palette-pick-color-by-hsv',
;;    `palette-pick-color-by-name', `palette-pick-color-by-rgb',
;;    `palette-pick-color-complement',
;;    `palette-pick-foreground-at-mouse',
;;    `palette-pick-foreground-at-point', `palette-popup-menu',
;;    `palette-quit', `palette-refresh', `palette-restore-old-color',
;;    `palette-rgb-info', `palette-right', `palette-right+pick',
;;    `palette-save-new-color', `palette-swap-last-color',
;;    `palette-swatch', `palette-toggle-cursor-color',
;;    `palette-toggle-verbose', `palette-up', `palette-up+pick',
;;    `palette-where-is-color', `pick-background-color',
;;    `pick-foreground-color', `rgb', `toggle-palette-cursor-color',
;;    `toggle-palette-verbose'.
;;
;;  Non-interactive functions defined here:
;;
;;    `eyedrop-color-message', `eyedrop-face-at-point',
;;    `palette-barf-if-outside-palette', `palette-color-message',
;;    `palette-complement-or-alternative', `palette-face-at-point',
;;    `palette-pick-by-name-action', `palette-set-current-color',
;;    `palette-update-blink-cursor-mode'.
;;
;;  Internal variables defined here:
;;
;;    `eyedrop-last-picked-color', `eyedrop-picked-background',
;;    `eyedrop-picked-foreground', `palette-action',
;;    `palette-current-color', `palette-last-color',
;;    `palette-last-picked-color', `palette-mode-map',
;;    `palette-old-color', `palette-picked-background',
;;    `palette-picked-foreground', `palette-popup-map',
;;    `palette-saved-blink-cursor-mode'.
;;
;;  Do NOT try to use this library without a window manager.
;;  That is, do not try to use this with `emacs -nw'.
;;
;;  Compatibility: You really need Emacs 22 for this, but reduced
;;  functionality is available for Emacs 20 and 21.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (pager-default-keybindings . [(20130719 1357) ((pager (1 0))) "Add the default keybindings suggested for pager.el" single ";;; Commentary:

;;;This package sets the suggested keybindings for pager

;;; Installation:

;; To install, put this file somewhere in your load-path and add the following
;; to your .emacs file:
;; (require 'pager-default-keybindings)

"]) (pager . [(20100330 1131) nil "windows-scroll commands" single nil]) (page-break-lines . [(20130917 804) nil "Display ugly ^L page breaks as tidy horizontal lines" single ";;; Commentary:

;; This library provides a global mode which displays form feed
;; characters as horizontal rules.

;; Install from Melpa or Marmalade, or add to `load-path' and use
;; (require 'page-break-lines).

;; Use `page-break-lines-mode' to enable the mode in specific buffers,
;; or customize `page-break-lines-modes' and enable the mode globally with
;; `global-page-break-lines-mode'.

;; Issues and limitations:

;; If `page-break-lines-char' is displayed at a different width to
;; regular characters, the rule may be either too short or too long:
;; rules may then wrap if `truncate-lines' is nil. On some systems,
;; Emacs may erroneously choose a different font for the page break
;; symbol, which choice can be overridden using code such as:

;; (set-fontset-font \"fontset-default\"
;;                   (cons page-break-lines-char page-break-lines-char)
;;                   (face-attribute 'default :family))

;; Use `describe-char' on a page break char to determine whether this
;; is the case.

;; Additionally, the use of `text-scale-increase' or
;; `text-scale-decrease' will cause the rule width to be incorrect,
;; because the reported window width (in characters) will continue to
;; be the width in the frame's default font, not the scaled font used to
;; display the rule.

;; Adapted from code http://www.emacswiki.org/emacs/PageBreaks

"]) (packed . [(20130907 744) ((cl-lib (0 2)) (magit (1 1 1))) "Package manager agnostic Emacs Lisp package utilities" tar nil]) (package-filter . [(20140105 1426) nil "special handling for package.el" single nil]) (package-build . [(20140114 1322) ((cl-lib (0 2))) "Tools for assembling a package archive" tar ";;; Commentary:

;; This file allows a curator to publish an archive of Emacs packages.

;; The archive is generated from an index, which contains a list of
;; projects and repositories from which to get them.  The term
;; \"package\" here is used to mean a specific version of a project that
;; is prepared for download and installation.

"]) (package+ . [(20140102 1411) nil "Extensions for the package library." single ";;; Commentary:

;; Provides extensions to `package.el` for Emacs 24 and later.

;; Declares a manifest of packages that should be installed on this
;; system, installing any missing packages and removing any installed
;; packages that are not in the manifest.
;;
;; This makes it easy to keep a list of packages under version control
;; and replicated across all your environments, without having to have
;; all the packages themselves under version control.
;;
;; Example:
;;
;;    (package-initialize)
;;    (add-to-list 'package-archives
;;      '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)
;;    (unless (package-installed-p 'package+)
;;      (package-install 'package+))
;;
;;    (package-manifest 'ag
;;                      'expand-region
;;                      'magit
;;                      'melpa
;;                      'package+
;;                      'paredit
;;                      'ruby-mode
;;                      'ssh
;;                      'window-number)

"]) (pabbrev . [(20130923 1257) nil "Predictive abbreviation expansion" single ";;; Commentary:
;;
;; The code provides a abbreviation expansion for Emacs.  Its fairly
;; similar to \"dabbrev\" expansion, which works based on the contents
;; of the current buffer (or other buffers).
;;
;; Predictive abbreviation expansion works based on the previously
;; written text.  Unlike dynamic abbreviation, the text is analysed
;; during idle time, while Emacs is doing nothing else.  `pabbrev-mode'
;; tells you when this is happening.  If this irritates you unset
;; `pabbrev-idle-timer-verbose'.  The advantage of this is that its
;; very quick to look up potential abbreviations, which means that the
;; can be constantly displayed, without interfering with the user as
;; they type.  Certainly it works for me, on an old laptop, typing as
;; fast as I can (which is fast, since I learnt to type with four
;; fingers).
;;
;; pabbrev's main entry point is through the minor mode
;; `pabbrev-mode'.  There is also a global minor mode, called
;; `global-pabbrev-mode', which does the same in all appropriate
;; buffers.
;;
;; The current user interface looks like so...
;; 
;; p[oint]
;; pr[ogn]
;; pre[-command-hook]
;; pred[ictive]
;;
;; As the user types the system narrows down the possibilities.  The
;; narrowing is based on how many times the words have been used
;; previously.  By hitting [tab] at any point the user can complete the
;; word.  The [tab] key is normally bound to `indent-line'.
;; `pabbrev-mode' preserves access to this command (or whatever else
;; [tab] was bound to), if there is no current expansion. 
;;
;; Sometimes you do not want to select the most commonly occurring
;; word, but a less frequently occurring word.  You can access this
;; functionality by hitting [tab] for a second time.  This takes you
;; into a special suggestions buffer, from where you can select
;; secondary selections.  See `pabbrev-select-mode' for more
;; details. There is also an option `pabbrev-minimal-expansion-p'
;; which results in the shortest substring option being offered as the
;; first replacement.
;;
;; But is this actually of any use? Well having use the system for a
;; while now, I can say that it is sometimes.  I originally thought
;; that it would be good for text, but in general its not so
;; useful.  By the time you have realised that you have an expansion
;; that you can use, hit tab, and checked that its done the right
;; thing, you could have just typed the word directly in.  It's much
;; nicer in code containing buffers, where there tend to be lots of
;; long words, which is obviously where an abbreviation expansion
;; mechanism is most useful.
;;
;; Currently pabbrev builds up a dictionary on a per major-mode basis.
;; While pabbrev builds up this dictionary automatically, you can also
;; explicitly add a buffer, or a region to the dictionary with
;; `pabbrev-scavenge-buffer', or `pabbrev-scavenge-region'.  There is
;; also a command `pabbrev-scavenge-some' which adds some words from
;; around point.  pabbrev remembers the word that it has seen already,
;; so run these commands as many times as you wish.
;;
;; Although the main data structures are efficient during typing, the
;; pay off cost is that they can take a reasonable amount of time, and
;; processor power to gather up the words from the buffer.  There are
;; two main settings of interest to reduce this, which are
;; `pabbrev-scavenge-some-chunk-size' and
;; `pabbrev-scavenge-on-large-move'.  `pabbrev-mode' gathers text from
;; around point when point has moved a long way.  This means symbols
;; within the current context should be in the dictionary, but it can
;; make Emacs choppy, in handling.  Either reduce
;; `pabbrev-scavenge-some-chunk-size' to a smaller value, or
;; `pabbrev-scavenge-on-large-move' to nil to reduce the effects of
;; this.
;;
;; NOTE: There are a set of standard conventions for Emacs minor
;; modes, particularly with respect to standard key bindings, which
;; pabbrev somewhat abuses.  The justification for this is that the
;; whole point of pabbrev mode is to speed up typing.  Access to its
;; main function has to be on a very easy to use keybinding.  The tab
;; seems to be a good choice for this.  By preserving access to the
;; original tab binding when there is no expansion, pabbrev mostly
;; \"does what I mean\", at least in my hands.

;;; Installation:
;;
;; To install this file place in your `load-path', and add
;; 
;; (require 'pabbrev)
;;
;; to your .emacs

"]) (p4 . [(20131014 1044) nil "Simple Perforce-Emacs Integration" single ";;; Commentary:

;; p4.el integrates the Perforce software version management system
;; into Emacs. It is designed for users who are familiar with Perforce
;; and want to access it from Emacs: it provides Emacs interfaces that
;; map directly to Perforce commands.

"]) (ox-twiki . [(20140110 614) ((org (8))) "org Twiki and Foswiki export" single ";;; Commentary:
;;
;; ox-twiki.el lets you convert Org files to twiki buffers
;; using the ox.el export engine.
;;
;; Put this file into your load-path and the following into your ~/.emacs:
;;	 (require 'ox-twiki)
;;
;; Export Org files to twiki:
;; M-x org-twiki-export-as-twiki RET
;;
;; You can set the following options inside of the document:
;; #+TWIKI_CODE_BEAUTIFY: t/nil
;;    controls whether code blocks are exported as %CODE{}% twiki
;;    blocks (requires the beautify twiki plugin).
;;
;; originally based on ox-confluence by S\303\251bastien Delafond
"]) (ox-tiddly . [(20131124 804) ((org (8))) "org TiddlyWiki exporter" single ";;; Commentary:
;;
;; ox-tiddly.el lets you convert Org files to tiddly buffers
;; using the ox.el export engine.
;;
;; Put this file into your load-path and the following into your ~/.emacs:
;;	 (require 'ox-tiddly)
;;
;; Export Org files to tiddly:
;; M-x org-tiddly-export-as-tiddly RET
;;
;; based on ox-confluence by S\303\251bastien Delafond
"]) (ox-reveal . [(20131111 1703) ((org (8 0))) "reveal.js Presentation Back-End for Org Export Engine" single nil]) (ox-html5slide . [(20131227 2206) ((org (8 0))) "Export org-mode to HTML5 slide." single ";;; Commentary:

;; ox-html5slide.el is a rewrite version of org-html5presentation.el
;; and only support org-mode 8.0 or above.
;;

;;; Installation (not done yet):

;; If you have `melpa` and `emacs24` installed, simply type:
;;
;;      M-x package-install org-html5slide
;;
;; In your .emacs
;;
;;      (require 'ox-html5slide)

"]) (outshine . [(20131008 1033) nil "outline with outshine outshines outline" single nil]) (outorg . [(20131023 335) nil "Org-style comment editing" single nil]) (outlined-elisp-mode . [(20131108 327) nil "outline-minor-mode settings for emacs lisp" single ";;; Commentary:

;; This is an outline-minor-mode settings for emacs lisp. For example,
;; \"outlined\" emacs lisp code look like this.
;;
;;   ;; * general settings
;;   ;; ** show-paren-mode
;;
;;   (show-paren-mode 1)
;;   (setq show-paren-delay 0)
;;
;;   ;; ** cua-mode
;;
;;   (cua-mode t)
;;   (setq cua-enable-cua-keys nil)
;;
;;   ;; * emacs-lisp-mode settings
;;
;;   (add-hook 'emacs-lisp-mode-hook 'outlined-elisp-find-file-hook)

;; To install, put code like
;;
;;   (require 'outlined-elisp-mode)
;;
;; in your .emacs file. You can activate outlined-elisp-mode with
;; \"M-x outlined-elisp-mode\" command. Or, if you put code like
;;
;;   (add-hook 'emacs-lisp-mode-hook 'outlined-elisp-find-file-hook)
;;
;; in your .emacs file, outlined-elisp-mode is automatically activated
;; when one of the first 300 lines seem to be heading of outlined-elisp.
;; You can also change the trigger, and the range of search.
;;
;;   (setq outlined-elisp-trigger-pattern \";; \\\\+\\\\+ outlined-elisp \\\\+\\\\+\")
;;   (setq outlined-elisp-trigger-limit 3)

"]) (outline-magic . [(20130813 1333) nil "outline mode extensions for Emacs" single ";;; Commentary:

;; This file implements extensions for outline(-minor)-mode.
;;
;; - VISIBILITY CYCLING: A *single* command to replace the many
;;   outline commands for showing and hiding parts of a document.
;;
;; - STRUCTURE EDITING: Promotion, demotion and transposition of subtrees.
;;
;; Installation
;; ============
;;
;; Byte-compile outline-magic.el, put it on the load path and copy the
;; following into .emacs (adapting keybindings to your own preferences)
;;
;; (add-hook 'outline-mode-hook 
;;           (lambda () 
;;             (require 'outline-cycle)))
;;             
;; (add-hook 'outline-minor-mode-hook 
;;           (lambda () 
;;             (require 'outline-magic)
;;             (define-key outline-minor-mode-map [(f10)] 'outline-cycle)))
;;
;; Usage
;; =====
;;
;; Visibility cycling
;; ------------------
;;
;; The command `outline-cycle' changes the visibility of text and headings
;; in the buffer.  Instead of using many different commands to show and
;; hide buffer parts, `outline-cycle' cycles through the most important
;; states of an outline buffer.  In the major `outline-mode', it will be
;; bound to the TAB key.  In `outline-minor-mode', the user can choose a
;; different keybinding.  The action of the command depends on the current
;; cursor location:
;;
;; 1. When point is at the beginning of the buffer, `outline-cycle'
;;    cycles the entire buffer through 3 different states: 
;;      - OVERVIEW: Only top-level headlines are shown.
;;      - CONTENTS: All headlines are shown, but no body text.
;;      - SHOW ALL: Everything is shown.
;;
;; 2. When point in a headline, `outline-cycle' cycles the subtree started
;;    by this line through the following states:
;;      - FOLDED:   Only the headline is shown.
;;      - CHILDREN: The headline and its direct children are shown.  From
;;                  this state, you can move to one of the children and
;;                  zoom in further.
;;      - SUBTREE:  The entire subtree under the heading is shown.
;;
;; 3. At other positions, `outline-cycle' jumps back to the current heading.
;;    It can also be configured to emulate TAB at those positions, see
;;    the option `outline-cycle-emulate-tab'.
;;
;; Structure editing
;; -----------------
;;
;; Four commands are provided for structure editing.  The commands work on
;; the current subtree (the current headline plus all inferior ones). In
;; addition to menu access, the commands are assigned to the four arrow
;; keys pressed with a modifier (META by default) in the following way:
;;
;;                                 move up
;;                                    ^
;;                        promote  <- | ->  demote 
;;                                    v
;;                                move down
;;
;; Thus, M-left will promote a subtree, M-up will move it up
;; vertically throught the structure.  Configure the variable
;; `outline-structedit-modifiers' to use different modifier keys.
;;
;; Moving subtrees
;; - - - - - - - -
;; The commands `outline-move-subtree-up' and `outline-move-subtree-down'
;; move the entire current subtree (folded or not) past the next same-level
;; heading in the given direction.  The cursor moves with the subtree, so
;; these commands can be used to \"drag\" a subtree to the wanted position.
;; For example, `outline-move-subtree-down' applied with the cursor at the
;; beginning of the \"* Level 1b\" line will change the tree like this:
;;
;;   * Level 1a                         * Level 1a        
;;   * Level 1b         ===\\            * Level 1c  
;;   ** Level 2b        ===/            * Level 1b  
;;   * Level 1c                         ** Level 2b   
;;
;; Promotion/Demotion
;; - - - - - - - - - -
;; The commands `outline-promote' and `outline-demote' change the current
;; subtree to a different outline level - i.e. the level of all headings in
;; the tree is decreased or increased.  For example, `outline-demote'
;; applied with the cursor at the beginning of the \"* Level 1b\" line will
;; change the tree like this:
;;
;;   * Level 1a                         * Level 1a        
;;   * Level 1b         ===\\            ** Level 1b  
;;   ** Level 2b        ===/            *** Level 2  
;;   * Level 1c                         * Level 1c   
;;
;; The reverse operation is `outline-promote'.  Note that the scope of
;; \"current subtree\" may be changed after a promotion.  To change all
;; headlines in a region, use transient-mark-mode and apply the command to
;; the region.
;;
;; NOTE: Promotion/Demotion in complex outline setups
;; - - - - - - - - - - - - - - - - - - - - - - - - - -
;; Promotion/demotion works easily in a simple outline setup where the
;; indicator of headings is just a polymer of a single character (e.g. \"*\"
;; in the default outline mode).  It can also work in more complicated
;; setups.  For example, in LaTeX-mode, sections can be promoted to
;; chapters and vice versa.  However, the outline setup for the mode must
;; meet two requirements:
;;
;; 1. `outline-regexp' must match the full text which has to be changed
;;    during promotion/demotion.  E.g. for LaTeX, it must match \"\\chapter\"
;;    and not just \"\\chap\".  Major modes like latex-mode, AUCTeX's
;;    latex-mode and texinfo-mode do this correctly.
;;
;; 2. The variable `outline-promotion-headings' must contain a sorted list
;;    of headings as matched by `outline-regexp'.  Each of the headings in
;;    `outline-promotion-headings' must be matched by `outline-regexp'.
;;    `outline-regexp' may match additional things - those matches will be
;;    ignored by the promotion commands.  If a mode has multiple sets of
;;    sectioning commands (for example the texinfo-mode with
;;    chapter...subsubsection and unnumbered...unnumberedsubsubsec), the
;;    different sets can all be listed in the same list, but must be
;;    separated by nil elements to avoid \"promotion\" accross sets.
;;    Examples:
;;
;;    (add-hook 'latex-mode-hook      ; or 'LaTeX-mode-hook for AUCTeX
;;     (lambda ()
;;       (setq outline-promotion-headings
;;             '(\"\\\\chapter\" \"\\\\section\" \"\\\\subsection\"
;;               \"\\\\subsubsection\" \"\\\\paragraph\" \"\\\\subparagraph\"))))
;;
;;    (add-hook 'texinfo-mode-hook
;;     (lambda ()
;;      (setq outline-promotion-headings
;;       '(\"@chapter\" \"@section\" \"@subsection\" \"@subsubsection\" nil
;;         \"@unnumbered\" \"@unnumberedsec\" \"@unnumberedsubsec\" 
;;                                       \"@unnumberedsubsubsec\" nil
;;         \"@appendix\" \"@appendixsec\" \"@appendixsubsec\"
;;                                         \"@appendixsubsubsec\" nil
;;         \"@chapheading\" \"@heading\" \"@subheading\" \"@subsubheading\"))))
;;
;;    If people find this useful enough, maybe the maintainers of the
;;    modes can be persuaded to set `outline-promotion-headings'
;;    already as part of the mode setup. 
;;
;;  Compatibility:
;;  --------------
;;  outline-magic was developed to work with the new outline.el
;;  implementation which uses text properties instead of selective display.
;;  If you are using XEmacs which still has the old implementation, most
;;  commands will work fine.  However, structure editing commands will
;;  require all relevant headlines to be visible.
;;
"]) (otter-mode . [(20121202 903) nil "Major mode for source files of the Otter automated theorem prover" single nil]) (osx-pseudo-daemon . [(20131026 1730) nil "Daemon mode that plays nice with OSX." single ";;; Commentary:

;; On OSX, if you use Cocoa Emacs' daemon mode and then close all GUI
;; frames, the Emacs app on your dock becomes nonfunctional until you
;; open a new GUI frame using emacsclient on the command line. This is
;; obviously suboptimal. This package makes it so that whenever you
;; close the last GUI frame, a new frame is created and the Emacs app
;; is hidden, thus approximating the behvaior of daemon mode while
;; keeping the Emacs dock icon functional. To actually quit instead of
;; hiding Emacs, use CMD+Q (or Alt+Q if you swapped Alt & Command
;; keys).

"]) (osx-plist . [(20101130 448) nil "Apple plist file parser" single ";;; Commentary:

;; Simple parser for Mac OS X plist files. The main entry point is
;; `osx-plist-parse-file' (which see). As a useful example, code is
;; included to update Emacs' environment by parsing your
;; ~/.MacOSX/environment.plist file (see `osx-plist-update-environment').

"]) (osx-location . [(20130907 133) nil "Watch and respond to changes in geographical location on OS X" tar nil]) (osx-browse . [(20131106 706) ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) "Web browsing helpers for OS X" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'osx-browse)
;;
;;     (osx-browse-mode 1)
;;
;;     \342\214\230-b      ; browse to URL in foreground
;;     C-- \342\214\230-b  ; browse to URL in background
;;
;;     \342\214\230-i      ; search Google in foreground
;;     C-- \342\214\230-i  ; search Google in background
;;
;;     ;; position cursor on a URL
;;     \342\214\230-b
;;
;;     ;; select a region
;;     \342\214\230-i
;;
;;     ;; to turn off confirmations
;;     (setq browse-url-dwim-always-confirm-extraction nil)
;;
;; Explanation
;;
;; This package helps Emacs run Safari, Google Chrome, and Firefox
;; on OS X.  It is similar to the built-in `browse-url', but is
;; somewhat more friendly and configurable.
;;
;; The foreground/background behavior of the external browser can
;; be controlled via customizable variables and prefix arguments.
;; A positive prefix argument forces foreground; a negative prefix
;; argument forces background.  With no prefix argument, the
;; customizable variable setting is respected.
;;
;; Default values for URLs or search text are deduced from the region
;; or from context around the point, according to the heuristics in
;; browse-url-dwim.el.
;;
;; To use osx-browse, place the osx-browse.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'osx-browse)
;;     (osx-browse-mode 1)
;;
;; The following interactive commands are provided:
;;
;;     `osx-browse-mode'
;;     `osx-browse-url'
;;     `osx-browse-search'
;;     `osx-browse-guess'
;;     `osx-browse-url-safari'
;;     `osx-browse-url-chrome'
;;     `osx-browse-url-firefox'
;;
;; When `osx-browse-install-aliases' is set (the default) and
;; `osx-browse-mode' is turned on, aliases are added for the commands
;;
;;     `browse'
;;     `google'
;;     `browse-url-chromium'
;;
;; See Also
;;
;;     M-x customize-group RET osx-browse RET
;;     M-x customize-group RET browse-url-dwim RET
;;     M-x customize-group RET browse-url RET
;;
;; Notes
;;
;;     This library uses browse-url-dwim.el, but does not require that
;;     `browse-url-dwim-mode' be turned on.  If both modes are turned
;;     on, keybindings from both modes will be active.
;;
;;     When `osx-browse-mode' is turned on, `browse-url-browser-function'
;;     is set to `osx-browse-url', meaning that your default browsing
;;     facilities will be provided by this library.  `osx-browse-url-safari'
;;     and friends are provided in the event that you wish to set
;;     `browse-url-browser-function' by hand.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     Requires: browse-url-dwim.el
;;
;;     Uses if present: string-utils.el
;;
;; Bugs
;;
;;     `osx-browse-prefer-background' is only respected on
;;     interactive calls.
;;
;;     Keybindings don't work out of the box with Aquamacs, which
;;     does not think that \342\214\230 is the Super modifier.
;;
;;     OS X makes an iconified application visible, even when opening
;;     a URL in the background.
;;
;;     New-window parameter is not respected, just as in browse-url.el
;;     Could use AppleScript as follows
;;
;;         osascript -e 'tell application id \"com.apple.Safari\" to make new document with properties {URL:\"%s\"}'
;;
;;         osascript -e 'tell application id \"com.google.Chrome\"' -e 'set win to make new window' -e 'set URL of active tab of win to \"%s\"' -e 'end tell'
;;
;;         there should be a similar AppleScript solution for Firefox
;;
;; TODO
;;
;;     Respect new-window parameter.
;;
;;     If new-window worked, could make two universal prefix args
;;     mean: foreground + new window.
;;
;;     Examine the process object returned by start-process.
;;
;;; License
;;
;; Simplified BSD License
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (orglue . [(20130912 1842) ((org (8 1)) (epic (0 1)) (org-mac-link (1 2))) "more functionality to org-mode." tar ";;; Commentary:
;;
"]) (orglink . [(20131209 1844) ((dash (1 3 2)) (org (8 0))) "use Org Mode links in other modes" single ";;; Commentary:

;; This library implements support for some Org Mode link types in
;; other major modes.  Links can be opened and edited like in Org
;; Mode.

;; To use enable `global-orglink-mode' and customize
;; `orglink-activate-in-modes'.  Or use the buffer local
;; `orglink-mode'.  Do the latter now to linkify these examples:

;;   [[Code]]
;;   [[Code][start of code]]
;;   [[define-derived-mode orglink-mode][orglink-mode]]
;;   <mailto:jonas@bernoul.li>
;;   man:info
;;   <info:man>
;;   http://github.com/tarsius/orglink
;;   TODO support Emacs Lisp xref links like (in) `help-mode'.
;;   TODO support footnote.el links (only)

;; If you like this you might also like `orgstruct-mode', [[https://github.com/tj64/outshine][outshine]],
;; [[https://github.com/tarsius/hl-todo][hl-todo]], and [[https://github.com/tarsius/org-elisp-help][org-elisp-help]].

"]) (org2blog . [(20130707 323) ((org (7 8)) (xml-rpc (1 6 8)) (metaweblog (0 1))) "Blog from Org mode to wordpress" tar nil]) (org-trello . [(20140105 838) ((org (8 0 7)) (dash (1 5 0)) (request (0 2 0)) (cl-lib (0 3 0)) (json (1 2)) (elnode (0 9 9 7 6)) (esxml (0 3 0)) (s (1 7 0)) (kv (0 0 17))) "Org minor mode to synchronize with trello" tar nil]) (org-toodledo . [(20130928 1132) nil "Toodledo integration for Emacs Org mode" tar ";;; Commentary:
;;
;; This package adds the ability to sync org-mode tasks with
;; Toodledo, a powerful web-based todo list manager that welcomes 3rd
;; party integrations.  (See http://www.toodledo.com/)
;;
;; This version of `org-toodledo' utilizes version 2.0 of the Toodledo API. 
;;
;; See https://github.com/christopherjwhite/org-toodledo
;; 

"]) (org-screenshot . [(20131102 1715) ((org (7))) "screenshots integrated with org attachment dirs" single nil]) (org-readme . [(20130508 705) ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) "Integrates Readme.org and Commentary/Change-logs." tar ";;; Commentary: 
;; 
;; * Using org-readme
;; Org readme is used to:
;; 
;; - Create/Update a \"History\" section in the Readme.org based on the changelog
;;   section of the Emacs Log.
;; - Create/Update a \"Library Information\" Section Based on the Emacs lisp header.
;; - Create/Update a \"Possible Dependencies\" Section Based on the Emacs
;;   lisp header.
;; - Create/Update a \"Functions\" Section based on the functions defined
;;   in the single lisp library.
;; - Create/Update a \"Variables\" Section based on the variables defined
;;   in the single lisp library.
;; 
;; All other sections of the Readme.org are then put into the
;; \"Commentary\" section of the readme.org.
;; 
;; In addition this library defines `org-readme-sync',  a convenience function that:
;; 
;; - Asks for a commentary about the library change.
;;   - To exit/save press `C-c C-c'
;; - Asks if this is a minor revision
;;   - If it is a minor revision, bumps the revision up so the new
;;     library will be posted to marmalade-repo.org
;;   - The package will attempt to add the readme to the info
;;     documentation system within emacs.
;; - Syncs the Readme.org with the lisp file as described above.
;; - Updates emacswiki with the library description and the library
;;   itself (requires yaoddmuse).
;; - Updates Marmalade-repo if the library version is different than the
;;   version in the server (requires http-post-simple).
;; - Updates the git repository with the differences that you posted.
;; - If you are using github, this library creates a melpa recipie.
;; - If you are using github, this library creates a el-get recipie. 
;; 
;; When `org-readme-sync' is called in a `Readme.org' file that is not a
;; single lisp file, the function exports the readme in EmacsWiki format
;; and posts it to the EmacsWiki.
;; ** EmacsWiki Page Names
;; EmacsWiki Page names are generated from the file.  `org-readme.el'
;; would generate a page of OrgReadme.
;; 
;; ** Why each required library is needed
;; There are a few required libraries.  This is a list of the require
;; libraries and why they are needed.
;; 
;; |------------------+--------------------------------------|
;; | Library          | Why it is needed                     |
;; |------------------+--------------------------------------|
;; | yaoddmuse        | Publish to emacswiki                 |
;; | http-post-simple | Publish to marmalade-repo.org        |
;; | header2          | To create header and changelog       |
;; | lib-requires     | To generate the library dependencies |
;; |------------------+--------------------------------------|
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
"]) (org-protocol-jekyll . [(20130810 1450) nil "Jekyll's handler for org-protocol" single ";;; Commentary:

;; `org-protocol-jekyll' realizes the \\\"jekyll\\\" sub-protocol to open
;; sources of a site built with Jekyll (URL `http://jekyllrb.com') in
;; Emacs for editing. `org-protocol-jekyll' uses the sub-protocol
;; \\\"jekyll\\\" and maps URLs to local filenames defined in
;; `org-protocol-jekyll-alist'.

;; For further information, see README.md found here:
;; URL `https://github.com/vonavi/org-protocol-jekyll'.

"]) (org-present . [(20130426 1155) ((org (7))) "Minimalist presentation minor-mode for Emacs org-mode." single ";;; Commentary:
;;
;; This is meant to be an extremely minimalist presentation tool for
;; Emacs org-mode.
;;
;; Usage:
;;
;; Add the following to your emacs config:
;;
;;   (add-to-list 'load-path \"~/path/to/org-present\")
;;   (autoload 'org-present \"org-present\" nil t)
;;
;;   (add-hook 'org-present-mode-hook
;;             (lambda ()
;;               (org-present-big)
;;               (org-display-inline-images)))
;;  
;;   (add-hook 'org-present-mode-quit-hook
;;             (lambda ()
;;               (org-present-small)
;;               (org-remove-inline-images)))
;;
;; Open an org-mode file with each slide under a top-level heading.
;; Start org-present with org-present-mode, left and right keys will move forward
;; and backward through slides. C-c C-q will quit org-present.
;;
;; This works well with hide-mode-line (http://webonastick.com/emacs-lisp/hide-mode-line.el),
;; which hides the mode-line when only one frame and buffer are open.
;;
;; If you're on a Mac you might also want to look at the fullscreen patch here:
;; http://cloud.github.com/downloads/typester/emacs/feature-fullscreen.patch

(defvar org-present-mode-keymap (make-keymap) \"org-present-mode keymap.\")

;; left and right page keys
(define-key org-present-mode-keymap [right]         'org-present-next)
(define-key org-present-mode-keymap [left]          'org-present-prev)
(define-key org-present-mode-keymap (kbd \"C-c C-=\") 'org-present-big)
(define-key org-present-mode-keymap (kbd \"C-c C--\") 'org-present-small)
(define-key org-present-mode-keymap (kbd \"C-c C-q\") 'org-present-quit)
(define-key org-present-mode-keymap (kbd \"C-c C-r\") 'org-present-read-only)
(define-key org-present-mode-keymap (kbd \"C-c C-w\") 'org-present-read-write)

;; how much to scale up font size
(defvar org-present-text-scale 5)
(defvar org-present-overlays-list nil)

(define-minor-mode org-present-mode
  \"Minimalist presentation minor mode for org-mode.\"
  :init-value nil
  :lighter \" OP\"
  :keymap org-present-mode-keymap)

(make-variable-buffer-local 'org-present-mode)

(defun org-present-top ()
  \"Jump to current top-level heading, should be safe outside a heading.\"
  (unless (org-at-heading-p) (outline-previous-heading))
  (let ((level (org-current-level)))
    (when (and level (> level 1))
      (outline-up-heading (- level 1)))))

(defun org-present-next ()
  \"Jump to next top-level heading.\"
  (interactive)
  (widen)
  (if (org-current-level)
      (progn
        (org-present-top)
        (org-get-next-sibling))
    (outline-next-heading))
  (org-present-narrow))

(defun org-present-prev ()
  \"Jump to previous top-level heading.\"
  (interactive)
  (if (org-current-level)
      (progn
        (widen)
        (org-present-top)
        (org-get-last-sibling)))
  (org-present-narrow))

(defun org-present-narrow ()
  \"Show just current page; in a heading we narrow, else show title page (before first heading).\"
  (if (org-current-level)
      (progn
        (org-narrow-to-subtree)
        (show-all))
    ;; else narrow to area before first heading
    (outline-next-heading)
    (narrow-to-region (point-min) (point))
    (goto-char (point-min))))

(defun org-present-big ()
  \"Make font size larger.\"
  (interactive)
  (text-scale-increase 0)
  (text-scale-increase org-present-text-scale)) ;MAKE THIS BUFFER-LOCAL

(defun org-present-small ()
  \"Change font size back to original.\"
  (interactive)
  (text-scale-increase 0))

(defun org-present-add-overlay (beginning end)
  \"Create a single overlay over given region and remember it.\"
  (let ((overlay (make-overlay beginning end)))
    (push overlay org-present-overlays-list)
    (overlay-put overlay 'invisible 'org-present)))

(defun org-present-show-option (string)
  \"Returns non-nil if string is an org-mode exporter option whose value we want to show.\"
  (save-match-data
    (string-match
     (regexp-opt '(\"title:\" \"author:\" \"date:\" \"email:\"))
     string)))

(defun org-present-add-overlays ()
  \"Add overlays for this mode.\"
  (add-to-invisibility-spec '(org-present))
  (save-excursion
    ;; hide org-mode options starting with #+
    (goto-char (point-min))
    (while (re-search-forward \"^[[:space:]]*\\\\(#\\\\+\\\\)\\\\([^[:space:]]+\\\\).*\" nil t)
      (let ((end (if (org-present-show-option (match-string 2)) 2 0)))
        (org-present-add-overlay (match-beginning 1) (match-end end))))
    ;; hide stars in headings
    (goto-char (point-min))
    (while (re-search-forward \"^\\\\(*+\\\\)\" nil t)
      (org-present-add-overlay (match-beginning 1) (match-end 1)))))

(defun org-present-rm-overlays ()
  \"Remove overlays for this mode.\"
  (mapc 'delete-overlay org-present-overlays-list)
  (remove-from-invisibility-spec '(org-present)))

(defun org-present-read-only ()
  \"Make buffer read-only.\"
  (interactive)
  (setq buffer-read-only t)
  (setq cursor-type nil)
  (define-key org-present-mode-keymap (kbd \"SPC\") 'org-present-next))

(defun org-present-read-write ()
  \"Make buffer read-only.\"
  (interactive)
  (setq buffer-read-only nil)
  (setq cursor-type t)
  (define-key org-present-mode-keymap (kbd \"SPC\") 'self-insert-command))

;;;###autoload
(defun org-present ()
  \"init.\"
  (interactive)
  (setq org-present-mode t)
  (org-present-add-overlays)
  (org-present-narrow)
  (run-hooks 'org-present-mode-hook))

(defun org-present-quit ()
  \"Quit the minor-mode.\"
  (interactive)
  (org-present-small)
  (org-present-rm-overlays)
  (widen)
  (run-hooks 'org-present-mode-quit-hook)
  (setq org-present-mode nil))

(provide 'org-present)
;;; org-present.el ends here
"]) (org-pomodoro . [(20131117 35) ((alert (0 5 10))) "Pomodoro implementation for org-mode." tar ";;; Commentary:

;; Org-pomodoro introduces an easy way to clock time in org-mode with
;; the pomodoro technique.  You can clock into tasks with starting a
;; pomodoro time automatically.  Each finished pomodoro is followed by
;; a break timer.  If you completed 4 pomodoros in a row the break is
;; longer that the shorter break between each pomodoro.
;;
;; For a full explanation of the pomodoro technique, have a look at:
;;   http://www.pomodorotechnique.com

"]) (org-pandoc . [(20130729 1850) nil "Export from Org using Pandoc" tar nil]) (org-page . [(20140107 820) ((ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0))) "a static site generator based on org mode" tar nil]) (org-outlook . [(20121212 1458) nil "Outlook org" tar ";;; Commentary: 
;; 
;; * Introduction:
;; Org mode lets you organize your tasks. However, sometimes you may wish
;; to integrate org-mode with outlook since your company forces you to
;; use Microsoft Outlook.  [[file:org-outlook.el][org-outlook.el]] allows: 
;; - Creating Tasks from outlook items:
;;   - org-outlook-task. All selected items in outlook will be added to a
;;     task-list at current point. This version requires org-protocol and   
;;     org-protocol.vbs.  The org-protocol.vbs has can be generated with
;;     the interactive function `org-outlook-create-vbs'.
;; 
;; - Open Outlook Links in org-mode
;; 
;;   - Requires org-outlook-location to be customized when using Outlook
;;     2007 (this way you don\342\200\231t have to edit the registry).
;; 
;; This is based loosely on:
;; http://superuser.com/questions/71786/can-i-create-a-link-to-a-specific-email-message-in-outlook
;; 
;; 
;; Note that you may also add tasks using visual basic directly. The script below performs the following actions:
;; 
;;    - Move email to Personal Folders under folder \"@ActionTasks\" (changes GUID)
;;    - Create a org-mode task under heading \"* Tasks\" for the file `f:\\Documents\\org\\gtd.org'
;;    - Note by replacing \"@ActionTasks\", \"* Tasks\" and
;;      `f:\\Documents\\org\\gtd.org' you can modify this script to your
;;      personal needs.
;; 
;; The visual basic script for outlook is:
;; 
;; 
;; 
;; Sub CreateTaskFromItem()
;;     Dim T As Variant
;;     Dim Outlook As New Outlook.Application
;;     Dim orgfile As Variant
;;     Dim Pos As Integer
;;     Dim taskf As Object
;;     
;;     Set myNamespace = Outlook.GetNamespace(\"MAPI\")
;;     Set myPersonalFolder = myNamespace.Folders.item(\"Personal Folders\")
;;     Set allPersonalFolders = myPersonalFolder.Folders
;;     
;;     T = \"\"
;;     For Each Folder In allPersonalFolders
;;         If Folder.Name = \"@ActionTasks\" Then
;;             Set taskf = Folder
;;             Exit For
;;         End If
;;     Next
;;     
;;     If Outlook.Application.ActiveExplorer.Selection.Count > 0 Then
;;         For I = 1 To Outlook.Application.ActiveExplorer.Selection.Count
;;                 Set objMail = Outlook.ActiveExplorer.Selection.item(I)
;;                 Set objMail = objMail.Move(taskf)
;;                 objMail.Save 'Maybe this will update EntryID
;;                 T = T + \"** TODO \" + objMail.Subject + \" :OFFICE:\" + vbCrLf
;;                 T = T + \"[[outlook:\" + objMail.EntryID + \"][MESSAGE: \" + objMail.Subject + \" (\" + objMail.SenderName + \")]]\"
;;                 T = T + vbCrLf + vbCrLf
;;                 T = T + objMail.Body
;;                 T = T + vbCrLf + vbCrLf
;;         Next
;;         ' Now that we have the org-mode tasks, add to org-mode file
;;         orgfile = GetFile(\"f:\\Documents\\org\\gtd.org\")
;;         Pos = InStr(1, orgfile, \"* Tasks\", vbTextCompare)
;;         orgfile = Mid(orgfile, 1, Pos + Len(\"* Tasks\") + 1) + vbCrLf + T + Mid(orgfile, Pos + Len(\"* Tasks\") + 1, Len(orgfile))
;;         orgfile = Replace(orgfile, vbCrLf, Chr(10)) ' Change to unix line endings.
;;         WriteFile \"f:\\Documents\\org\\gtd.org\", orgfile
;;     Else
;;         MsgBox \"No Message(s) Selected\"
;;     End If
;;  
;; End Sub
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
"]) (org-octopress . [(20140106 1640) ((org (8 0)) (orglue (0 1)) (ctable (0 1 1))) "Compose octopress articles using org-mode." tar ";;; Commentary:

;; Basic settings:
;;
;; (setq org-octopress-directory-top       \"~/octopress/source\")
;; (setq org-octopress-directory-posts     \"~/octopress/source/_posts\")
;; (setq org-octopress-directory-org-top   \"~/octopress/source\")
;; (setq org-octopress-directory-org-posts \"~/octopress/source/blog\")
;; (setq org-octopress-setup-file          \"~/lib/org-sty/setupfile.org\")
;;
;; M-x org-octopress
;;
;; Note:
;;  In octopress/_config.yml, you must set the permelink attribute:
;;    permalink: /blog/:year-:month-:day-:title.html
;;

"]) (org-mobile-sync . [(20131118 1116) ((emacs (24 3 50)) (org (8 0))) "automatically sync org-mobile on changes" single ";;; Commentary:

;; Adds delayed `org-mobile-push' upon saving files that are part of
;; `org-mobile-files-alist'. Watches the `org-mobile-capture-file' for
;; changes with `file-notify.el' and then invokes `org-mobile-pull'.

;;; Requirements:

;; Emacs 24.3.50 with `file-notify-support' is required for it to work.

"]) (org-magit . [(20120820 1156) ((magit (0 8)) (org (6 1))) "basic support for magit links" single ";;; Commentary:

;; This module adds support for magit links in org buffers. The following links
;; are supported:
;; - magit:/path/to/repo::commit@<hash>
;; - magit:/path/to/repo::status
;; - magit:/path/to/repo::log

;; Of course those links can be stored as usual with `org-store-link' from the
;; corresponding magit buffers. By default the path to the repo is abbreviated
;; with `abbreviate-file-name', just like org-mode does. See
;; `directory-abbrev-alist' for configuring its behavior. Alternately, you can
;; customize `org-magit-filename-transformer' and provide your own
;; transformer function.

;; When exporting those links, the variable `org-magit-known-public-providers'
;; is used to generate meaningful links. This assumes there exists a public
;; http server that is able to expose those objects.

;; Certain settings can be configured directly at the repository level
;; if needed. For example
;;
;; $ git config org-magit.remote upstream
;;
;; In this case, html links will point to the \"upstream\" webserver, instead of
;; the default \"origin\". URL templates can also be stored in the
;; repository. For example
;;
;; $ git config org-magit.log http://myserver/plop.git/history

"]) (org-mac-link . [(20140107 519) nil "Grab links and url from various mac" single ";;; Commentary:
;;
;; This code allows you to grab either the current selected items, or
;; the frontmost url in various mac appliations, and insert them as
;; hyperlinks into the current org-mode document at point.
;;
;; This code is heavily based on, and indeed incorporates,
;; org-mac-message.el written by John Wiegley and Christopher
;; Suckling.
;;
;; Detailed comments for each application interface are inlined with
;; the code.  Here is a brief overview of how the code interacts with
;; each application:
;;
;; Finder.app - grab links to the selected files in the frontmost window
;; Mail.app - grab links to the selected messages in the message list
;; AddressBook.app - Grab links to the selected addressbook Cards
;; Firefox.app - Grab the url of the frontmost tab in the frontmost window
;; Vimperator/Firefox.app - Grab the url of the frontmost tab in the frontmost window
;; Safari.app - Grab the url of the frontmost tab in the frontmost window
;; Google Chrome.app - Grab the url of the frontmost tab in the frontmost window
;; Together.app - Grab links to the selected items in the library list
;; Skim.app - Grab a link to the selected page in the topmost pdf document
;; Microsoft Outlook.app - Grab a link to the selected message in the message list
;;
;;
;; Installation:
;;
;; add (require 'org-mac-link) to your .emacs, and optionally bind a
;; key to activate the link grabber menu, like this:
;;
;; (add-hook 'org-mode-hook (lambda ()
;;   (define-key org-mode-map (kbd \"C-c g\") 'org-mac-grab-link)))
;;
;; Usage:
;;
;; Type C-c g (or whatever key you defined, as above), or type M-x
;; org-mac-grab-link RET to activate the link grabber.  This will present
;; you with a menu to choose an application from which to grab a link
;; to insert at point.  You may also type C-g to abort.
;;
;; Customizing:
;;
;; You may customize which applications appear in the grab menu by
;; customizing the group `org-mac-link'.  Changes take effect
;; immediately.
;;
;;
"]) (org-mac-iCal . [(20140107 519) nil "Imports events from iCal.app to the Emacs diary" single ";;; Commentary:
;;
;; This file provides the import of events from Mac OS X 10.5 iCal.app
;; into the Emacs diary (it is not compatible with OS X < 10.5). The
;; function org-mac-iCal will import events in all checked iCal.app
;; calendars for the date range org-mac-iCal-range months, centered
;; around the current date.
;;
;; CAVEAT: This function is destructive; it will overwrite the current
;; contents of the Emacs diary.
;;
;; Installation: add (require 'org-mac-iCal) to your .emacs.
;;
;; If you view Emacs diary entries in org-agenda, the following hook
;; will ensure that all-day events are not orphaned below TODO items
;; and that any supplementary fields to events (e.g. Location) are
;; grouped with their parent event
;;
;; (add-hook 'org-agenda-cleanup-fancy-diary-hook
;; 	  (lambda ()
;; 	    (goto-char (point-min))
;; 	    (save-excursion
;; 	      (while (re-search-forward \"^[a-z]\" nil t)
;; 		(goto-char (match-beginning 0))
;; 		(insert \"0:00-24:00 \")))
;; 	    (while (re-search-forward \"^ [a-z]\" nil t)
;; 	      (goto-char (match-beginning 0))
;; 	      (save-excursion
;; 		(re-search-backward \"^[0-9]+:[0-9]+-[0-9]+:[0-9]+ \" nil t))
;; 	      (insert (match-string 0)))))

"]) (org-journal . [(20131111 648) nil "a simple org-mode based journaling mode" single nil]) (org-jira . [(20130427 616) nil "Syncing between Jira and Org-mode." tar nil]) (org-jekyll . [(20130508 239) ((org (8 0))) "Export jekyll-ready posts form org-mode entries" single ";;; Commentary:
;;;
;;; Extract subtrees from your org-publish project files that have
;;; a :blog: keyword and an :on: property with a timestamp, and
;;; export them to a subdirectory _posts of your project's publishing
;;; directory in the year-month-day-title.html format that Jekyll
;;; expects.  Properties are passed over as yaml front-matter in the
;;; exported files.  The title of the subtree is the title of the
;;; entry.  The title of the post is a link to the post's page.
;;;
;;; Look at http://orgmode.org/worg/org-tutorials/org-jekyll.html for
;;; more info on how to integrate org-mode with Jekyll, and for the
;;; inspiration of the main function down there.
;;;
"]) (org-gnome . [(20140111 813) ((notify (2010 8 20)) (telepathy (0 1)) (gnome-calendar (0 1))) "Orgmode integration with the GNOME desktop" single ";;; Commentary: 
;;; Open org-agenda on click on the calendar button of GnomeShell
;;; emacsclient --eval '(progn (org-agenda nil \"a\" nil) (delete-other-windows))'


"]) (org-fstree . [(20090723 819) nil "include a filesystem subtree into an org file" single ";;; Commentary:

;; org-fstree inserts the filesystem subtree for a given directory.
;; Each file/directory is formatted as a headline, provides links back 
;; to all headlines that are associated with it (by containing links to the file) 
;; and is assigned their tags.
;;
;; Installation:
;;   - put this file into your load-path 
;;   - insert \"(require 'org-fstree)\" into ~/.emacs
;;
;; Usage:
;;   - enter a line containing \"#+BEGIN_FSTREE: <dir>\" into an org buffer, 
;;     where <dir> is the directory, that is to be inserted.
;;   - while the cursor is in the line mentioned, press \"C-c C-c\"
;;
;; Options:
;;   Specify options in the form:
;;   \"#+BEGIN_FSTREE: <dir> :<optionname1> <optionvalue1> :<optionname2> <optionvalue2>  ...
;;   Options are:
;;     - :non-recursive t , to suppress recursion into directories
;;     - :exclude-regexp-name <list of regexp strings> , exclude file/directory names matching either 
;;                                                  of the given regexp expressions
;;       Examples: 
;;         :exclude-regexp-name (\".*\\\\.pdf$\" \".*\\\\.zip$\"), excludes files/directories ending with either \".pdf\" or \".zip\"
;;         :exclude-regexp-name (\"^\\\\.git$\") , excludes files/directories named \".git\"
;;
;;     - :exclude-regexp-fullpath <list of regexp strings>, same as :exclude-regexp-name but matches absolute path to file/directory
;;     - :relative-links t , generates relative instead of absolute links
;;     - :show-only-matches t , only files that are being linked to show up
;;     - :only-directories t , only directories are listed
;;     - :only-regular-files t , only regular files are listed
;;     - :dynamic-update t , [EXPERIMENTAL] dynamically update a subtree on visibility cycling.
;;     - :links-as-properties t, sets the links as properties Link1, Link2,... for use in column view [Does not work with dynamic-update!]
;;     - :no-annotations t, suppresses the search and display of file annotations
;;
;; Limitations and warnings:
;;
;;   - when triggering an update (by pressing \"C-c C-c\" while in the line mentioned above)
;;     the COMPLETE REGION BETWEEN \"#+BEGIN_FSTREE\" AND \"#+END_FSTREE\" IS REPLACED.
;;   - speed  
;;     
;; Code:

(provide 'org-fstree)

(require 'org)

(defun org-fstree-generate (dir level options)
  (interactive)
;;  (message \"org-fstree-generate\") ;; DEBUG
  (if (file-directory-p dir)
     (let (
	   (non-recursive (plist-get options :non-recursive))
	   (exclude-regexp-name-list (plist-get options :exclude-regexp-name))
	   (exclude-regexp-fullpath-list (plist-get options :exclude-regexp-fullpath))
	   (links-as-properties (plist-get options :links-as-properties))
	   (dynamic-update (plist-get options :dynamic-update))
	   (fullFileNames (directory-files dir 1 nil nil) )
	   (fileNames (directory-files dir nil nil nil) )
	   fileName
	   fullFileName
	   currentHeadline
	   orgHeadlineInfo
	   curTags
	   curPos
	   (linksList nil)
	   (retString \"\")
	   )
       (while fileNames
	 (setq fullFileName (car fullFileNames))
	 (setq fullFileNames (cdr fullFileNames))
	 (setq fileName (car fileNames))
	 (setq fileNames (cdr fileNames))
	 (setq linksList nil)
	 (setq curTags nil)
	 (cond ((member fileName '(\".\" \"..\")))
	       ;; the following two lines are really ugly. I'll be glad if someone with more lisp experience tidies this up.
	       ((reduce (function (lambda (a b) (or a b)))  (mapcar (function (lambda (regexp) (not (string= fullFileName (replace-regexp-in-string regexp \"\" fullFileName) )) )) exclude-regexp-fullpath-list ) :initial-value nil))
	       ((reduce (function (lambda (a b) (or a b)))  (mapcar (function (lambda (regexp) (not (string= fileName (replace-regexp-in-string regexp \"\" fileName) )) )) exclude-regexp-name-list ) :initial-value nil))
	       ((and (not (file-directory-p fullFileName)) (plist-get options :only-directories)))
               ((and (not (file-regular-p fullFileName)) (plist-get options :only-regular-files)))
	       (t
		(save-excursion 
                (cond ((plist-get options :no-annotations))
                      (t
                ;; Search for links in current buffer
		(goto-char (point-min))
		(setq curPos (point))
		(while (re-search-forward org-bracket-link-regexp nil t)
		  (let ((filenameInLink (match-string 1)))
		  (cond ( (org-fstree-get-parameters-if-inside-fstree-block) (re-search-forward \"#\\\\+END_FSTREE\" nil t) )
			( (string= fullFileName (expand-file-name (replace-regexp-in-string \"^file:\" \"\" filenameInLink ) \":\" ) )
			  (let ((p (point)))
			    (cond ((org-before-first-heading-p))
				  (t
				   ;; go to associated heading
				   (org-back-to-heading t)
				   (setq orgHeadlineInfo (org-heading-components))
				   (setq curTags (concat curTags (nth 5 orgHeadlineInfo) ))
				   (setq currentHeadline (nth 4 orgHeadlineInfo))
				   ;; filter all links from headline, generate link to it and append to linksList
				   (let ((cleanedHeadline (replace-regexp-in-string \"\\\\[\\\\[.*\\\\]\\\\]\" \"\" currentHeadline)))
				     
				     (setq linksList (cons (concat \"[[*\"  cleanedHeadline \"]\"
								   (cond ( (plist-get options :show-only-matches) 
									   \"[\" (replace-regexp-in-string (regexp-quote fullFileName) \"\" cleanedHeadline) \"]\" ) )
								   \"]\")  
							   linksList) ) )
				   (goto-char p)
				   )))))))))

		(cond ((or (not (plist-get options :show-only-matches)) (not (null linksList)))
		       ;; construct headline for current file/directory
		       (let* ((tagString (cond ((not (null curTags)) (concat \"  \" (replace-regexp-in-string \"::\" \":\" curTags)) ) ))
			      (linkCount 0)
			      (headingString (format \"\\n%s |%s| [[file:%s][%s]] \" 
						     (make-string level ?*) 
						     (cond ((file-directory-p fullFileName) \"D\") ((file-symlink-p fullFileName) \"L\") (t \" \")) 
						     (if (plist-get options :relative-links) (file-relative-name fullFileName) fullFileName) fileName)))
			 (cond (links-as-properties
				(setq retString (concat retString headingString (if tagString tagString \"\")
							(if (not (null linksList)) 
							    (concat \"\\n :PROPERTIES:\\n \" 
								    (mapconcat (function (lambda (string) (setq linkCount (1+ linkCount)) (concat \":Link\" (number-to-string linkCount) \":\" string ))) linksList \"\\n\") 
								    \"\\n :END:\" ) ))))
			       (t
				(setq retString (concat retString headingString 
						       (make-string (max 0 (- 100 (length headingString))) ? )
						       (if linksList (concat \"{ \" (mapconcat 'identity linksList \" | \") \" }\"))
						       (if tagString tagString)
                                                       ))))
			 (if (and (not non-recursive) (not dynamic-update) (file-directory-p fullFileName) )
			     (setq retString (concat retString (org-fstree-generate fullFileName (1+ level) options) ) )
			   ))))))))
       retString)
    (message \"%s is not a directory\" dir)))

(defun org-fstree-apply-maybe ()
  (interactive)
;;  (message \"org-fstree-apply-maybe\") (sit-for 1) ;; DEBUG
  (save-excursion
     (if (save-excursion (beginning-of-line 1) (looking-at \"#\\\\+END_FSTREE\"))
	 (re-search-backward \"#\\\\+BEGIN_FSTREE\" nil t))
     (cond
      ((save-excursion (beginning-of-line 1) (looking-at \"#\\\\+BEGIN_FSTREE\"))
       (let* ((params (org-fstree-gather-parameters))
	      (dir (org-link-expand-abbrev (plist-get params :dir)))
	      (options (plist-get params :params))
	      level)
	 ;; get current level; there is a BUG if \"#+BEGIN_FSTREE\" is inserted after the last headlines dots, that indicate its folded state.
	;; (let ((p (point)))
	(save-excursion
	  (cond ((org-before-first-heading-p)
		 (setq level 1))
		(t (org-back-to-heading)
		   (setq level (+ (funcall outline-level) 1))
		   ;;		    (goto-char p)
		   )))
	   (forward-line)
	   (let ((beg (point)))
	     (re-search-forward \"#\\\\+END_FSTREE\\\\|#\\\\+BEGIN_FSTREE\" nil t)
	     ;;(let ((generatedString (org-fstree-generate dir level options)))
	     (cond ( (looking-back \"#\\\\+END_FSTREE\") 
		     (forward-line -1)
		     (end-of-line 1)
		     (delete-region beg (point) )
		     (insert (concat (org-fstree-generate dir level options) \"\\n\\n\")))
		   (t (goto-char beg)
		      (insert (concat (org-fstree-generate dir level options) \"\\n\\n\\n#+END_FSTREE\"))))
	     ;; hide all subtrees
	     (org-map-region (function (lambda () (hide-subtree))) beg (point))
	     
	     ;;)
	     ))
       1))))
  

(defun org-fstree-show-entry-maybe (state)
  (interactive)
;;  (message \"show-entry-maybe..\") (sit-for 1) ;; DEBUG
  (let* ( (parameters (save-excursion (org-fstree-get-parameters-if-inside-fstree-block)))
	  (options (plist-get parameters :params)))

    (cond ((and parameters (not (plist-get options :non-recursive)) (plist-get options :dynamic-update) )
	   ;; we are inside the FSTREE block and have to update
	   ;; delete existing content
	   (save-excursion
	     (let* ((endfstree (save-excursion (re-search-forward \"#\\\\+END_FSTREE\" nil t) (beginning-of-line) (point)))
                    (end (save-excursion 
			  ;; go to the end of the subtree, specifically to the beginning of the next headline
			  (org-end-of-subtree nil t)
			  ;; check whether the end of the fstree block has been trespassed
                          (and (> (point) endfstree) (goto-char endfstree))
                          ;; got back on character, because editing heading lines in column mode is not possible.
			  ;; this line is supposed to be either empty or an entry.
			  (forward-char -1)
                          (point)
			  )))
	       (beginning-of-line 2)
	       (if (looking-at \" *:PROPERTIES:\") (progn (re-search-forward \":END:\" nil t) (forward-line 1)))

	       
	       (when (and (> (count-lines (point) end) 0) (< (point) end))
                  (delete-region (point) end)
                 )
	       )
	     )
	   (cond ((eq state 'folded))
		 (t 
		  ;; insert new content
		  (save-excursion
		    (let ((beg (point))
			  end
			  (level (1+ (funcall outline-level)))
			  (dir (org-fstree-extract-path-from-headline))
			  (newOptions (plist-put (plist-get parameters :params) ':non-recursive 't)))
                      (when (file-directory-p dir)
                        ;;(when (plist-get options :links-as-properties) (forward-line 1))
	  	        (if (looking-at \" *:PROPERTIES:\") (progn (re-search-forward \":END\" nil t) (forward-line 1)))
		        (end-of-line 1)
                        (when (plist-get options :links-as-parameters)
                          (org-columns-quit))

			(insert (org-fstree-generate dir level newOptions))
   
                        (when (plist-get options :links-as-parameters)
                          (org-columns))
			(setq end (point))
			;; hide all subtrees
			;;(if (plist-get options :links-as-properties)
                          ;;(progn 
                          ;; (org-map-region (function (lambda () (hide-subtree))) beg (point)))
                          (org-end-of-subtree)
                          (hide-subtree)
                              ))))
		 )))))


(defun org-fstree-extract-path-from-headline ()
;;  (interactive) ;;DEBUG
  (save-excursion
    (beginning-of-line 1)
    (if (looking-at org-fstree-heading-regexp)
	(match-string-no-properties 1))))

(defconst org-fstree-heading-regexp \".*\\\\[\\\\[file:\\\\(.*\\\\)\\\\]\\\\[.*\\\\]\\\\]\"
  \"Matches headline in org-fstree section.\")
(make-variable-buffer-local 'org-fstree-heading-regexp)

(defun org-fstree-get-parameters-if-inside-fstree-block ()
  (interactive)
  (and   (save-excursion
	 (re-search-forward \"#\\\\+END_FSTREE\" nil t) )
	 (save-excursion
	 (re-search-backward \"#\\\\+BEGIN_FSTREE\" nil t) 
	 (org-fstree-gather-parameters))))

(defun org-fstree-gather-parameters ()
  (save-excursion 
    (let (rtn)
      (beginning-of-line 1)
      (if (looking-at \"#\\\\+BEGIN_FSTREE[: \\t][ \\t]*\\\\([^ \\t\\r\\n]+\\\\)\\\\( +.*\\\\)?\")
     	(let ((dir (org-no-properties (match-string 1)))
	      (params (if (match-end 2)
			  (read (concat \"(\" (match-string 2) \")\")))))
	  (setq rtn (list :dir dir :params params) )
  ))
      
       rtn)
    )
)

(defun org-fstree-get-current-outline-level ()
  (save-excursion
    (cond ((org-before-first-heading-p) 1)
	  (t
	   (org-back-to-heading)
	   (+ (funcall outline-level) 1)))))

(add-hook 'org-ctrl-c-ctrl-c-hook 'org-fstree-apply-maybe)
(add-hook 'org-pre-cycle-hook 'org-fstree-show-entry-maybe)
;;; org-fstree.el ends here
"]) (org-elisp-help . [(20130423 1545) ((cl-lib (0 2)) (org (8 0))) "org links to emacs-lisp documentation" single ";;; Commentary:

;; This package defines two additional Org link types \"elisp-function\"
;; and \"elisp-variable\" which are intended to be used mainly in user
;; documentation.  By default opening these links is done by calling
;; `describe-function' and `describe-variable'.  That is only possible
;; when the function/variable is defined; therefor urls should include
;; the library defining the respective symbol.  If the symbol is not
;; `fbound'/`bound' when the link is opened and the url contains
;; information about the defining feature then that is loaded first.

;;   [[elisp-function:FEATURE:SYMBOL][...]]
;;   [[elisp-variable:FEATURE:SYMBOL][...]]
;;   [[elisp-function::SYMBOL][...]]
;;   [[elisp-variable::SYMBOL][...]]

;; If you want to capture information about a symbol while working on
;; elisp code you should instead use the \"elisp-symbol\" Org link type
;; defined in `org-elisp-symbol' (which is distributed with Org-Mode).
;; The link types defined here cannot be captured as that would
;; conflict with the \"elisp-symbol\" type.  Instead use the command:

;;   `org-elisp-help-function-insert-link' and
;;   `org-elisp-help-variable-insert-link'.

"]) (org-ehtml . [(20140110 1008) ((web-server (20140109 2200)) (emacs (24 3))) "Export Org-mode files as editable web pages" tar nil]) (org-dotemacs . [(20130908 1756) ((org (7 9 3)) (cl-lib (1 0))) "Store your emacs config as an org file, and choose which bits to load." single ";;; Commentary: 
;;
;; Bitcoin donations gratefully accepted: 1Ph9srQBspJCDS9CnGUyWJPTrU4ydX9Aa3
;;
;; Keeping your emacs config in an org file makes it easier for you to keep your .emacs under control,
;; and avoid DotEmacsBankruptcy.
;; With your config code stored in an org file you can easily edit the structure and keep notes.
;; 
;; This library allows you to load elisp code from an org file on emacs startup.
;; You can also limit the code that is loaded to certain tagged headers using an org tag match,
;; and specify dependencies between code blocks.
;; Using tag matches you can also reuse the same org file for different emacs setups by specifying different
;; tag matches for each setup, or load parts of the file on demand.
;; 
;;; Commands/Usage 
;; 
;; The main command is `org-dotemacs-load-default' which loads your default org-dotemacs file (~/.dotemacs.org)
;; and prompts for a tag match to specify which code blocks to load. 
;; In this way you can load bits of config code when you need them.
;; 
;; You can also put this command in your InitFile (see Installation below) to load the code on startup.
;; To change the default org file use the `org-dotemacs-default-file' option.
;; If you want to load a different org file from your default one, use `org-dotemacs-load-file'.
;; 
;; For faster loading you may prefer to keep your config code in a separate elisp file, and just update this file now and again
;; by exporting the code from the org file.
;; Use the `org-dotemacs-load-file' command for this and specify a target file when prompted.
;; 
;;; Structure of the org file 
;; 
;; The elisp code should be contained in emacs-lisp code blocks, e.g:
;; 
;; #+BEGIN_SRC emacs-lisp
;; (setq line-number-mode t)
;; (setq column-number-mode t)
;; (setq frame-title-format \"%b\")
;; (set-background-color \"Black\")
;; (set-foreground-color \"White\")
;; (set-cursor-color \"White\")
;; #+END_SRC
;; 
;; Ideally you should have each code block under a separate org subtree, then you can use properties to
;; name the blocks and define dependencies, and tags and todo states to specify which blocks
;; should be loaded (see below).
;; 
;; I prefer to keep all my code block subtrees under a single header, and use other headers for keeping notes,
;; defining buffer-wide properties, etc. This way I can get a nice column view of the code blocks
;; (see the columns view section below).
;; 
;;;  Block dependencies 
;; 
;; You can enforce dependencies between code blocks by defining NAME & DEPENDS properties for the subtrees containing the
;; blocks (preferred). The NAME property should contain the name of the block, and the DEPENDS property should contain a space
;; separated list of block names that this block depends on.
;; These properties will be applied to all code blocks in the subtree (see \"Properties and Columns\" in the org manual for
;; more details).
;; 
;; The NAME property can be overridden on a per block basis by adding a :name header arg to a block, and dependencies can be
;; augmented by adding a :depends header arg (see \"Header arguments\" in the org manual).
;; However it is recommended to keep a separate subtree for each code block and use properties for defining headers and names
;; since then you can get a column view of the dependencies (see below).
;; 
;; A block will not be loaded until all of its dependencies have been loaded.
;; 
;;;  Tags and TODO states 
;; 
;; You can tag your subtrees and use tag matches to specify which blocks to evaluate in calls to `org-dotemacs-load-file'
;; and `org-dotemacs-load-default'. See \"Matching tags and properties\" in the org manual for more information on tag matches.
;; 
;; Also, by default any blocks in a subtree marked with a todo state of BROKEN will not be evaluated.
;; You can specify which TODO states to include/exclude for evaluation by customizing the `org-dotemacs-include-todo' and
;; `org-dotemacs-exclude-todo' options.
;; 
;; To add the BROKEN state to the list of todo states for the file you need to add buffer-wide todo states by adding a line
;; like this somewhere in your org file (see \"Per file keywords\" in the org manual).
;; 
;; #+TODO: BROKEN CHECK TODO
;; 
;;;  Columns View 
;; 
;; If you use properties for defining names and dependencies then you can get a nice column view of your code subtrees
;; with the following columns view specification:
;; 
;; #+COLUMNS: %35ITEM %15NAME %35DEPENDS %15TAGS %TODO
;; 
;; This can be placed anywhere in your dotemacs org file.
;; Then if you press C-c C-x C-c on the toplevel header for your code blocks you'll get a column view that allows you
;; to easily change the names, dependencies, tags and todo states.
;; 
;;;  Error handling 
;; 
;; Error handling can be controlled by customizing `org-dotemacs-error-handling' or by setting the error-handling
;; command line option when starting emacs.
;; By default code blocks with unmet dependencies or errors are skipped over as soon as an error is encountered,
;; but you can also specify that org-dotemacs should halt or try to reload the blocks.
;; In the latter case each time a new block is successfully loaded, any unsuccessful blocks will be retried.
;; 
;;;  Command line options 
;; 
;; org-dotemacs.el will look for two command line options when loaded: error-handling (for setting the value of
;; `org-dotemacs-error-handling') and tag-match (for specifying which headers to load).
;; For example if you enter the following at the command line:
;; 
;;        emacs --error-handling retry --tag-match \"settings-mouse\"
;; 
;; Then only code blocks tagged \"settings\" but not \"mouse\" will be loaded, and org-dotemacs will try to reload any
;; blocks that have errors.
;; 
;;;  Installation 
;; 
;; Put org-dotemacs.el in a directory in your load-path, e.g. ~/.emacs.d/
;; You can add a directory to your load-path with the following line in ~/.emacs
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;; where ~/elisp is the directory you want to add 
;; (you don't need to do this for ~/.emacs.d - it's added by default).
;; 
;; Then make sure you have an ~/.dotemacs.org file and add the following lines to
;; the end of your .emacs file:
;; 
;; (load-file \"~/.emacs.d/org-dotemacs.el\")
;; (org-dotemacs-load-default)
;; 
;; or if you want to just load code blocks matching a tag match:
;; 
;; (load-file \"~/.emacs.d/org-dotemacs.el\")
;; (org-dotemacs-load-default \"<TAG-MATCH>\")
;; 
;; To load a different org file either customize `org-dotemacs-default-file' or use the
;; `org-dotemacs-load-file' function, e.g:
;; 
;; (load-file \"~/.emacs.d/org-dotemacs.el\")
;; (org-dotemacs-load-file \"~/.emacs.d/my_emacs_config.org\" \"<TAG-MATCH>\")
;; 


"]) (org-cua-dwim . [(20120202 2134) nil "Org-mode and Cua mode compatibility layer" single ";;; Commentary: 
;; 
;;  To use this, just put in load path and then:
;;
;;  (require 'org-cua-dwim)
;;  (org-cua-dwim-activate)
;;  To activate, 
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
"]) (org-context . [(20130903 1458) ((org (7))) "Contextual capture and agenda commands for Org-mode" single ";;; Commentary:

;; This package advises `org-capture' and `org-agenda' to allow
;; contextual capture templates and agenda commands.
;;
;; See documentation on https://github.com/thisirs/org-context#org-context

;;; Installation:

;; Put the following in your .emacs:
;;
;; (require 'org-context)
;; (org-context-activate)
;;
;; and customize `org-context-capture-alist' and `org-context-capture'
;; for contextual captures and `org-context-agenda-alist'
;; `org-context-agenda' for custom commands.

;;; Code

(require 'org)

(defvar org-context-capture-alist
  nil
  \"Alist that specifies contextual capture templates.

Each element is of the form (CONDITION . TEMPLATE-LIST) where
CONDITION is either a symbol matching a major mode or a regular
expression matching the buffer file-name or the buffer name and
TEMPLATE-LIST is a list contextual capture templates as described in
the Org manual that will be added to the set of default ones.\")

(defvar org-context-capture nil
  \"Buffer local variable that holds the templates definitions.\")
(make-variable-buffer-local 'org-context-capture)
(put 'org-context-capture 'safe-local-variable 'org-context-capture-safe-p)

(defun org-context-capture-safe-p (templates)
  \"Return non-nil if the list of capture templates TEMPLATES is safe.

A template is considered safe if it does not have to evaluate
arbitrary functions.\"
  (let ((safe t) template)
    (if (listp templates)
        (while (and templates safe)
          (setq template (car templates))
          (if (and
               (listp template)
               (= (length template) 5)
               (or
                (and
                 (consp (nth 3 template))
                 (or
                  (string-match \"function$\"
                                (symbol-name (car (nth 3 template))))
                  (and (string-match \"^file\"
                                     (symbol-name (car (nth 3 template))))
                       (not (string-or-null-p (cadr (nth 3 template)))))))
                (string-match \"%(\" (nth 4 template))))
              (setq safe nil)
            (setq templates (cdr templates))))
      (setq safe nil))
    safe))

(defvar org-context-agenda-alist
  nil
  \"Alist of filename patterns vs corresponding custom agenda
  list.\")

(defvar org-context-agenda nil
  \"Buffer local variable that holds the custom agenda commands.\")
(make-variable-buffer-local 'org-context-agenda)
(put 'org-context-agenda 'safe-local-variable 'org-context-agenda-safe-p)

(defun org-context-agenda-safe-p (commands)
  \"Return non-nil if the list of agenda commands COMMANDS is safe.

An agenda command is considered safe if it does not have to evaluate
arbitrary functions.\"
  (let ((safe t)
        (keywords '(agenda agenda* alltodo search stuck tags tags-todo
                           todo tags-tree todo-tree occur-tree))
        command)
    (if (listp commands)
        (while (and commands safe)
          (setq command (car commands))
          (if (and (listp command)
                   (> (length command) 2)
                   (if (stringp (nth 1 command))
                       (or (functionp (nth 2 command))
                           (and (symbolp (nth 2 command))
                                (fboundp (nth 2 command)))
                           (functionp (nth 3 command))
                           (and (symbolp (nth 3 command))
                                (fboundp (nth 3 command))))
                     (or (functionp (nth 1 command))
                         (and (symbolp (nth 1 command))
                              (fboundp (nth 1 command)))
                         (functionp (nth 2 command))
                         (and (symbolp (nth 2 command))
                              (fboundp (nth 2 command))))))
              (setq safe nil)
            (setq commands (cdr commands))))
      (setq safe nil))
    safe))

(defvar org-context-capture-shortcut
  '((question
     \"q\" \"Question\" entry
     (file place-holder)
     \"* QUESTION %?\\n  OPENED: %U\")
    (todo
     \"t\" \"Todo\" entry
     (file place-holder)
     \"* TODO %?\\n  OPENED: %U\")
    (todo
     \"t\" \"Todo\" entry
     (file place-holder)
     \"* TODO %? %()\\n  OPENED: %U\"))
  \"Alist of symbols vs their corresponding template.
This is used in `org-context-capture-alist' or
`org-context-capture' to shorten the template definition.\")

(defvar org-context-agenda-shortcut
  '((todo \"t\" alltodo \"\")
    (agenda \"a\" \"\" agenda \"\"))
  \"Alist of symbols vs their corresponding agenda command.
This is used in `org-context-agenda-alist' or
`org-context-agenda' to shorten the agenda command definition.\")

(defvar org-context-add-overridden t
  \"Add overridden templates in a sub-menu if non-nil.\")

(defun org-context-capture--expand-target (template directory &optional replace)
  \"Modify the targeted Org file of the capture template TEMPLATE.

If the path of the targeted Org file exists and is not absolute,
expand it against DIRECTORY. If REPLACE is given use it as
file-name and expand it against DIRECTORY.\"
  (if (and (string-match \"\\\\`file\" (symbol-name (car (nth 3 template))))
           (or replace
               (not (and (stringp (cadr (nth 3 template)))
                         (file-name-absolute-p (cadr (nth 3 template)))))))
      (append
       (list (car template) (nth 1 template) (nth 2 template)
             (append (list (car (nth 3 template))
                           (expand-file-name
                            (or replace (cadr (nth 3 template))) directory))
                     (cddr (nth 3 template))))
       (nthcdr 4 template))
    template))

(defun org-context-capture--expand-stolen (template directory)
  \"Expand the stolen template TEMPLATE.\"
  (let (temp key stolen file desc)
    (cond
     ((stringp template)
      (setq stolen template
            key template))

     ((symbolp template)
      (setq stolen template))

     ((listp template)
      (setq key (car template))
      (let* ((rest (cadr template))
             (rest (if (listp rest) rest (list rest))))
        (setq stolen (nth 0 rest)
              file (nth 1 rest)
              desc (nth 2 rest)))))

    (setq file (or file \"todo.org\"))

    (setq temp
          (if (stringp stolen)
              (assoc stolen org-capture-templates)
            (cdr (assoc stolen org-context-capture-shortcut))))

    ;; Check that we did steal a template
    (unless temp
      (error \"Unable to steal template!\"))

    ;; Replace key
    (if key (setq temp (cons key (cdr temp))))

    ;; Modify org file path in temp
    (setq temp (org-context-capture--expand-target temp directory file))

    ;; Set description if any
    (if desc (setq temp (cons (car temp) (cons desc (cddr temp)))))

    temp))

(defun org-context-capture--expand (templates directory)
  \"Expand all capture templates in the list of templates TEMPLATES.
Eventually use DIRECTORY to build the path to the targeted Org
files.\"
  (mapcar
   (lambda (temp)
     (if (and (listp temp)
              (= (length temp) 2)
              (stringp (cadr temp))
              (> (length (cadr temp)) 2))
         ;; This template is a sub-menu, return as is.
         temp

       (if (and (listp temp) (> (length temp) 2))
           (setq temp (org-context-capture--expand-target temp directory))
         (setq temp (org-context-capture--expand-stolen temp directory)))

       temp))
   templates))

(defun org-context-capture-templates ()
  \"Return a set of capture templates including contextual ones.

This function looks into `org-context-capture-alist' or
`org-context-capture' to see if there is any matching capture
templates.\"
  (let ((file-name (or buffer-file-name
                       (and (eq major-mode 'dired-mode)
                            default-directory)
                       (buffer-name)))
        (org-templates org-capture-templates)
        (alist org-context-capture-alist)
        condition templates directory merge overridden)

    ;; Set `templates' from local variable `org-context-capture' or
    ;; from `org-context-capture-alist' if `org-context-capture' is
    ;; not local. Set `directory' that might be used to have the path
    ;; of the targeted org file in case it is not specified in the
    ;; template.
    (if (local-variable-p 'org-context-capture)
        (setq templates org-context-capture
              directory (let ((dir-local (dir-locals-find-file file-name)))
                          (if dir-local
                              (if (listp dir-local)
                                  (car dir-local)
                                (file-name-directory dir-local))
                            default-directory)))
      (while alist
        (setq condition (caar alist))
        (cond
         ((and (symbolp condition) (eq condition major-mode))
          (setq templates (cdar alist)
                directory nil
                alist nil))
         ((and (stringp condition) (string-match condition file-name))
          (setq directory (and (file-name-absolute-p
                                (match-string 0 file-name))
                               (match-string 0 file-name))
                templates (cdar alist)
                alist nil))
         (t (setq alist (cdr alist))))))

    (when templates
      ;; Expand templates to Org templates
      (setq templates (org-context-capture--expand templates directory))

      ;; Merge contextual templates `templates' and default ones from
      ;; `org-templates' into `merge'

      ;; First add contextual templates
      (setq merge (reverse templates))

      ;; Then move templates from `org-templates' into `merge'
      ;; or `overridden' together with their eventual sub-menu items
      (while org-templates
        (let* ((template (car org-templates))
               (where (if (and (not (assoc (car template) merge))
                               (not (assoc (car template) templates)))
                          'merge 'overridden)))
          (set where (cons template (symbol-value where)))
          (while (and (setq org-templates (cdr org-templates))
                      (> (length (caar org-templates)) 1))
            (set where (cons (car org-templates) (symbol-value where))))))

      ;; And add overridden templates in sub-menu
      (when (and org-context-add-overridden overridden)
        (push '(\"o\" \"Overridden\") merge)
        (dolist (temp (nreverse overridden))
          (unless (or (stringp (cdr temp))
                      (> (length (car temp)) 1))
            (push (cons (concat \"o\" (car temp)) (cdr temp))
                  merge)))))

    (or (nreverse merge) org-capture-templates)))

(defadvice org-capture (around org-context-capture)
  \"Advice `org-capture' to allow contextual capture templates.\"
  (let ((org-capture-templates (org-context-capture-templates)))
    ad-do-it))

(defun org-context-agenda--expand-settings (command directory &optional files)
  \"Expand the agenda command COMMAND by adding an
org-agenda-buffer-name property and expanding org files path
against DIRECTORY.\"
  (let (type settings)

    ;; First normalize different versions
    (setq command
          (cond
           ((stringp (nth 1 command)) command)
           ((not (nth 1 command)) (cons (car command) (cons \"\" (cddr command))))
           (t (cons (car command) (cons \"\" (cdr command))))))

    ;; Settings is at a different place if type is a bloc agenda
    (setq type (nth 2 command))
    (if (listp type)
        (setq settings (nth 3 command))
      (setq settings (nth 4 command)))

    ;; Expand org-agenda-files key in type
    (when (listp type)
      (setq type
            (mapcar
             (lambda (sub-type)
               (let ((alist (nth 2 sub-type)))
                 (if alist
                     (cons (car sub-type)
                           (list (nth 1 sub-type)
                                 (org-context-agenda--expand-alist
                                  alist directory)))
                   sub-type)))
             (nth 2 command))))

    ;; Expand settings
    (setq settings
          (cons `(org-agenda-buffer-name
                  ,(format
                    \"*Agenda(%s:%s)*\"
                    (if directory
                        (file-name-nondirectory
                         (directory-file-name
                          directory)) \"??\")
                    (car command)))
                (org-context-agenda--expand-alist settings directory files)))

    (if (listp type)
        (if (nth 4 command)
            (list (car command) (nth 1 command) type settings (nth 4 command))
          (list (car command) (nth 1 command) type settings))
      (if (nth 5 command)
          (list (car command) (nth 1 command) type (nth 3 command) settings
                (nth 5 command))
        (list (car command) (nth 1 command) type (nth 3 command) settings)))))

(defun org-context-agenda--expand-alist (alist directory &optional files)
  \"Return a alist with all org path expanded\"
  (unless (assoc 'org-agenda-files alist)
    (setq alist (cons (cons 'org-agenda-files nil) alist)))
  (setq alist
        (mapcar (lambda (entry)
                  (if (eq (car entry) 'org-agenda-files)
                      (list 'org-agenda-files
                            (list 'quote
                                  (mapcar
                                   (lambda (file)
                                     (if (file-name-absolute-p file)
                                         file
                                       (expand-file-name file directory)))
                                   (or files (cadr (cadr entry))))))
                    entry))
                alist)))

(defun org-context-agenda--expand-stolen (command directory)
  \"Expand a regular agenda command.\"
  (let (key stolen files desc new-command)
    (cond
     ((stringp command)
      (setq stolen command
            key command))

     ((symbolp command)
      (setq stolen command))

     ((listp command)
      (setq key (car command))
      (let* ((rest (cadr command))
             (rest (if (listp rest) rest (list rest)))
             (f (nth 1 rest)))
        (setq stolen (nth 0 rest)
              files (if (listp f) f (list f))
              desc (nth 2 rest)))))

    (setq files (or files (list \"todo.org\")))

    (setq command (if (stringp stolen)
                      (assoc stolen org-agenda-custom-commands)
                    (cdr (assoc stolen org-context-agenda-shortcut))))

    ;; Check that we did steal a command
    (unless command
      (error \"Unable to steal agenda command!\"))

    ;; Replace key
    (if key (setq command (cons key (cdr command))))

    (setq command
          (cond
           ((stringp (nth 1 command)) command)
           ((not (nth 1 command)) (cons (car command) (cons \"\" (cddr command))))
           (t (cons (car command) (cons \"\" (cdr command))))))

    ;; Replace description
    (if desc
        (setq command (cons (car command) (cons desc (cddr command)))))

    (setq command
          (org-context-agenda--expand-settings
           command directory files))

    command))

(defun org-context-agenda--expand (commands directory)
  \"Expand all agenda commands in the list of commands COMMANDS.
Eventually use DIRECTORY to build the path to the targeted Org
files.\"
  (mapcar
   (lambda (command)
     (if (and (listp command) (stringp (cdr command)))
         command ; Sub-menu command, return as is

       ;; Expand if stolen
       (if (and (listp command) (> (length command) 2))
           ;; Add buffer-name and expand paths
           (setq command (org-context-agenda--expand-settings command directory))
         (setq command (org-context-agenda--expand-stolen command directory)))

       command))
   commands))

(defun org-context-agenda-commands ()
  \"Return a set of agenda commands including contextual ones.

This function looks into `org-context-agenda-alist' or
`org-context-agenda' to see if there is any matching custom
command.\"
  (let* ((file-name (or buffer-file-name
                        (and (eq major-mode 'dired-mode)
                             default-directory)
                        (buffer-name)))
         (org-commands org-agenda-custom-commands)
         (alist org-context-agenda-alist)
         condition commands directory merge overridden)

    (if (local-variable-p 'org-context-agenda)
        (setq commands org-context-agenda
              directory (let ((dir-local (dir-locals-find-file file-name)))
                          (if dir-local
                              (if (listp dir-local)
                                  (car dir-local)
                                (file-name-directory dir-local))
                            default-directory)))
      (while alist
        (setq condition (caar alist))
        (cond
         ((and (symbolp condition) (eq condition major-mode))
          (setq commands (cdar alist)
                directory nil
                alist nil))
         ((and (stringp condition) (string-match condition file-name))
          (setq directory (and (file-name-absolute-p
                                (match-string 0 file-name))
                               (match-string 0 file-name))
                commands (cdar alist)
                alist nil))
         (t (setq alist (cdr alist))))))

    (when commands
      ;; Expand commands to Org agenda commands
      (setq commands (org-context-agenda--expand commands directory))

      ;; Merge contextual agenda commands `commands' and default ones
      ;; from `org-commands' into `merge'

      ;; First add contextual commands
      (setq merge (reverse commands))

      ;; Then move commands from `org-commands' into `merge'
      ;; or `overridden' together with their eventual sub-menu items
      (while org-commands
        (let* ((command (car org-commands))
               (where (if (and (not (assoc (car command) merge))
                               (not (assoc (car command) commands)))
                          'merge 'overridden)))
          (set where (cons command (symbol-value where)))
          (while (and (setq org-commands (cdr org-commands))
                      (> (length (caar org-commands)) 1))
            (set where (cons (car org-commands) (symbol-value where))))))

      ;; And add overridden commands in sub-menu
      (when (and org-context-add-overridden overridden)
        (push '(\"o\" . \"Overridden\") merge)
        (dolist (command (nreverse overridden))
          (unless (stringp (cdr command))
            (push (cons (concat \"o\" (car command)) (cdr command))
                  merge)))))

    (or (nreverse merge) org-agenda-custom-commands)))

(defadvice org-agenda (around org-context-agenda)
  \"Allow contextual agenda commands.

The function `org-context-agenda-commands' is called to retrieve
the new set of custom commands.\"
  (let ((org-agenda-custom-commands (org-context-agenda-commands)))
    ad-do-it))

;;;###autoload
(defun org-context-agenda-from (file-or-buffer key)
  (let (org-agenda-context-commands buffer)
    (cond
     ((bufferp file-or-buffer)
      (setq buffer file-or-buffer))
     ((get-buffer file-or-buffer)
      (setq buffer (get-buffer file-or-buffer)))
     ((and (stringp file-or-buffer) (find-buffer-visiting file-or-buffer))
      (setq buffer (find-buffer-visiting file-or-buffer)))
     ((stringp file-or-buffer)
      (setq buffer (find-file-noselect file-or-buffer t)))
     (t
      (error \"Unknown argument %s\" file-or-buffer)))
    (with-current-buffer buffer
      (org-agenda nil key))))

;;;###autoload
(defun org-context-activate (&optional arg)
  \"Activate `org-context' if ARG is non-numeric or >= 0.\"
  (interactive \"P\")
  (if (< (prefix-numeric-value arg) 0)
      (progn (ad-deactivate 'org-capture)
             (ad-deactivate 'org-agenda))
    (ad-activate 'org-capture)
    (ad-activate 'org-agenda)))

(provide 'org-context)

;;; org-context.el ends here
"]) (org-bullets . [(20131106 1108) nil "Show bullets in org-mode as UTF-8 characters" single ";;; Commentary:

;; The project is hosted at https://github.com/sabof/org-bullets
;; The latest version, and all the relevant information can be found there.

"]) (org-agenda-property . [(20131007 1013) ((emacs (24 2))) "Display org properties in the agenda buffer." single ";;; Commentary:

;; org-agenda-property is a package which displays the properties of
;; an org item beside (or below) the item's title in the agenda
;; buffer. Customize the variable `org-agenda-property-list' to add
;; which properties you which to show.

;;; Instructions:

;; INSTALLATION

;;	If you installed from Melpa, you shouldn't need to do anything
;;	else. Just customize `org-agenda-property-list' and call your
;;	agenda buffer (tipically `org-agenda-list') to see the magic.

;;      If you installed manually, just make sure it's in your
;;      load-path and call
;;		(require 'org-agenda-property)

;; Variables
;; 
;; 	All variables can be edited by running
;; 	`org-agenda-property-customize' (seriously, chech it out, they
;; 	are just a few :-)). The documentations are mostly self
;; 	explanatory, I list here only the most important two.

;;	`org-agenda-property-list'
;;              This should be a list of all properties you want
;;              displayed in the buffer. Default is \"LOCATION\".

;; 	`org-agenda-property-position'
;; 		This is where you want the properties to be displayed
;; 		(besides the title or below the title?).

"]) (openwith . [(20120531 1436) nil "Open files with external programs" single ";;; Commentary:

;; This lets you associate external applications with files so that
;; you can open them via C-x C-f, with RET in dired, etc.

;; Copy openwith.el to your load-path and add to your .emacs:

;;    (require 'openwith)
;;    (openwith-mode t)

;; To customize associations etc., use:

;;    M-x customize-group RET openwith RET

"]) (openstack-cgit-browse-file . [(20130819 227) nil "Browse the current file in OpenStack cgit" single ";;; Commentary:

;; Call `openstack-cgit-browse-file' (for the git blob) to browse
;; current file on OpenStack cgit.

;; Inspired by github-browse-file for OpenStack and cgit
;; from Ozan Sener <ozan@ozansener.com> See:
;; https://github.com/osener/github-browse-file

"]) (open-junk-file . [(20130131 720) nil "Open a junk (memo) file to try-and-error" single ";;; Commentary:
;;
;; M-x `open-junk-file' opens a new file whose filename is derived from
;; current time. You can write short program in it. It helps to
;; try-and-error programs.
;;
;; For example, in Emacs Lisp programming, use M-x `open-junk-file'
;; instead of *scratch* buffer. The junk code is SEARCHABLE.
;;
;; In Ruby programming, use M-x `open-junk-file' and
;; write a script with xmpfilter annotations. It is the FASTEST
;; methodology to try Ruby methods, Irb is not needed anymore.
;; Xmpfilter is available at http://eigenclass.org/hiki/rcodetools

"]) (oneonone . [(20131227 143) ((hexrgb (0))) "Frame configuration that uses one frame per window." single ";;; Commentary:
;;
;;    Frame configuration that uses one frame per window.
;;
;;  This library is part of One-on-One Emacs, a collection of
;;  libraries that try to make Emacs more frame-oriented and less
;;  window-oriented.
;;
;;  This library sets up Emacs to use multiple frames: individual
;;  frames are used, by default, instead of Emacs windows.  That is,
;;  the default is to use a frame for each Emacs window: one window on
;;  one frame.
;;
;;  You can configure each of the frames defined here.
;;
;;  Default properties are defined here for normal frames and
;;  \"special\" frames, which show \"special-display buffers\" (see Emacs
;;  manual for info on such frames).
;;
;;  In addition, these user options control the creation of three
;;  separate, specialized frames:
;;
;;    - `1on1-*Help*-frame-flag' - *Help* buffer frame
;;    - `1on1-*Completions*-frame-flag' - *Completions* buffer frame
;;    - `1on1-minibuffer-frame-flag' - minibuffer frame
;;
;;  Buffers *Help* and *Completions* are always displayed in their own
;;  frames.  In addition, if `1on1-*Help*-frame-flag' or
;;  `1on1-*Completions*-frame-flag' is non-nil, then the *Help* or
;;  *Completions* frame has a special (customizable) appearance.
;;
;;  If `1on1-minibuffer-frame-flag' is non-nil (the default value),
;;  then the minibuffer is shown in its own frame,
;;  `1on1-minibuffer-frame'; this is the only frame to have a
;;  minibuffer.  If you customize `1on1-minibuffer-frame-flag' to nil,
;;  then each frame will have its own minibuffer, as usual, and there
;;  will be no standalone minibuffer frame.
;;
;;  By default, if you use a standalone minibuffer frame, it is
;;  automatically sized to the full width of your display and placed
;;  at the bottom of the display.
;;
;;  If `1on1-fit-minibuffer-frame-flag' is non-nil,
;;  `1on1-minibuffer-frame-flag' is non-nil, and you also use library
;;  `fit-frame.el', then, whenever the minibuffer is active, the
;;  minibuffer frame height is automatically adjusted to fit its
;;  content after each command or user event (e.g. each key press).
;;  Options `1on1-fit-minibuffer-frame-max-height' and
;;  `1on1-fit-minibuffer-frame-max-height-percent' define the maximum
;;  possible height for this behavior.  In addition, if you bind
;;  `1on1-fit-minibuffer-frame' to a key (I use `C-o'), then you can
;;  use that key repeatedly to increase the height by one line, even
;;  beyond the maximum.
;;
;;  To help you perceive changes to different minibuffer recursion
;;  levels, the background color of the minibuffer frame is changed
;;  slightly with each recursion-depth change.
;;
;;  This library is especially useful if used in combination with
;;  One-on-One Emacs libraries `autofit-frame.el', which automatically
;;  fits frames to their sole window, and `fit-frame.el', which lets
;;  you fit a frame to its selected window manually.  Library
;;  `autofit-frame.el' uses library `fit-frame.el'.
;;
;;  Because Emacs is not really designed to be frame-oriented, there
;;  are many built-in and standard functions that produce
;;  less-than-optimal results when frames, instead of windows, are the
;;  default.  In other One-on-One Emacs libraries, I have fixed most
;;  of these built-in functions to play well with frames.
;;
;;  For more information on One-on-One Emacs see
;;  http://www.emacswiki.org/cgi-bin/wiki/OneOnOneEmacs.
;;
;;  To use this library, put the following at the *END* of your init
;;  file, `.emacs' (or `_emacs').  In particular, if your init file
;;  contains a `custom-set-variables' expression, then the following
;;  must appear *AFTER* that expression, in order for this to take
;;  into account your customizations of any `1on1-' user options.
;;
;;    (require 'oneonone)
;;    (1on1-emacs)
;;
;;  Initial frame: By default, the initial Emacs frame is like all
;;  other normal (non-special-display) frames; that is,
;;  `initial-frame-alist' effectively uses the frame properties
;;  defined in `default-frame-alist'.  If you would like the initial
;;  frame to be different, set `default-frame-alist' to nil after
;;  requiring `oneonone.el' but before executing `1on1-emacs':
;;
;;    (require 'oneonone)
;;    (setq default-frame-alist nil)
;;    (setq initial-frame-alist '((background-color . \"White\"))); e.g.
;;    (1on1-emacs)
;;
;;  If you want the text cursor to change to a box when Emacs is idle,
;;  then add this line also to your init file:
;;
;;    (toggle-box-cursor-when-idle 1) ; Turn on box cursor when idle.
;;
;;  Info and Customize frames: I recommend that you put the following
;;  code in your init file, so that Info and Customize buffers will
;;  display in their own frames.  Which code to use depends on your
;;  version of GNU Emacs.
;;
;;    (cond ((< emacs-major-version 21)
;;           (remove-hook 'same-window-buffer-names \"*info*\"))
;;          ((= emacs-version 21)
;;           (remove-hook 'same-window-buffer-names \"*info*\")
;;           (remove-hook 'same-window-regexps \"\\\\`\\\\*Customiz.*\\\\*\\\\'\"))
;;          (t
;;           (remove-hook 'same-window-regexps \"\\\\*info\\\\*\\\\(\\\\|<[0-9]+>\\\\)\")
;;           (remove-hook 'same-window-regexps \"\\\\`\\\\*Customiz.*\\\\*\\\\'\")))
;;
;;  Recommended key bindings (requires library `fit-frame.el'):
;;
;;    (define-key minibuffer-local-map \"\\C-o\"
;;                '1on1-fit-minibuffer-frame)
;;    (define-key minibuffer-local-must-match-map \"\\C-o\"
;;                '1on1-fit-minibuffer-frame)
;;    (define-key minibuffer-local-completion-map \"\\C-o\"
;;                '1on1-fit-minibuffer-frame)
;;
;;
;;  Notes on user options defined here:
;;  ---------------------------------
;;
;;  Some user options are used here only as conveniences to define
;;  frame-parameter alists.  They are defined using `defvar', not
;;  `defcustom', because you cannot use Customize to define them
;;  independently of the alist user options they help to define.  The
;;  alists themselves are the variables to customize.  If you want to
;;  change the `defvar' variables individually and then use them to
;;  set the alist variables, then use `setq', not Customize, to change
;;  them, and restart Emacs for their changes to take effect.
;;
;;  Changes to any user options defined here with `defcustom' will
;;  take effect as soon as `1on1-emacs' is executed, so you can do
;;  `M-x 1on1-emacs' to see their changes (no need to restart
;;  Emacs).
;;
;;  User options `1on1-color-minibuffer-frame-on-setup-increment' and
;;  `1on1-color-minibuffer-frame-on-exit-increment' determine how much
;;  to change the color of the minibuffer frame when the minibuffer is
;;  entered and exited.  They are hue increments, and should be
;;  opposite in sign.
;;
;;  They should cancel each other out, so that the color returns to
;;  what it was initially at any given minibuffer depth.  However,
;;  because of the way HSV and RGB color-component conversion works,
;;  the best cancellation does not necessarily occur when these
;;  options have the same absolute value.  And how much their absolute
;;  values should differ depends on that magnitude.  It is best to
;;  just set one of these to an increment you like, and then fiddle
;;  with the other until they more or less cancel.
;;
;;
;;  Commands defined here:
;;
;;    `1on1-emacs', `1on1-fit-minibuffer-frame',
;;    `1on1-ORIG-abort-recursive-edit', `1on1-ORIG-top-level',
;;    `1on1-ORIG-y-or-n-p', `1on1-other-frame',
;;    `1on1-set-box-cursor-when-idle-interval',
;;    `1on1-set-cursor-type', `1on1-toggle-box-cursor-when-idle'.
;;
;;  Customizable user options defined here:
;;
;;    `1on1-*Completions*-frame-flag',
;;    `1on1-*Completions*-frame-at-right-flag',
;;    `1on1-*Help*-frame-flag',
;;    `1on1-active-minibuffer-frame-background',
;;    `1on1-active-mode-line-background',
;;    `1on1-change-cursor-on-overwrite/read-only-flag',
;;    `1on1-color-minibuffer-frame-on-exit-increment',
;;    `1on1-color-minibuffer-frame-on-setup-increment',
;;    `1on1-color-mode-line-flag',
;;    `1on1-completions-frame-background',
;;    `1on1-completions-frame-mouse+cursor-color',
;;    `1on1-completions-frame-width',
;;    `1on1-completions-frame-zoom-font-difference',
;;    `1on1-default-frame-cursor-color',
;;    `1on1-default-frame-cursor-color-input-method',
;;    `1on1-default-frame-cursor-type',
;;    `1on1-default-frame-cursor-type-overwrite/read-only',
;;    `1on1-default-frame-alist', `1on1-help-frame-background',
;;    `1on1-help-frame-mouse+cursor-color',
;;    `1on1-inactive-minibuffer-frame-background',
;;    `1on1-inactive-mode-line-background',
;;    `isearch-minibuffer-frame-background',
;;    `1on1-minibuffer-frame-alist', `1on1-minibuffer-frame-flag',
;;    `1on1-minibuffer-frame-left',
;;    `1on1-minibuffer-frame-top/bottom',
;;    `1on1-minibuffer-frame-width',
;;    `1on1-minibuffer-frame-width-percent',
;;    `1on1-remap-other-frame-command-flag',
;;    `1on1-special-display-frame-alist'.
;;
;;  Non-customizable user options defined here:
;;
;;    `1on1-default-frame-background', `1on1-default-frame-font',
;;    `1on1-default-frame-foreground',
;;    `1on1-default-frame-menu-bar-lines',
;;    `1on1-default-frame-mouse-color', `1on1-default-frame-size',
;;    `1on1-default-frame-upper-left-corner',
;;    `1on1-default-special-frame-background',
;;    `1on1-default-special-frame-cursor-color',
;;    `1on1-default-special-frame-font',
;;    `1on1-default-special-frame-foreground',
;;    `1on1-default-special-frame-menu-bar-lines',
;;    `1on1-default-special-frame-mouse-color',
;;    `1on1-default-special-frame-size',
;;    `1on1-default-special-frame-upper-left-corner',
;;    `1on1-minibuffer-frame-background',
;;    `1on1-minibuffer-frame-cursor-color',
;;    `1on1-minibuffer-frame-font',
;;    `1on1-minibuffer-frame-foreground',
;;    `1on1-minibuffer-frame-height',
;;    `1on1-minibuffer-frame-mouse-color'.
;;
;;  Non-interactive functions defined here:
;;
;;    `1on1-box-cursor-when-idle',
;;    `1on1-change-cursor-on-input-method',
;;    `1on1-change-cursor-on-overwrite/read-only',
;;    `1on1-color-minibuffer-frame-on-exit',
;;    `1on1-color-minibuffer-frame-on-setup',
;;    `1on1-color-isearch-minibuffer-frame',
;;    `1on1-display-*Completions*-frame', `1on1-display-*Help*-frame',
;;    `1on1-filter-no-default-minibuffer',
;;    `1on1-flash-ding-minibuffer-frame',
;;    `1on1-minibuffer-prompt-end', `1on1-reset-minibuffer-frame',
;;    `1on1-remove-if', `1on1-set-minibuffer-frame-top/bottom',
;;    `1on1-set-minibuffer-frame-width',
;;    `1on1-setup-minibuffer-frame-coloring', `1on1-setup-mode-line',
;;
;;  Non-option variables defined here:
;;
;;    `1on1-box-cursor-when-idle-p',
;;    `1on1-box-cursor-when-idle-interval',
;;    `1on1-box-cursor-when-idle-timer', `1on1-last-cursor-type',
;;    `1on1-minibuffer-frame'.
;;
;;
;;  ***** NOTE: These EMACS PRIMITIVES have been REDEFINED HERE:
;;
;;  `abort-recursive-edit', `top-level' -
;;               Reset color of minibuffer frame to \"inactive\" color.
;;
;;  `y-or-n-p' - Temporarily color minibuffer frame to \"active\" color.
;;
;;
;;  Acknowledgements:
;;
;;  The cursor-changing on input method and read-only was inspired by
;;  Juri Linkov <juri@jurta.org>.  Joe Casadonte <joc@netaxs.com>
;;  wrote a similar hook (`joc-cursor-type-set-hook'), which he got
;;  from Steve Kemp...
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
"]) (on-screen . [(20131212 1954) nil "guide your eyes while scrolling" single ";;; Commentary:

;; Scrolling can be distracting because your eyes may lose
;; orientation.  This library implements a minor mode that highlights
;; the previously visible buffer part after each scroll.
;;
;; Installation: Put this library somewhere in your load-path, or
;; install via M-x package-list-packages.  Then add to your init-file:
;;
;;   (require 'on-screen)
;;
;; To invoke on-screen globally for all buffers, also add
;;
;;   (on-screen-global-mode +1)
;;
;; Alternatively you can use the buffer local version `on-screen-mode'.
;; For example, add this line to your init file:
;;
;;   (add-hook 'Info-mode-hook 'on-screen-mode)
;;
;; to enable it in all Info buffers.
;;
;; By default, fringe markers are used for highlighting - see
;; `on-screen-highlight-method' to change that.  Type M-x
;; customize-group RET on-screen RET to see what else can be
;; configured.  If you use a configuration file (.emacs), you may also
;; want to define mode specific settings by using buffer local
;; variables.  For example, to use non intrusive fringe markers by
;; default, but transparent overlays in w3m, you would add
;;
;;   (add-hook
;;    'w3m-mode-hook
;;    (lambda ()
;;      (set (make-local-variable 'on-screen-highlight-method)
;;       'shadow)))
;;
;; to your .emacs.
;;
;; If you use transparent overlays for highlighting and there is the
;; library \"hexrgb.el\" in your `load-path', it will be used to compute
;; highlighting colors dynamically instead of using constant faces.
;; I.e. if you use non-default background colors (e.g. from custom
;; themes), on-screen will try to perform highlighting with a
;; suitable, slightly different color.  See
;; `on-screen-highlighting-to-background-delta' to control this.
;;
;;
;; Implementation notes (mainly for myself):
;;
;; Implementing this functionality is not as straightforward as one
;; might think.  There are commands that scroll other windows than the
;; current one.  Not only scrolling commands can scroll text - also
;; editing or even redisplay can cause windows to scroll.  There is
;; weird stuff such as folding and narrowing, influencing the visible
;; buffer part.  And although highlighting is realized in the
;; displayed buffers (with overlays), it must be organized on a
;; per-window basis, because different buffer parts may be displayed
;; in different windows, and their highlightings must not interfere.
;;
;; That all makes it necessary to observe windows via hacks in
;; different hooks, and to manage information about buffers, visible
;; parts and timers in a data structure (`on-screen-data').  It is
;; realized as an association list whose keys are windows.  There are
;; some pitfalls - e.g. the data can be out of date if the window
;; configuration has changed and windows display different buffers
;; now.  The data must be updated, but not simply be thrown away,
;; because the highlightings in the old buffers must be removed
;; nonetheless.
;;
;;
;; Acknowledgments:
;;
;; This library was inspired by a similar feature of the \"Conqueror\"
;; web browser.
;;
;; Thanks for Drew Adams for testing and contributions.




"]) (omnisharp . [(20140112 2333) ((json (1 2)) (dash (1 8 0)) (popup (0 5)) (auto-complete (1 4)) (flycheck (0 13))) "Omnicompletion (intellisense) and more for C#" single ";;; Commentary:
;; omnisharp-emacs is a port of the awesome OmniSharp server to the
;; Emacs text editor. It provides IDE-like features for editing files
;; in C# solutions in Emacs, provided by an OmniSharp server instance
;; that works in the background.
;;
;; See the project home page for more information.

;; Work in progress! Judge gently!
(require 'json)
(with-no-warnings
  (require 'cl))
(require 'files)
(require 'ido)
(require 'thingatpt)
(require 'dash)
(require 'compile)
(require 'dired)
(require 'popup)
(require 'etags)
(require 'flycheck)
(require 'auto-complete)

(defgroup omnisharp ()
  \"Omnisharp-emacs is a port of the awesome OmniSharp server to
the Emacs text editor. It provides IDE-like features for editing
files in C# solutions in Emacs, provided by an OmniSharp server
instance that works in the background.\"
  :group 'external
  :group 'csharp)

"]) (offlineimap . [(20130331 741) nil "Run OfflineIMAP from Emacs" single ";;; Commentary:
;; M-x offlineimap

;; We need comint for `comint-truncate-buffer'
(require 'comint)

(defgroup offlineimap nil
  \"Run OfflineIMAP.\"
  :group 'comm)

(defcustom offlineimap-buffer-name \"*OfflineIMAP*\"
  \"Name of the buffer used to run offlineimap.\"
  :group 'offlineimap
  :type 'string)

(defcustom offlineimap-command \"offlineimap -u Machine.MachineUI\"
  \"Command to run to launch OfflineIMAP.\"
  :group 'offlineimap
  :type 'string)

(defcustom offlineimap-buffer-maximum-size comint-buffer-maximum-size
  \"The maximum size in lines for OfflineIMAP buffer.\"
  :group 'offlineimap
  :type 'integer)

(defcustom offlineimap-enable-mode-line-p '(member
                                            major-mode
                                            '(offlineimap-mode
                                              gnus-group-mode
                                              wl-folder-mode))
  \"Whether enable OfflineIMAP mode line status display.
This form is evaluated and its return value determines if the
OfflineIMAP status should be displayed in the mode line.\"
  :group 'offlineimap)

(defcustom offlineimap-mode-line-style 'symbol
  \"Set what to display in mode-line.
If set to 'symbol, it will only display
`offlineimap-mode-line-symbol' with different colors based on
what OfflineIMAP is doing. If set to 'text, it will display the
action as a text in color instead of a single symbol.\"
  :group 'offlineimap
  :type '(choice (const :tag \"Symbol\" symbol)
                 (const :tag \"Action text\" text)))

(defcustom offlineimap-mode-line-symbol \"\342\234\211\"
  \"Symbol used to display OfflineIMAP status in mode-line.
This is used when `offlineimap-mode-line-style' is set to 'symbol.\"
  :group 'offlineimap
  :type 'string)

(defcustom offlineimap-mode-line-text \"OfflineIMAP: \"
  \"Text used to display OfflineIMAP status in mode-line.\"
  :group 'offlineimap
  :type 'string)

(defcustom offlineimap-timestamp nil
  \"Timestamp to add at the beginning of each OffsyncIMAP line.\"
  :type 'string
  :group 'offlineimap)

(defcustom offlineimap-event-hooks nil
  \"Hooks run when OfflineIMAP state changes.\"
  :type 'hook
  :group 'offlineimap)

(defvar offlineimap-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd \"q\") 'offlineimap-quit)
    (define-key map (kbd \"g\") 'offlineimap-resync)
    (define-key map (kbd \"K\") 'offlineimap-kill)
    map)
  \"Keymap for offlineimap-mode.\")

(defface offlineimap-msg-acct-face
  '((t (:foreground \"purple\")))
  \"Face used to highlight acct lines.\"
  :group 'offlineimap)

(defface offlineimap-msg-connecting-face
  '((t (:foreground \"gray\")))
  \"Face used to highlight connecting lines.\"
  :group 'offlineimap)

(defface offlineimap-msg-syncfolders-face
  '((t (:foreground \"blue\")))
  \"Face used to highlight syncfolders lines.\"
  :group 'offlineimap)

(defface offlineimap-msg-syncingfolders-face
  '((t (:foreground \"cyan\")))
  \"Face used to highlight syncingfolders lines.\"
  :group 'offlineimap)

(defface offlineimap-msg-skippingfolder-face
  '((t (:foreground \"cyan\")))
  \"Face used to highlight skippingfolder lines.\"
  :group 'offlineimap)

(defface offlineimap-msg-loadmessagelist-face
  '((t (:foreground \"green\")))
  \"Face used to highlight loadmessagelist lines.\"
  :group 'offlineimap)

(defface offlineimap-msg-syncingmessages-face
  '((t (:foreground \"blue\")))
  \"Face used to highlight syncingmessages lines.\"
  :group 'offlineimap)

(defface offlineimap-msg-copyingmessage-face
  '((t (:foreground \"orange\")))
  \"Face used to highlight copyingmessage lines.\"
  :group 'offlineimap)

(defface offlineimap-msg-deletingmessages-face
  '((t (:foreground \"red\")))
  \"Face used to highlight deletingmessages lines.\"
  :group 'offlineimap)

(defface offlineimap-msg-deletingmessage-face
  '((t (:foreground \"red\")))
  \"Face used to highlight deletingmessage lines.\"
  :group 'offlineimap)

(defface offlineimap-msg-addingflags-face
  '((t (:foreground \"yellow\")))
  \"Face used to highlight addingflags lines.\"
  :group 'offlineimap)

(defface offlineimap-msg-deletingflags-face
  '((t (:foreground \"pink\")))
  \"Face used to highlight deletingflags lines.\"
  :group 'offlineimap)

(defface offlineimap-error-face
  '((t (:foreground \"red\" :weight bold)))
  \"Face used to highlight status when offlineimap is stopped.\"
  :group 'offlineimap)

(defvar offlineimap-mode-line-string nil
  \"Variable showed in mode line to display OfflineIMAP status.\")

(put 'offlineimap-mode-line-string 'risky-local-variable t) ; allow properties

(defun offlineimap-make-buffer ()
  \"Get the offlineimap buffer.\"
  (let ((buffer (get-buffer-create offlineimap-buffer-name)))
    (with-current-buffer buffer
      (offlineimap-mode))
    buffer))

(defun offlineimap-propertize-face (msg-type action text)
  \"Propertize TEXT with correct face according to MSG-TYPE and ACTION.\"
  (let* ((face-sym (intern (concat \"offlineimap-\" msg-type \"-\" action \"-face\"))))
    (if (facep face-sym)
        (propertize text 'face face-sym)
      text)))

(defun offlineimap-switch-to-buffer (e)
  \"Go to OfflineIMAP buffer.\"
  (interactive \"e\")
  (save-selected-window
    (select-window
     (posn-window (event-start e)))
    (switch-to-buffer (get-buffer offlineimap-buffer-name))))

(defvar offlineimap-mode-line-map
  (let ((map (make-sparse-keymap)))
    (define-key map (vector 'mode-line 'mouse-2) 'offlineimap-switch-to-buffer)
    map)
  \"Keymap used in mode line.\")

(defun offlineimap-update-mode-line (process)
  \"Update mode line information about OfflineIMAP PROCESS.\"
  (setq offlineimap-mode-line-string
        (propertize
         (concat \" [\" offlineimap-mode-line-text
                 (let ((status (process-status process)))
                   (if (eq status 'run)
                       (let ((msg-type (process-get process :last-msg-type))
                             (action (process-get process :last-action)))
                         (offlineimap-propertize-face msg-type action
                                                      (if (eq offlineimap-mode-line-style 'text)
                                                          action
                                                        offlineimap-mode-line-symbol)))
                    (propertize (symbol-name status) 'face 'offlineimap-error-face)))
                 \"]\")
         'mouse-face 'mode-line-highlight
         'help-echo \"mouse-2: Go to OfflineIMAP buffer\"
         'local-map offlineimap-mode-line-map))
  (force-mode-line-update))

(defun offlineimap-insert (process text)
  \"Insert TEXT in PROCESS buffer.\"
  (let ((buffer (process-buffer process)))
    (when (buffer-live-p buffer)
      (with-current-buffer buffer
        (let ((inhibit-read-only t))
          ;; If the cursor is at the end, append text like we would be in
          ;; \"tail\".
          (if (eq (point) (point-max))
              (progn
                (when offlineimap-timestamp
                  (insert (format-time-string offlineimap-timestamp)))
                (insert text)
                (set-marker (process-mark process) (point)))
            ;; But if not, let the cursor where it is, so `save-excursion'.
            (save-excursion
              (goto-char (point-max))
              (when offlineimap-timestamp
                (insert (format-time-string offlineimap-timestamp)))
              (insert text)
              (set-marker (process-mark process) (point)))))))))

(defun offlineimap-process-filter (process msg)
  \"Filter PROCESS output MSG.\"
  (dolist (msg-line (nbutlast (split-string msg \"[\\n\\r]+\")))
    (let* ((msg-data (split-string msg-line \":\"))
           (msg-type (nth 0 msg-data))
           (action (nth 1 msg-data))
           (thread-name (nth 2 msg-data))
           (buffer (process-buffer process)))
      (when (buffer-live-p buffer)
        (with-current-buffer buffer
          (offlineimap-insert process
                              (offlineimap-propertize-face
                               msg-type
                               action
                               (concat thread-name \"::\" action \"\\n\")))
          (let ((comint-buffer-maximum-size offlineimap-buffer-maximum-size))
            (comint-truncate-buffer))))
      (process-put process :last-msg-type msg-type)
      (process-put process :last-action action)
      (offlineimap-update-mode-line process)
      (run-hook-with-args 'offlineimap-event-hooks msg-type action))))

(defun offlineimap-process-sentinel (process state)
  \"Monitor STATE change of PROCESS.\"
  (offlineimap-insert process (concat \"*** Process \" (process-name process) \" \" state))
  (offlineimap-update-mode-line process)
  (run-hook-with-args 'offlineimap-event-hooks state))

(defun offlineimap-mode-line ()
  \"Return a string to display in mode line.\"
  (when (eval offlineimap-enable-mode-line-p)
    offlineimap-mode-line-string))

;;;###autoload
(defun offlineimap ()
  \"Start OfflineIMAP.\"
  (interactive)
  (let* ((buffer (offlineimap-make-buffer)))
    (unless (get-buffer-process buffer)
      (let ((process (start-process-shell-command
                      \"offlineimap\"
                      buffer
                      offlineimap-command)))
        (set-process-filter process 'offlineimap-process-filter)
        (set-process-sentinel process 'offlineimap-process-sentinel))))
  (add-to-list 'global-mode-string '(:eval (offlineimap-mode-line)) t))

(defun offlineimap-quit ()
  \"Quit OfflineIMAP.\"
  (interactive)
  (kill-buffer (get-buffer offlineimap-buffer-name)))

(defun offlineimap-resync ()
  \"Send a USR1 signal to OfflineIMAP to force accounts synchronization.\"
  (interactive)
  (signal-process (get-buffer-process (get-buffer offlineimap-buffer-name)) 'SIGUSR1))

(defun offlineimap-kill (&optional arg)
  \"Send a TERM signal to OfflineIMAP.\"
  (interactive \"P\")
  (let ((sig (if arg 'SIGKILL 'SIGTERM)))
    (signal-process (get-buffer-process (get-buffer offlineimap-buffer-name)) sig)))

(define-derived-mode offlineimap-mode fundamental-mode \"OfflineIMAP\"
  \"A major mode for OfflineIMAP interaction.\"
  :group 'comm
  (setq buffer-read-only t)
  (setq buffer-undo-list t))

(provide 'offlineimap)

;;; offlineimap.el ends here
"]) (octomacs . [(20130919 1915) nil "Octopress interface for Emacs" single ";;; Commentary:
;;
;; octomacs.el provides an interface for interacting with Octopress
;; (http://octopress.org/).
;;
;; Add the following to your .emacs:
;;
;;     (add-to-list 'load-path \"/path/to/octomacs\")
;;     (require 'octomacs)
;;
;; Configuring Octomacs will make interaction a little nicer.
;; Specifically, setting `octomacs-workdir-alist'.
;;
;;     M-x customize-group RET octomacs RET
;;
;; If rvm.el is installed, Octomacs will attempt to use it whenever it
;; needs to run a command in the Octopress directory.
;;
;; If ido.el is installed, Octomacs will use it for prompting of which
;; Octopress project to use.
;;
;; Calling the interactive function `octomacs-new-post' will prompt
;; for which project to use (configurable from
;; `octomacs-workdir-alist', or can be manually specified as a path to
;; an Octopress instance), and for the title of the post to create.
;;

"]) (occur-x . [(20130610 643) nil "Extra functionality for occur" single ";;; Commentary:

;; occur-x.el adds some extra functionality to occur-mode.  It allows the
;; user to refine any occur mode with extra regexp based filters.  Use
;; commands `occur-x-filter-out' and `occur-x-filter' to add positive and
;; negative filters.  By default those commands are bind to keys \"f\" and
;; \"k\" (from flush and keep).  Use command `occur-x-undo-filter' to remove
;; filters.  Filters are kept if the buffer is reverted (shortcut \"g\") or
;; cloned (shortcut \"c\").

;; Another useful addition of occur-x to occur-mode is the possibility to
;; displaying the line numbers in the margin of your choice, instead of
;; \"inside\" the occur buffer.  This way every match line in the occur
;; buffer is exactly the same as in the original buffer.  Customize
;; variable `occur-linenumbers-in-margin' and face `occur-margin-face' to
;; your liking.  When displayed in the margin, line numbers won't interfere
;; with the regexps of the additional filters.

;;; Usage

;; Put this file in your load-path and add this lines to your init file:

;; (require 'occur-x)
;; (add-hook 'occur-mode-hook 'turn-on-occur-x-mode)

;;; Feedback

;; Bugs reports, comments, ideas, etc. welcomed.

;; https://github.com/juan-leon/occur-x

"]) (occidental-theme . [(20130312 1258) nil "Custom theme for faces based on Adwaita" single nil]) (obsidian-theme . [(20130920 937) nil "port of the eclipse obsidian theme" single nil]) (object-registry . [(20130521 1213) ((cl-lib (0 2))) "OBSOLETE track data items by various instance slots" single ";;; Commentary:

;;  # This package is no longer maintained.  You should not use it for
;;  # any new projects.  An incompatible replacement will be available
;;  # from https://github.com/tarsius/registries.

;; Track data items by various instance slots.

;; This library builds on standard library `registry.el', extending it
;; with the ability to track EIEIO objects.

"]) (ob-translate . [(20130718 729) ((google-translate (0 4)) (org (8))) "Translation of text blocks in org-mode." single ";;; Commentary:
;;
;; Supports translation of text blocks in org-mode.

"]) (ob-sml . [(20130829 1143) ((sml-mode (6 4))) "org-babel functions for template evaluation" single nil]) (ob-mongo . [(20130718 732) ((org (8))) "Execute mongodb queries within org-mode blocks." single ";;; Commentary:
;;
;; Execute mongodb queries within org-mode blocks.

"]) (ob-browser . [(20130724 902) ((org (8))) "Translation of text blocks in org-mode." tar ";;; Commentary:
;;
;; Render HTML in org-mode blocks.

"]) (oauth . [(20130127 1751) nil "Oauth library." tar ";;; Commentary:

;; This is oauth client library implementation in elisp. It is
;; capable of authenticating (receiving an access token) and signing
;; requests. Currently it only supports HMAC-SHA1, although adding
;; additional signature methods should be relatively straight forward.

;; Visit http://oauth.net/core/1.0a for the complete oauth spec.

;; Oauth requires the client application to receive user authorization in order
;; to access restricted content on behalf of the user. This allows for
;; authenticated communication without jeopardizing the user's password.
;; In order for an application to use oauth it needs a key and secret
;; issued by the service provider.

;; Usage:

;; Obtain access token:

;; The easiest way to obtain an access token is to call (oauth-authorize-app)
;; This will authorize the application and return an oauth-access-token.
;; You will use this token for all subsequent requests. In many cases
;; it will make sense to serialize this token and reuse it for future sessions.
;; At this time, that functionality is left to the application developers to
;; implement (see yammer.el for an example of token serialization).

;; Two helper functions are provided to handle authenticated requests:
;; (oauth-fetch-url) and (oauth-post-url)
;; Both take the access-token and a url.
;; Post takes an additional parameter post-vars-alist which is a
;; list of key val pairs to be used in a x-www-form-urlencoded message.

;; yammer.el:
;; http://github.com/psanford/emacs-yammer/tree/master is an example
;; mode that uses oauth.el

;; Dependencies:

;; The default behavior of oauth.el is to dispatch to curl for http
;; communication. It is strongly recommended that you use curl.
;; If curl is unavailable you can set oauth-use-curl to nil and oauth.el
;; will try to use the emacs internal http functions (url-request).
;; Note: if you plan on doing https and have oauth-use-curl set to nil,
;; make sure you have gnutls-bin installed.

;; oauth.el uses hmac-sha1 library for generating signatures. An implementation
;; by Derek Upham is included for convenience.

;; This library assumes that you are using the oauth_verifier method
;; described in the 1.0a spec.

"]) (o-blog . [(20130904 1426) nil "Org-blog exporter" tar nil]) (nyan-prompt . [(20130721 311) nil "Nyan Cat on the eshell prompt." tar ";;; Commentary:

;; Usage: (add-hook 'eshell-load-hook 'nyan-prompt-enable)

;; Inspired by from Jacek \"TeMPOraL\" Zlydach nyan-mode, to make Porter happy.


;; Copying is an act of love, please copy. \342\231\241
;; The xpm taken awesome nyan-mode

"]) (nyan-mode . [(20120710 2200) nil "Nyan Cat shows position in current buffer in mode-line." tar nil]) (nvm . [(20140107 38) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0))) "Manage Node versions within Emacs" single ";;; Commentary:

"]) (nummm-mode . [(20131117 214) nil "Display the number of minor modes instead of their names" single ";;; Commentary:
;; This mode replaces the =minor-mode-alist= in =mode-line-modes= with
;; a custom one. =minor-mode-alist= is NOT modified. Also, a backup of
;; =mode-line-modes= is done when enabling =nummm-mode= and is
;; restored when is turned off.
;; The face can be changed customizing =nummm-face=.

"]) (number-font-lock-mode . [(20131027 913) ((emacs (24))) "Syntax highlighting of numeric literals" single ";;; Commentary:

;; This minor mode provides syntax highlighting of numeric literals
;; in source code, like what many editors provide by default.
;;
;; To enable: call `number-font-lock-mode'.
;;
;; It tries to be customizable: it should be easy to add or redefine
;; what exactly consitutes a \"number\" in given major mode. See
;; `number-font-lock-modelist'.

"]) (nsis-mode . [(20130723 1928) nil "NSIS-mode" tar ";;; Commentary:
;; 
;; A major mode for editing nsis files
;; 
;; * Installation
;; 
;; Put this `nsis-mode' the load path, then add the following to your Emacs:
;; 
;;  (autoload 'nsis-mode \"nsis-mode\" \"NSIS mode\" t)
;; 
;;  (setq auto-mode-alist (append '((\"\\\\.\\\\([Nn][Ss][Ii]\\\\)$\" .
;;                                   nsis-mode)) auto-mode-alist))
;; 
;;  (setq auto-mode-alist (append '((\"\\\\.\\\\([Nn][Ss][Hh]\\\\)$\" .
;;                                   nsis-mode)) auto-mode-alist))
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (nrepl-ritz . [(20130516 1039) ((nrepl (0 1 7)) (fringe-helper (0 1 1))) "nrepl extensions for ritz" single nil]) (nrepl-eval-sexp-fu . [(20131015 513) nil "No description available." single nil]) (novice+ . [(20131227 143) nil "Extensions to `novice.el'." single ";;; Commentary:
;;
;;    Extensions to `novice.el'.
;;
;;
;;  ***** NOTE: The following functions defined in `novice.el' have
;;              been REDEFINED HERE:
;;
;;  `disable-command', `enable-command' -
;;     These now use `completing-read' in the interactive spec, with,
;;     as default, `symbol-nearest-point'.
;;
;;
;;  This file should be loaded after loading the standard GNU file
;;  `novice.el'.  So, in your `~/.emacs' file, do this:
;;  (eval-after-load \"novice\" '(require 'novice+))
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (notmuch-labeler . [(20131230 919) ((notmuch (0))) "Improve notmuch way of displaying labels" tar ";;; Commentary:
;;
;; By default notmuch presents email labels as plain text. This
;; package improves notmuch by lettings users choose how to present
;; each label (e.g., with a special font, with a picture, ...).
;; Additionally, this package transforms each label into an hyperlink
;; to show all emails with this label.
;;
;; To configure this package, add the following to your
;; .emacs.d/init.el file:
;;
;; (require 'notmuch-labeler)
;;
;; Then, you will get hyperlinks on all your labels. Now, if you want
;; to change the default presentation of a label, write something like
;; the following.
;;
;; For example, the following renames the label \"unread\" to \"new\" and
;; changes the label color to blue:
;;
;; (notmuch-labeler-rename \"unread\" \"new\" ':foreground \"blue\")
;;
;; This replaces the label \"important\" by a tag picture:
;;
;; (notmuch-labeler-image-tag \"important\")
;;
;; This simply hides the label \"unread\" (there is no need to show this
;; label because unread messages are already in bold):
;;
;; (notmuch-labeler-hide \"unread\")
;;
"]) (notmuch . [(20140113 1012) nil "No description available." tar nil]) (nose . [(20110804 619) nil "Easy Python test running in Emacs" single ";;; Commentary:
;; This gives a bunch of functions that handle running nosetests on a
;; particular buffer or part of a buffer.

;;; Installation

;; In your emacs config:
;;
;; (require 'nose)
;; ; next line only for people with non-eco non-global test runners
;; ; (add-to-list 'nose-project-names \"my/crazy/runner\")

;; Note that if your global nose isn't called \"nosetests\", then you'll want to
;; redefine nose-global-name to be the command that should be used.

;; By default, the root of a project is found by looking for any of the files
;; 'setup.py', '.hg' and '.git'. You can add files to check for to the file
;; list:
;;
;; ; (add-to-list 'nose-project-root-files \"something\")

;; or you can change the project root test to detect in some other way
;; whether a directory is the project root:
;;
;; ; (setq nose-project-root-test (lambda (dirname) (equal dirname \"foo\")))

;; If you want dots as output, rather than the verbose output:
;; (defvar nose-use-verbose nil) ; default is t

;; Probably also want some keybindings:
;; (add-hook 'python-mode-hook
;;           (lambda ()
;;             (local-set-key \"\\C-ca\" 'nosetests-all)
;;             (local-set-key \"\\C-cm\" 'nosetests-module)
;;             (local-set-key \"\\C-c.\" 'nosetests-one)
;;             (local-set-key \"\\C-cpa\" 'nosetests-pdb-all)
;;             (local-set-key \"\\C-cpm\" 'nosetests-pdb-module)
;;             (local-set-key \"\\C-cp.\" 'nosetests-pdb-one)))

(require 'cl) ;; for \"reduce\"

(defvar nose-project-names '(\"eco/bin/test\"))
(defvar nose-project-root-files '(\"setup.py\" \".hg\" \".git\"))
(defvar nose-project-root-test 'nose-project-root)
(defvar nose-global-name \"nosetests\")
(defvar nose-use-verbose t)

(defun run-nose (&optional tests debug failed)
  \"run nosetests\"
  (let* ((nose (nose-find-test-runner))
         (where (nose-find-project-root))
         (args (concat (if debug \"--pdb\" \"\")
                       \" \"
                       (if failed \"--failed\" \"\")))
         (tnames (if tests tests \"\")))
    (if (not where)
        (error
         (format (concat \"abort: nosemacs couldn't find a project root, \"
                         \"looked for any of %S\") nose-project-root-files)))
    (funcall (if debug
                 'pdb
               '(lambda (command)
                  (compilation-start command
                                     nil
                                     (lambda (mode) (concat \"*nosetests*\")))))
             (format
              (concat \"%s \"
                      (if nose-use-verbose \"-v \" \"\")
                      \"%s -w %s -c %ssetup.cfg %s\")
              (nose-find-test-runner) args where where tnames)))
  )

(defun nosetests-all (&optional debug failed)
  \"run all tests\"
  (interactive)
  (run-nose nil debug failed))

(defun nosetests-failed (&optional debug)
  (interactive)
  (nosetests-all debug t))

(defun nosetests-pdb-all ()
  (interactive)
  (nosetests-all t))

(defun nosetests-module (&optional debug)
  \"run nosetests (via eggs/bin/test) on current buffer\"
  (interactive)
  (run-nose buffer-file-name debug))

(defun nosetests-pdb-module ()
  (interactive)
  (nosetests-module t))

(defun nosetests-one (&optional debug)
  \"run nosetests (via eggs/bin/test) on testable thing
 at point in current buffer\"
  (interactive)
  (run-nose (format \"%s:%s\" buffer-file-name (nose-py-testable)) debug))

(defun nosetests-pdb-one ()
  (interactive)
  (nosetests-one t))

(defun nose-find-test-runner ()
  (message
   (let ((result
          (reduce '(lambda (x y) (or x y))
        (mapcar 'nose-find-test-runner-names nose-project-names))))
     (if result
         result
       nose-global-name))))

(defun nose-find-test-runner-names (runner)
  \"find eggs/bin/test in a parent dir of current buffer's file\"
  (nose-find-test-runner-in-dir-named
   (file-name-directory buffer-file-name) runner))

(defun nose-find-test-runner-in-dir-named (dn runner)
  (let ((fn (expand-file-name runner dn)))
    (cond ((file-regular-p fn) fn)
      ((equal dn \"/\") nil)
      (t (nose-find-test-runner-in-dir-named
          (file-name-directory (directory-file-name dn))
          runner)))))

(defun nose-py-testable ()
  (let* ((inner-obj (inner-testable))
         (outer (outer-testable))
         ;; elisp can't return multiple values
         (outer-def (car outer))
         (outer-obj (cdr outer)))
    (cond ((equal outer-def \"def\") outer-obj)
          ((equal inner-obj outer-obj) outer-obj)
          (t (format \"%s.%s\" outer-obj inner-obj)))))

(defun inner-testable ()
  (save-excursion
    (re-search-backward
     \"^ \\\\{0,4\\\\}\\\\(class\\\\|def\\\\)[ \\t]+\\\\([a-zA-Z0-9_]+\\\\)\" nil t)
    (buffer-substring-no-properties (match-beginning 2) (match-end 2))))

(defun outer-testable ()
  (save-excursion
    (re-search-backward
     \"^\\\\(class\\\\|def\\\\)[ \\t]+\\\\([a-zA-Z0-9_]+\\\\)\" nil t)
    (let ((result
            (buffer-substring-no-properties (match-beginning 2) (match-end 2))))

      (cons
       (buffer-substring-no-properties (match-beginning 1) (match-end 1))
       result))))

(defun nose-find-project-root (&optional dirname)
  (let ((dn
         (if dirname
             dirname
           (file-name-directory buffer-file-name))))
    (cond ((funcall nose-project-root-test dn) (expand-file-name dn))
          ((equal (expand-file-name dn) \"/\") nil)
        (t (nose-find-project-root
             (file-name-directory (directory-file-name dn)))))))

(defun nose-project-root (dirname)
  (reduce '(lambda (x y) (or x y))
          (mapcar (lambda (d) (member d (directory-files dirname)))
                  nose-project-root-files)))

(provide 'nose)

;;; nose.el ends here
"]) (noflet . [(20130901 922) nil "locally override functions" single ";;; Commentary:

;; This let's you locally override functions, in the manner of `flet',
;; but with access to the original function through the symbol:
;; `this-fn'.

"]) (nodejs-repl . [(20130520 842) nil "Run Node.js REPL" single ";;; Commentary:
;;
;; This program is derived from comint-mode and provides the following features.
;;
;;  * TAB completion same as Node.js REPL
;;  * file name completion in string
;;  * incremental history search
;;
;;
;; Put this file in your Emacs lisp path (e.g. ~/.emacs.d/site-lisp)
;; and add the following line to your .emacs:
;;
;;    (require 'nodejs-repl)
;;
;; Type M-x nodejs-repl to run Node.js REPL.
;; See also `comint-mode' to check key bindings.
;;

(require 'cc-mode)
(require 'comint)
(require 'ansi-color)

(defgroup nodejs-repl nil
  \"Run Node.js REPL and communicate the process.\"
  :group 'processes)

(defconst nodejs-repl-version \"0.0.2\"
  \"Node.js mode Version.\")

(defcustom nodejs-repl-command \"node\"
  \"Node.js command used in `nodejs-repl-mode'.\"
  :group 'nodejs-repl
  :type 'string)

(defcustom nodejs-repl-prompt \"> \"
  \"Node.js prompt used in `nodejs-repl-mode'.\"
  :group 'nodejs-repl
  :type 'string)

(defvar nodejs-repl-process-name \"nodejs\"
  \"process name of Node.js REPL.\")

(defvar nodejs-repl-temp-buffer-name \"*nodejs-repl-command-output*\")

(defvar nodejs-repl-mode-syntax-table
  (let ((st (make-syntax-table)))
    (c-populate-syntax-table st)
    (modify-syntax-entry ?$ \"_\" st)
    st))

(defvar nodejs-repl-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd \"TAB\") 'comint-dynamic-complete)
    (define-key map (kbd \"C-c C-c\") 'nodejs-repl-quit-or-cancel)
    map))

;; process.stdout.columns should be set.
;; Node.js 0.8 and 0.10 uses this value as the maximum number of columns,
;; but process.stdout.columns in Emacs is infinity because Emacs returns 0 as winsize.ws_col.
;; The completion candidates won't be displayed if process.stdout.columns is infinity.
;; see also `handleGroup` function in readline.js
(defvar nodejs-repl-code
  (concat
   \"process.stdout.columns = %d;\"
   \"require('repl').start('%s', null, null, true, false)\"))


(defvar nodejs-repl-input-ignoredups t
  \"If non-nil, don't add input matching the last on the input ring.

See also `comint-input-ignoredups'\")

(defvar nodejs-repl-process-echoes t
  \"If non-nil, Node.js does not echo any input.

See also `comint-process-echoes'\")

(defvar nodejs-repl-extra-espace-sequence-re \"\\\\(\\x1b\\\\[[0-9]+[GJK]\\\\)\")
(defvar nodejs-repl-ansi-color-sequence-re \"\\\\(\\x1b\\\\[[0-9]+m\\\\)\")
;;; if send string like \"a; Ma\\t\", return a; Math\\x1b[1G> a; Math\\x1b[0K\\x1b[10G
(defvar nodejs-repl-prompt-re-format
  (concat
   \"\\x1b\\\\[1G\"
   \"\\\\(\"
   \"\\x1b\\\\[0J%s.*\\x1b\\\\[[0-9]+G\"  ; for Node.js 0.8
   \"\\\\|\"
   \"%s.*\\x1b\\\\[0K\\x1b\\\\[[0-9]+G\"  ; for Node.js 0.4 or 0.6
   \"\\\\)\"
   \"$\"))
(defvar nodejs-repl-prompt-re
  (format nodejs-repl-prompt-re-format nodejs-repl-prompt nodejs-repl-prompt))
;;; not support Unicode characters
(defvar nodejs-repl-require-re
  (concat
   \"\\\\(?:^\\\\|\\\\s-\\\\|[-+*/%&|><!;{}()[]\\\\|\\\\]\\\\)\"  ; delimiter
   \"require\\\\s-*(\\\\s-*\"
   \"\\\\(\"
   \"\\\"[^\\\"\\\\]*\\\\(?:\\\\\\\\.[^\\\"\\\\]*\\\\)*\"             ; double quote
   \"\\\\|\"
   \"'[^'\\\\]*\\\\(?:\\\\\\\\.[^'\\\\]*\\\\)*\"                ; single quote
   \"\\\\)\"
   \"$\"))

(defvar nodejs-repl-cache-token \"\")
(defvar nodejs-repl-cache-candidates ())


;;;--------------------------
;;; Private functions
;;;--------------------------
(defun nodejs-repl--in-string-p (&optional pos)
  \"Return non-nil if point is inside string\"
  (nth 3 (syntax-ppss pos)))

(defun nodejs-repl--extract-require-argument (string)
  (if (string-match nodejs-repl-require-re string)
      (match-string 1 string)))

(defun nodejs-repl--get-last-token (string)
  \"Return the last token in the string.\"
  (if (string-match \"\\\\([._$]\\\\|\\\\w\\\\)+$\" string)
      (match-string 0 string)))

"]) (noctilux-theme . [(20131019 31) nil "Dark theme inspired by LightTable" tar nil]) (nimrod-mode . [(20110125 1504) nil "A major mode for the Nimrod programming language" single nil]) (nginx-mode . [(20131223 44) nil "major mode for editing nginx config files" single ";;; Commentary:

;; This is a quick mode for editing Nginx config files, as I didn't find
;; anything else around that did quite this much.

;; Many thanks to the authors of puppet-mode.el, from where I found a
;; useful indentation function that I've modified to suit this situation.

;; Put this file into your load-path and the following into your ~/.emacs:
;;   (require 'nginx-mode)

"]) (nexus . [(20140114 505) nil "REST Client for Nexus Maven Repository servers" tar ";;; Commentary:

;;

"]) (newlisp-mode . [(20140109 1038) nil "newLISP editing mode for Emacs" single ";;; Commentary:

;; Major mode for editing newLISP script.

;; - syntax highlighting
;; - keyword completion
;; - support for inferior processes

;;; Installation:

;; You should add this to .emacs file after putting it on your load-path:
;;
;;   (autoload 'newlisp-mode \"newlisp-mode\" \"Major mode for newLISP files.\" t)
;;   ; or (require 'newlisp-mode)
;;   (add-to-list 'auto-mode-alist '(\"\\\\.lsp$\" . newlisp-mode))
;;   (add-to-list 'interpreter-mode-alist '(\"newlisp\" . newlisp-mode))
;;
;;   ;; if needed
;;   (newlisp-mode-setup)
;;   (defun newlisp-mode-user-hook ()
;;     (setq comment-start \"; \")
;;     (setq tab-width 8)
;;     (setq indent-tabs-mode nil))
;;   (add-hook 'newlisp-mode-hook 'newlisp-mode-user-hook)

"]) (never-comment . [(20140104 1407) nil "Never blocks are comment" single ";;; Commentary:

;; Often C programmers type blocks of code between =#if 0= and =#endif=.
;; This code will never be compiler. Therefore some IDE's display this code
;; as comment. With this module, emacs will also do this.

"]) (nemerle . [(20130328 746) nil "major mode for editing nemerle programs" single ";;; Commentary:

;; A major mode for editing nemerle source files.  It provides syntax
;; hilighting, proper indentation, and many other features.
;; To install the nemerle mode, put the following lines into your
;; ~/.emacs file:

;; (setq load-path (cons \"/path/to/dir/where/this/file/resides\" load-path))
;; (autoload 'nemerle-mode \"nemerle.el\"
;;   \"Major mode for editing nemerle programs.\" t)
;; (setq auto-mode-alist (cons '(\"\\\\.n$\" . nemerle-mode) auto-mode-alist))

;; If you'd like to have every line indented right after new line put
;; these lines into your ~/.emacs files.

;; (defun my-nemerle-mode-hook ()
;;   (define-key nemerle-mode-map \"\\C-m\" 'newline-and-indent))
;; (add-hook 'nemerle-mode-hook 'my-nemerle-mode-hook)

;; You may use variables nemerle-basic-offset and nemerle-match-case-offset
;; to customize indentation levels.

;; By default indentation based syntax is turned on. It is switched off
;; inside any parens anyway so it should be ok. If you think otherwise
;; you can use following in your ~/.emacs file:

;; (setq nemerle-indentation-based-syntax nil)



"]) (nclip . [(20130617 1315) nil "Network (HTTP) Clipboard" tar ";;; Commentary:

;; nclip.el is network clipboard for Emacs which makes possible to use
;; your local clipboard even when you are running Emacs inside
;; terminal on remote server.
;;
;; When enabled, it will use remote HTTP server to fetch and update
;; clipboard content. Included HTTP server `nclip.rb` supports OSX
;; (pbcopy/pbpaste) but it should be pretty straightforward to support
;; other systems as well (e.g. Linux using xclip).

;;; Installation:

;; Available as a package in http://melpa.milkbox.net

"]) (ncl-mode . [(20130527 1545) nil "Major Mode for editing NCL scripts and other goodies" tar nil]) (navi-mode . [(20131001 1125) nil "major-mode for easy buffer-navigation" single nil]) (nav-flash . [(20131106 706) nil "Briefly highlight the current line" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'nav-flash)
;;
;;     (nav-flash-show)
;;
;; Explanation
;;
;; Nav-flash temporarily highlights the line containing the point,
;; which is sometimes useful for orientation after a navigation
;; command.
;;
;; To use nav-flash, place the nav-flash.el library somewhere Emacs
;; can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'nav-flash)
;;
;; There is no user-level interface for this library; it is only used
;; by other Lisp libraries.  However, you might find it useful to call
;; `nav-flash-show' in your ~/.emacs file.  For example, the following
;; hook causes a flash to appear after navigating via imenu:
;;
;;     (add-hook 'imenu-after-jump-hook 'nav-flash-show nil t)
;;
;; See Also
;;
;;     M-x customize-group RET nav-flash RET
;;     M-x customize-group RET pulse RET
;;
;; Notes
;;
;;     This library reuses a timer and overlay defined in compile.el,
;;     but should not affect the normal use of compile.el / `next-error'.
;;
;;     Pulse.el provides similar functionality and is included with
;;     Emacs.  This library can use pulse.el, but does not do so by
;;     default, because pulse.el uses `sit-for', breaking this type
;;     of construction:
;;
;;         (nav-flash-show)
;;         (with-temp-message \"message here\"
;;            (sit-for 2))
;;
;;     When using an overlay and timer for cleanup (as nav-flash does
;;     by default) the flash and message appear simultaneously.
;;
;;     Nav-flash.el is also simpler than pulse.el.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     No external dependencies
;;
;; Bugs
;;
;;     No known bugs.
;;
;; TODO
;;
;;     Check pulse period on other platforms.
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (nav . [(20120507 7) nil "Emacs mode for filesystem navigation" tar ";;; Commentary:
;;
;; To use this file, put something like the following in your
;; ~/.emacs:
;;
;; (add-to-list 'load-path \"/directory/containing/nav/\")
;; (require 'nav)
;; (nav-disable-overeager-window-splitting)
;;
;; Type M-x nav to start navigating.
;;
;; To set options for Nav, type M-x customize, then select
;; Applications, Nav.

;;; Key Bindings
;;
;; Press ? in the Nav window to display a list of key bindings.
;;

"]) (naquadah-theme . [(20131210 1123) nil "A theme based on Tango color set" single nil]) (nanowrimo . [(20131130 2140) nil "Track progress for nanowrimo" single ";;; Commentary:

;; Adds to the modeline a wordcount, words per minute, and an estimate
;; of how long you will have to continue writing to meet the day's goal.

;; If you plan to use this with org-mode you should install the great
;; org-wc.el from https://github.com/dato/org-wc

"]) (namespaces . [(20130326 1550) nil "An implementation of namespaces for Elisp, with an emphasis on immutabilty." single ";;; Commentary:
;;
;;   (require 'namespaces)
;;
;;   (namespace foo :export [hello])
;;   (defn hello () \"Hello, world!\")
;;
;;   (namespace bar)
;;   (foo/hello)    ; # => \"Hello, world!\"
;;
;;
;; See documentation at https://github.com/chrisbarrett/elisp-namespaces
;;

"]) (naked . [(20131227 142) nil "Provide for naked key descriptions: no angle brackets." single ";;; Commentary:
;;
;;  Lets you use key-sequence descriptions that do not bother with
;;  angle brackets: `<' and `>'.
;;
;;  Prior to Emacs 21, vanilla GNU Emacs did not bother with angle
;;  brackets either, but someone around the turn of the century got
;;  the idea that Emacs could not do without them.  So instead of the
;;  `delete' key we now have the `<delete>' key.  And instead of`C-x
;;  M-delete' we now have `C-x M-<delete>'.  \"On n'arrete pas le
;;  progres !\"
;;
;;  Angle brackets are not needed - why?  Because we already use
;;  spaces to separate keys in a key-sequence description (we use
;;  `SPC' to indicate the SPACE key).
;;
;;  To be fair, it is true that sometimes people have taken the
;;  shortcut when writing about user input of writing, e.g., `M-x
;;  forward-char RET' instead of writing `M-x f o r w a r d - c h a
;;  r'. And if you write `forward' that way to stand for an input
;;  sequence of seven chars, then you cannot also expect `forward' to
;;  stand for a function key named `forward', can you?
;;
;;  Well, yes you can, if the context makes things clear enough.  And
;;  I for one find `C-M-<insert>' butt-ugly (likewise `<C-M-insert>')
;;  - and, more importantly, insulting to Occam and his razor.
;;
;;  So go ahead and go NaKeD - shed your angles.
;;
;;  Here's what you need.  It won't completely purge Emacs from
;;  insulting you with the occasional pair of angle brackets, but it
;;  at least lets you DTRT in code that you write:
;;
;;  * Use function `naked-key-description' instead of
;;    `key-description'.
;;
;;    The former outputs naked key descriptions: no angle brackets
;;    around function keys.  E.g., if KEY is the sequence of events
;;    produced by holding the Shift key while hitting the Insert key,
;;    then `(naked-key-description KEY)' returns \"S-insert\" (and not
;;    \"S-<insert>\").  (Internally, this sequence of events is the
;;    vector [S-insert].)
;;
;;  * Use function `naked' instead of `kbd' (which is a function
;;    starting with Emacs 24.3 and a macro before then).
;;
;;    The former allows its argument key-sequence description to use
;;    naked keys, not clothed in angle brackets.  E.g., (naked
;;    \"C-M-delete\") has the same effect as (kbd \"C-M-<delete>\").
;;
;;  * Use command `naked-read-kbd-macro' instead of `read-kbd-macro'.
;;
;;  * Use function `naked-edmacro-parse-keys' instead of
;;    `edmacro-parse-keys' (if you happen to use that lower-level
;;    function).
;;
;;  But you can also have it both ways if or when you might need to:
;;  All of these accept an optional argument ANGLES which, if
;;  non-`nil', returns the behavior to the vanilla one, expecting
;;  function keys to be fully clothed in angle brackets.  E.g.: (naked
;;  \"C-M-<delete>\" t).
;;
;;  In addition, even without an non-nil ANGLES argument, function
;;  `naked' does the right thing for keys expressed using angle
;;  brackets.  IOW, (naked \"M-<foobar>\") returns the same thing that
;;  (naked \"M-foobar\") does: [M-foobar].
;;
;;  Enjoy!
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (n3-mode . [(20130116 1429) nil "mode for Notation 3" single nil]) (mysql2sqlite . [(20120514 731) nil "Convert mysql databases into sqlite databases." single ";;; Commentary:

;; mysql2sqlite is an Emacs package for converting a mysql database into an sqlite
;; database.

;; Installation:

;; The package can be installed with M-x package-list-packages (requires
;; package.el, which is included for Emacs 24 but availble for 23). The MELPA
;; repository must be added to your packages setup first.  Instructions can be found
;; at http://melpa.milkbox.net/

;; Alternatively, the source can be pulled direclty from github:
;; https://github.com/echosa/emacs-mysql2sqlite

;; Customize

;; There are some customizable options:

;; mysql2sqlite-sqlite-executable    - The sqlite executable to run.
;; mysql2sqlite-mysqldump-executable - The mysqldump executable to run.
;; mysql2sqlite-mysqldump-host       - The default host to connect to with mysqldump.
;; mysql2sqlite-mysqldump-user       - The default user to use to connect to mysqldump.
;; mysql2sqlite-mysqldump-database   - The default database to convert

;; Usage

;; Usage is as simple as running M-x mysql2sqlite.  You will be prompted for the
;; necessary values, with the customized defaults as default values.  Running the
;; function will result in several files in the target directory:

;; <output-file>.sql - The actual SQL file generated via mysqldump.
;; <output-file>.db  - The generated sqlite database.
;; <output-file>.err - The output of the conversion process.

;; mysql2sqlite is written and maintained by Brian Zwahr <echosa@gmail.com>

"]) (mykie . [(20140104 1315) nil "Command multiplexer: Register multiple functions to a keybind" single ";;; Commentary:
;; This program can register multiple functions to a keybind easily.
;; For example:
;; (mykie:set-keys global-map ; <- you can specify nil to bind to global-map
;;   \"C-j\" ; You don't need kbd macro
;;   :default 'newline-and-indent   ; <- normal behavior
;;   :region  'query-replace-regexp ; <- do query-replace-regexp in region
;;   \"C-a\"
;;   :default 'beginning-of-line
;;   :C-u     '(message \"hello\") ; <- C-u + C-a, then you can see hello
;;   ;; You can add more keybinds
;;   ;; ...
;;   )
;;
;; Above function call newline-and-indent by default,
;; But call query-replace-regexp function if you select region.
;;
;; There are other way to bind a keybind:
;; (mykie:global-set-key \"C-j\" ; You don't need kbd macro
;;   :default 'newline-and-indent
;;   :region 'query-replace-regexp)
;;
;; You can see more example : https://github.com/yuutayamada/mykie-el
"]) (mwe-log-commands . [(20100703 541) nil "log keyboard commands to buffer" single ";;; Commentary:

;; This add-on can be used to demo Emacs to an audience.  When
;; activated, keystrokes get logged into a designated buffer, along
;; with the command bound to them.

;; To enable, use e.g.: 
;;
;; (add-hook 'LaTeX-mode-hook (function mwe:log-keyboard-commands))
;;
;; To see the log buffer, call M-x mwe:open-command-log-buffer.

"]) (mvn . [(20131227 2312) nil "helpers for compiling with maven" single nil]) (muttrc-mode . [(20090804 2252) nil "Major mode to edit muttrc under Emacs" single nil]) (mustang-theme . [(20130920 939) nil "port of vim's mustang theme" single nil]) (mustache-mode . [(20111003 1103) nil "A major mode for editing Mustache files." single ";;; Commentary:

;; 1) Copy this file somewhere in your Emacs `load-path'.  To see what
;;    your `load-path' is, run inside emacs: C-h v load-path<RET>
;;
;; 2) Add the following to your .emacs file:
;;
;;    (require 'mustache-mode)

;; While the Mustache language can be used for any types of text,
;; this mode is intended for using Mustache to write HTML.

"]) (mustache . [(20131117 1407) ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) "a mustache templating library in emacs lisp" tar nil]) (multiple-cursors . [(20140105 259) nil "Multiple cursors for Emacs." tar nil]) (multifiles . [(20130615 1433) nil "View and edit parts of multiple files in one buffer" single ";;; Commentary:

;; Bind a key to `mf/mirror-region-in-multifile`, let's say `C-!`. Now
;; mark a part of the buffer and press it. A new \\*multifile\\* buffer pops
;; up. Mark some other part of another file, and press `C-!` again. This
;; is added to the \\*multifile\\*.

;; You can now edit the \\*multifile\\* buffer, and watch the original files change.
;; Or you can edit the original files and watch the \\*multifile\\* buffer change.

;; **Warning** This API and functionality is highly volatile.

"]) (multi-web-mode . [(20130823 2054) nil "multiple major mode support for web editing" tar ";;; Commentary:

;; Multi Web Mode is a minor mode wich makes web editing in Emacs much easier.

;; Basically what it does is select the appropriate major mode
;; automatically when you move the point and also calculates the
;; correct indentation of chunks according to the indentation of the
;; most relevant major mode.

;;

"]) (multi-term . [(20140109 502) nil "Managing multiple terminal buffers in Emacs." single ";;; Commentary:
;;
;; This package is for creating and managing multiple terminal buffers in Emacs.
;;
;; By default, term.el provides a great terminal emulator in Emacs.
;; But I have some troubles with term-mode:
;;
;; 1. term.el just provides commands `term' or `ansi-term'
;;    for creating a terminal buffer.
;;    And there is no special command to create or switch
;;    between multiple terminal buffers quickly.
;;
;; 2. By default, the keystrokes of term.el conflict with global-mode keystrokes,
;;    which makes it difficult for the user to integrate term.el with Emacs.
;;
;; 3. By default, executing *NIX command \342\200\234exit\342\200\235 from term-mode,
;;    it will leave an unused buffer.
;;
;; 4. term.el won\342\200\231t quit running sub-process when you kill terminal buffer forcibly.
;;
;; 5. Haven\342\200\231t a dedicated window for debug program.
;;
;; And multi-term.el is enhanced with those features.
;;

;;; Installation:
;;
;; Copy multi-term.el to your load-path and add to your ~/.emacs
;;
;;  (require 'multi-term)
;;
;; And setup program that `multi-term' will need:
;;
;; (setq multi-term-program \"/bin/bash\")
;;
;;      or setup like me \"/bin/zsh\" ;)
;;
;; Below are the commands you can use:
;;
;;      `multi-term'                    Create a new term buffer.
;;      `multi-term-next'               Switch to next term buffer.
;;      `multi-term-prev'               Switch to previous term buffer.
;;      `multi-term-dedicated-open'     Open dedicated term window.
;;      `multi-term-dedicated-close'    Close dedicated term window.
;;      `multi-term-dedicated-toggle'   Toggle dedicated term window.
;;      `multi-term-dedicated-select'   Select dedicated term window.
;;
;; Tips:
;;
;;      You can type `C-u' before command `multi-term' or `multi-term-dedicated-open'
;;      then will prompt you shell name for creating terminal buffer.
;;

"]) (multi-project . [(20140103 637) nil "Easily work with multiple projects." single ";;; Commentary:

;;
;; Multi-project simplifies the switching between different projects by
;; providing support for creating, deleting, and searching between projects.
;; Multi-project supports interactively finding a file within a project or
;; automatically switching the TAGS file for symbol lookup.
;;
;; To use multi-project just add the following lines within your
;; .emacs file:
;;
;; (require 'multi-project)
;; (global-multi-project-mode)
;;
;; The following bindings are created for multi-project
;; C-xpj - Project jump              Displays a list of projects
;; C-xpc - Project compile           Run the compilation command for a project
;; C-xpa - Anchor a project          Stores the project to be retrieved via
;;                                   multi-project-anchored
;; C-xpg - Run grep-find             Runs grep-find at project top
;; C-xpu - Resets the anchor         Clears out the multi-project-anchored var
;; C-xpl - Last project from Anchor  Jumps to the project stored via the anchor
;; C-xpp - Present project           Displays current project
;; C-xpf - Find project files        Interactively find project files
;; C-xpn - Add a new project         Prompts for new project information
;; C-xpt - Go to project top         Displays the project root
;;
;; When displaying the projects, the following bindings are present:
;; s     - Search projects:          Searches from the list of possible projects
;; C-n   - Next project              Move the cursor to the next project
;; C-p   - Previous project          Move the cursor to the previous project
;; a     - Anchor a project          Holds the last project to the anchored
;;                                   project
;; r     - Reset search              Resets the project search
;; N     - Add new project           Prompts for project information
;; d     - Delete a project          Marks the project for deletion
;; g     - Grep a project            Executes grep-find in the selected projects
;; u     - Unmark a project          Removes the mark for a project
;; x     - Executes actions          Executes the deletions
;; q     - quit
;;
;; The multi-project-compilation-command variable can be set to a function
;; that provides a customized compilation command.  For example,
;;
;; (defun my-compilation-command (project-list)
;;   (let ((project-name (car project-list))
;;	   (project-dir (nth 1 project-list))
;;	   (project-subdir (nth 2 project-list)))
;;
;;     (cond ((string-match \"proj1\" project-name)
;;	      (concat \"ant -f \" project-dir \"/\" project-subdir \"/build.xml\"))
;;	     (t
;;	      (concat \"make -C \" project-dir \"/\" project-subdir)))))
;;
;; (setq multi-project-compilation-command 'my-compilation-command)

"]) (multi-eshell . [(20120608 1835) nil "Create and manage multiple shells within Emacs" single nil]) (multi . [(20131013 844) ((emacs (24))) "Clojure-style multi-methods for emacs lisp" single nil]) (mu4e-maildirs-extension . [(20140107 324) nil "Show mu4e maildirs summary in mu4e-main-view" single ";;; Commentary:

"]) (move-text . [(20130506 1826) nil "Move current line or region with M-up or M-down." single ";;; Commentary:
;;
;; MoveText is extracted from Basic edit toolkit.
;; It allows you to move the current line using M-up / M-down
;; if a region is marked, it will move the region instead.
;;

;;; Installation:
;;
;; Put move-text.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'move-text)
;; (move-text-default-bindings)
;;

;;; Acknowledgements:
;;
;;  Feature extracted from basid-edit-toolkit.el - by Andy Stewart. (LazyCat)
;;

"]) (mouse3 . [(20131227 142) nil "Customizable behavior for `mouse-3'." single ";;; Commentary:
;;
;; This library lets you customize the behavior of `mouse-3' in
;; several ways.
;;
;; It redefines standard command `mouse-save-then-kill' in a trivial
;; way to give you custom behavior for a second `mouse-3' click at the
;; same spot.
;;
;; Vanilla Emacs hard-wires the behavior to kill or delete the region
;; (depending on the value of `mouse-drag-copy-region').  That action
;; can be handy, but it is sometimes inappropriate (e.g., in a
;; read-only buffer).  In any case, it is only one possible action;
;; there are often other actions on the selected text that you might
;; want to take instead.
;;
;; The redefined `mouse-save-then-kill' command in `mouse3.el' just
;; uses function `mouse3-second-click-command' to handle a second
;; click at the same spot.  That function returns the command that
;; `mouse-save-then-kill' invokes: either the command that is the
;; value of variable `mouse3-save-then-kill-command' or, if that is
;; nil the command that is the value of user option
;; `mouse3-second-click-default-command'.
;;
;; Special contexts can bind variable `mouse3-save-then-kill-command'
;; to provide particular behavior.  For example, Icicles does this
;; during minibuffer completion so that a second `mouse-3' at the same
;; spot in buffer `*Completions*' marks the selected completions
;; (saves them for later reuse).
;;
;; You can use option `mouse3-second-click-default-command' to
;; customize the behavior to either pop up a menu or invoke any
;; command you choose.  The default value is
;; `mouse3-region-popup-menu', which pops up a menu.  To obtain the
;; vanilla Emacs behavior, customize the option value to command
;; `mouse3-kill/delete-region'.
;;
;; Option `mouse3-double-click-command' associates a command with a
;; `mouse-3' double-click.  The default value is command
;; `mouse3-kill/delete-region', so with the default setup you can kill
;; or delete the selected text by double-clicking `mouse-3' instead of
;; single clicking.  In other words, in the default setup you have two
;; possibilities:
;;
;;  2nd single-click: Pop up a menu so you can choose how to act on
;;                    the selected text.
;;
;;  double-click:     Kill or delete the selection, according to
;;                    standard option `mouse-drag-copy-region'.
;;
;; If you choose to customize one of these two options,
;; `mouse3-second-click-default-command' or
;; `mouse3-double-click-command', then you will probably want to
;; customize both of them.
;;
;; To make either a single-click or a double-click do nothing,
;; customize the appropriate option to the command `ignore'.
;;
;; Note:
;;
;; I do not recommend that you try reversing the option values from
;; their defaults, so that a double-click pops up a menu and the
;; second single-click at the same spot deletes the selected text.
;; That does not work well in general because of a flaw (or a feature,
;; depending on your view) in the Emacs design.
;;
;; Here's the problem: When you double-click to get the menu, Emacs
;; first sends a single-click event, before the double-click event.
;; (That's the flaw/feature.)  So if you double-click at the same spot
;; then the selection is first deleted, before the menu pops up.
;;
;; If you double-click at a different spot then this does not happen,
;; but instead the selection is extended or reduced to match the
;; double-click position.  The selection might then not be the region
;; you want the menu items to act on.  Things work pretty well,
;; however, if you start selecting by double-clicking `mouse-1', click
;; `mouse-3' here and there to extend, and finally double-click
;; `mouse-3' near the end of the selection, because in that case the
;; double-click position does not extend the selection any more.
;;
;; In sum, in general I do not recommend that you reverse the default
;; values.  If you want `mouse-3' to pop up a menu, it is better to
;; either (a) use the default setup so that the menu pops up on the
;; second single-click, not on a double-click or (b) let
;; `mouse3-double-click-command' pop up the menu, but set
;; `mouse3-second-click-default-command' to a command other than
;; `mouse3-kill/delete-region'.
;;
;;
;; Customized Pop-Up Menu
;; ----------------------
;;
;; If you choose for `mouse-3' to pop up a menu then you can customize
;; that menu using various user options.  The command that pops up the
;; menu is `mouse3-region-popup-menu'.  See the documentation for that
;; command for more explanation of the use of options.
;;
;; A fairly complete default menu is provided out of the box, so you
;; do not need to customize anything unless you want to.
;;
;; `mouse3-region-popup-menu' ultimately invokes standard function
;; `x-popup-menu' to do its work.  The menu definition used by
;; `x-popup-menu' can take two alternative forms which are quite
;; different.  Which form you choose to use is controlled by option
;; `mouse3-region-popup-x-popup-panes-flag'.
;;
;; If that option is nil (the default value), you can use keymaps and
;; extended menu items to define the popup menu.  This is recommended.
;; If the value is non-nil then you can use option
;; `mouse3-region-popup-x-popup-panes' to make use of the alternative,
;; `x-popup-menu'-specific form.
;;
;; That alternative form is easy to use, but it does not offer you all
;; of the possibilities that a standard menu definition does.  In
;; particular, it does not let you provide keywords such as `:visible'
;; and `:enable' that control the display and makeup of submenus and
;; menu items.  Examples of both methods are provided in this file.
;;
;; The default behavior takes advantage of keywords to dynamically
;; remove or disable submenus and menu items that are inappropriate
;; for the current context.  For example, it removes or disables
;; buffer-modifying items and submenus if the current buffer is
;; read-only, and it removes or disables region-related items and
;; submenus when the region is empty.
;;
;; The rest of the description here assumes that
;; `mouse3-region-popup-x-popup-panes-flag' is nil (the default value
;; and recommended).
;;
;; You can optionally include, at the beginning of the menu, a submenu
;; that has, as its own submenus, the global menus that are currently
;; available.  (These are the same menus that are popped up by
;; `C-mouse-3'.)  This is controlled by option
;; `mouse3-region-popup-include-global-menus-flag'.  If the menu bar
;; is not shown currently, then these submenus are the menu-bar menus.
;; Otherwise they are the major-mode menus.
;;
;; For example, if the menu bar is showing, then in Dired mode the
;; first submenu is `Dired by name', which itself has submenus
;; `Operate', `Mark', `Regexp', `Immediate', and `Subdir'.
;;
;; You define the rest of the popup menu (other than the global part)
;; using submenu keymaps and `menu-item' bindings (extended menu
;; items).  You do this by customizing option
;; `mouse3-region-popup-entries'.  You can reuse existing keymaps or
;; create menu items and submenus from scratch.  See the documentation
;; for `mouse3-region-popup-entries'.  If you reuse existing keymaps
;; you can add their menu items either as a submenu or as individual
;; items.
;;
;;
;; Mode-Specific Popup Menu
;; ------------------------
;;
;; You can provide mode-specific behavior by either replacing the
;; default `mouse-3' popup menu or augmenting it with mode-specific
;; entries.
;;
;; `mouse3.el' provides useful behavior for Dired mode.  You can do
;; the same for other modes you use.  Simple example code is also
;; provided here for Picture mode.  The menu implementation for these
;; two modes is different, to give you an idea of what is possible.
;; For Dired mode, `mouse3-region-popup-entries' is used.  For Picture
;; mode, `mouse3-region-popup-x-popup-panes' is used, and both
;; `mouse3-region-popup-x-popup-panes-flag' and
;; `mouse3-region-popup-x-popup-panes' are made buffer-local.
;;
;; The example code for Picture mode provides actions on the rectangle
;; defined by the region: items such as `Draw Rectangle' and `Clear
;; Rectangle'.
;;
;; Let's look at the behavior for Dired mode in more detail.  The
;; vanilla Emacs behavior just raises an error, because Dired is
;; read-only.  Why not let a second `mouse-3' click at the same spot
;; do something wrt the selected file and dir names?  Two obvious
;; possibilities come to mind: toggle whether each file/dir is marked,
;; or pop up a menu that lets you act in various ways on each of the
;; selected files and dirs.
;;
;; Option `mouse3-dired-function' lets you choose between these two
;; behaviors.  The default value is `mouse3-dired-use-menu', which
;; means to pop up a menu.  This is just like the default popup menu
;; except that it has an additional submenu, `Selected Files', that is
;; Dired-specific.  The first submenu is the global major-mode menu,
;; `Dired by name'.  The second, `Selected Files', has items that act
;; on the files and directories that are selected (in the region):
;;
;;  `Mark'
;;  `Unmark'
;;  `Toggle Marked/Unmarked'
;;  `Flag for Deletion'
;;  `Stop Using Menu'
;;
;; That last item just switches from having `mouse-3' pop up a menu to
;; having it toggle the markings of the selected files (the
;; alternative behavior of `mouse3-dired-function').
;;
;; If you also use library Dired+ (`dired+.el'), which I recommend,
;; then that last menu item is not present, and when the region is
;; empty you get a different popup menu which pertains only to the
;; file where you clicked `mouse-3'.
;;
;;
;; Context-Specific Behavior (for Emacs-Lisp Programmers)
;; ------------------------------------------------------
;;
;; As mentioned above, Icicles provides an example of a program
;; imposing context-specific behavior for the second `mouse-3' click
;; at the same spot.  The context in this case is (a) completion and
;; (b) clicking in buffer `*Completions*'.  For that, Icicles sets a
;; buffer-local value of variable `mouse3-save-then-kill-command'.
;;
;; If you write Emacs-Lisp code, note that this is an example where
;; the text is a set of entries in tabular format (columns).  Each
;; `*Completions*' entry (candidate) is defined by its `mouse-face'
;; property, not by its text.  For example, it is not delimited by
;; whitespace (completion candidates can contain spaces and newlines).
;; A context-specific function picks up the set of selected
;; completions as a list.
;;
;; Similar opportunities can exist for other tabular or line-list
;; data: `*Buffer List*', compile/grep output, Info breadcrumbs,...
;; Use your imagination.  The Dired example is typical here: the
;; region sweeps out text linearly, but the only thing we are really
;; interested in are the file and subdirectory names that are inside
;; the region.
;;
;; -------------------------------------------------------------------
;;
;;
;; User options defined here:
;;
;;   `mouse3-dired-function', `mouse3-double-click-command',
;;   `mouse3-picture-mode-x-popup-panes',
;;   `mouse3-region-popup-entries',
;;   `mouse3-region-popup-include-global-menus-flag',
;;   `mouse3-region-popup-x-popup-panes',
;;   `mouse3-region-popup-x-popup-panes-flag',
;;   `mouse3-second-click-default-command'.
;;
;; Commands defined here:
;;
;;   `mouse3-dired-flag-region-files-for-deletion',
;;   `mouse3-dired-mark-region-files',
;;   `mouse3-dired-toggle-marks-in-region',
;;   `mouse3-dired-toggle-marks-in-region-from-mouse',
;;   `mouse3-dired-unmark-region-files', `mouse3-dired-use-menu',
;;   `mouse3-dired-use-toggle-marks', `mouse3-kill/delete-region',
;;   `mouse3-region-popup-menu'.
;;
;; Non-interactive functions defined here:
;;
;;   `mouse3-dired-add-region-menu',
;;   `mouse3-dired-set-to-toggle-marks',
;;   `mouse3-dired-this-file-marked-p',
;;   `mouse3-dired-this-file-unmarked-p',
;;   `mouse3-dired-toggle-marks-in-region',
;;   `mouse3-nonempty-region-p', `mouse3-region-popup-choice',
;;   `mouse3-region-popup-choice-1',
;;   `mouse3-region-popup-custom-entries',
;;   `mouse3-second-click-command'.
;;
;; Internal variables defined here:
;;
;;   `mouse3-region-popup-change-text-submenu',
;;   `mouse3-region-popup-check-convert-submenu',
;;   `mouse3-region-popup-copy-submenu',
;;   `mouse3-region-popup-highlight-submenu',
;;   `mouse3-region-popup-misc-submenu',
;;   `mouse3-region-popup-print-submenu',
;;   `mouse3-region-popup-rectangle-submenu',
;;   `mouse3-region-popup-register-submenu',
;;   `mouse3-region-popup-remove/replace-items',
;;   `mouse3-region-popup-remove/replace-rect-submenu',
;;   `mouse3-save-then-kill-command'.
;;
;;
;;  ***** NOTE: The following functions defined in `mouse.el' have
;;              been REDEFINED HERE:
;;
;;  `mouse-save-then-kill' - Uses `mouse3-second-click-command' to
;;                           define second `mouse-3' click behavior.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (mouse-slider-mode . [(20130609 826) nil "scale numbers dragged under the mouse" single ";;; Commentary:

;; With this minor mode enabled in a buffer, right-clicking and
;; dragging horizontally with the mouse on any number will
;; increase/decrease it. It's works like this (video is not actually
;; about this minor mode):

;;   http://youtu.be/FpxIfCHKGpQ

;; If an evaluation function is defined for the current major mode in
;; `mouse-slider-mode-eval-funcs', the local expression will also be
;; evaluated as the number is updated. For example, to add support for
;; [Skewer](https://github.com/skeeto/skewer-mode) in
;; [js2-mode](https://github.com/mooz/js2-mode),

;;   (add-to-list 'mouse-slider-mode-eval-funcs
;;                '(js2-mode . skewer-eval-defun))

;; The variable `mouse-slider-eval' enables/disables this evaluation
;; step.

"]) (mouse+ . [(20131227 141) nil "Extensions to `mouse.el'." single ";;; Commentary:
;;
;;    Extensions to `mouse.el'.
;;
;;  Command `mouse-flash-position' highlights the character after the
;;  mouse pointer position, even as you drag it.  This can help make
;;  it clearer exactly where a `yank' will occur when you use
;;  `mouse-2'.  When you press `mouse-2', if the highlighted position
;;  is not exactly what you want, just keep `mouse-2' held while you
;;  move to the right location.  To enable this behavior, bind
;;  `mouse-flash-position' to `down-mouse-2'.
;;
;;  Command `mouse-flash-position-or-M-x' is the same thing as
;;  `mouse-flash-position', except that it has a special behavior in
;;  the echo area (that is, the minibuffer space when the minibuffer
;;  is inactive).  In the echo area, it calls `M-x'.  To enable this
;;  behavior, bind `mouse-flash-position-or-M-x' to `down-mouse-2'.
;;
;;  Command `mouse-scan-lines' tracks the mouse position, highlighting
;;  the line at that position.  It is handy in buffers like Dired that
;;  are essentially tables with columns - it helps you to align
;;  entries that are in the same row.
;;
;;  Command `mouse-scan-lines-or-M-:' is the same thing as
;;  `mouse-scan-lines', except that it has a special behavior in the
;;  echo area.  In the echo area, it calls `M-:'.  To enable this
;;  behavior, bind `mouse-scan-lines-or-M-:' to `S-down-mouse-2'.
;;
;;  See also library `second-sel.el' for enhancements to
;;  `mouse-drag-secondary' and `mouse-secondary-save-then-kill' that
;;  use a separate ring, `secondary-selection-ring', instead of the
;;  `kill-ring'.
;;
;;
;;  Faces defined here:
;;
;;    `mouse-flash-position', `mouse-scan-lines'.
;;
;;  Commands defined here:
;;
;;    `mouse-flash-position', `mouse-flash-position-or-M-x',
;;    `mouse-M-:', `mouse-scan-lines', `mouse-scan-lines-or-M-:'.
;;
;;  Non-interactive functions defined here:
;;
;;    `mouse-flash-posn-track', `mouse-move-flash-posn-overlay'.
;;
;;  Constants defined here:
;;
;;    `mouse-flash-posn-overlay', `mouse-scan-lines-overlay'.
;;
;;
;;  ***** NOTE: The following functions defined in `mouse.el' have
;;              been REDEFINED HERE:
;;
;;  `mouse-drag-region'     - If click echo area and `*Messages*' is
;;                            displayed, do `M-x', delete `*Messages*'
;;  `mouse-tear-off-window' - Don't delete window if it is alone in
;;                            frame.  Instead, clone frame and window.
;;  `mouse-yank-secondary' - Error if (x-get-selection 'SECONDARY)=nil
;;
;;
;;  Do this in your init file (~/.emacs or ~/_emacs):
;;
;;   (require 'mouse+)
;;
;;  Suggested bindings:
;;
;;   (global-set-key [down-mouse-2]        'mouse-flash-position-or-M-x)
;;   (global-set-key [S-down-mouse-2]      'mouse-scan-lines-or-M-:)
;;   (global-set-key [mode-line C-mouse-1] 'mouse-tear-off-window)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (motion-mode . [(20131104 908) ((flymake-easy (0 7)) (flymake-cursor (1 0 2))) "major mode for RubyMotion enviroment" tar ";;; Commentary:

"]) (mote-mode . [(20121014 2119) ((ruby-mode (1 1))) "Mote minor mode" single nil]) (morlock . [(20131231 1834) nil "more font-lock keywords for elisp" single ";;; Commentary:

;; This library defines more font-lock keywords for Emacs lisp.

;; These keyword variables are available:

;; `morlock-el-font-lock-keywords' new expressions that aren't
;;     covered by the default keywords yet (?).
;; `morlock-op-font-lock-keywords' expressions that would be
;;     operators in other languages: `or' `and' `not'
;; `morlock-cl-font-lock-keywords' expressions that used to be
;;     covered by the default keywords but aren't anymore since
;;     the `cl-' prefix was added.  And then some that never
;;     were.
;; `morlock-font-lock-keywords' combines the above tree.

;; To use `morlock-font-lock-keywords' in `emacs-lisp-mode' and
;; `lisp-interaction-mode' enable `global-morlock-mode'.

;; If you want to only enable some of the keywords and/or only in
;; `emacs-lisp-mode', then require `morlock' and activate the keywords
;; in one of the variables using `font-lock-add-keywords'.  Doing so
;; is also slightly more efficient.

;;     (font-lock-add-keywords 'emacs-lisp-mode
;;                              morlock-el-font-lock-keywords)

;; Please let me know if you think anything should be added here.

"]) (monokai-theme . [(20140109 2253) nil "A fruity color theme for Emacs." single ";;; Commentary:
;;
;; A port of the popular Textmate theme Monokai for Emacs 24, built on top
;; of the new built-in theme support in Emacs 24.
;;
"]) (monky . [(20130513 513) nil "Control Hg from Emacs." tar nil]) (mongo . [(20120904 2005) nil "MongoDB driver for Emacs Lisp" tar ";;; Commentary:

;; 

"]) (molokai-theme . [(20130828 0) nil "molokai theme with Emacs theme engine" single ";;; Commentary:

"]) (moe-theme . [(20140112 530) nil "A colorful eye-candy theme. Moe, moe, kyun!" tar nil]) (modtime-skip-mode . [(20130723 2222) nil "Minor mode for disabling modtime and supersession checks on files." single ";;; Commentary:
;;
;; modtime-skip-mode will disable the checking of modification times on files
;; when saving etc.  It will also disable the warning when a file has been changed on disc
;; since you're last save.
;;
;; Usage: M-x modtime-skip-mode to toggle modtime checking on and off
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (modeline-posn . [(20131227 140) nil "Set up `mode-line-position'." single ";;; Commentary:
;;
;;  Change variable `mode-line-position' so that the following changes
;;  are made to the mode line:
;;
;;  1. Highlight the column number when the current column is greater
;;     than limit `modelinepos-column-limit'.  Face
;;     `modelinepos-column-warning' is used for the highlighting.
;;
;;  2. Make `size-indication-mode' show the size of the region,
;;     instead of the buffer size, whenever the region is active.
;;
;;  More precisely for #2: When the region is active, the mode line
;;  displays some information that you can customize - see option
;;  `modelinepos-style'.  Customization choices for this include (a)
;;  the number of chars, (b) the number of chars and number of lines,
;;  and (c) anything else you might want.  Choice (b) is the default.
;;
;;  For (c), you provide a `format' expression as separate components:
;;  the format string and the sexp arguments to be evaluated and
;;  plugged into the string.  The number of sexp args depends on the
;;  format string that you use: one for each `%' construct.
;;
;;  Choice (c) is provided so that you can choose alternative
;;  formatting styles.  For example, instead of ` 256 ch, 13 l', you
;;  could show ` (256 chars, 13 lines)'.  But (c) can really show
;;  information at all.  It need not have anything to do with the
;;  region, but it is nevertheless shown when the region is active.
;;
;;  Option `modelinepos-empty-region-flag' determines whether to show
;;  the active-region indication when the active region is empty.  By
;;  default it is t, meaning indicate an empty active region.
;;
;;  Note: Loading this library changes the default definition of
;;        `mode-line-position'.
;;
;;  To use this library, put this in your Emacs init file (~/.emacs):
;;
;;    (require 'modeline-posn)
;;
;;  To show the column number highlighting, turn on Column Number
;;  mode.  You can do that in your Emacs init file this way:
;;
;;    (column-number-mode 1)
;;
;;  To show the buffer and region size indication in the mode line,
;;  turn on Size Indication.  You can do that in your Emacs init file
;;  this way:
;;
;;    (size-indication-mode 1) ; Turn on Size Indication mode.
;;
;;  You can customize `modelinepos-column-limit' or bind it to
;;  different values for different modes.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (mode-line-debug . [(20121207 744) nil "show status of `debug-on-error' in the mode-line" single ";;; Commentary:

;; Show the status of `debug-on-error' in the mode-line.

;; This provides Mode-Line-Debug mode whidh depending on the state of
;; `debug-on-error' inserts a different string into the mode-line
;; before the list of active modes.  The inserted character can be
;; used to toggle the state of `debug-on-error' can be customized
;; using `mode-line-debug-strings'.

"]) (mode-icons . [(20130602 548) nil "Show icons for modes" tar ";;; Commentary:

;;

"]) (mocker . [(20131006 934) ((eieio (1 3)) (el-x (0 2 4))) "mocking framework for emacs" single ";;; Commentary:

;;

"]) (mobdebug-mode . [(20140109 1946) ((lua-mode (20130419)) (emacs (24))) "Major mode for MobDebug" single ";;; Commentary:

;;

"]) (mo-vi-ment-mode . [(20131028 2333) nil "Provide vi-like cursor movement that's easy on the fingers" single nil]) (mo-git-blame . [(20131218 1407) nil "An interactive, iterative 'git blame' mode for Emacs" single nil]) (mmm-mode . [(20131027 1439) nil "Allow Multiple Major Modes in a buffer" tar ";;; Commentary:

;;; MMM Mode is a minor mode that allows multiple major modes to
;;; coexist in a single buffer. Refer to the documentation of the
;;; function `mmm-mode' for more detailed information. This file
;;; contains mode on/off functions and the mode keymap, but mostly
;;; just loads all the subsidiary files.

;;{{{ Parameter Naming

;;; Since version 0.3.7, I've tried to use a uniform scheme for naming
;;; parameters. Here's a brief summary.

;;; BEG and END refer to the beginning and end of a region.
;;; FRONT and BACK refer to the respective delimiters of a region.
;;; FRONT- and BACK-OFFSET are the offsets from delimiter matches.
;;; FRONT-BEG through BACK-END are the endings of the delimiters.
;;; START and STOP bound actions, like searching, fontification, etc.

;;}}}
;;{{{ CL and Parameters

;;; Keyword parameters can be nice because it makes it easier to see
;;; what's getting passed as what. But I try not to use them in user
;;; functions, because CL doesn't make good documentation strings.
;;; Similarly, any hook or callback function can't take keywords,
;;; since Emacs as a whole doesn't use them. And for small parameter
;;; lists, they are overkill. So I use them only for a large number of
;;; optional parameters, such as `mmm-make-region'.

;;; An exception is the various submode class application functions,
;;; which all take all their arguments as keywords, for consistency
;;; and so the classes alist looks nice.

;;; When using keyword arguments, defaults should *always* be supplied
;;; in all arglists. (This pertains mostly to :start and :stop
;;; arguments, usually defaulting to (point-min) and (point-max)
;;; respectively.) `mmm-save-keywords' should only be used for lists
;;; with more than four arguments, such as in `mmm-ify-by-regexp'.

;;; In general, while I have no qualms about using things from CL like
;;; `mapl', `loop' and `destructuring-bind', I try not to use `defun*'
;;; more than I have to. For one, it sometimes makes bad documentation
;;; strings. Furthermore, to a `defun'ned function, a nil argument is
;;; the same as no argument, so it will use its (manual) default, but
;;; to a `defun*'ned function, a nil argument *is* the argument, so
;;; any default specified in the arglist will be ignored. Confusion of
;;; this type should be avoided when at all possible.

;;}}}

"]) (mmm-mako . [(20121019 2351) ((mmm-mode (0 4 8))) "MMM submode class for Mako Templates" single ";;; Commentary:

;; Parts of this code was borrowed from mmm-myghty mode. (Thanks Ben
;; Bangert and Michael Abraham Shulman)

;; Bugs -
;; mmm classes with :back delimeters of \"$\" (such as Mako's ## and %)
;; will carry the :back match over to the next line when <return> is
;; used to end the line (probably because the original \"$\" marker is
;; moved to the next line and mmm-mode doesn't automatically update
;; the match).

"]) (misc-fns . [(20131227 139) nil "Miscellaneous non-interactive functions." single ";;; Commentary:
;;
;;    Miscellaneous non-interactive functions.
;;
;;  Code here is organized into sections by area affected.
;;
;;    Sections are separated by `;;;$ ... ---------------'.
;;
;;  You may want to put this in your `~/.emacs' file, to erase the
;;  minibuffer when it is inactive and `minibuffer-empty-p':
;;
;;   (require 'misc-fns)
;;   (add-hook '<mode>-hook 'notify-user-of-mode), for each <mode>.
;;
;;
;;  Face defined here: `notifying-user-of-mode'.
;;
;;  User options (variables) defined here:
;;
;;    `buffer-modifying-cmds', `mode-line-reminder-duration',
;;    `notifying-user-of-mode-flag'.
;;
;;  Functions defined here:
;;
;;    `another-buffer', `color-named-at', `current-line',
;;    `display-in-mode-line', `do-files', `flatten', `fontify-buffer',
;;    `interesting-buffer-p', `live-buffer-name',
;;    `make-transient-mark-mode-buffer-local', `mode-ancestors',
;;    `mod-signed', `notify-user-of-mode', `region-or-buffer-limits',
;;    `signum', `undefine-keys-bound-to', `undefine-killer-commands',
;;    `unique-name'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (misc-cmds . [(20140101 100) nil "Miscellaneous commands (interactive functions)." single ";;; Commentary:
;;
;;    Miscellaneous commands (interactive functions).
;;
;;  Commands defined here:
;;
;;    `beginning-of-line+', `beginning-of-visual-line+',
;;    `beginning-or-indentation', `chgrp', `chmod', `chown',
;;    `clear-regexp-search-history', `clear-regexp-search-ring'
;;    `clear-search-history', `clear-search-ring',
;;    `clear-search-histories', `comment-region-lines',
;;    `count-chars-in-region', `delete-extra-windows-for-buffer',
;;    `delete-lines', `delete-window-maybe-kill-buffer.',
;;    `end-of-line+', `end-of-visual-line+.',
;;    `forward-char-same-line', `forward-overlay',
;;    `goto-previous-mark', `indent-rigidly-tab-stops',
;;    `indirect-buffer', `kill-buffer-and-its-windows',
;;    `list-colors-nearest', `list-colors-nearest-color-at',
;;    `mark-buffer-after-point', `mark-buffer-before-point',
;;    `old-rename-buffer', `recenter-top-bottom',
;;    `recenter-top-bottom-1', `recenter-top-bottom-2',
;;    `region-length', `region-to-buffer', `region-to-file',
;;    `resolve-file-name', `revert-buffer-no-confirm',
;;    `selection-length', `switch-to-alternate-buffer',
;;    `switch-to-alternate-buffer-other-window', `undo-repeat' (Emacs
;;    24.3+), `view-X11-colors'.
;;
;;  Non-interactive functions defined here:
;;
;;    `line-number-at-pos', `read-shell-file-command'.
;;
;;
;;  ***** NOTE: These EMACS PRIMITIVES have been REDEFINED HERE:
;;
;;    `rename-buffer' - Uses (lax) completion.
;;
;;  Suggested key bindings:
;;
;;   (define-key ctl-x-map [home]     'mark-buffer-before-point)
;;   (define-key ctl-x-map [end]      'mark-buffer-after-point)
;;   (define-key ctl-x-map \"\\M-f\"     'region-to-file)
;;   (define-key ctl-x-map [(control ?\\;)] 'comment-region-lines)
;;   (global-set-key [C-S-f1]         'region-to-buffer)
;;   (global-set-key [C-S-backspace]  'region-to-file)
;;   (global-set-key [home]           'backward-line-text)
;;   (global-set-key [f5]             'revert-buffer-no-confirm) ; A la MS Windows
;;   (substitute-key-definition       'kill-buffer
;;                                    'kill-buffer-and-its-windows global-map)
;;   (substitute-key-definition       'recenter 'recenter-top-bottom global-map)
;;   (substitute-key-definition       'beginning-of-line 'beginning-of-line+ global-map)
;;   (substitute-key-definition       'end-of-line 'end-of-line+ global-map)
;;
;;   The first two of these are needed to remove the default remappings.
;;   (define-key visual-line-mode-map [remap move-beginning-of-line] nil)
;;   (define-key visual-line-mode-map [remap move-end-of-line] nil)
;;   (define-key visual-line-mode-map [home] 'beginning-of-line+)
;;   (define-key visual-line-mode-map [end]  'end-of-line+)
;;   (define-key visual-line-mode-map \"\\C-a\" 'beginning-of-visual-line+)
;;   (define-key visual-line-mode-map \"\\C-e\" 'end-of-visual-line+)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (minor-mode-hack . [(20130212 1228) nil "Change priority of minor-mode keymaps" single ";;; Commentary:
;;
;; A hack of minor-modes.
;;
;; `raise-minor-mode-map-alist' / `lower-minor-mode-map-alist' - resolve `minor-mode-map-alist' conflict
;;
;; Example: 
;; (raise-minor-mode-map-alist 'view-mode)
;; raises priority of `view-mode-map'.
;;
;;; Commands
;;
;; Below are complete command list:
;;
;;  `show-minor-mode-map-priority'
;;    Show priority of `minor-mode-map-alist'.
;;
;;; Customizable Options:
;;
;; Below are customizable option list:
;;
;;
;;; Installation:
;;
;; Put minor-mode-hack.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'minor-mode-hack)
;;
;; No need more.


"]) (minitest . [(20131217 735) ((dash (1 0 0))) "An Emacs mode for ruby minitest files" single nil]) (minimal-session-saver . [(20131106 706) nil "Very lean session saver" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'minimal-session-saver)
;;
;;     (minimal-session-saver-install-aliases)
;;
;;     M-x mss-store RET
;;
;;     ;; quit and restart Emacs
;;
;;     M-x mss-load RET
;;
;; Explanation
;;
;; The only information stored by this library is a list of visited
;; files.  Not window configuration, nor point position.
;;
;; Giving a universal prefix argument to any of the interactive
;; session-management commands causes a prompt for the session-state
;; file location, allowing minimal-session-saver to be used as a
;; (very) minimal project manager.
;;
;; When frame-bufs.el is present, the session associated with a
;; particular frame can be stored and recovered.
;;
;; To use minimal-session-saver, place the minimal-session-saver.el
;; library somewhere Emacs can find it, and add the following to your
;; ~/.emacs file:
;;
;;     (require 'minimal-session-saver)
;;
;; Several interactive commands are provided to manage sessions:
;;
;;     minimal-session-saver-store
;;     minimal-session-saver-load
;;     minimal-session-saver-store-frame         ; requires frame-bufs.el
;;     minimal-session-saver-load-frame          ; requires frame-bufs.el
;;     minimal-session-saver-add-buffer
;;     minimal-session-saver-remove-buffer
;;     minimal-session-saver-mark-stored-buffers
;;
;; without keybindings.
;;
;; An additional command
;;
;;     minimal-session-saver-install-aliases
;;
;; installs shorter command aliases for the above, and can
;; be run at autoload-time through a setting in customize.
;;
;; See Also
;;
;;     M-x customize-group RET minimal-session-saver RET
;;
;; Notes
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     Uses if present: frame-bufs.el
;;
;; Bugs
;;
;; TODO
;;
;;     Store multiple sets/frames in same data file and
;;     prompt for choice on load?
;;
;;     Prompt to save all files before running -store
;;
;;     don't count already marked buffers in buff-menu function
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (minibuffer-cua . [(20130906 434) nil "Make CUA mode's S-up/S-down work in minibuffer" single ";;; Commentary:

;;; This module makes CUA mode's S-up/S-down selection movement work
;;; in minibuffer.
;;;
;;; Necessary key bindings are set up for minibuffer by calling
;;; minibuffer-cua-setup.
;;;
;;; (require 'minibuffer-cua)
;;; (minibuffer-cua-setup)

"]) (minibuffer-complete-cycle . [(20130813 945) nil "Cycle through the *Completions* buffer" single ";;; Commentary:

;; The `minibuffer-complete' command, bound by default to TAB in the
;; minibuffer completion keymaps, displays the list of possible
;; completions when no additional characters can be completed.
;; Subsequent invocations of this command cause the window displaying
;; the *Completions* buffer to scroll, if necessary.
;; 
;; This library advises the `minibuffer-complete' command so that
;; subsequent invocations instead select each of the possible
;; completions in turn, inserting it into the minibuffer and
;; highlighting it in the *Completions* buffer.  As before, the window
;; displaying the possible completions is scrolled if necessary.  This
;; feature is enabled by loading this file and setting the
;; `minibuffer-complete-cycle' option to t with `M-x customize-variable'
;; or `M-x set-variable'; it is disabled by unsetting the option (to
;; nil).  Besides t, the special value `auto' enables the feature and
;; also causes the first completion to be selected immediately.
;; 
;; You can also customize the `minibuffer-complete-cycle' face, which is
;; used to highlight the selected completion, with `M-x customize-face'
;; or any of the `M-x set-face-' commands.

;; The technique of deleting the minibuffer contents, then (for file
;; name completion) inserting the directory component of the initial
;; input, and then inserting the completion string itself is based on
;; cycle-mini.el (1.03) by Joe Reiss <jreiss@vt.edu>.
;;
;; Emacs 24 introduced `completion-cycle-threshold' which achieves a
;; similar goal.  This extension allows you to see the completion
;; window while cycling, and to cycle backward with <backtab>.

"]) (migemo . [(20130310 712) nil "Japanese incremental search through dynamic pattern expansion" single ";;; Commentary:

;;

"]) (midje-test-mode . [(20131208 914) ((clojure-mode (1 7)) (cider (0 3 0))) "Minor mode for midje" single ";;; Commentary:

;; This library is based on the clojure-test-mode by Phil Hagelberg et al.

"]) (midje-mode . [(20131019 1357) ((cider (0 1 4)) (clojure-mode (1 0))) "Minor mode for running Midje tests in emacs" tar nil]) (mic-paren . [(20120716 1647) nil "advanced highlighting of matching parentheses" single ";;; Commentary:

;; ----------------------------------------------------------------------
;; Short Description:
;;
;; Load this file, activate it and Emacs will display highlighting on
;; whatever parenthesis (and paired delimiter if you like this) matches
;; the one before or after point.  This is an extension to the paren.el
;; file distributed with Emacs.  The default behaviour is similar to
;; paren.el but more sophisticated.  Normally you can try all default
;; settings to enjoy mic-paren.
;;
;; Some examples to try in your ~/.emacs:
;;
;; (add-hook 'LaTeX-mode-hook
;;           (function (lambda ()
;;                       (paren-toggle-matching-quoted-paren 1)
;;                       (paren-toggle-matching-paired-delimiter 1))))
;;
;; (add-hook 'c-mode-common-hook
;;           (function (lambda ()
;;                        (paren-toggle-open-paren-context 1))))
;;
;; ----------------------------------------------------------------------
;; Installation:
;;
;; o Place this file in a directory in your `load-path' and byte-compile
;;   it.  If there are warnings, please report them to ttn.
;; o Put the following in your .emacs file:
;;      (require 'mic-paren) ; loading
;;      (paren-activate)     ; activating
;;      ;;; set here any of the customizable variables of mic-paren:
;;      ;;; ...
;; o Restart your Emacs; mic-paren is now installed and activated!
;; o To list the possible customizations type `C-h f paren-activate' or
;;   go to the customization group `mic-paren-matching'.
;;
;; ----------------------------------------------------------------------
;; Long Description:
;;
;; mic-paren.el is an extension and replacement to the packages paren.el
;; and stig-paren.el for Emacs.  When mic-paren is active Emacs normal
;; parenthesis matching is deactivated.  Instead parenthesis matching will
;; be performed as soon as the cursor is positioned at a parenthesis.  The
;; matching parenthesis (or the entire structured expression between the
;; parentheses) is highlighted until the cursor is moved away from the
;; parenthesis.  Features include:
;; o Both forward and backward parenthesis matching (simultaneously if
;;   cursor is between two expressions).
;; o Indication of mismatched parentheses.
;; o Recognition of \"escaped\" (also often called \"quoted\") parentheses.
;; o Option to match \"escaped\" parens too, especially in (La)TeX-mode
;;   (e.g., matches expressions like \"\\(foo bar\\)\" properly).
;; o Offers two functions as replacement for `forward-sexp' and
;;   `backward-sexp' which handle properly quoted parens (s.a.).  These
;;   new functions can automatically be bounded to the original binding
;;   of the standard `forward-sexp' and `backward-sexp' functions.
;; o Option to activate matching of paired delimiter (i.e., characters with
;;   syntax '$').  This is useful for writing in LaTeX-mode for example.
;; o Option to select in which situations (always, never, if match, if
;;   mismatch) the entire expression should be highlighted or only the
;;   matching parenthesis.
;; o Message describing the match when the matching parenthesis is off-screen
;;   (vertical and/or horizontal).  Message contains either the linenumber or
;;   the number of lines between the two matching parens.  Option to select in
;;   which cases this message should be displayed.
;; o Optional delayed highlighting (useful on slow systems),
;; o Functions to activate/deactivate mic-paren.el are provided.
;; o Numerous options to control the behaviour and appearance of
;;   mic-paren.el.
;;
;; mic-paren.el was originally developed and tested under Emacs 19.28 -
;; 20.3.  Since then, support for Emacs 19 and 20 has bit-rotted (not
;; dropped completely, but not tested against changes, either), and
;; will probably be removed without warning in a future version.  This
;; version was developed and tested under Emacs 23.0.60 (wip).  XEmacs
;; compatibility has been provided by Steven L Baur <steve@xemacs.org>.
;; Jan Dubois (jaduboi@ibm.net) provided help to get mic-paren to work in
;; OS/2.
;;
;; This file (and other wonderful stuff) can be obtained from
;; the Emacs Wiki: <http://www.emacswiki.org/>
;;
;; ----------------------------------------------------------------------
;; Available customizable options:
;; - `paren-priority'
;; - `paren-overlay-priority'
;; - `paren-sexp-mode'
;; - `paren-highlight-at-point'
;; - `paren-highlight-offscreen'
;; - `paren-display-message'
;; - `paren-message-linefeed-display'
;; - `paren-message-no-match'
;; - `paren-message-show-linenumber'
;; - `paren-message-truncate-lines'
;; - `paren-max-message-length'
;; - `paren-ding-unmatched'
;; - `paren-delay'
;; - `paren-dont-touch-blink'
;; - `paren-match-face'
;; - `paren-mismatch-face'
;; - `paren-no-match-paren'
;; - `paren-bind-modified-sexp-functions'
;; Available customizable faces:
;; - `paren-face-match'
;; - `paren-face-mismatch'
;; - `paren-face-no-match'
;; Available commands:
;; - `paren-activate'
;; - `paren-deactivate'
;; - `paren-toggle-matching-paired-delimiter'
;; - `paren-toggle-matching-quoted-paren'
;; - `paren-toggle-open-paren-context'
;; - `paren-forward-sexp'
;; - `paren-backward-sexp'
;; ----------------------------------------------------------------------
;;
;; IMPORTANT NOTES (important for people who have customized mic-paren
;;                  from within elisp):
;; - In version >= 3.3 the prefix \"mic-\" has been removed from the
;;   command-names `mic-paren-forward-sexp' and `mic-paren-backward-sexp'.
;;   Now all user-functions and -options begin with the prefix \"paren-\"
;;   because this package should be a replacement of the other
;;   paren-packages like paren.el and stig-paren.el!
;; - In version >= 3.2 the prefix \"mic-\" has been removed from the
;;   command-names `mic-paren-toggle-matching-quoted-paren' and
;;   `mic-paren-toggle-matching-paired-delimiter'.
;; - In versions >= 3.1 mic-paren is NOT auto-activated after loading.
;; - In versions >= 3.0 the variable `paren-face' has been renamed to
;;   `paren-match-face'.
;;
;; ----------------------------------------------------------------------
;; Versions:
;; v3.10   + Added message-length clamping (var `paren-max-message-length').
;;           Thanks to Jonathan Kotta.
;;
;; v3.9    + Fixed XEmacs bug in `define-mic-paren-nolog-message'.
;;           Thanks to Sivaram Neelakantan.
;;
;; v3.8    + Maintainership (crassly) grabbed by ttn.
;;         + License now GPLv3+.
;;         + Byte-compiler warnings eliminated; if you see one, tell me!
;;         + Dropped funcs: mic-char-bytes, mic-char-before.
;;         + Docstrings, messages, comments revamped.
;;
;; v3.7    + Removed the message \"You should be in LaTeX-mode!\".
;;         + Fixed a bug in `paren-toggle-matching-quoted-paren'.
;;         + Fixed some misspellings in the comments and docs.
;;
;; v3.6    + Fixed a very small bug in `mic-paren-horizontal-pos-visible-p'.
;;         + The informational messages like \"Matches ... [+28]\" which are
;;           displayed if the matching paren is offscreen, do not longer
;;           wasting the log.
;;
;; v3.5    + No mic-paren-messages are displayed if we are in isearch-mode.
;;         + Matching quoted parens is switched on if entering a minibuffer.
;;           This is useful for easier inserting regexps, e.g., with
;;           `query-replace-regexp'.  Now \\(...\\) will be highlighted
;;           in the minibuffer.
;;         + New option `paren-message-show-linenumber': You can determine
;;           the computation of the offscreen-message-linenumber.  Either the
;;           number of lines between the two matching parens or the absolute
;;           linenumber.  (Thank you for the idea and a first implementation
;;           to Eliyahu Barzilay <eli@cs.bgu.ac.il>.)
;;         + New option `paren-message-truncate-lines': If mic-paren messages
;;           should be truncated or not (has only an effect in GNU Emacs 21).
;;           (Thank you for the idea and a first implementation to Eliyahu
;;           Barzilay <eli@cs.bgu.ac.il>.)
;;
;; v3.4    + Corrected some bugs in the backward-compatibility for older
;;           Emacsen.  Thanks to Tetsuo Tsukamoto <czkmt@remus.dti.ne.jp>.
;;
;; v3.3    + Now the priority of the paren-overlays can be customized
;;           (option `paren-overlay-priority').  For a description of the
;;           priority of an overlay see in the emacs-lisp-manual the node
;;           \"Overlays\".  This option is mainly useful for experienced
;;           users which use many packages using overlays to perform their
;;           tasks.
;;         + Now you can determine what line-context will be displayed if
;;           the matching open paren is offscreen.  In functional
;;           programming languages like lisp it is useful to display the
;;           following line in the echo-area if the opening matching paren
;;           has no preceding text in the same line.
;;           But in procedural languages like C++ or Java it is convenient
;;           to display the first previous non empty line in this case
;;           instead of the following line.  Look at the new variable
;;           `paren-open-paren-context-backward' and the related toggling
;;           function `paren-toggle-open-paren-context' for a detailed
;;           description of this new feature.
;;         + In addition to the previous described new feature you can
;;           specify how a linefeed in the message (e.g., if the matching
;;           paren is offscreen) is displayed.  This is mainly because the
;;           standard echo-area display of a linefeed (^J) is bad to read.
;;           Look at the option `paren-message-linefeed-display'.
;;         + Solved a little bug in the compatibility-code for Emacsen
;;           not supporting current customize-feature.
;;         + Removed the prefix \"mic-\" from the commands
;;           `mic-paren-forward-sexp' and `mic-paren-backward-sexp'.
;;           For an explanation look at comments for version v3.2.
;;
;; v3.2    + The prefix \"mic-\" has been removed from the commands
;;           `mic-paren-toggle-matching-quoted-paren' and
;;           `mic-paren-toggle-matching-paired-delimiter'.  This is for
;;           consistency.  Now all user-variables, -faces and -commands
;;           begin with the prefix \"paren-\" and all internal functions
;;           and variables begin with the prefix \"mic-paren-\".
;;         + Now you can exactly specify in which situations the whole
;;           sexp should be highlighted (option `paren-sexp-mode'):
;;           Always, never, if match or if mismatch.  Tested with Gnus
;;           Emacs >= 20.3.1 and XEmacs >= 21.1.
;;
;; v3.1    + From this version on mic-paren is not autoloaded.  To
;;           activate it you must call `paren-activate' (either in your
;;           .emacs or manually with M-x).  Therefore the variable
;;           `paren-dont-activate-on-load' ise obsolet and has been
;;           removed.
;;         + Now mic-paren works also in older Emacsen without the
;;           custom-feature.  If the actual custom-library is provided
;;           mic-paren use them and is full customizable otherwise normal
;;           defvars are used for the options.
;;         + Fix of a bug displaying a message if the matching paren is
;;           horizontal out of view.
;;         + All new features are now tested with XEmacs >= 21.1.6.
;;
;; v3.0    + Checking if matching paren is horizontally offscreen (in
;;           case of horizontal scrolling).  In that case the message is
;;           displayed in the echo-area (anlogue to vertical offscreen).
;;           In case of horizontal offscreen closing parenthesis the
;;           displayed message is probably wider than the frame/window.
;;           So you can only read the whole message if you are using a
;;           package like mscroll.el (scrolling long messages) in GNU
;;           Emacs.
;;         + Now full customizable, means all user-options and -faces now
;;           can be set with the custom-feature of Emacs.  On the other
;;           hand, this means this version of mic-paren only works with an
;;           Emacs which provides the custom-package!
;;         + In case of the matching paren is offscreen now the displayed
;;           message contains the linenumber of the matching paren too.
;;         This version is only tested with Gnu Emacs >= 20.4 and not with
;;         any XEmacs!
;;         Implemented by Klaus Berndl <berndl@sdm.de>.
;;
;; v2.3    No additional feature but replacing `char-bytes' and
;;         `char-before' with `mic-char-bytes' and `mic-char-before' to
;;         prevent a clash in the global-namespace.  Now the new
;;         features of v2.1 and v2.2 are also tested with XEmacs!
;;
;; v2.2    Adding the new feature for matching paired delimiter.  Not
;;         tested with XEmacs.  Implemented by Klaus Berndl <berndl@sdm.de>
;;
;; v2.1    Adding the new feature for matching escaped parens too.  Not
;;         tested with XEmacs.  Implemented by Klaus Berndl <berndl@sdm.de>.
;;
;; v2.0    Support for MULE and Emacs 20 multibyte characters added.
;;         Inspired by the suggestion and code of Saito Takaaki
;;         <takaaki@is.s.u-tokyo.ac.jp>.
;;
;; v1.9    Avoids multiple messages/dings when point has not moved.  Thus,
;;         mic-paren no longer overwrites messages in minibuffer.  Inspired by
;;         the suggestion and code of Barzilay Eliyahu <eli@cs.bgu.ac.il>.
;;
;; v1.3.1  Some spelling corrected (from Vinicius Jose Latorre
;;         <vinicius@cpqd.br> and Steven L Baur <steve@xemacs.org>).
;;
;; v1.3    Added code from Vinicius Jose Latorre <vinicius@cpqd.br> to
;;         highlight unmatched parentheses (useful in minibuffer).
;;
;; v1.2.1  Fixed stuff to work with OS/2 emx-emacs:
;;          - checks if `x-display-colour-p' is bound before calling it;
;;          - changed how X/Lucid Emacs is detected.
;;         Added automatic load of the timer-feature (plus variable to
;;         disable the loading).

"]) (mew . [(20140114 2200) nil "Messaging in the Emacs World" tar ";;; Commentary:

;; The updated version is available from:
;;	http://www.Mew.org/
;;
;; See info for configuring a site file/.emacs/.mew.el.

"]) (metaweblog . [(20130707 431) ((xml-rpc (1 6 8))) "An emacs library to access metaweblog based weblogs" tar nil]) (merlin . [(20140111 24) nil "Mode for Merlin, an assistant for OCaml." single ";;; Commentary:
;; Description:
;; merlin-mode is an Emacs interface to merlin.  It allows you to perform
;; queries such as getting the type of an expression, completion, and so on.

;; Installation:
;; You need merlin installed on your system (ocamlmerlin binary) for merlin-mode
;; to work.

"]) (menu-bar+ . [(20131227 137) nil "Extensions to `menu-bar.el'." single ";;; Commentary:
;;
;;    Extensions to `menu-bar.el'.  Redefines the default menu bar.
;;
;;  Usage:
;;
;;    This library should be loaded after loading standard library
;;    `menu-bar.el'.  So, in your `~/.emacs' file, do this:
;;
;;      (eval-after-load \"menu-bar\" '(require 'menu-bar+))
;;
;;    You will also want to do that before loading other libraries
;;    that might modify the following predefined menu-bar menus:
;;
;;      `File'
;;      `Edit'
;;      `More Manuals'
;;      `Options'
;;      `Search'
;;
;;    This is because those menus correspond to the variables
;;    mentioned at the end of this commentary as being REDEFINED here.
;;    If a library modifies one of those variables before you load
;;    `menu-bar+.el' then those changes will be lost when the variable
;;    is redefined.
;;
;;    The following libraries are exceptions to this rule.  If loaded
;;    before `menu-bar+.el' then they are used by `menu-bar+.el'.  So
;;    if you use them then load them before loading `menu-bar+.el'.
;;
;;      `doremi.el'
;;      `help+.el'
;;      `help-fns+.el'
;;      `thumb-frm.el'
;;      `w32-browser-dlgopen.el'
;;
;;  Main differences:
;;
;;    1. Menus \"Search\", \"Frames\" and \"Do Re Mi\" were added.
;;    2. Menus \"File\", \"Edit\", & \"Help\" were changed.
;;    3. Menu order was changed.
;;    4. Buffer-local menus are separated from global menus via \"||\".
;;
;;
;;  User options defined here:
;;
;;    `menu-barp-select-buffer-function'.
;;
;;  Commands defined here:
;;
;;    `describe-menubar', `fill-paragraph-ala-mode',
;;    `menu-bar-create-directory', `menu-bar-next-tag-other-window',
;;    `menu-bar-select-frame' (Emacs 20),
;;    `menu-bar-word-search-backward' (Emacs 22+),
;;    `menu-bar-word-search-forward' (Emacs 22+),
;;    `nonincremental-repeat-search-backward' (Emacs 22+),
;;    `nonincremental-repeat-search-forward' (Emacs 22+),
;;    `nonincremental-repeat-word-search-backward' (Emacs < 22),
;;    `nonincremental-repeat-word-search-forward' (Emacs < 22),
;;
;;  Macros defined here:
;;
;;    `menu-bar-make-toggle-any-version'.
;;
;;  Non-interactive functions defined here:
;;
;;    `menu-barp-nonempty-region-p'.
;;
;;  Variables defined here:
;;
;;    `menu-bar-apropos-menu', `menu-bar-describe-menu',
;;    `menu-bar-divider-menu', `menu-bar-doremi-menu',
;;    `menu-bar-edit-fill-menu', `menu-bar-edit-region-menu',
;;    `menu-bar-edit-sort-menu', `menu-bar-emacs-lisp-manual-menu',
;;    `menu-bar-emacs-manual-menu', `menu-bar-frames-menu',
;;    `menu-bar-i-search-menu' (Emacs < 22),
;;    `menu-bar-search-replace-menu', `menu-bar-search-tags-menu',
;;    `menu-bar-whereami-menu', `yank-menu'.
;;
;;
;;  ***** NOTE: The following functions defined in `menu-bar.el' have
;;              been REDEFINED HERE:
;;
;;  `kill-this-buffer' - Deletes buffer's windows as well, if
;;                       `sub-kill-buffer-and-its-windows'.
;;
;;  `menu-bar-options-save' - Added options are saved (>= Emacs 21).
;;
;;  `menu-bar-select-buffer' (Emacs 20-22) - Uses -other-frame.
;;
;;  `menu-bar-select-frame' - Use Emacs 22 version for Emacs 20.
;;
;;
;;  ***** NOTE: The following variables defined in `menu-bar.el' have
;;              been REDEFINED HERE:
;;
;;  `menu-bar-edit-menu', `menu-bar-file(s)-menu',
;;  `menu-bar-manuals-menu', `menu-bar-options-menu',
;;  `menu-bar-search-menu'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (mentor . [(20130519 1540) ((xml-rpc (1 6 9))) "Frontend for the rTorrent bittorrent client" tar ";;; Commentary:

;; mentor is a GNU Emacs frontend for the `rTorrent' bittorrent client.  It uses
;; XML-RPC to communicate with rTorrent, and needs rTorrent to be configured
;; accordingly.

;; This project aims to provide a feature complete and highly customizable
;; interface, which will feel familiar to Emacs users. Key bindings are chosen
;; to be as close to the vanilla rTorrent curses interface as possible.

;; mentor still has some way to go before it can really be considered a complete
;; interface, so please moderate your expectations. It works fine for many
;; common tasks though, and in some cases (dare we say?) much better than the
;; standard ncurses interface.

;; * QUICK START

;; Assuming you are installing mentor through MELPA, which is the recommended
;; way, here are some instructions to get you started. Otherwise, please see the
;; README.org file included in the repository for additional instructions.

;; 1. Add this to your init.el:
;;
;;    (require 'mentor)
;;    (setq mentor-rtorrent-url \"scgi://localhost:5000\")
;;
;;    Evaluate these lines or restart Emacs.
   
;; 2. Add this to your ~/.rtorrent.rc:
;;    
;;    scgi_port = 127.0.0.1:5000
;;    xmlrpc_dialect = i8
;;    encoding_list = UTF-8
;;    
;;    Make sure `scgi_port' matches `mentor-rtorrent-url' above. Restart rTorrent.

;; 3. To start mentor, run:
;;
;;    M-x mentor

;; ** ADDITIONAL CONFIGURATION
;;
;; You can find Mentor in the `External' customize group.
;;
;;   M-x customize

;; ** CONFIGURING RTORRENT
;; 
;; For more information on configuring rTorrent, refer to:
;;
;; http://libtorrent.rakshasa.no/wiki/RTorrentXMLRPCGuide

;; * KNOWN ISSUES

;; - The file view needs much love, and is currently not known to be
;;   working. Sorry.
;;
;; - There is no view for trackers/peers/extra information.
;;
;; - There is currently no support (patches welcome) for communicating with
;;   rtorrent over a local socket using the more secure scgi_local command. This
;;   means it is currently not advisable to use mentor on anything but single
;;   user systems.
;;
;; - mentor currently has some performance issues if you have many torrents
;;   (several hundreds). Be aware.

;; * CONTACT
;;
;; You can find the latest development version of mentor here:
;;
;; http://www.github.com/skangas/mentor

;; Bug reports, comments, and suggestions are welcome! Send them to
;; <skangas@skangas.se> or report them on GitHub.

"]) (memoize . [(20130421 1234) nil "Memoization functions" single ";;; Commentary:

;; `memoize' accepts a symbol or a function. When given a symbol, the
;; symbol's function definition is memoized and installed overtop of
;; the original function definition. When given a function, it returns
;; a memoized version of that function.

;;     (memoize 'my-expensive-function)

;; `defmemoize' defines a memoized function directly, behaving just
;; like `defun'.

;;     (defmemoize my-expensive-function (x)
;;       (if (zerop n)
;;           1
;;         (* n (my-expensive-function (1- n)))))

;; Memoizing an interactive function will render that function
;; non-interactive. It would be easy to fix this problem when it comes
;; to non-byte-compiled functions, but recovering the interactive
;; definition from a byte-compiled function is more complex than I
;; care to deal with. Besides, interactive functions are always used
;; for their side effects anyway.

;; There's no way to memoize nil returns, but why would your expensive
;; functions do all that work just to return nil? :-)

;; Memoization takes up memory, which should be freed at some point.
;; Because of this, all memoization has a timeout from when the last
;; access was. The default timeout is set by
;; `memoize-default-timeout'.  It can be overriden by using the
;; `memoize' function, but the `defmemoize' macro will always just use
;; the default timeout.

;; If you wait to byte-compile the function until *after* it is
;; memoized then the function and memoization wrapper both get
;; compiled at once, so there's no special reason to do them
;; separately. But there really isn't much advantage to compiling the
;; memoization wrapper anyway.

"]) (melpa-upstream-visit . [(20130720 333) ((s (1 6 0))) "A set of kludges to visit a melpa-hosted package's homepage" single ";;; Commentary:

;; This package provides an interactive command to `browse-url' a
;; melpa-hosted package's homepage.
;;
;; To (try to) visit a package's homepage, just
;;   M-x muv RET package-name RET
;; and the package's homepage (actually, its repo page) will be hopefully
;; opened in your browser.
;;
;; The list of kludges used to guess the package's homepage is stored
;; in `muv:url-kludges', a variable that you can customize with your
;; own functions.
;;
;; These functions are applied to a melpa recipe and return a string
;; containing the URL of the package - note that here applied refers
;; to `apply'.  See `muv::github-kludge' for an example.
;;
;; The kludges in the list are applied in order until one of them
;; returns non-nil. The first non-nil result is then interpreted
;; as the URL to be visited.
;;
;; Customization
;; -------------
;;
;; If `muv:enable-muv-button' is non nil - the default - a
;; Visit Homepage button will be show in the package description.
;; The button can be disabled by customizing `muv:enable-muv-button',
;; and can be customized via the customization variables
;; `muv:button-face' and `muv:button-label'.
;;
;; Thank yous:
;; -- milkypostman for melpa :-)
;; -- dgutov for thing-at-point integration



"]) (mediawiki . [(20130223 1141) nil "mediawiki frontend" single ";;; Commentary:

;; This version of mediawiki.el represents a merging of
;; wikipedia-mode.el (maintained by Uwe Brauer <oub at mat.ucm.es>)
;; from http://www.emacswiki.org/emacs/wikipedia-mode.el for its
;; font-lock code, menu, draft mode, replying and convenience
;; functions to produce mediawiki.el 2.0.

;;; Installation

;; If you use ELPA (http://tromey.com/elpa), you can install via the
;; M-x package-list-packages interface. This is preferrable as you
;; will have access to updates automatically.

;; Otherwise, just make sure this file is in your load-path (usually
;; ~/.emacs.d is included) and put (require 'mediawiki.el) in your
;; ~/.emacs or ~/.emacs.d/init.el file.

"]) (mc-extras . [(20130909 27) ((multiple-cursors (1 2 1))) "Extra functions for multiple-cursors mode." tar ";;; Commentary:
;;
;; This package contains extra functions for multiple-cursors mode.
;;
;; Here is a list of the interactive commands provided by mc-extras:
;;
;; * mc/compare-chars
;; * mc/compare-chars-backward
;; * mc/compare-chars-forward
;; * mc/cua-rectangle-to-multiple-cursors
;; * mc/remove-current-cursor
;; * mc/remove-duplicated-cursors
;;
;; Suggested key bindings are as follows:
;;
;;   (define-key mc/keymap (kbd \"C-. C-d\") 'mc/remove-current-cursor)
;;   (define-key mc/keymap (kbd \"C-. d\")   'mc/remove-duplicated-cursors)
;;
;;   (define-key mc/keymap (kbd \"C-. =\")   'mc/compare-chars)
;;
;;   (define-key cua--rectangle-keymap (kbd \"C-. C-,\") 'mc/cua-rectangle-to-multiple-cursors)
;;
;; To enable interaction between multiple cursors and CUA rectangle
;; copy & paste:
;;
;;   (mc/cua-rectangle-setup)

"]) (mb-depth+ . [(20131227 137) nil "Indicate minibuffer-depth in prompt" single ";;; Commentary:
;;
;;  This library modifies library `mb-depth.el' slightly, to let you
;;  decide what depth indicator format to use, and which face to
;;  highlight it in.  It provides a minor tweak to function
;;  `minibuffer-depth-setup', which, in `mb-depth.el', hard-codes the
;;  face and indicator format.
;;
;;  In addition, the default indicator format is simpler than that in
;;  `mb-depth.el', and the default face is `default' instead of
;;  `highlight'.
;;
;;  Faces defined here:
;;
;;    `minibuffer-depth-indicator'.
;;
;;  User options defined here:
;;
;;    `minibuffer-depth-indicator-format'.
;;
;;
;;  To use this library, put this in your init file (~/.emacs):
;;
;;  ;; Use `condition-case' because if `mb-depth.el' can't be found,
;;  ;; then `mb-depth+.el' is not provided.
;;  (condition-case nil (require 'mb-depth+ nil t) (error nil))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (maxframe . [(20120725 639) nil "maximize the emacs frame based on display size" single ";;; Commentary:
;;
;; Purpose
;; -------
;; maxframe provides the ability to maximize the emacs frame and stay within
;; the display resolution.
;;
;; Usage
;; -----
;; Example of lines to be added to your .emacs:
;;
;;     (require 'maxframe)
;;     (add-hook 'window-setup-hook 'maximize-frame t)
;;
;; If using two framebuffers (monitors), it might be necesssary to specify a
;; mf-max-width value set to the pixel width of main framebuffer.  This is
;; necessary because emacs does not yet support sniffing different
;; framebuffers.  Example:
;;
;;     (require 'maxframe)
;;     (setq mf-max-width 1600)  ;; Pixel width of main monitor.
;;     (add-hook 'window-setup-hook 'maximize-frame t)
;;
;; To restore the frame to it's original dimensions, call restore-frame:
;;
;;     M-x restore-frame
;;
;; How it works
;; ------------
;; puts the emacs frame in the top left corner of the display and calculates
;; the maximum number of columns and rows that can fit in the display
;;
;; Limitations
;; -----------
;; Requires Emacs 22 (for fringe support), but maximize-frame still works
;; under Emacs 21 on Windows.
;;
;; Credits
;; -------
;; The w32 specific functions were borrowed from the Emacs Manual:
;; http://www.gnu.org/software/emacs/windows/big.html#windows-like-window-ops


(defgroup maxframe nil \"Handle maximizing frames.\")

(defcustom mf-display-padding-width 0
  \"*Any extra display padding that you want to account for while
determining the maximize number of columns to fit on a display\"
  :type 'integer
  :group 'maxframe)

;; The default accounts for a Mac OS X display with a menubar
;; height of 22 pixels, a titlebar of 23 pixels, and no dock.
(defcustom mf-display-padding-height (+ 22 23)
  \"*Any extra display padding that you want to account for while
determining the maximize number of rows to fit on a display\"
  :type 'integer
  :group 'maxframe)

(defcustom mf-offset-x 0
  \"*The x coordinate of the upper left corner of the frame.
Negative values are interpreted relative to the rightmost
position.  See `set-frame-position'.\"
  :type 'integer
  :group 'maxframe)

(defcustom mf-offset-y 0
  \"*The y coordinate of the upper left corner of the frame.
Negative values are interpreted relative to the bottommost
position.  See `set-frame-position'.\"
  :type 'integer
  :group 'maxframe)

(defcustom mf-max-width nil
  \"*The maximum display width to support.  This helps better
support the true nature of display-pixel-width.  Since multiple
monitors will result in a very large display pixel width, this
value is used to set the stop point for maximizing the frame.
This could also be used to set a fixed frame size without going
over the display dimensions.\"
  :type 'integer
  :group 'maxframe)

(defcustom mf-max-height nil
  \"*The maximum display height to support.  This helps better
support the true nature of display-pixel-height.  See
`mf-max-width'.\"
  :type 'integer
  :group 'maxframe)

;;;###autoload
(defun w32-maximize-frame ()
  \"Maximize the current frame (windows only)\"
  (interactive)
  (w32-send-sys-command 61488))

;;;###autoload
(defun w32-restore-frame ()
  \"Restore a minimized/maximized frame (windows only)\"
  (interactive)
  (w32-send-sys-command 61728))

(defun mf-max-columns (width)
  \"Calculates the maximum number of columns that can fit in
pixels specified by WIDTH.\"
  (let ((scroll-bar (or (frame-parameter nil 'scroll-bar-width) 0))
        (left-fringe (or left-fringe-width (nth 0 (window-fringes)) 0))
        (right-fringe (or right-fringe-width (nth 1 (window-fringes)) 0)))
    (/ (- width scroll-bar left-fringe right-fringe
          mf-display-padding-width)
       (frame-char-width))))

(defun mf-max-rows (height)
  \"Calculates the maximum number of rows that can fit in pixels
specified by HEIGHT.\"
  (/ (- height
        mf-display-padding-height)
     (frame-char-height)))

(defun mf-set-frame-pixel-size (frame width height)
  \"Sets size of FRAME to WIDTH by HEIGHT, measured in pixels.\"
  (set-frame-size frame (mf-max-columns width) (mf-max-rows height)))

(defun mf-max-display-pixel-width ()
  (min (display-pixel-width)
       (or mf-max-width (display-pixel-width))))

(defun mf-max-display-pixel-height ()
  (min (display-pixel-height)
       (or mf-max-height (display-pixel-height))))

;;;###autoload
(defun x-maximize-frame (&optional the-frame)
  \"Maximize the current frame (x or mac only)\"
  (interactive)
  (let ((target-frame
	 (if the-frame the-frame (selected-frame))))
    (unless (or (frame-parameter target-frame 'mf-restore-width)
                (frame-parameter target-frame 'mf-restore-height)
                (frame-parameter target-frame 'mf-restore-top)
                (frame-parameter target-frame 'mf-restore-left))
      (set-frame-parameter target-frame 'mf-restore-width  (frame-width))
      (set-frame-parameter target-frame 'mf-restore-height (frame-height))
      (set-frame-parameter target-frame 'mf-restore-top    (frame-parameter nil 'top))
      (set-frame-parameter target-frame 'mf-restore-left   (frame-parameter nil 'left)))
    (set-frame-parameter target-frame 'mf-maximized t)
    (mf-set-frame-pixel-size target-frame
                             (mf-max-display-pixel-width)
                             (mf-max-display-pixel-height))
    (set-frame-position target-frame mf-offset-x mf-offset-y)))

;;;###autoload
(defun x-restore-frame (&optional the-frame)
  \"Restore the current frame (x or mac only)\"
  (interactive)
  (let ((target-frame
	 (if the-frame the-frame (selected-frame))))
    (let ((mf-restore-width  (frame-parameter target-frame 'mf-restore-width))
          (mf-restore-height (frame-parameter target-frame 'mf-restore-height))
          (mf-restore-top    (frame-parameter target-frame 'mf-restore-top))
          (mf-restore-left   (frame-parameter target-frame 'mf-restore-left)))
      (when (and mf-restore-width mf-restore-height mf-restore-top mf-restore-left)
        (set-frame-size target-frame mf-restore-width mf-restore-height)
        (set-frame-position target-frame
                            (if (consp mf-restore-left) 0 mf-restore-left)
                          mf-restore-top))
      (set-frame-parameter target-frame 'mf-maximized      nil)
      (set-frame-parameter target-frame 'mf-restore-width  nil)
      (set-frame-parameter target-frame 'mf-restore-height nil)
      (set-frame-parameter target-frame 'mf-restore-top    nil)
      (set-frame-parameter target-frame 'mf-restore-left   nil))))

;;;###autoload
(defun maximize-frame ( &optional the-frame)
  \"Maximizes the frame to fit the display if under a windowing
system.\"
  (interactive)
  (cond ((eq window-system 'w32) (w32-maximize-frame))
        ((memq window-system '(x mac ns)) (x-maximize-frame the-frame))))

;;;###autoload
(defun restore-frame ( &optional the-frame)
  \"Restores a maximized frame.  See `maximize-frame'.\"
  (interactive)
  (cond ((eq window-system 'w32) (w32-restore-frame))
        ((memq window-system '(x mac ns)) (x-restore-frame the-frame))))

;;;###autoload
(defalias 'mf 'maximize-frame)

(provide 'maxframe)

;;; maxframe.el ends here"]) (maude-mode . [(20130604 725) nil "Emacs mode for the programming language Maude" single nil]) (matlab-mode . [(20130829 142) nil "No description available." tar nil]) (math-symbols . [(20130910 31) ((helm (1 0))) "Math Symbol Input methods and conversion tools" tar ";;; Commentary:
;;
;; -*- mode: org -*-
;; * Description
;; 
;; This utility lets you input math symbols by TeX names
;; with the following commands.
;;
;; - M-x toggle-input-method + math-symbols-tex
;; - M-x math-symbols-from-tex-region
;; - M-x math-symbols-insert
;; - M-x math-symbols-helm
;;
;; Also, you can convert character to TeX names by the following command.
;; - M-x math-symbols-to-tex-region
;; - M-x math-symbols-to-tex-unicode-region
;; 
;; You can also input various styled mathematical symbols by input
;; methods, or by specifying region or string, as shown in the
;; following examples.
;; 
;; 
;; * Examples:
;;
;; ** TeX to Char Conversion
;; : \"\\int g(x^2)dx = \\pi e^(ix)\" \342\206\222 \"\342\210\253 \360\235\221\224(\360\235\221\245\302\262)\360\235\221\221\360\235\221\245 = \360\235\234\213 \360\235\221\222^(\360\235\221\226\360\235\221\245)\"
;; : (M-x math-symbols-from-tex-region)
;; : \"f(x+y)\" \342\206\222 \"\360\235\221\223(\360\235\221\245+\360\235\221\246)\" (M-x math-symbols-italic-region)
;;
;; ** Character to Math-Character Conversion
;; : \"Fraktur\" \342\206\222 \"\360\235\224\211\360\235\224\257\360\235\224\236\360\235\224\250\360\235\224\261\360\235\224\262\360\235\224\257\" (M-x math-symbols-fraktur-region)
;; : \"black\" \342\206\222 \"\360\235\222\267\342\204\223\360\235\222\266\360\235\222\270\360\235\223\200\" (M-x math-symbols-script-region)
;; : \"Quo Vadis\" \342\206\222 \"\342\204\232\360\235\225\246\360\235\225\240 \360\235\225\215\360\235\225\222\360\235\225\225\360\235\225\232\360\235\225\244\" (M-x math-symbols-double-struck-region)
;; : \"3+(2-1)=4\" \342\206\222 \"\302\263\342\201\272\342\201\275\302\262-\302\271\342\201\276\342\201\274\342\201\264\" (M-x math-symbols-superscript-region)
;; 
;; * Required Font
;; 
;; You should install Math fonts such as \"STIX\" to your system, and
;; then add it to your fontset to fully utilize this tool.  Recent
;; MacOS includes this font by default.  You can freely download them
;; from [[STIX website][http://www.stixfonts.org]].
;; 
;; * Licenses
;; 
;; This program incorporates `unimathsymbols.txt' data file which is
;; based upon \"LaTeX Project Public License\".  This program is GPL.
;; 
;; * Math Symbols Support Table
;; 
;; | styles / scripts         | alphabets | greeks\342\200\273 | numerals |
;; |--------------------------+-----------+----------+----------|
;; | bold                     | yes       | yes      | yes      |
;; | (bold) italic            | yes       | yes      | yes      |
;; | (bold) fraktur           | yes       | no       | no       |
;; | (bold) script            | yes       | no       | no       |
;; | double-struck            | yes       | partial  | yes      |
;; | monospace                | yes       | no       | yes      |
;; | sans-serif (italic)      | yes       | no       | yes      |
;; | sans-serif bold (italic) | yes       | yes      | yes      |
;; | subscript                | partial   | no       | yes      |
;; | superscript              | partial   | no       | yes      |
;; 
;;  \342\200\273 `greeks' include greek symbols and nabla (\317\265, \317\221, \317\260, \317\225, \317\261, \317\226, \342\210\207).
;; 
;; * References
;; 
;; - UTR#25 UNICODE SUPPORT FOR MATHEMATICS
;;   (http://www.unicode.org/reports/tr25/tr25-6.html)

"]) (markup-faces . [(20130117 246) nil "collection of faces for markup language modes" single ";;; Commentary:
;; 
;; As font-lock-faces, but tailored for markup languages instead programming
;; languages. The sub group markup-faces-text is also intended for 'text viewing
;; modes' such as info or (wo)man. This gives a common look and feel, or let's
;; say theme, across different markup language modes and 'text viewing modes'
;; respectively.

"]) (markup . [(20130207 1309) nil "Simple markup generation helpers." single ";;; Commentary:

;; This is an emacs lisp port of the cl-markup library written in 2011
;; by Eitarow Fukamachi.

"]) (markdown-mode . [(20131210 700) nil "Emacs Major mode for Markdown-formatted text files" single ";;; Commentary:

;; markdown-mode is a major mode for editing [Markdown][]-formatted
;; text files in GNU Emacs.  markdown-mode is free software, licensed
;; under the GNU GPL.
;;
;;  [Markdown]: http://daringfireball.net/projects/markdown/
;;
;; The latest stable version is markdown-mode 2.0, released on March 24, 2013:
;;
;;    * [markdown-mode.el][]
;;    * [Screenshot][][^theme]
;;    * [Release notes][]
;;
;;  [markdown-mode.el]: http://jblevins.org/projects/markdown-mode/markdown-mode.el
;;  [screenshot]: http://jblevins.org/projects/markdown-mode/screenshots/20130131-002.png
;;  [release notes]: http://jblevins.org/projects/markdown-mode/rev-2-0
;;
;; [^theme]: The theme used in the screenshot is
;;   [color-theme-twilight](https://github.com/crafterm/twilight-emacs).
;;
;; markdown-mode is also available in several package managers, including:
;;
;;    * Debian and Ubuntu Linux: [emacs-goodies-el][]
;;    * RedHat and Fedora Linux: [emacs-goodies][]
;;    * NetBSD: [textproc/markdown-mode][]
;;    * Arch Linux (AUR): [emacs-markdown-mode-git][]
;;    * MacPorts: [markdown-mode.el][macports-package] ([pending][macports-ticket])
;;    * FreeBSD: [textproc/markdown-mode.el][freebsd-port]
;;
;;  [emacs-goodies-el]: http://packages.debian.org/emacs-goodies-el
;;  [emacs-goodies]: https://admin.fedoraproject.org/pkgdb/acls/name/emacs-goodies
;;  [textproc/markdown-mode]: http://pkgsrc.se/textproc/markdown-mode
;;  [emacs-markdown-mode-git]: http://aur.archlinux.org/packages.php?ID=30389
;;  [macports-package]: https://trac.macports.org/browser/trunk/dports/editors/markdown-mode.el/Portfile
;;  [macports-ticket]: http://trac.macports.org/ticket/35716
;;  [freebsd-port]: http://svnweb.freebsd.org/ports/head/textproc/markdown-mode.el
;;
;; The latest development version can be downloaded directly
;; ([markdown-mode.el][devel.el]) or it can be obtained from the
;; (browsable and clonable) Git repository at
;; <http://jblevins.org/git/markdown-mode.git>.  The entire repository,
;; including the full project history, can be cloned via the Git protocol
;; by running
;;
;;     git clone git://jblevins.org/git/markdown-mode.git
;;
;;  [devel.el]: http://jblevins.org/git/markdown-mode.git/plain/markdown-mode.el

;;; Installation:

;; Make sure to place `markdown-mode.el` somewhere in the load-path and add
;; the following lines to your `.emacs` file to associate markdown-mode
;; with `.text`, `.markdown`, and `.md` files:
;;
;;     (autoload 'markdown-mode \"markdown-mode\"
;;        \"Major mode for editing Markdown files\" t)
;;     (add-to-list 'auto-mode-alist '(\"\\\\.text\\\\'\" . markdown-mode))
;;     (add-to-list 'auto-mode-alist '(\"\\\\.markdown\\\\'\" . markdown-mode))
;;     (add-to-list 'auto-mode-alist '(\"\\\\.md\\\\'\" . markdown-mode))
;;
;; There is no official Markdown file extension, nor is there even a
;; _de facto_ standard, so you can easily add, change, or remove any
;; of the file extensions above as needed.

"]) (markdown-mode+ . [(20120829 510) ((markdown-mode (20111229))) "extra functions for markdown-mode" tar nil]) (mark-tools . [(20130614 325) nil "Some simple tools to access the mark-ring in Emacs" single ";;; Commentary:

;; Emacs maintains a set of mark-rings (global and per-buffer) which
;; can be used as a simple \"where have I been\" log. This library
;; provides a function call list-marks which shows the list of marks
;; and allows a quick navigation to where you were.

;;; Further reading:

;; I've taken some hints from:
;; http://www.masteringemacs.org/articles/2010/12/22/fixing-mark-commands-transient-mark-mode/

"]) (mark-multiple . [(20121118 754) nil "Sorta lets you mark several regions at once." tar nil]) (map-regexp . [(20130522 1403) ((cl-lib (0 2))) "map over matches of a regular expression" single ";;; Commentary:

;; This library defines several forms that search forward from
;; point for a regular expression and call a function for each
;; match to do something with the match data.

;; Equivalents of `mapc', `mapcar', and `cl-mapcan' are defined.
;; Anaphoric variants that expect an expression instead of a function
;; are also available.  Instead an expression `mr-amapcar-regexp'
;; also accepts an integer (or list of integers); it then returns a
;; list of match strings (resp. a list of lists of match strings).

;; If that isn't enough use `mr-loop-regexp' which supports all of
;; `cl-loop's accumulation clauses.

"]) (map-progress . [(20120927 939) nil "mapping macros that report progress" tar ";;; Commentary:

;; This package defines mapping macros that report progress.

;; For many of the standard and CL mapping functions like `mapc' macros
;; like `mapc-with-progress-reporter' are defined here.  The arguments
;; have the same meaning as the respective arguments of the mapping
;; function or of `make-progress-reporter', which ever has an argument by
;; the same name.

;; Even when the original mapping function supports multiple sequences the
;; macros defined here only support one.  All of `make-progress-reporter's
;; arguments except for MESSAGE are optional.  This includes the starting
;; and final state arguments.

;; All standard mapping function with exactly two mandatory arguments that
;; call the function applied to each element with exactly one argument are
;; supported by `map-with-progress-reporter', which can be used when no
;; progress reporting variant of that function has been defined here.  But
;; any optional arguments the original might have are not supported.

"]) (man-commands . [(20130627 1653) nil "Add interactive commands for every manpages installed in your computer." single ";;; Commentary:

;; I usually try to do M-x man-mail, or whatever command I'm trying, before
;; going to M-x max and entering the command.  The following actually installs
;; all of the commands you can man as interactive command.

;;; Installation:

;; To install, put this file somewhere in your load-path and add the following
;; to your .emacs file:
;;(require 'man-commands)

"]) (mallard-snippets . [(20131023 1151) ((yasnippet (0 8 0)) (mallard-mode (0 1 1))) "Yasnippets for Mallard" tar ";;; Commentary:

;; Mallard 1.0 yasnippets according to the Mallard 1.0 specification.

"]) (mallard-mode . [(20131203 2025) nil "Major mode for editing Mallard files" tar ";;; Commentary:

;; A major mode for editing Mallard files.

"]) (malabar-mode . [(20140114 2123) ((fringe-helper (1 0 1))) "A better Java mode for Emacs" tar ";;; Commentary:

;; A Java Major Mode
;;

"]) (makey . [(20131231 630) ((cl-lib (0 2))) "interactive commandline mode" single ";;; Commentary:

;;

"]) (main-line . [(20130404 1904) nil "modeline replacement forked from an early version of powerline.el" single ";;; Commentary:
;;;
;;; Note Milkbox/MELPA users this is v1.2.7
;;;
;;; This is a fork of powerline.el which I began while the original
;;; authorship of powerline was unknown,
;;;
;;; -- Using main-line.el.
;;;
;;; Add a require to .emacs / init.el
;;;
;;;     (require 'main-line)
;;;
;;; You can loop through the different separator styles by clicking on
;;; them (directly on the separator)
;;;
;;; Or customize it by setting the custom variable:
;;;
;;;     main-line-separator-style
;;;
;;; e.g.
;;;
;;;     (setq main-line-separator-style 'wave)
;;;
;;; possible values...
;;;
;;; - contour
;;; - contour-left
;;; - contour-right
;;; - roundstub
;;; - roundstub-left
;;; - roundstub-right
;;; - brace
;;; - wave
;;; - zigzag
;;; - butt
;;; - wave-left
;;; - zigzag-left
;;; - butt-left
;;; - wave-right
;;; - zigzag-right
;;; - butt-right
;;; - chamfer
;;; - chamfer14
;;; - rounded
;;; - arrow
;;; - arrow14
;;; - slant
;;; - slant-left
;;; - slant-right
;;; - curve
;;;
;;; To customize the modeline - simply override the value of mode-line-format,
;;; see the default at the end of the script, as an example.
;;;
;;; You can create your own modeline additions by using the defmain-line macro.
;;;
;;; for example,
;;;
;;; (defmain-line row \"%4l\")
;;;
;;; gives you main-line-row to use in mode-line-format
;;;
;;; Note. main-line-percent-xpm requires 18px separators (use
;;; main-line-percent with arrow14 or chamfer14)
;;;

(require 'cl-lib)

(defgroup main-line nil
  \"Alternative mode line formatting with xpm-bitmap separators\"
  :group 'mode-line)

(defcustom main-line-color1 \"#123550\"
  \"Mainline color background 1\"
  :group 'main-line)

(defcustom main-line-color2 \"#112230\"
  \"Mainline color background 2\"
  :group 'main-line)

(defcustom main-line-separator-style 'wave
  \" Mainline separator stylename, which can be: wave, zigzag,
curve, wave-left, zigzag-left, curve-left, wave-right,
zigzag-right, curve-right, rounded, contour, contour-left,
contour-right, brace, chamfer, slant, slant-left, slant-right,
arrow, which are all 18px high, except for chamfer14 and arrow14 which
are both 14px high, and brace which is 19px high\"
  :group 'main-line)

(defvar main-line-minor-modes nil)

(defvar main-line-buffer-size-suffix t
  \"when set to true buffer size is shown as K/Mb/Gb etc.\")

(defun interpolate (color1 color2)
  \"Interpolate between two hex colors, they must be supplied as
  hex colors with leading # - Note: this has been implemented
  independently, there are functions in hexrgb.el that would help
  this out a bit, but I wanted this to require only cl-lib (which
  it built in), and nothing else.\"
  (let* (
         (c1 (replace-regexp-in-string \"#\" \"\" color1))
         (c2 (replace-regexp-in-string \"#\" \"\" color2)) 
         (c1r (string-to-number (substring c1 0 2) 16))
         (c1b (string-to-number (substring c1 2 4) 16))
         (c1g (string-to-number (substring c1 4 6) 16)) 
         (c2r (string-to-number (substring c2 0 2) 16))
         (c2b (string-to-number (substring c2 2 4) 16))
         (c2g (string-to-number (substring c2 4 6) 16)) 
         (red (/ (+ c1r c2r) 2))
         (grn (/ (+ c1g c2g) 2))
         (blu (/ (+ c1b c2b) 2)))
    (format \"#%02X%02X%02X\" red grn blu))
  )

(defun wave-left-xpm
  (color1 color2)
  \"Return an XPM wave left.\"
    (create-image
     (format \"/* XPM */
static char * wave_left[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@#          \\\",
\\\"@@@         \\\",
\\\"@@@@        \\\",
\\\"@@@@#       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@#      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@#     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@#    \\\",
\\\"@@@@@@@@    \\\",
\\\"@@@@@@@@    \\\",
\\\"@@@@@@@@#   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@#  \\\",
\\\"@@@@@@@@@@@#\\\"};\"
             (if color1 color1 \"None\")
             (if (and color1 color2) (interpolate color1 color2) \"None\")
             (if color2 color2 \"None\"))     
     'xpm t :ascent 'center))

(defun wave-right-xpm
  (color1 color2)
  \"Return an XPM wave right.\"  
  (create-image
   (format \"/* XPM */
static char * wave_right[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"          #@\\\",
\\\"         @@@\\\",
\\\"        @@@@\\\",
\\\"       #@@@@\\\",
\\\"       @@@@@\\\",
\\\"      #@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"     #@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"    #@@@@@@@\\\",
\\\"    @@@@@@@@\\\",
\\\"    @@@@@@@@\\\",
\\\"   #@@@@@@@@\\\",
\\\"   @@@@@@@@@\\\",
\\\"  @@@@@@@@@@\\\",
\\\"#@@@@@@@@@@@\\\"};\"
           (if color2 color2 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color1 color1 \"None\"))
   'xpm t :ascent 'center))

(defun brace-left-xpm
  (color1 color2)
  \"Return an XPM brace left.\"
  (create-image
   (format \"/* XPM */
static char * brace_left[] = {
\\\"12 19 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@#          \\\",
\\\"@@@         \\\",
\\\"@@@         \\\",
\\\"@@@         \\\",
\\\"@@@         \\\",
\\\"@@@         \\\",
\\\"@@@#        \\\",
\\\"@@@#        \\\",
\\\"@@@@#       \\\",
\\\"@@@@@@      \\\",
\\\"@@@@#       \\\",
\\\"@@@#        \\\",
\\\"@@@#        \\\",
\\\"@@@         \\\",
\\\"@@@         \\\",
\\\"@@@         \\\",
\\\"@@@         \\\",
\\\"@@@         \\\",
\\\"@#          \\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))

(defun brace-right-xpm
  (color1 color2)
  \"Return an XPM brace right.\"
  (create-image
   (format \"/* XPM */
static char * brace_right[] = {
\\\"12 19 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"          #@\\\",
\\\"         @@@\\\",
\\\"         @@@\\\",
\\\"         @@@\\\",
\\\"         @@@\\\",
\\\"         @@@\\\",
\\\"        #@@@\\\",
\\\"        #@@@\\\",
\\\"       #@@@@\\\",
\\\"      @@@@@@\\\",
\\\"       #@@@@\\\",
\\\"        #@@@\\\",
\\\"        #@@@\\\",
\\\"         @@@\\\",
\\\"         @@@\\\",
\\\"         @@@\\\",
\\\"         @@@\\\",
\\\"         @@@\\\",
\\\"          #@\\\"};\"
           (if color2 color2 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color1 color1 \"None\"))
   'xpm t :ascent 'center))



(defun roundstub-left-xpm
  (color1 color2)
  \"Return an XPM roundstub left.\"
  (create-image
   (format \"/* XPM */
static char * roundstub_left[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@@          \\\",
\\\"@@@@        \\\",
\\\"@@@@#       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@       \\\",
\\\"@@@@#       \\\",
\\\"@@@@        \\\",
\\\"@@          \\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))

(defun roundstub-right-xpm
  (color1 color2)
  \"Return an XPM roundstub right.\"
  (create-image
   (format \"/* XPM */
static char * roundstub_right[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"          @@\\\",
\\\"        @@@@\\\",
\\\"       #@@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"       #@@@@\\\",
\\\"        @@@@\\\",
\\\"          @@\\\"};\"
           (if color2 color2 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color1 color1 \"None\"))
   'xpm t :ascent 'center))

(defun zigzag-left-xpm
  (color1 color2)
  \"Return an XPM zigzag left.\"
  (create-image
   (format \"/* XPM */
static char * zigzag_left[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@@@@        \\\",
\\\"@@@@@       \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@       \\\",
\\\"@@@@        \\\",
\\\"@@@@@       \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@       \\\",
\\\"@@@@        \\\",
\\\"@@@@@       \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@       \\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))

(defun zigzag-right-xpm
  (color1 color2)
  \"Return an XPM zigzag right.\"
  (create-image
   (format \"/* XPM */
static char * zigzag_right[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"        @@@@\\\",
\\\"       @@@@@\\\",
\\\"      @@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"       @@@@@\\\",
\\\"        @@@@\\\",
\\\"       @@@@@\\\",
\\\"      @@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"       @@@@@\\\",
\\\"        @@@@\\\",
\\\"       @@@@@\\\",
\\\"      @@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"       @@@@@\\\"};\"
           (if color2 color2 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color1 color1 \"None\"))
   'xpm t :ascent 'center))

(defun butt-left-xpm
  (color1 color2)
  \"Return an XPM butt left.\"
  (create-image
   (format \"/* XPM */
static char * butt_left[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@@@@        \\\",
\\\"@@@@@       \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@       \\\",
\\\"@@@@        \\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))

(defun butt-right-xpm
  (color1 color2)
  \"Return an XPM butt right.\"
  (create-image
   (format \"/* XPM */
static char * butt_right[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"        @@@@\\\",
\\\"       @@@@@\\\",
\\\"      @@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"       @@@@@\\\",
\\\"        @@@@\\\"};\"
           (if color2 color2 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color1 color1 \"None\"))
   'xpm t :ascent 'center))

(defun chamfer-xpm
  (color1 color2)
  \"Return an XPM chamfer string representing.\"
  (create-image
   (format \"/* XPM */
static char * chamfer[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@@    \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))

(defun chamfer14-xpm
  (color1 color2)
  \"Return an XPM chamfer string representing.\"
  (create-image
   (format \"/* XPM */
static char * chamfer[] = {
\\\"12 14 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@@    \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))

(defun rounded-xpm
  (color1 color2)
  \"Return an XPM rounded string representing.\"
  (create-image
   (format \"/* XPM */
static char * rounded[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@@@#        \\\",
\\\"@@@@@#      \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@#    \\\",
\\\"@@@@@@@@    \\\",
\\\"@@@@@@@@#   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))


(defun contour-left-xpm
  (color1 color2)
  \"Return an XPM contour-left string representing.\"
  (create-image
   (format \"/* XPM */
static char * contour_left[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@           \\\",
\\\"@@#         \\\",
\\\"@@@#        \\\",
\\\"@@@@#       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@#      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@#     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@#    \\\",
\\\"@@@@@@@@#   \\\",
\\\"@@@@@@@@@@@ \\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))

(defun contour-right-xpm
  (color1 color2)
  \"Return an XPM contour-right string representing.\"
  (create-image
   (format \"/* XPM */
static char * contour_right[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"           @\\\",
\\\"         #@@\\\",
\\\"        #@@@\\\",
\\\"       #@@@@\\\",
\\\"       @@@@@\\\",
\\\"      #@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"     #@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"    #@@@@@@@\\\",
\\\"   #@@@@@@@@\\\",
\\\" @@@@@@@@@@@\\\"};\"
           (if color2 color2 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color1 color1 \"None\"))
   'xpm t :ascent 'center))


(defun slant-left-xpm
  (color1 color2)
  \"Return an XPM left slant string representing.\"
  (create-image
   (format \"/* XPM */
static char * slant_left[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@@@@         \\\",
\\\"@@@@         \\\",
\\\"@@@@@        \\\",
\\\"@@@@@        \\\",
\\\"@@@@@@       \\\",
\\\"@@@@@@       \\\",
\\\"@@@@@@@      \\\",
\\\"@@@@@@@      \\\",
\\\"@@@@@@@@     \\\",
\\\"@@@@@@@@     \\\",
\\\"@@@@@@@@@    \\\",
\\\"@@@@@@@@@    \\\",
\\\"@@@@@@@@@@   \\\",
\\\"@@@@@@@@@@   \\\",
\\\"@@@@@@@@@@@  \\\",
\\\"@@@@@@@@@@@  \\\",
\\\"@@@@@@@@@@@@ \\\",
\\\"@@@@@@@@@@@@\\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))

(defun slant-right-xpm
  (color1 color2)
  \"Return an XPM right slant string representing@\"
  (create-image
   (format \"/* XPM */
static char * slant_right[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"        @@@@\\\",
\\\"        @@@@\\\",
\\\"       @@@@@\\\",
\\\"       @@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"    @@@@@@@@\\\",
\\\"    @@@@@@@@\\\",
\\\"   @@@@@@@@@\\\",
\\\"   @@@@@@@@@\\\",
\\\"  @@@@@@@@@@\\\",
\\\"  @@@@@@@@@@\\\",
\\\" @@@@@@@@@@@\\\",
\\\" @@@@@@@@@@@\\\",
\\\"@@@@@@@@@@@@\\\",
\\\"@@@@@@@@@@@@\\\"};\"
           (if color2 color2 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color1 color1 \"None\"))
   'xpm t :ascent 'center))

(defun arrow-left-xpm
  (color1 color2)
  \"Return an XPM left arrow string representing@\"
  (create-image
   (format \"/* XPM */
static char * arrow_left[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@           \\\",
\\\"@@          \\\",
\\\"@@@         \\\",
\\\"@@@@        \\\",
\\\"@@@@@       \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@@    \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@@   \\\",
\\\"@@@@@@@@    \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@       \\\",
\\\"@@@@        \\\",
\\\"@@@         \\\",
\\\"@@          \\\",
\\\"@           \\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))

(defun arrow-right-xpm
  (color1 color2)
  \"Return an XPM right arrow string representing@\"
  (create-image
   (format \"/* XPM */
static char * arrow_right[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"           @\\\",
\\\"          @@\\\",
\\\"         @@@\\\",
\\\"        @@@@\\\",
\\\"       @@@@@\\\",
\\\"      @@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"    @@@@@@@@\\\",
\\\"   @@@@@@@@@\\\",
\\\"   @@@@@@@@@\\\",
\\\"    @@@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"       @@@@@\\\",
\\\"        @@@@\\\",
\\\"         @@@\\\",
\\\"          @@\\\",
\\\"           @\\\"};\"
           (if color2 color2 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color1 color1 \"None\"))
   'xpm t :ascent 'center))

(defun arrow14-left-xpm
  (color1 color2)
  \"Return an XPM left arrow string representing@\"
  (create-image
   (format \"/* XPM */
static char * arrow_left[] = {
\\\"12 14 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@           \\\",
\\\"@@          \\\",
\\\"@@@         \\\",
\\\"@@@@        \\\",
\\\"@@@@@       \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@@     \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@       \\\",
\\\"@@@@        \\\",
\\\"@@@         \\\",
\\\"@@          \\\",
\\\"@           \\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))

(defun arrow14-right-xpm
  (color1 color2)
  \"Return an XPM right arrow string representing@\"
  (create-image
   (format \"/* XPM */
static char * arrow_right[] = {
\\\"12 14 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"           @\\\",
\\\"          @@\\\",
\\\"         @@@\\\",
\\\"        @@@@\\\",
\\\"       @@@@@\\\",
\\\"      @@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"     @@@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"       @@@@@\\\",
\\\"        @@@@\\\",
\\\"         @@@\\\",
\\\"          @@\\\",
\\\"           @\\\"};\"
           (if color2 color2 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color1 color1 \"None\"))
   'xpm t :ascent 'center))

(defun curve-right-xpm
  (color1 color2)
  \"Return an XPM right curve string representing@\"
  (create-image
   (format \"/* XPM */
static char * curve_right[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"           @\\\",
\\\"         #@@\\\",
\\\"        @@@@\\\",
\\\"       #@@@@\\\",
\\\"       @@@@@\\\",
\\\"      #@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      @@@@@@\\\",
\\\"      #@@@@@\\\",
\\\"       @@@@@\\\",
\\\"       #@@@@\\\",
\\\"        @@@@\\\",
\\\"         #@@\\\",
\\\"           @\\\"};\"
           (if color2 color2 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color1 color1 \"None\"))
   'xpm t :ascent 'center))

(defun curve-left-xpm
  (color1 color2)
  \"Return an XPM left curve string representing@\"
  (create-image
   (format \"/* XPM */
static char * curve_left[] = {
\\\"12 18 3 1\\\",
\\\"@ c %s\\\",
\\\"# c %s\\\",
\\\"  c %s\\\",
\\\"@           \\\",
\\\"@@#         \\\",
\\\"@@@@        \\\",
\\\"@@@@#       \\\",
\\\"@@@@@       \\\",
\\\"@@@@@#      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@@      \\\",
\\\"@@@@@#      \\\",
\\\"@@@@@       \\\",
\\\"@@@@#       \\\",
\\\"@@@@        \\\",
\\\"@@#         \\\",
\\\"@           \\\"};\"
           (if color1 color1 \"None\")
           (if (and color2 color1) (interpolate color2 color1) \"None\")
           (if color2 color2 \"None\"))
   'xpm t :ascent 'center))

(defun make-xpm
  (name color1 color2 data)
  \"Return an XPM image for data\"
  (let 
      ((xpm
   (concat
    (format
     \"/* XPM */
static char * %s[] = {
\\\"%i %i 2 1\\\",
\\\"@ c %s\\\",
\\\"  c %s\\\",
\"
            (downcase (replace-regexp-in-string \" \" \"_\" name))
            (length (car data))
            (length data)
            (if color1 color1 \"None\")
            (if color2 color2 \"None\"))
    (let ((len  (length data))
          (idx  0))
      (apply 'concat
             (mapcar #'(lambda (dl)
                        (setq idx (+ idx 1))
                        (concat
                         \"\\\"\"
                         (concat
                          (mapcar #'(lambda (d)
                                     (if (eq d 0)
                                         (string-to-char \" \")
                                       (string-to-char \"@\")))
                                  dl))
                         (if (eq idx len)
                             \"\\\"};\"
                           \"\\\",\\n\")))
                     data))))))
    (create-image xpm 'xpm t :ascent 'center)))

(defun percent-xpm
  (point_max point_min window_end window_start width color1 color2)
  \"Draw a percent indicator based on the current        
   window (viewable) position within the buffill_endr\"
  (let* ((fill_start (if (eq point_min window_start)
                 0
               (round (* 13 (/ (float window_start) (float point_max))))))
         (fill_end (if (eq point_max window_end)
                 13
               (round (* 13 (/ (float window_end) (float point_max))))))
         (o nil)
         (i 0))
    (while (< i 14)
      (setq o (cons
               (if (and (<= fill_start i)
                        (<= i fill_end))
                   (append (list 0) (make-list width 1) (list 0))
                 (append (list 0) (make-list width 0) (list 0)))
               o))
      (setq i (+ i 1)))
    (make-xpm \"percent\" color1 color2 (reverse o))))

;; from memoize.el @ http://nullprogram.com/blog/2010/07/26/
(defun memoize (func)
  \"Memoize the given function. If argument is a symbol then
install the memoized function over the original function.\"
  (typecase func
    (symbol (fset func (memoize-wrap (symbol-function func))) func)
    (function (memoize-wrap func))))

(defun memoize-wrap (func)
  \"Return the memoized version of the given function.\"
  (let ((table-sym (gensym))
        (val-sym (gensym))
        (args-sym (gensym)))
    (set table-sym (make-hash-table :test 'equal))
    `(lambda (&rest ,args-sym)
       ,(concat (documentation func) \"\\n(memoized function)\")
       (let ((,val-sym (gethash ,args-sym ,table-sym)))
         (if ,val-sym
             ,val-sym
           (puthash ,args-sym (apply ,func ,args-sym) ,table-sym))))))

(memoize 'roundstub-left-xpm)
(memoize 'roundstub-right-xpm)
(memoize 'brace-left-xpm)
(memoize 'brace-right-xpm)
(memoize 'contour-left-xpm)
(memoize 'contour-right-xpm)
(memoize 'wave-left-xpm)
(memoize 'zigzag-left-xpm)
(memoize 'butt-left-xpm)
(memoize 'wave-right-xpm)
(memoize 'zigzag-right-xpm)
(memoize 'butt-right-xpm)
(memoize 'rounded-xpm)
(memoize 'chamfer-xpm)
(memoize 'chamfer14-xpm)
(memoize 'slant-left-xpm)
(memoize 'slant-right-xpm)
(memoize 'arrow-left-xpm)
(memoize 'arrow-right-xpm)
(memoize 'arrow14-left-xpm)
(memoize 'arrow14-right-xpm)
(memoize 'curve-left-xpm)
(memoize 'curve-right-xpm)
(memoize 'percent-xpm)

(defun main-line-make-face
  (bg &optional fg)
  (if bg
      (let ((cface (intern (concat \"main-line-\"
                                   bg
                                   \"-\"
                                   (if fg
                                       (format \"%s\" fg)
                                     \"white\")))))
        (make-face cface)2
        (if fg
            (if (eq fg 0)
                (set-face-attribute cface nil
                                    :background bg
                                    :box nil)
              (set-face-attribute cface nil
                                  :foreground fg
                                  :background bg
                                  :box nil))
          (set-face-attribute cface nil
                              :foreground \"white\"
                              :background bg
                              :box nil))
        cface)
    nil))

(defun main-line-make-left
  (string color1 &optional color2 localmap)
  (let ((plface (main-line-make-face color1))
        (arrow  (and color2 (not (string= color1 color2)))))
    (concat
     (if (or (not string) (string= string \"\"))
         \"\"
       (propertize \" \" 'face plface))
     (if string
         (if localmap
             (propertize string 'face plface 'mouse-face plface 'local-map localmap)
           (propertize string 'face plface))
       \"\")
     (if arrow
         (propertize \" \" 'face plface)
       \"\")
     (if arrow
         (propertize \" \" 'display
                     (cond
                      ((eq main-line-separator-style 'arrow           ) (arrow-left-xpm      color1 color2))
                      ((eq main-line-separator-style 'slant           ) (slant-left-xpm      color1 color2))
                      ((eq main-line-separator-style 'contour         ) (contour-left-xpm    color1 color2))
                      ((eq main-line-separator-style 'contour-left    ) (contour-left-xpm    color1 color2))
                      ((eq main-line-separator-style 'contour-right   ) (contour-right-xpm   color1 color2))
                      ((eq main-line-separator-style 'roundstub       ) (roundstub-left-xpm  color1 color2))
                      ((eq main-line-separator-style 'roundstub-left  ) (roundstub-left-xpm  color1 color2))
                      ((eq main-line-separator-style 'roundstub-right ) (roundstub-right-xpm color1 color2))
                      ((eq main-line-separator-style 'brace           ) (brace-left-xpm      color1 color2))                      
                      ((eq main-line-separator-style 'wave            ) (wave-left-xpm       color1 color2))
                      ((eq main-line-separator-style 'zigzag          ) (zigzag-left-xpm     color1 color2))
                      ((eq main-line-separator-style 'butt            ) (butt-left-xpm       color1 color2))
                      ((eq main-line-separator-style 'chamfer         ) (chamfer-xpm         color1 color2))
                      ((eq main-line-separator-style 'chamfer14       ) (chamfer14-xpm       color1 color2))
                      ((eq main-line-separator-style 'rounded         ) (rounded-xpm         color1 color2))
                      ((eq main-line-separator-style 'slant-left      ) (slant-left-xpm      color1 color2))
                      ((eq main-line-separator-style 'slant-right     ) (slant-right-xpm     color1 color2))
                      ((eq main-line-separator-style 'wave-left       ) (wave-left-xpm       color1 color2))
                      ((eq main-line-separator-style 'zigzag-left     ) (zigzag-left-xpm     color1 color2))
                      ((eq main-line-separator-style 'butt-left       ) (butt-left-xpm       color1 color2))
                      ((eq main-line-separator-style 'wave-right      ) (wave-right-xpm      color1 color2))
                      ((eq main-line-separator-style 'zigzag-right    ) (zigzag-right-xpm    color1 color2))
                      ((eq main-line-separator-style 'butt-right      ) (butt-right-xpm      color1 color2))
                      ((eq main-line-separator-style 'arrow14         ) (arrow14-left-xpm    color1 color2))
                      ((eq main-line-separator-style 'curve           ) (curve-left-xpm      color1 color2))
                      (t
                       (arrow-left-xpm color1 color2)))
                     'local-map (make-mode-line-mouse-map
                                 'mouse-1 (lambda () (interactive)
                                            (setq main-line-separator-style (get-next-separator-style))
                                            (force-mode-line-update))))
       \"\"))))

(defun main-line-make-right
  (string color2 &optional color1 localmap)
  (let ((plface (main-line-make-face color2))
        (arrow  (and color1 (not (string= color1 color2)))))
    (concat
     (if arrow
         (propertize \" \" 'display
                     (cond
                      ((eq main-line-separator-style 'arrow           ) (arrow-right-xpm     color1 color2))
                      ((eq main-line-separator-style 'slant           ) (slant-right-xpm     color1 color2))
                      ((eq main-line-separator-style 'contour         ) (contour-right-xpm   color1 color2))
                      ((eq main-line-separator-style 'contour-left    ) (contour-left-xpm    color1 color2))
                      ((eq main-line-separator-style 'contour-right   ) (contour-right-xpm   color1 color2))
                      ((eq main-line-separator-style 'roundstub       ) (roundstub-right-xpm color1 color2))
                      ((eq main-line-separator-style 'roundstub-left  ) (roundstub-left-xpm  color1 color2))
                      ((eq main-line-separator-style 'roundstub-right ) (roundstub-right-xpm color1 color2))
                      ((eq main-line-separator-style 'brace           ) (brace-right-xpm     color1 color2))
                      ((eq main-line-separator-style 'wave            ) (wave-right-xpm      color1 color2))
                      ((eq main-line-separator-style 'zigzag          ) (zigzag-right-xpm    color1 color2))
                      ((eq main-line-separator-style 'butt            ) (butt-right-xpm      color1 color2))
                      ((eq main-line-separator-style 'rounded         ) (rounded-xpm         color1 color2))
                      ((eq main-line-separator-style 'chamfer         ) (chamfer-xpm         color1 color2))
                      ((eq main-line-separator-style 'chamfer14       ) (chamfer14-xpm       color1 color2))
                      ((eq main-line-separator-style 'slant-left      ) (slant-left-xpm      color1 color2))
                      ((eq main-line-separator-style 'slant-right     ) (slant-right-xpm     color1 color2))
                      ((eq main-line-separator-style 'wave-left       ) (wave-left-xpm       color1 color2))
                      ((eq main-line-separator-style 'zigzag-left     ) (zigzag-left-xpm     color1 color2))
                      ((eq main-line-separator-style 'butt-left       ) (butt-left-xpm       color1 color2))
                      ((eq main-line-separator-style 'wave-right      ) (wave-right-xpm      color1 color2))
                      ((eq main-line-separator-style 'zigzag-right    ) (zigzag-right-xpm    color1 color2))
                      ((eq main-line-separator-style 'butt-right      ) (butt-right-xpm      color1 color2))
                      ((eq main-line-separator-style 'arrow14         ) (arrow14-right-xpm   color1 color2))
                      ((eq main-line-separator-style 'curve           ) (curve-right-xpm     color1 color2))
                      (t
                       (arrow-right-xpm color1 color2)))
                     'local-map (make-mode-line-mouse-map
                                 'mouse-1 (lambda () (interactive)
                                            (setq main-line-separator-style (get-next-separator-style))
                                            (force-mode-line-update))))
       \"\")
     (if arrow
         (propertize \" \" 'face plface)
       \"\")
     (if string
         (if localmap
             (propertize string 'face plface 'mouse-face plface 'local-map localmap)
           (propertize string 'face plface))
       \"\")
     (if (or (not string) (string= string \"\"))
         \"\"
       (propertize \" \" 'face plface)))))

(defun get-next-separator-style ()
  (cond ((eq main-line-separator-style 'chamfer)         'chamfer14)
        ((eq main-line-separator-style 'chamfer14)       'brace)
        ((eq main-line-separator-style 'brace)           'rounded)
        ((eq main-line-separator-style 'rounded)         'zigzag)
        ((eq main-line-separator-style 'zigzag)          'wave)
        ((eq main-line-separator-style 'wave)            'butt)
        ((eq main-line-separator-style 'butt)            'arrow)
        ((eq main-line-separator-style 'arrow)           'contour)
        ((eq main-line-separator-style 'contour)         'contour-left)
        ((eq main-line-separator-style 'contour-left)    'contour-right)
        ((eq main-line-separator-style 'contour-right)   'roundstub)
        ((eq main-line-separator-style 'roundstub)       'roundstub-left)
        ((eq main-line-separator-style 'roundstub-left)  'roundstub-right)
        ((eq main-line-separator-style 'roundstub-right) 'slant)
        ((eq main-line-separator-style 'slant)           'slant-left)
        ((eq main-line-separator-style 'slant-left)      'slant-right)
        ((eq main-line-separator-style 'slant-right)     'wave-left)
        ((eq main-line-separator-style 'wave-left)       'zigzag-left)
        ((eq main-line-separator-style 'zigzag-left)     'butt-left)
        ((eq main-line-separator-style 'butt-left)       'wave-right)
        ((eq main-line-separator-style 'wave-right)      'zigzag-right)
        ((eq main-line-separator-style 'zigzag-right)    'butt-right)
        ((eq main-line-separator-style 'butt-right)      'arrow14)
        ((eq main-line-separator-style 'arrow14)         'curve)
        ((eq main-line-separator-style 'curve)           'chamfer)
        (t                                               'chamfer))
  )

(defun main-line-make-fill
  (color)
  ;; justify right by filling with spaces to right fringe, 20 should be calculated
  (let ((plface (main-line-make-face color)))
    (if (eq 'right (get-scroll-bar-mode))
        (propertize \" \" 'display '((space :align-to (- right-fringe 21)))
                    'face plface)
      (propertize \" \" 'display '((space :align-to (- right-fringe 24)))
                  'face plface))))

(defun main-line-make-text
  (string color &optional fg localmap)
  (let ((plface (main-line-make-face color)))
    (if string
        (if localmap
            (propertize string 'face plface 'mouse-face plface 'local-map localmap)
          (propertize string 'face plface))
      \"\")))

(defun main-line-make (side string color1 &optional color2 localmap)
  (cond ((and (eq side 'right) color2) (main-line-make-right  string color1 color2 localmap))
        ((and (eq side 'left) color2)  (main-line-make-left   string color1 color2 localmap))
        ((eq side 'left)               (main-line-make-left   string color1 color1 localmap))
        ((eq side 'right)              (main-line-make-right  string color1 color1 localmap))
        (t                             (main-line-make-text   string color1 localmap))))

(defmacro defmain-line (name string)
  `(defun ,(intern (concat \"main-line-\" (symbol-name name)))
     (side color1 &optional color2)
     (main-line-make side
                    ,string
                    color1 color2)))

(defun main-line-mouse (click-group click-type string)
  (cond ((eq click-group 'minor)
         (cond ((eq click-type 'menu)
                `(lambda (event)
                   (interactive \"@e\")
                   (minor-mode-menu-from-indicator ,string)))
               ((eq click-type 'help)
                `(lambda (event)
                   (interactive \"@e\")
                   (describe-minor-mode-from-indicator ,string)))
               (t
                `(lambda (event)
                   (interactive \"@e\")
                   nil))))
        (t
         `(lambda (event)
            (interactive \"@e\")
            nil))))

(defmain-line arrow       \"\")

(defmain-line buffer-id   (propertize (car (propertized-buffer-identification \"%12b\"))
                                     'face (main-line-make-face color1)))

(defmain-line buffer-size (propertize
                          (if main-line-buffer-size-suffix
                              \"%I\"
                            \"%i\")
                          'local-map (make-mode-line-mouse-map
                                      'mouse-1 (lambda () (interactive)
                                                 (setq main-line-buffer-size-suffix
                                                       (not main-line-buffer-size-suffix))
                                                 (force-mode-line-update)))))
(defmain-line rmw \"%*\")

(defmain-line major-mode
  (propertize mode-name
              'help-echo \"Major mode\\n\\ mouse-1: Display major mode menu\\n\\ mouse-2: Show help for major mode\\n\\ mouse-3: Toggle minor modes\"
              'local-map (let ((map (make-sparse-keymap)))
                           (define-key map [mode-line down-mouse-1]
                             `(menu-item ,(purecopy \"Menu Bar\") ignore
                                         :filter (lambda (_) (mouse-menu-major-mode-map))))
                           (define-key map [mode-line mouse-2] 'describe-mode)
                           (define-key map [mode-line down-mouse-3] mode-line-mode-menu)
                           map)))

(defmain-line minor-modes
  (let ((mms (split-string (format-mode-line minor-mode-alist))))
    (apply 'concat
           (mapcar #'(lambda (mm)
                      (propertize (if (string= (car mms) mm)
                                      mm
                                    (concat \" \" mm))
                                  'help-echo \"Minor mode\\n mouse-1: Display minor mode menu\\n mouse-2: Show help for minor mode\\n mouse-3: Toggle minor modes\"
                                  'local-map (let ((map (make-sparse-keymap)))
                                               (define-key map [mode-line down-mouse-1]   (main-line-mouse 'minor 'menu mm))
                                               (define-key map [mode-line mouse-2]        (main-line-mouse 'minor 'help mm))
                                               (define-key map [mode-line down-mouse-3]   (main-line-mouse 'minor 'menu mm))
                                               (define-key map [header-line down-mouse-3] (main-line-mouse 'minor 'menu mm))
                                               map))) mms))))
(defmain-line row \"%4l\")
(defmain-line column \"%3c\")
(defmain-line percent \"%6p\")

(defmain-line narrow (let (real-point-min real-point-max)
                      (save-excursion
                        (save-restriction
                          (widen)
                          (setq real-point-min (point-min) real-point-max (point-max))))
                      (when (or (/= real-point-min (point-min))
                                (/= real-point-max (point-max)))
                        (propertize \"Narrow\"
                                    'help-echo \"mouse-1: Remove narrowing from the current buffer\"
                                    'local-map (make-mode-line-mouse-map
                                                'mouse-1 'mode-line-widen)))))
(defmain-line status      \"%s\")
(defmain-line emacsclient mode-line-client)
(defmain-line vc vc-mode)

(defmain-line
  percent-xpm
  (propertize \"  \"
              'display
              (let (pmax
                    pmin
                    (ws (window-start))
                    (we (window-end)))
                (save-restriction
                  (widen)
                  (setq pmax (point-max))
                  (setq pmin (point-min)))
                (percent-xpm
                 pmax pmin
                 we ws 3
                 color1 color2))))

(setq-default
 mode-line-format
 (list \"%e\"
       '(:eval (concat
                (main-line-rmw            'left   nil  )
                (main-line-buffer-id      'left   nil  main-line-color1  )
                (main-line-major-mode     'left        main-line-color1  )
                (main-line-minor-modes    'left        main-line-color1  )
                (main-line-narrow         'left        main-line-color1   main-line-color2  )
                (main-line-vc             'center                        main-line-color2  )
                (main-line-make-fill                                     main-line-color2  )
                (main-line-row            'right       main-line-color1   main-line-color2  )
                (main-line-make-text      \":\"          main-line-color1  )
                (main-line-column         'right       main-line-color1  )
                (main-line-percent-xpm    'right  nil  main-line-color1  )               
                (main-line-make-text      \"  \"    nil  )))))

(provide 'main-line)

;;; main-line.el ends here
"]) (magit-tramp . [(20131224 1023) ((magit (1 2 0))) "git method for TRAMP" tar nil]) (magit-topgit . [(20140102 1815) ((cl-lib (0 3)) (magit (1 3 0))) "topgit plug-in for Magit" single ";;; Commentary:

;; This plug-in provides topgit functionality as a separate component
;; of Magit.

"]) (magit-svn . [(20140102 1815) ((cl-lib (0 3)) (magit (1 3 0))) "git-svn plug-in for Magit" single ";;; Commentary:

;; This plug-in provides git-svn functionality as a separate component
;; of Magit.

"]) (magit-stgit . [(20140109 1151) ((cl-lib (0 3)) (magit (1 3 0))) "StGit plug-in for Magit" single ";;; Commentary:

;; This package provides very basic support for StGit.

;; When `magit-stgit-mode' is turned on the current patch series is
;; displayed in the status buffer.  Additionally a few Emacs commands
;; are defined that wrap around StGit commands.  These commands are
;; also available as \"section actions\".

;; If you are looking for full fledged StGit support in Emacs, then
;; have a look at `stgit.el' which is distributed with StGit.

"]) (magit-push-remote . [(20140108 1300) ((magit (1 3 0))) "push remote support for Magit" single ";;; Commentary:

;; This plug-in provides support for an additional default remote
;; which when pushing is used instead of the \"merge\" default specified
;; by the git-config(1) option `branch.<name>.remote'.

;; Together `branch.<name>.remote' and `branch.<name>.merge' set the
;; default used by git-pull(1) and git-push(1).  Like their git
;; counterparts `magit-push' and `magit-pull' use these options. So
;; does `magit-status' which displays commits not pushed to or not
;; pulled from the default remote/branch.

;; This works nicely if commits most often flow like this:
;;
;;   +------------+            +------------+
;;   |   remote   | -- pull -> |   local    |
;;   |    repo    | <- push -- |    repo    |
;;   +------------+            +------------+

;; But it is inconventient if commits most often flow through your
;; local repository like this:
;;
;;   +------------+            +------------+            +------------+
;;   |  upstream  | -- pull -> |   local    |            |    your    |
;;   |    repo    |            |    repo    | -- push -> |   public   |
;;   |            |            +------------+            |    repo    |
;;   |            | <- merge pull reguest -------------- |            |
;;   +------------+                                      +------------+

;; This package modifies Magit to automatically detect whether the
;; latter workflow is used; and if so provide additional information
;; related to that \"personal\" or \"push\" remote and push to it by
;; default.

;; When `magit-push-remote-mode' is turned on and the repository has a
;; push-remote `magit-push' and `magit-push-tags' now by default push
;; to the push-remote, and `magit-status' shows information related to
;; both the push and pull (Git's default) remote.

;; This is done by REDEFINING `magit-push-tags' and adding specialized
;; functions to the hooks `magit-status-sections-hook' and
;; `magit-push-hook'.

;; To enable this turn on the global `magit-push-remote-mode' and
;; select the push-remote either per repository or globally using the
;; git variable `magit.pushremote'.
;;
;;   (magit-push-remote-mode 1)
;;
;;   git config --global magit.pushremote <REMOTE_NAME>  # or
;;   git config magit.pushremote <REMOTE_NAME>

"]) (magit-log-edit . [(20131230 813) ((cl-lib (0 3)) (magit (1 3 0))) "[SEMI-OBSOLETE] major mode for editing Git commit messages" single ";;; Commentary:

;;     ****   THIS PACKAGE IS SEMI-OBSOLETE.   ****
;;     **** YOU PROBABLY DON'T WANT TO USE IT. ****

;; A major mode for editing Git commit messages.

;; This is the mode that was used before Magit switched to using the
;; external `git-commit-mode'.  That still has some problems, though:

;; Well, actually only one is left:

;; - Doesn't work well with tramp.
;;   https://github.com/magit/magit/issues/801

;; Both issues will be addressed, but for some people these issues are
;; deal breakers, and so I have this old package available again.

;; If you are not actually bothered much by these issue (or did not
;; even notice until you read this) then DO NOT install this package.
;; It also has its limitiations, which in least in my eyes are much
;; worse.

"]) (magit-gh-pulls . [(20130405 928) ((gh (0 4 3)) (magit (1 1 0))) "GitHub pull requests extension for Magit" single ";;; Commentary:

;; This is an experimental magit extension for manipulating GitHub pull requests

;; In order to use this, configure your repository like:
;;   $ git config --add magit.extension gh-pulls
;;     # or whatever is required to load that extension in magit for
;;     # this repository
;;   $ git config magit.gh-pulls-repo = <user>/<repo>
;;     # your github repository

;; and of course, load magit-gh-pulls.el

;; There are currently 3 bindings for pull requests:
;; # g g refreshes the list of pull requests
;; # g f fetches the commits associated with the pull request at point
;; # g b helps you creating a topic branch from a review request

;; Then, you can do whatever you want with the commit objects associated with
;; the pull request (merge, cherry-pick, diff, ...)

"]) (magit-find-file . [(20130915 423) ((magit (1 2 0))) "completing-read over all files in Git" single ";;; Commentary:

;; This is a Git-powered replacement for something like TextMate's
;; Cmd-t.

;; Uses a configurable completing-read to open any file in the
;; Git repository of the current buffer.

;; Usage:
;;
;;     (require 'magit-find-file) ;; if not using the ELPA package
;;     (global-set-key (kbd \"C-c p\") 'magit-find-file-completing-read)
;;
;; Customize 'magit-completing-read-function to change the completing
;; read engine used (so it should behave like Magit does for you).
;;
;; Customize 'magit-find-file-skip-images to include images in your
;; candidate list. This is t by default.

"]) (magit-filenotify . [(20131018 255) ((magit (1 3 0))) "Refresh status buffer when git tree changes" single ";;; Commentary:

;; This module comes with a minor mode `magit-filenotify' which tracks
;; changes in the source tree using `file-notify' and refreshes the magit
;; status buffer.  Emacs 24.4 with `file-notify-support' is required for it to
;; work.

"]) (magit-commit-training-wheels . [(20130730 1121) nil "Advice for magit-log-edit-commit" single ";;; Commentary:

;; Helps you craft well formed commit messages with magit's log edit
;; commit.  Directives for what makes a well formed commit come from
;; tpope: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

"]) (magit . [(20140108 2357) ((cl-lib (0 3)) (git-commit-mode (0 14 0)) (git-rebase-mode (0 14 0))) "control Git from Emacs" tar ";;; Commentary:

;; Invoking the magit-status function will show a buffer with the
;; status of the current git repository and its working tree.  That
;; buffer offers key bindings for manipulating the status in simple
;; ways.
;;
;; The status buffer mainly shows the difference between the working
;; tree and the index, and the difference between the index and the
;; current HEAD.  You can add individual hunks from the working tree
;; to the index, and you can commit the index.
;;
;; See the Magit User Manual for more information.

"]) (mag-menu . [(20130224 56) ((splitter (0 1 0))) "Intuitive keyboard-centric menu system" single ";;; Commentary:
;;
;; Mag-menu provides a menu system intended to be used as an emacs
;; front-end to command line programs with lots of options (e.g. git or
;; ack). It presents the options in a visually simple layout in a window
;; at the bottom of the emacs frame, and makes it easy to toggle
;; switches or set argument values using just the keyboard.
;;
;; Mag-menu is derived from the magit-key-mode.el file in magit. The
;; code was pulled out to make it a standalone elpa package so it could
;; more easily be used by packages other than magit, and also to make
;; the code less specific to git. \"Mag\" in \"mag-menu\" is short for
;; magic, but is also meant to suggest its heritage from magit.
;;
;; The main function is mag-menu.
;;
"]) (macrostep . [(20131219 1002) nil "interactive macro stepper for Emacs Lisp" single ";;; Commentary:
;;
;; 1 Overview
;; ==========
;;
;;   This is a minor mode for interactively stepping through the expansion
;;   of macros in Emacs Lisp source code. It lets you see exactly what
;;   happens at each step of the expansion process by pretty-printing the
;;   expanded forms inline in the source buffer, which is read-only while
;;   macro expansions are visible. You can expand and collapse macro forms
;;   one step at a time, and evaluate or instrument them for debugging with
;;   Edebug as normal (but see \"Bugs and known limitations\", below).
;;   Single-stepping through the expansion is useful for debugging macros
;;   that expand into another macro form, especially one like `lexical-let'
;;   that does significant rewriting. These can be difficult to debug with
;;   Emacs' built-in `macroexpand', because `macroexpand' continues
;;   expansion until the top-level form is no longer a macro call.
;;
;;   The mode also adds some simple additional fontification to
;;   macro-expanded code. The heads of macro sub-forms are fontified using
;;   `macrostep-macro-face'. Uninterned symbols (gensyms) are fontified
;;   based on which step in the expansion created them, to distinguish them
;;   from normal symbols and from other gensyms with the same print name.
;;   Use `customize-group' with the `macrostep' group to customize these
;;   faces.
;;
;;
;; 2 Key-bindings and usage
;; ========================
;;
;;   The standard macrostep-mode keybindings are the following:
;;
;;   e, =, RET : expand the macro form following point one step
;;   c, u, DEL : collapse the form following point
;;   q, C-c C-c: collapse all expanded forms and exit macrostep-mode
;;   n, TAB    : jump to the next macro form in the expansion
;;   p, M-TAB  : jump to the previous macro form in the expansion
;;
;;   It's not very useful to enable and disable macrostep-mode directly.
;;   Instead, bind `macrostep-expand' to a key in `emacs-lisp-mode-map',
;;   for example C-c e:
;;
;;   ,----
;;   | (define-key emacs-lisp-mode-map (kbd \"C-c e\") 'macrostep-expand)
;;   `----
;;
;;   You can then enter macrostep-mode and expand a macro form completely
;;   by typing `C-c e e e ...' as many times as necessary.
;;
;;   Exit macrostep-mode either with `q', `C-c C-c', or by successively
;;   typing `c' to collapse all expanded forms back to their original text.
;;
;;
;; 3 Expanding sub-forms
;; =====================
;;
;;   By moving point around in the macro expansion (perhaps using the `n'
;;   and `p' keys), you can macro-expand sub-forms before fully expanding
;;   the enclosing form. This can be useful in some cases, but you should
;;   keep in mind that it does not correspond to the way Emacs actually
;;   expands macro calls when evaluating or compiling your code. Macro
;;   expansion in Emacs Lisp always proceeds by fully expanding the outer
;;   form to a non-macro form before doing anything with the sub-forms.
;;
;;   For example, with `cl' loaded, try expanding the following form:
;;
;;   ,----
;;   | (dolist (l list-of-lists)
;;   |  (incf (car l)))
;;   `----
;;
;;   to produce the following:
;;
;;   ,----
;;   | (block nil
;;   |   (let
;;   |       ((--cl-dolist-temp-- list-of-lists)
;;   |        l)
;;   |     (while --cl-dolist-temp--
;;   |       (setq l
;;   |             (car --cl-dolist-temp--))
;;   |       (incf
;;   |        (car l))
;;   |       (setq --cl-dolist-temp--
;;   |             (cdr --cl-dolist-temp--)))
;;   |     nil))
;;   `----
;;
;;   where the forms beginning `block' and `incf' are both macro calls.
;;
;;   At this point, you can either continue expanding the `block' form,
;;   which corresponds to the real order of macro expansion in evaluation,
;;   or type `n' to move point to the unexpanded `incf' and expand it to a
;;   `callf' form and finally to a `let*' form. If you then move point back
;;   to the `block' and expand it, an unexpanded `incf' form appears again
;;   in the result. This might look visually confusing, but it does at
;;   least correspond to the way real macro expansion works.
;;
;;   Why allow expanding sub-forms out of order like this at all? The main
;;   reason is for debugging macros which expand into another macro, like
;;   `lexical-let', that programmatically expands its contents in order to
;;   rewrite them. In this case, expanding the sub-forms first allows you
;;   to see what `lexical-let' would compute via `cl-macroexpand-all'.
;;
;;
;; 4 Bugs and known limitations
;; ============================
;;
;;   You can evaluate and edebug macro-expanded forms and step through the
;;   macro-expanded version, but the form that `eval-defun' and friends
;;   read from the buffer won't have the uninterned symbols of the real
;;   macro expansion. This will probably work OK with CL-style gensyms, but
;;   may cause problems with `make-symbol' symbols if they have the same
;;   print name as another symbol in the expansion. It's possible that
;;   using `print-circle' and `print-gensym' could get around this.
;;
;;   The macro stepper doesn't bother trying to determine whether or not a
;;   sub-form is in an evaluated position before highlighting it as a
;;   macro. It does exclude `lambda' from treatment as a macro, since that
;;   leads to an endless series of expansions: `(function (function ...
;;   ))'. It would be better to recognise `function', `quote' and other
;;   special forms using their `edebug-form-spec' property.
;;
;;   Please send other bug reports and feature requests to the author.
;;
;;
;; 5 Acknowledgements
;; ==================
;;
;;   Thanks to:
;;   - John Wiegley for fixing a bug with the face definitions under Emacs
;;     24 & for plugging macrostep in his [EmacsConf presentation]!
;;   - George Kettleborough for bug reports, and patches to highlight the
;;     expanded region and properly handle backquotes.
;;
;;
;;   [EmacsConf presentation] http://youtu.be/RvPFZL6NJNQ
;;
;;
;; 6 Changelog
;; ===========
;;
;;   - v0.6, 2013-05-04: better handling of quote and backquote
;;   - v0.5, 2013-04-16: highlight region, maintain cleaner buffer state
;;   - v0.4, 2013-04-07: only enter macrostep-mode on successful
;;     macro-expansion
;;   - v0.3, 2012-10-30: print dotted lists correctly. autoload
;;     definitions.
;;
"]) (macros+ . [(20131227 136) nil "Extensions to `macros.el'." single ";;; Commentary:
;;
;;    Extensions to `macros.el'.
;;
;;
;;  ***** NOTE: The following functions defined in `macros.el' have
;;              been REDEFINED HERE:
;;
;;  `apply-macro-to-region-lines' -
;;     Make sure that `delete-selection-mode' is deactivated.  (See
;;     `delsel.el'.)  Otherwise, character self-insertion by the
;;     keyboard macro could cause the region to be deleted (replaced
;;     by the inserted text) when `apply-macro-to-region-lines' was
;;     finished (e.g. via a delete-selection `pre-command-hook').
;;
;;  `insert-kbd-macro', `name-last-kbd-macro' -
;;     These functions now use `completing-read' in interactive spec,
;;     with, as default, `symbol-nearest-point'.
;;
;;
;;  This file should be loaded after loading the standard GNU file
;;  `macros.el'.  So, in your `~/.emacs' file, do this:
;;  (eval-after-load \"macros\" '(require 'macros+))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (macro-math . [(20130328 904) nil "in-buffer mathematical operations" single ";;; Commentary:
;;
;; Add the following to your .emacs file:
;;
;; (require 'macro-math)
;; (global-set-key \"\\C-x~\" 'macro-math-eval-and-round-region)
;; (global-set-key \"\\C-x=\" 'macro-math-eval-region)
;;
;; At any time, especially during macros, add an expression to the buffer and
;; mark it.  Then call `macro-math-eval-region' to get the result.
;;
;; A few example expressions:
;; 5 + 3
;; (2 + 3) * 5
;; 1/2 * pi
;;
;; For example, use it to increase all numbers in a buffer by one.
;; Call `kmacro-start-macro', move the point behind the next number, type \"+ 1\",
;; mark the number and + 1, call `macro-math-eval-region'.  Finish the macro
;; with `kmacro-end-macro', then call it repeatedly.
;;
;;; Change Log ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; 2009-03-09 (1.0)
;;    Symbols names (like pi or e) can now be evaluated.
;;    `macro-math-eval-region' accepts a numeric prefix now.
;;    Changed back-end to `calc-eval'.
;;
;; 2007-04-10 (0.9)
;;    Initial release.
;;
"]) (lusty-explorer . [(20130407 1056) nil "Dynamic filesystem explorer and buffer switcher" single ";;; Commentary:
;;  -----------
;;
;; To install, copy this file somewhere in your load-path and add this line to
;; your .emacs:
;;
;;    (require 'lusty-explorer)
;;
;; To launch the explorer, run or bind the following commands:
;;
;;    M-x lusty-file-explorer
;;    M-x lusty-buffer-explorer
;;
;; And then use as you would `find-file' or `switch-to-buffer'. A split window
;; shows the *Lusty-Matches* buffer, which updates dynamically as you type
;; using a fuzzy matching algorithm.  One match is highlighted; you can move
;; the highlight using C-n / C-p (next, previous) and C-f / C-b (next column,
;; previous column).  Pressing TAB or RET will select the highlighted match
;; (with slightly different semantics).
;;
;; To create a new buffer with the given name, press C-x e.  To open dired at
;; the current viewed directory, press C-x d.
;;
;; Note: lusty-explorer.el benefits greatly from byte-compilation.  To byte-
;; compile this library, M-x byte-compile-file and choose lusty-explorer.el.
;; (Ignore any warnings about the cl package.) Then, restart Emacs or
;; M-x load-library and choose the newly generated lusty-explorer.elc file.
;;
;;; Customization:
;;  --------------
;;
;; To modify the keybindings, use something like:
;;
;;   (add-hook 'lusty-setup-hook 'my-lusty-hook)
;;   (defun my-lusty-hook ()
;;     (define-key lusty-mode-map \"\\C-j\" 'lusty-highlight-next))
;;
;; Respects these variables:
;;   completion-ignored-extensions
;;
;; Latest release: <http://www.emacswiki.org/cgi-bin/wiki/LustyExplorer>
;; Development:    <http://github.com/sjbach/lusty-emacs>
;;

;;; Contributors:
;;
;; Tassilo Horn
;; Jan Rehders
;; Hugo Schmitt
;; Volkan Yazici
;; Ren\303\251 Kyllingstad
;; Alex Schroeder
;; Sasha Kovar
;; John Wiegley
;; Johan Walles
;;

"]) (lui . [(20131201 620) ((tracking (0))) "Linewise User Interface" tar nil]) (lua-mode . [(20131018 2259) nil "a major-mode for editing Lua scripts" single ";;; Commentary:

;; Thanks to d87 <github.com/d87> for an idea of highlighting lua
;; builtins/numbers

;; Thanks to Vedat Hallac <github.com/vhallac> for sharing some of
;; his fixes and updates to core indentation logics

;; Thanks to Rafael Sanchez <rafael@cornerdimension.com> for patch
;; adding lua-mode to interpreter-mode-alist

;; Thanks to Leonardo Etcheverry <leo@kalio.net> for enabling
;; narrow-to-defun functionality

;; Thanks to Tobias Polzin <polzin@gmx.de> for function indenting
;; patch: Indent \"(\" like \"{\"

;; Thanks to Fabien <fleutot@gmail.com> for imenu patches.

;; Thanks to Simon Marshall <simonm@mail.esrin.esa.it> and Olivier
;; Andrieu <oandrieu@gmail.com> for font-lock patches.

;; Additional font-lock highlighting and indentation tweaks by
;; Adam D. Moss <adam@gimp.org>.

;; INSTALLATION:

;; To install, just copy this file into a directory on your load-path
;; (and byte-compile it). To set up Emacs to automatically edit files
;; ending in \".lua\" or with a lua hash-bang line using lua-mode add
;; the following to your init file:
;;
;; (autoload 'lua-mode \"lua-mode\" \"Lua editing mode.\" t)
;; (add-to-list 'auto-mode-alist '(\"\\\\.lua$\" . lua-mode))
;; (add-to-list 'interpreter-mode-alist '(\"lua\" . lua-mode))

;; Usage

;; Lua-mode supports c-mode style formatting and sending of
;; lines/regions/files to a Lua interpreter. An interpreter (see
;; variable `lua-default-application') will be started if you try to
;; send some code and none is running. You can use the process-buffer
;; (named after the application you chose) as if it were an
;; interactive shell. See the documentation for `comint.el' for
;; details.

;; Lua-mode works with Hide Show minor mode (see ``hs-minor-mode``).

;; Key-bindings

;; To see all the keybindings for Lua mode, look at `lua-setup-keymap'
;; or start `lua-mode' and type `\\C-h m'.
;; The keybindings may seem strange, since I prefer to use them with
;; lua-prefix-key set to nil, but since those keybindings are already used
;; the default for `lua-prefix-key' is `\\C-c', which is the conventional
;; prefix for major-mode commands.

;; You can customise the keybindings either by setting `lua-prefix-key'
;; or by putting the following in your .emacs
;;      (define-key lua-mode-map <your-key> <function>)
;; for all the functions you need.


"]) (love-minor-mode . [(20130429 1459) ((lua-mode (20130419))) "Minor mode for working on L\303\226VE projects" single ";;; Commentary:
;;
;; This project adds a minor mode for GNU Emacs that adds tools to help
;; developing games using the `L\303\226VE' engine. This minor mode works in
;; conjunction with and requires `lua-mode'.
;;
;; Usage:
;;
;; Put this file in your Emacs lisp path (i.e. site-lisp) and add
;; this to your `.emacs' file:
;;
;;     (require 'love-minor-mode)
;;
;; If you are working on a L\303\226VE project then you can enable the minor
;; mode with the command (love-minor-mode t).  Emacs will activate
;; the minor mode automatically if you visit a Lua buffer that
;; contains any built-in L\303\226VE names.
;;
;; See the file 'README.markdown' for a description of the commands
;; that L\303\226VE minor mode provides.  If you do not have the file
;; available then you can see the key-bindings and their commands by
;; entering 'C-h f love-minor-mode'.
;;
;;
"]) (lorem-ipsum . [(20051013 1756) nil "Insert dummy pseudo Latin text." single nil]) (loop . [(20130309 805) nil "friendly imperative loop structures" single ";;; Commentary:

;; Emacs lisp is missing loop structures familiar to users of newer
;; languages. This library adds a selection of popular loop structures
;; as well as break and continue.

"]) (look-mode . [(20130824 1206) nil "quick file viewer for image and text file browsing" single ";;; Commentary:
;;
;; This package provides a function to load a list of files into a
;; temporary buffer for viewing.  The buffer (*look*) is writable,
;; so when used with eimp.el (Emacs Image Manipulation Package), one
;; can resize images without any danger of overwriting the original
;; file.  This may also be of interest to someone wishing to scan
;; the files of a directory.
;;
;; Presently, the file list is generated by a system call to \"ls\" so this
;; probably is not Windows compatible.  One moves through the file list 
;; using the keybindings:
;;            C-. or M-] or M-n (look-at-next-file)
;;            C-, or M-[ or M-p (look-at-previous-file)
;;
;; After loading, M-l is bound to \"look-at-files\" from dired
;;
;; C-c l should access the Customize interface for the \"look\" group.

"]) (look-dired . [(20130511 1624) ((look-mode (1 0))) "Extensions to look-mode for dired buffers" single ";;; Commentary: 
;;
;; Bitcoin donations gratefully accepted: 1ArFina3Mi8UDghjarGqATeBgXRDWrsmzo
;;
;; This library provides extra commands for [[http://www.emacswiki.org/emacs/LookMode][look-mode]] (see below).
;; In addition if you mark some files in a dired buffer and then run look-at-file (or press M-l), 
;; all of the marked files will be visited in the *look* buffer.
;;;;

"]) (lolcode-mode . [(20111002 147) nil "Major mode for editing LOLCODE" single ";;; Commentary:

;; This is a major mode for editing LOLCODE, with the following
;; features:

;; * Syntax highlighting.
;; * Smart indentation.
;; * Execution of LOLCODE buffers (press C-c C-c).
;; * Automatic Flymake integration.

;;; Installation:

;; Put this file somewhere in your load-path, and put the following in
;; your .emacs:

;;   (require 'lolcode-mode)

;; You may want to install a LOLCODE interpreter. This package comes
;; preconfigured for lci, which you can get at the following URL:

;;   http://icanhaslolcode.org/

;;; Configuration:

;; This is an example setup which integrates lolcode-mode with
;; auto-complete-mode and yasnippet. It also sets default indentation
;; to 2 spaces.

;;   (require 'lolcode-mode)
;;   (require 'auto-complete)
;;   (defvar ac-source-lolcode
;;     '((candidates . lolcode-lang-all)))
;;   (add-to-list 'ac-modes 'lolcode-mode)
;;   (add-hook 'lolcode-mode-hook
;;             (lambda ()
;;               (setq default-tab-width 2)
;;               (add-to-list 'ac-sources 'ac-source-lolcode)
;;               (add-to-list 'ac-sources 'ac-source-yasnippet)))

"]) (logito . [(20120225 1255) ((eieio (1 3))) "logging library for Emacs" single ";;; Commentary:

;; This module provides logging facility for Emacs

"]) (logalimacs . [(20131021 1129) ((popwin (0 6 2)) (popup (0 5 0)) (stem (20130120))) "Front-end to logaling-command for Ruby gems" single ";;; Commentary:
;; This is Front-end to logaling-command for Ruby gems.
;; Logalimacs.el lookup to registered term at logaling-command and,
;; Executes other commands for logaling-command from emacs.

"]) (log4j-mode . [(20101016 822) nil "major mode for viewing log files" single ";;; Commentary:

;; This package provides a major mode for viewing log files, including syntax
;; highlighting, filtering, and source code browsing.
;;
;; Log records are syntax highlighted using keywords such as INFO and ERROR.
;; Customizable regular expressions are used to find the beginning and end of
;; multi-line log records.
;;
;; To filter a log file buffer, type `C-c C-s', and enter the desired filter
;; criteria - any number of keywords separated by spaces. Log records that
;; contain any of the words in the include list, and none of the words in the
;; exclude list, will be copied to the filter buffer. All other log records
;; will be discarded. If the include list is blank, all log records will be
;; included. If the exclude list is blank, no records will be excluded. If the
;; log file buffer is auto reverted, the filter buffer will be updated too. To
;; stop filtering the log file buffer, just type `C-c C-s' again.
;;
;; To show the source code for a Java identifier found in the log file, place
;; the point in the identifier, and type `C-c C-b'. Log4j mode will parse the
;; expression around point, and look up the Java identifier found using jtags
;; - an Emacs package for editing and browsing Java source code.
;;
;; This command is only enabled if package jtags is loaded. Note that this
;; version of Log4j mode requires jtags version 0.95 or later. For more
;; information about jtags, see http://jtags.sourceforge.net.
;;
;; Finally, the commands `M-}' and `M-{' are redefined to move to the end
;; and beginning of the current log record.
;;
;; The latest version of Log4j mode can always be found at
;; http://log4j-mode.sourceforge.net.

;; Installation:

;; Place \"log4j-mode.el\" in your `load-path' and place the following lines
;; of code in your init file:
;;
;; (autoload 'log4j-mode \"log4j-mode\" \"Major mode for viewing log files.\" t)
;; (add-to-list 'auto-mode-alist '(\"\\\\.log\\\\'\" . log4j-mode))
;;
;; To enable source code browsing, place \"jtags.el\" in your `load-path' too.

;; Configuration:

;; You can customize the faces that are used for syntax highlighting.
;; Type `M-x customize-group' and enter group name \"log4j-mode\".
;;
;; Log file buffers are auto reverted by default. If you don't like that,
;; set `log4j-auto-revert-flag' to nil.
;;
;; You can also customize the regular expressions that are used to find the
;; beginning and end of multi-line log records. However, in many cases this
;; will not be necessary. Log4j mode can automatically detect single-line and
;; multi-line log records created by Log4j and JDK's built-in logging package.
;;
;; If you use the arrow keys to move around in the text, you can define `C-up'
;; and `C-down' to move to the end and beginning of the current log record.
;; Put the following lines of code in your init file:
;;
;; (add-hook
;;  'log4j-mode-hook
;;  (lambda ()
;;    (define-key log4j-mode-local-map [(control down)] 'log4j-forward-record)
;;    (define-key log4j-mode-local-map [(control up)] 'log4j-backward-record)))

;; XEmacs:

;; XEmacs tends to move the point to `point-min' when auto reverting a buffer.
;; Setting the customizable variable `log4j-restore-point-flag' to 't leaves
;; the point at its original position.
;;
;; To tell XEmacs which tags table files to use for log files, modify variable
;; `tag-table-alist' to include log files. Using the example in file \"jtags.el\"
;; you could put the following lines of code in your init file:
;;
;; (setq tag-table-alist '((\"\\\\.\\\\(java\\\\|log\\\\)$\" . \"c:/java/j2sdk1.4.2/src\")
;;                         (\"\\\\.\\\\(java\\\\|log\\\\)$\" . \"c:/projects/tetris/src\")))

"]) (log4e . [(20130514 912) nil "provide logging framework for elisp" single ";;; Commentary:
;; 
;; This extension provides logging framework for elisp.

"]) (loccur . [(20131022 219) nil "Performs an occur-like folding in current buffer." single ";;; Commentary:
;;
;; Add the following to your .emacs file:
;; 
;; (require 'loccur)
;; ;; defines shortcut for loccur of the current word
;; (define-key global-map [(control o)] 'loccur-current)
;; ;; defines shortcut for the interactive loccur command
;; (define-key global-map [(control meta o)] 'loccur)
;; ;; defines shortcut for the loccur of the previously found word
;; (define-key global-map [(control shift o)] 'loccur-previous-match)
;;
"]) (loc-changes . [(20130723 1930) nil "Helps users and programs keep track of positions even after buffer changes." single ";;; Commentary:

;; This package lets users or programs set marks in a buffer prior to
;; changes so that we can track the original positions after the
;; change.

;; One common use is say when debugging a program.  The debugger has its static
;; notion of the file and positions inside that.  However it may be convenient
;; for a programmer to edit the program but not restart execution of the program.

;; Another use might be in a compilation buffer for errors and
;; warnings which refer to file and line positions.

;; Should be available via Melpa.


"]) (load-theme-buffer-local . [(20120702 1336) nil "Install emacs24 color themes by buffer." single nil]) (load-relative . [(20130410 249) nil "relative file load (within a multi-file Emacs package)" single ";;; Commentary:

;; Here we provide functions which facilitate writing multi-file Emacs
;; packages and facilitate running from the source tree without having
;; to \"install\" code or fiddle with evil `load-path'. See
;; https://github.com/rocky/emacs-load-relative/wiki/NYC-Lisp-talk for
;; the the rationale behind this.
;;
;; The functions we add are relative versions of `load', and `require'
;; and versions which take list arguments. We also add a `__FILE__'
;; function and a `provide-me' macro.

;; The latest version of this code is at:
;;     http://github.com/rocky/emacs-load-relative/

;; `__FILE__' returns the file name that that the calling program is
;; running.  If you are `eval''ing a buffer then the file name of that
;; buffer is used. The name was selected to be analogous to the name
;; used in C, Perl, Python, and Ruby.

;; `load-relative' loads an Emacs Lisp file relative to another
;; (presumably currently running) Emacs Lisp file. For example suppose
;; you have Emacs Lisp files \"foo.el\" and \"bar.el\" in the same
;; directory. To load \"bar.el\" from inside Emacs lisp file \"foo.el\":
;;
;;     (require 'load-relative)
;;     (load-relative \"baz\")
;;
;; The above `load-relative' line could above have also been written as:
;;
;;     (load-relative \"./baz\")
;; or:
;;     (load-relative \"baz.el\")  # if you want to exclude any byte-compiled files
;;
;; Use `require-relative' if you want to `require' the file instead of
;; `load'ing it:
;;
;;    (require-relative \"baz\")
;;
;; or:
;;
;;    (require-relative \"./baz\")
;;
;; The above not only does a `require' on 'baz', but makes sure you
;; get that from the same file as you would have if you had issued
;; `load_relative'.
;;
;; Use `require-relative-list' when you have a list of files you want
;; to `require'. To `require-relative' them all in one shot:
;;
;;     (require-relative-list '(\"dbgr-init\" \"dbgr-fringe\"))
;;
;; Finally, macro `provide-me' saves you the trouble of adding a
;; symbol after `provide' using the file basename (without directory
;; or file extension) as the name of the thing you want to
;; provide.
;;
;; Using this constrains the `provide' name to be the same as
;; the filename, but I consider that a good thing.

"]) (livid-mode . [(20131116 544) ((skewer-mode (1 5 3)) (s (1 8 0))) "Live browser eval of JavaScript every time a buffer changes" single ";;; Commentary:

;; This mode tries to create an environment similar to some online code editors
;; (such as jsbin or codepen), where JavaScript code in a buffer is evaluated
;; automatically every time it changes. However, in contrast to those tools,
;; the browser's state is not refreshed. The code is just evaluated, as if via the
;; browser's console.

;; By default, a buffer's code is first checked for syntax errors (using the
;; external `js` command) before actually being sent for evaluation.

;; Depends on skewer-mode and s. If livid-mode is activated in a buffer which is
;; not in skewer-mode already, skewer-mode is called.

;; As an alternative to turning the mode on and off, livid can be \"paused\"
;; (postponing any eval) with livid-pause, bound by default to C-c C-p.

"]) (livescript-mode . [(20131206 2300) nil "Major mode for editing LiveScript files" single ";;; Commentary:

;; A major mode for editing LiveScript code.

"]) (lively . [(20120728 1413) nil "Interactively updating text" single nil]) (litable . [(20131017 1400) ((dash (1 1 0))) "dynamic evaluation replacement with emacs" single ";;; Commentary:

;; This allows light-table like dynamic evaluation with Emacs. It's
;; fun for investigating lisp or for particular light problems before
;; you delve in and start hacking serious functions together.

;; It's very much a work in progress, please heed that warning.

"]) (list-utils . [(20131106 706) nil "List-manipulation utility functions" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'list-utils)
;;
;;     (list-utils-flatten '(1 2 (3 4 (5 6 7))))
;;     ;; '(1 2 3 4 5 6 7)
;;
;;     (list-utils-depth '(1 2 (3 4 (5 6 7))))
;;     ;; 3
;;
;;     (let ((cyclic-list '(1 2 3 4 5 6 7)))
;;       (nconc cyclic-list (cdr cyclic-list))
;;       (list-utils-make-linear-inplace cyclic-list))
;;     ;; '(1 2 3 4 5 6 7)
;;
;;     (list-utils-cyclic-p '(1 2 3))
;;     ;; nil
;;
;;     (list-utils-plist-del '(:one 1 :two 2 :three 3) :two)
;;     ;; '(:one 1 :three 3)
;;
;; Explanation
;;
;; List-utils is a collection of functions for list manipulation.
;; This library has no user-level interface; it is only useful
;; for programming in Emacs Lisp.
;;
;; Notable functionality includes
;;
;;     * `list-utils-flatten', a robust list-flattener which handles
;;       cyclic lists, non-nil-terminated lists, and preserves nils
;;       when they are found as list elements.
;;
;;     * `tconc', a simple data structure for efficiently appending
;;       to a list
;;
;; The following functions are provided:
;;
;;     `make-tconc'
;;     `tconc-p'
;;     `tconc-list'
;;     `tconc'
;;     `list-utils-cons-cell-p'
;;     `list-utils-cyclic-length'
;;     `list-utils-improper-p'
;;     `list-utils-make-proper-copy'
;;     `list-utils-make-proper-inplace'
;;     `list-utils-make-improper-copy'
;;     `list-utils-make-improper-inplace'
;;     `list-utils-linear-p'
;;     `list-utils-linear-subseq'
;;     `list-utils-cyclic-p'
;;     `list-utils-cyclic-subseq'
;;     `list-utils-make-linear-copy'
;;     `list-utils-make-linear-inplace'
;;     `list-utils-safe-length'
;;     `list-utils-safe-equal'
;;     `list-utils-depth'
;;     `list-utils-flat-length'
;;     `list-utils-flatten'
;;     `list-utils-alist-or-flat-length'
;;     `list-utils-alist-flatten'
;;     `list-utils-insert-before'
;;     `list-utils-insert-after'
;;     `list-utils-insert-before-pos'
;;     `list-utils-insert-after-pos'
;;     `list-utils-and'
;;     `list-utils-not'
;;     `list-utils-xor'
;;     `list-utils-uniq'
;;     `list-utils-dupes'
;;     `list-utils-singlets'
;;     `list-utils-partition-dupes'
;;     `list-utils-plist-reverse'
;;     `list-utils-plist-del'
;;
;; To use list-utils, place the list-utils.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'list-utils)
;;
;; Notes
;;
;;     This library includes an implementation of the classic Lisp
;;     `tconc' which is outside the \"list-utils-\" namespace.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     No external dependencies
;;
;; Bugs
;;
;; TODO
;;
;;     @@@ spin out hash-table tests into separate library
;;
;;     test cyclic inputs to all
;;     test improper inputs to all
;;     test single-element lists as inputs to all
;;     test cyclic single-element lists as inputs to all
;;
;;     should list-utils-make-improper-inplace accept nil as a special case?
;;
;;     could do -copy/-inplace variants for more functions, consider doing
;;     so for flatten
;;
;;     list* returns a non-list on single elt, our function throws an error
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (list-register . [(20130824 1200) nil "List register" single ";;; Commentary:
;;

"]) (list-processes+ . [(20131117 1935) nil "Add process management to `list-processes'" single ";;; Commentary:

;; 

;; Put this file into your load-path and the following into your ~/.emacs:
;;   (autoload \"list-processes+\" 'list-processes+
;;          \"A enhance list processes command\" t)

"]) (list-packages-ext . [(20130927 908) ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6))) "Extras for list-packages" single ";;; Commentary:
;;
;; This package adds tag and filtering capabilities to
;; `package-menu-mode'.
;;
;; To activate this package, add this to your .emacs:
;;
;; (add-hook 'package-menu-mode-hook (lambda () (list-packages-ext-mode 1)))
;;
;; The user can tag the packages with `lpe:tag', filter by regular
;; expression with `lpe:filter-with-regexp', filter with by tag with
;; `lpe:filter-by-tag-expr'.

;; The tags hidden and starred have special meanings: If a package is
;; tagged as hidden, it is not shown in the package list, unless
;; viewing hidden packages is activated, see `lpe:show-hidden-toggle'.
;; When a package is tagged as \"starred\", an indicator is shown in the
;; fringe on the left side.
;; The commands `lpe:hide-package' and `lpe:star' toggle the \"hidden\"
;; and \"starred\" tags.
;; All these commands can be used on the active region.
;;
;; This library also offers an annotation subsystem.  Notes can be set
;; for a package using `lpe:edit-package-notes': this function brings
;; up a buffer where the user can edit the notes, and save them with
;; C-c C-c.
;;
;; See the help of the minor mode for an overview of the keys.

"]) (lispyscript-mode . [(20130828 719) nil "Major mode for LispyScript code." single ";;; Commentary:
;;
;; A major mode for LispyScript http://lispyscript.com/

(require 'lisp-mode)
(require 'font-lock)
(require 'rx)

"]) (lispy . [(20140114 742) ((helm (1 5 3)) (ace-jump-mode (2 0))) "vi-like Paredit." single ";;; Commentary:
;;
;; Due to the structure of Lisp syntax it's very rare for the
;; programmer to want to insert characters right before \"(\" or right
;; after \")\".  Thus unprefixed printable characters can be used to call
;; commands when the point is at one of these locations, which are
;; further referred to as special.
;;
;; Conveniently, when located at special position it's very clear to
;; which sexp the list-manipulating command will be applied to, what
;; the result be and where the point should end up afterwards.  You
;; can enhance this effect with `show-paren-mode' or similar.
;;
;; Here's an illustration to this effect, with `lispy-clone' (\"*\"
;; represents the point):
;; |--------------------+-----+--------------------|
;; | before             | key | after              |
;; |--------------------+-----+--------------------|
;; |  (looking-at \"(\")* |  c  |  (looking-at \"(\")  |
;; |                    |     |  (looking-at \"(\")* |
;; |--------------------+-----+--------------------|
;; | *(looking-at \"(\")  |  c  | *(looking-at \"(\")  |
;; |                    |     |  (looking-at \"(\")  |
;; |--------------------+-----+--------------------|
;;
;; When special, the digit keys call `digit-argument' which is very
;; convenient since most Lispy commands accept a numeric argument.
;; For instance, \"3c\" is equivalent to \"ccc\" (clone sexp 3 times), and
;; \"4j\" is equivalent to \"jjjj\" (move point 4 sexps down).  Some
;; useful applications are \"9l\" and \"9a\" - they exit list forwards and
;; backwards respectively at most 9 times which makes them effectively
;; equivalent to `end-of-defun' and `beginning-of-defun'.
;;
;; To move the point into a special position, use:
;; \"]\" - calls `lispy-forward'
;; \"[\" - calls `lispy-backward'
;; \"C-3\" - calls `lispy-out-forward' (exit current list forwards)
;; \")\" - calls `lispy-out-forward-nostring' (exit current list
;;       forwards, but self-insert in strings and comments)
;;
;; These are the few Lispy commands that don't care whether the point
;; is special or not.  Other such bindings are `DEL', `C-d', `C-k'.
;;
;; To get out of the special position, you can use any of the good-old
;; navigational commands such as `C-f' or `C-n'.
;; Additionally `SPC' will break out of special to get around the
;; situation when you have the point between open parens like this
;; \"(|(\" and want to start inserting.  `SPC' will change the code to
;; this: \"(| (\".
;;
;; A lot of Lispy commands come in pairs: one reverses the other.
;; Some examples are:
;; |-----+--------------------------+------------+-------------------|
;; | key | command                  | key        | command           |
;; |-----+--------------------------+------------+-------------------|
;; | j   | `lispy-down'             | k          | `lispy-up'        |
;; | s   | `lispy-move-down'        | w          | `lispy-move-up'   |
;; | o   | `lispy-counterclockwise' | p          | `lispy-clockwise' |
;; | >   | `lispy-slurp'            | <          | `lispy-barf'      |
;; | c   | `lispy-clone'            | C-d or DEL |                   |
;; | C   | `lispy-convolute'        | C          | reverses itself   |
;; | d   | `lispy-different'        | d          | reverses itself   |
;; | M-j | `lispy-split'            | +          | `lispy-join'      |
;; | O   | `lispy-oneline'          | M          | `lispy-multiline' |
;; |-----+--------------------------+------------+-------------------|
;;
;; Among other cool commands are:
;; |-----+------------------------------------|
;; | key | command                            |
;; |-----+------------------------------------|
;; | f   | `lispy-flow'                       |
;; | u   | `undo'                             |
;; | e   | `lispy-eval'                       |
;; | m   | `lispy-mark'                       |
;; | ;   | `lispy-comment'                    |
;; | l   | `lispy-out-forward'                |
;; | a   | `lispy-out-backward'               |
;; | E   | `lispy-eval-and-insert'            |
;; | /   | `lispy-splice'                     |
;; | i   | `indent-sexp'                      |
;; | r   | `lispy-raise'                      |
;; | R   | `lispy-raise-some'                 |
;; | J   | `outline-next-visible-heading'     |
;; | K   | `outline-previous-visible-heading' |
;; | g   | `lispy-goto'                       |
;; | q   | `lispy-ace-paren'                  |
;; | Q   | `lispy-ace-char'                   |
;; | S   | `lispy-stringify'                  |
;; | D   | `lispy-describe'                   |
;; | F   | `lispy-follow'                     |
;; |-----+------------------------------------|
;;
;; Most special commands will leave the point special after they're
;; done.  This allows to chain them as well as apply them
;; continuously by holding the key.  Some useful holdable keys are
;; \"jkopf<>cws;\".
;; Not so useful, but fun is \"/\": start it from \"|(\" position and hold
;; until all your Lisp code is turned into Python :).
;;
"]) (lispxmp . [(20130824 1207) nil "Automagic emacs lisp code annotation" single ";;; Commentary:
;;
;; Automagical annotation of lisp values like Ruby's xmpfilter. For
;; example, executing M-x lispxmp on the following buffer:
;;
;; ====
;; 1 ; =>
;; (+ 3 4) ; =>
;; (dotimes (i 3)
;;   (* i 4)  ; =>
;; )
;; ====
;; 
;; produces
;; 
;; ====
;; 1 ; => 1
;; (+ 3 4) ; => 7
;; (dotimes (i 3)
;;   (* i 4) ; => 0, 4, 8
;; )
;; ====


"]) (linum-relative . [(20131210 2053) nil "display relative line number in emacs." single ";;; Commentary:

;; ![Screenshot](https://github.com/coldnew/linum-relative/raw/master/screenshot/screenshot1.jpg)
;;
;; linum-relative lets you display relative line numbers for current buffer.
;;

;;; Installation:

;; If you have `melpa` and `emacs24` installed, simply type:
;;
;; 	M-x package-install linum-relative
;;
;; In your .emacs
;;
;; 	(require 'linum-relative)

"]) (linphone . [(20130524 409) nil "Emacs interface to Linphone" tar ";;; Commentary:
;;
;; Written against Linphone version 3.3.2 on GNU/Linux

"]) (link . [(20131005 526) nil "Hypertext links in text buffers" single ";;; Commentary:

;; This file contains functions for using links in buffers.  A link is
;; a part of the buffer marked with a special face, beeing
;; hightlighted while the mouse points to it and beeing activated when
;; pressing return or clicking the button2.

;; Which each link a function and some data are associated.  Upon
;; clicking the function is called with the data as only
;; argument. Both the function and the data are stored in text
;; properties.
;;
;; link-create-link       - insert a new link for the text in the given range
;; link-initialize-keymap - install the keybinding for selecting links

"]) (lice . [(20131204 1825) nil "License And Header Template" tar ";;; Commentary:

;; Overview
;; --------

;; `lice.el` provides following features:

;; - License template management.
;; - File header insertion.

;; Usage
;; -----

;; Usage is very easy, put `lice.el` in your emacs system, and open a new
;; file, and run:

;;     M-x lice

;; Then, `lice.el` tell to use which license (default is gpl-3.0). You
;; can select license on minibuffer completion.

;; When you select license, and enter the `RET`, license and copyright is
;; putted into a text.

;; Use dir-locals
;; --------------

;; You can use `.dir-locals.el` for your project. Put `.dir-locals.el` in
;; your project root directory and write follows:

;;     ((nil
;;       (lice:default-license . \"mit\")))

;; That means use `mit' for default license template.

"]) (lib-requires . [(20131227 130) nil "Commands to list Emacs Lisp library dependencies." single ";;; Commentary:
;;
;;  Commands to list Emacs Lisp library dependencies.
;;
;;  This library extends some of the functionality in GNU Emacs
;;  library `load-hist.el'.
;;
;;
;;  User options (variables) defined here:
;;
;;    `libreq-file-header'.
;;
;;
;;  Functions defined here:
;;
;;    `libreq-flatten', `libreq-insert-lib-requires-as-comment',
;;    `libreq-remove-duplicates', `libreq-requires-list',
;;    `libreq-requires-tree'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (lfe-mode . [(20140113 1611) nil "Lisp Flavoured Erlang mode" tar nil]) (lexbind-mode . [(20130327 1801) nil "Puts the value of lexical-binding in the mode line" single ";;; Commentary:

;; Emacs 24 introduced lexical scope for variables to Emacs
;; Lisp.  However, rather than provide it via a new form, say llet or
;; whatever, the buffer local variable `lexical-binding' was
;; introduced to switch the behaviour of binding forms.  This is an
;; unfortunate situation because the semantics of a piece of code
;; depend on the value of a buffer local variable at the time of
;; evaluation.

;; This minor mode is intended to make it plain what the value of
;; `lexical-binding' is in the buffers used to evaluate Lisp forms.
;; It does this by adding to the mode line the string \"(LEX)\" to
;; indicate lexical binding is enabled, and \"(DYN)\" to indicate that
;; lexical binding is disabled and that dynamic binding is in effect.

;; Other lexical scope specific utilities such as lexbind-lexscratch
;; may also find a home here.

;; To install, once lexbind-mode.el is located somewhere in your
;; load-path, you can add this to your initialization file:

;; (require 'lexbind-mode)
;; (add-hook 'emacs-lisp-mode-hook 'lexbind-mode)

"]) (levenshtein . [(20051013 1756) nil "Edit distance between two strings." single ";;; Commentary:

;; See: http://wikipedia.org/wiki/Levenshtein_distance

"]) (leuven-theme . [(20140113 328) nil "Awesome Emacs color theme on white background" single ";;; Commentary:

;; This Org-enhancing color theme \"leuven\" ROCKS!
;; ... and not just for Org mode.
;;
;; To use it, put the following in your Emacs configuration file:
;;
;;   (load-theme 'leuven t)
;;
;; Requirements: Emacs 24.

"]) (letcheck . [(20130213 1605) nil "Check the erroneous assignments in let forms" single ";;; Commentary:

;; Toggle checking of let assignments.  If point is inside a let form,
;; the variables in this let block are checked and if you reference a
;; previously defined variable in this let binding, it is highlight
;; with warning face, because you can't reference it.  You then need
;; to change the let into let*.

;; See github readme at https://github.com/Fuco1/letcheck

"]) (less-css-mode . [(20140109 307) nil "Major mode for editing LESS CSS files (lesscss.org)" single ";;; Commentary:
;;
;; This mode provides syntax highlighting for LESS CSS files, plus
;; optional support for compilation of .less files to .css files at
;; the time they are saved: use `less-css-compile-at-save' to enable
;; this.
;;
;; Command line utility \"lessc\" is required if setting
;; `less-css-compile-at-save' to t.  To install \"lessc\" using the
;; Node.js package manager, run \"npm install less\"
;;
;; Also make sure the \"lessc\" executable is in emacs' PATH, example:
;; (setq exec-path (cons (expand-file-name \"~/.gem/ruby/1.8/bin\") exec-path))
;; or customize `less-css-lessc-command' to point to your \"lessc\" executable.
;;
;; We target lessc >= 1.4.0, and thus use the `--no-color' flag by
;; default.  You may want to adjust `less-css-lessc-options' for
;; compatibility with older versions.
;;
;; `less-css-mode' is derived from `css-mode', and indentation of
;; nested blocks may not work correctly with versions of `css-mode'
;; other than that bundled with recent Emacs.
;;
;; You can specify per-file values for `less-css-compile-at-save',
;; `less-css-output-file-name' or `less-css-output-directory' using a
;; variables header at the top of your .less file, e.g.:
;;
;; // -*- less-css-compile-at-save: t; less-css-output-directory: \"../css\" -*-
;;
;; In the case of files which are included in other .less files, you
;; may want to trigger the compilation of a \"master\" .less file on
;; save: you can accomplish this with `less-css-input-file-name',
;; which is probably best set using directory local variables.
;;
;; If you don't need CSS output but would like to be warned of any
;; syntax errors in your .less source, consider using `flymake-less':
;; https://github.com/purcell/flymake-less
;;
;;; Credits
;;
;; The original code for this mode was, in large part, written using
;; Anton Johansson's scss-mode as a template -- thanks Anton!
;; https://github.com/antonj
;;
"]) (lemon-mode . [(20130216 504) nil "A major mode for editing lemon grammar files" single ";;; Commentary:

;; A major mode for editing LEMON Parser Generator grammar files.
;;
;; Lemon <http://www.hwaci.com/sw/lemon/> is a simple but very
;; powerful parser generator for C/C++. This major mode helps you edit
;; Lemon's grammar files in Emacs.
;;
;; lemon-mode.el provides two major modes (1) `lemon-c-mode' and (2)
;; `lemon-c++-mode', which allow you to explicitly specify the base
;; editing mode. The base editing mode affects syntax highlighting and
;; indentation mechanism.
;;

"]) (lein . [(20130406 1312) ((nrepl (0 1 7))) "Eshell interface to Leiningen" single ";;; Commentary:

;; This provides an eshell interface to the Leiningen project
;; automation tool for Clojure. (http://leiningen.org) It communicates
;; over nREPL (https://github.com/kingtim/nrepl.el) to avoid starting
;; a new process for every command. Note that tasks which call
;; eval-in-project will still start a project JVM; it's only
;; Leiningen's own startup time which is avoided.

;;; Usage

;; Currently you need to launch Leiningen once per Emacs instance with
;; M-x lein-launch. Then start eshell with M-x eshell and use
;; Leiningen as you would normally.

"]) (legalese . [(20100119 2148) nil "Add legalese to your program files" single ";;; Commentary:

;; This file adds the sometimes necessary legalese to your files. That
;; is, it adds a license header. For most files, it tries to adhere to
;; a nice standard layout.

;; I recommend the following setup:

;; (setq comment-style 'extra-line)
;; (add-hook 'scheme-mode-hook
;;           (lambda ()
;;             (set (make-local-variable 'comment-add) 1)))

"]) (ledger-mode . [(20140113 1355) nil "Helper code for use with the \"ledger\" command-line tool" tar ";;; Commentary:
;; Most of the general ledger-mode code is here.

"]) (lcs . [(20121201 555) nil "find out the longest common sequence" single ";;; Commentary:

;; lcs.el is a library for other Emacs Lisp programs not useful by
;; itself.

;; This library provides functions to find the Longest Common Sequence
;; (LCS) of two sequences. This is used to create a unified diff of to
;; two lists. See `lcs-unified-diff' for a useful function to be
;; called.

;; The code is more or less a literal translation of (part of)
;; Gauche's util/lcs.scm module to Emacs Lisp.

"]) (launch . [(20130619 1504) nil "launch files with OS-standard associated applications." single ";;; Commentary:

;; Launch files and directories using the associated applications provided by
;; your operating system.

;; If you're like me, you love using Emacs for all of your text
;; management needs.  But sometimes, there are documents that you'd like
;; to open with other programs.

;; For instance, you might want to launch your file manager to look at
;; pretty thumbnails in the current directory.  Or you're editing HTML and
;; want to launch your document in the system's web browser.

;; Launch makes it easy to do this by using your OS's built-in
;; file-associations to launch the appropriate program for a particular
;; file.

;;; Installation:

;; Launch is available from MELPA <http://melpa.milkbox.net/>.
;; Just run \\\\[package-install] and install `launch'.

;; Then, in your ~/.emacs configuration, add:
;;     (global-launch-mode +1)

;; If you only want to enable it for certain modes, add:
;;     (add-hook 'html-mode 'turn-on-launch-mode)

"]) (latex-pretty-symbols . [(20111011 546) nil "Display many latex symbols as their unicode counterparts" single ";;; Commentary:
;; Description: This library use font-locking to change the way Emacs displays
;;   various latex commands, like \\Gamma, \\Phi, etc.  It does not actually
;;   change the content of the file, only the way it is displayed.
;;
;; Quick start:
;;   add this file to load path, then (require 'latex-pretty-symbols)
;;

;;; TODO: The most pressing isue is a way to let not only single symbols be
;;   displayed, but also strings.  Then we can e.g display \"\342\237\250\342\237\250C\342\237\251\342\237\251\" instead of
;;   atldiamond.  Currently the 5 symbols gets placed on top of each other,
;;   resulting in a mighty mess.  This problem might be demomposed into two
;;   types: When the replaced string is bigger than the string replacing it
;;   (probably the easiest case), and the converse case.
;;
;;   Package it as a elpa/marmelade package.
;;   --A problem here is that marmelade destroys the unicode encoding. A
;;   possible fix for this is to change this code, so instead of containing the
;;   unicode characters directly, it can contain the code for each of them as an
;;   integer. This would probably be more portable/safe, but in some way less
;;   userfriendly, as one can not scan through the file to see which symbols it
;;   has, and to enter one one needs to find the code
;;
;;   Also it would be nice if it had some configuration possibilities. Eg the
;;   ability to add own abreviations through the customization interface, or
;;   toggle the display of math-curly-braces.
;;
;;   On a longer timeline, it would be nice if it could understand some basic
;;   newcommands, and automatically deduce the needed unicode (but this seems
;;   super hard).


"]) (latex-extra . [(20140111 724) ((auctex (11 86 1))) "Adds several useful functionalities to LaTeX-mode." single ";;; Commentary:
;; 
;; Defines extra commands and keys for LaTeX-mode. To activate (after
;; installing from melpa) just call
;; 
;;     (eval-after-load 'latex '(latex/setup-keybinds))
;;
;; The additions of this package fall into the following three
;; categories:
;; 
;; ## 1-Key Compilation ##
;; 
;; Tired of hitting `C-c C-c' 4 times (latex, bibtex, latex, view) for
;; the document to compile? This defines a much needed command that does
;; **everything** at once, and even handles compilation errors!
;; 
;; - C-c C-a **=>** `latex/compile-commands-until-done'
;; 
;; ## Navigation ##
;; 
;; Five new keybindings are defined for navigating between
;; sections/chapters. These are meant to be intuitive to people familiar
;; with `org-mode'.
;; 
;; - C-c C-n **=>** `latex/next-section'  
;; Goes forward to the next section-like command in the buffer (\\part,
;; \\chapter, \\(sub)section, or \\(sub)paragraph, whichever comes first).
;; - C-c C-u **=>** `latex/up-section'  
;; Goes backward to the previous section-like command containing this
;; one. For instance, if you're inside a subsection it goes up to the
;; section that contains it.
;; - C-c C-f **=>** `latex/next-section-same-level'  
;; Like next-section, except it skips anything that's \"lower-level\" then
;; the current one. For instance, if you're inside a subsection it finds
;; the next subsection (or higher), skipping any subsubsections or
;; paragraphs.
;; - C-M-f **=>** `latex/forward-environment'
;; Skip over the next environment, or exit the current one, whichever
;; comes first. 
;; - C-M-e **=>** `latex/end-of-environment'
;; Exit the current environment, and skip over some whitespace
;; afterwards. (Like `LaTeX-find-matching-end', but a little more useful.)
;; - C-M-b **=>** `latex/backward-environment'
;; - C-M-a **=>** `latex/beginning-of-environment'
;; - C-c C-p **=>** `latex/previous-section'  
;; - C-c C-b **=>** `latex/previous-section-same-level'  
;; Same as above, but go backward.
;; 
;; ## Whitespace Handling ##
;; 
;; `latex-extra.el' improves `auto-fill-mode' so that it only applies to
;; text, not equations. To use this improvement, just activate
;; `auto-fill-mode' as usual.
;; 
;; It also defines a new command:  
;; 
;; - C-c C-q **=>** `latex/clean-fill-indent-environment'  
;; Completely cleans up the entire current environment. This involves:
;; 
;; 1. Removing extraneous spaces and blank lines.
;; 2. Filling text (and only text, not equations).
;; 3. Indenting everything.

;;; Instructions:
;;
;; INSTALLATION
;;
;; If you install from melpa: just use (as described above)
;;
;;    (eval-after-load 'latex '(latex/setup-keybinds))
;;
;; If you install manually, first require it, then use the code above.
;;     (require 'latex-extra)

"]) (latest-clojure-libraries . [(20131023 543) nil "Clojure dependency resolver" single ";;; Commentary:

;; Looks up the latest version of clojure libraries on clojars/maven
;; and automatically populates the buffer with the appropriate
;; dependency vector. Optionally uses pomegranate to load the
;; dependency directly into your running nrepl.

;; Then, use M-x latest-clojure-libraries-insert-dependency

"]) (langtool . [(20130920 407) nil "Grammar check utility using LanguageTool" single nil]) (langdoc . [(20140107 223) ((cl-lib (0 2))) "Help to define help document mode for various languages" single ";;; Commentary:

;; This library helps you to define help document mode for various languages.
;; `langdoc-define-help-mode' makes a major mode for help document
;; and a function to show a description of a symbol.  It takes at least six
;; arguments.
;;
;; First three arguments are to define the help document mode.
;; * MODE-PREFIX
;;   Symbol to make a help mode name and a function name.
;;   `langdoc-define-help-mode' makes a major mode named MODE-PREFIX-mode
;;   and a function named MODE-PREFIX-describe-symbol.
;; * DESCRIPTION
;;   Description for MODE-PREFIX-mode.
;; * HELPBUF-NAME
;;   Buffer name for MODE-PREFIX-mode
;;
;; Next three arguments are to define MODE-PREFIX-describe-symbol.
;; * POINTED-SYM-FN
;;   Function name which returns the string pointed by
;;   the cursor.  This function takes no arguments.
;; * SYMBOL
;;   List of strings which is used to complete words.
;; * MAKE-DOCUMENT-FN
;;   Function name which takes the word as a string
;;   and returns the help string.
;;
;; Rest of the arguments is to make links in help buffers.
;; * LINK-REGEXP
;;   Regexp string to make links.
;;   If nil, MODE-PREFIX-describe-symbol does not make any links in help buffers.
;; * LINKED-STR-FN
;;   Function name which takes substrings matched in LINK-REGEXP
;;   and returns the string to be linked.
;; * MAKE-LINK-FN
;;   Function name which takes same arguments as LINKED-STR-FN
;;   and returns a string or a cons pair (SYM . FUN).
;;   SYM is a link to other document and FUN is the function to jump to the help buffer for SYM.
;;   If it returns a string, MODE-PREFIX-describe-symbol is used to jump to SYM.
;; * PREFIX-STR, SUFFIX-STR
;;   Prefix and suffix of the string returned from LINKED-STR-FN.
;;
;; If you need a concrete example, see brainfuck-mode.el (https://github.com/tom-tan/brainfuck-mode/).

"]) (lang-refactor-perl . [(20131122 1327) nil "Simple refactorings, primarily for Perl" single ";;; Commentary:
;;
;; Provides commands for simple refactorings for Perl, currently:
;; * extract variable.
;;

;;
;;; Installation:
;;
;; Put in load-path and initialize with:
;;    (require 'lang-refactor-perl)
;;
;;    ;; Suggested key bindings
;;    (global-set-key (kbd \"\\C-c r e v\") 'lr-extract-variable)
;;    (global-set-key (kbd \"\\C-c r h r\") 'lr-remove-highlights)
;;
;; Note: This code is also part of Devel::PerlySense (install from
;; CPAN), so if you're already using that, you won't need to install
;; this package. In that case the key bindings will be slightly
;; different.
;;
;;
"]) (lacarte . [(20131227 130) nil "Execute menu items as commands, with completion." single ";;; Commentary:
;;
;;  Q. When is a menu not a menu?  A. When it's a la carte.
;;
;;  Library La Carte lets you execute menu items as commands, with
;;  completion.  You can use it as an alternative to standard library
;;  `tmm.el'.
;;
;;  Type a menu item.  Completion is available.  Completion candidates
;;  are of the form menu > submenu > subsubmenu > ... > menu item.
;;  For example:
;;
;;    File > Open Recent > Cleanup list
;;    File > Open Recent > Edit list...
;;
;;  When you choose a menu-item candidate, the corresponding command
;;  is executed.
;;
;;  Put this in your init file (~/.emacs):
;;
;;    (require 'lacarte)
;;
;;  Suggested key bindings:
;;
;;    (global-set-key [?\\e ?\\M-x] 'lacarte-execute-command)
;;    (global-set-key [?\\M-`]     'lacarte-execute-menu-command)
;;    (global-set-key [f10]       'lacarte-execute-menu-command)
;;
;;  (The latter two replace standard bindings for `tmm-menubar'.  On
;;  MS Windows, `f10' is normally bound to `menu-bar-open', which uses
;;  the Windows native keyboard access to menus.)
;;
;;  To really take advantage of La Carte, use it together with
;;  Icicles.  Icicles is not required to be able to use La Carte, but
;;  it enhances the functionality of `lacarte.el' considerably.
;;  (Note: `lacarte.el' was originally called `icicles-menu.el'.)
;;
;;  If you use MS Windows keyboard accelerators, consider using
;;  `lacarte-remove-w32-keybd-accelerators' as the value of
;;  `lacarte-convert-menu-item-function'.  It removes any unescaped
;;  `&' characters (indicating an accelerator) from the menu items.
;;  One library that adds keyboard accelerators to your menu items is
;;  `menuacc.el', by Lennart Borgman (< l e n n a r t . b o r g m a n
;;  @ g m a i l . c o m >).
;;
;;
;;  Commands defined here:
;;
;;    `lacarte-execute-command', `lacarte-execute-menu-command'.
;;
;;  Options defined here: `lacarte-convert-menu-item-function'.
;;
;;  Non-interactive functions defined here:
;;
;;    `lacarte-add-if-menu-item', `lacarte-escape-w32-accel',
;;    `lacarte-get-a-menu-item-alist',
;;    `lacarte-get-a-menu-item-alist-1',
;;    `lacarte-get-a-menu-item-alist-22+',
;;    `lacarte-get-a-menu-item-alist-pre-22',
;;    `lacarte-get-overall-menu-item-alist', `lacarte-menu-first-p',
;;    `lacarte-remove-w32-keybd-accelerators',
;;    `lacarte-string-match-p'.
;;
;;  Internal variables defined here:
;;
;;    `lacarte-history', `lacarte-menu-items-alist'.
;;
;;
;;  Getting Started
;;  ---------------
;;
;;  In your init file (`~/.emacs'), bind `ESC M-x' as suggested above:
;;
;;    (global-set-key [?\\e ?\\M-x] 'lacarte-execute-command)
;;
;;  Type `ESC M-x' (or `ESC ESC x', which is the same thing).  You are
;;  prompted for a command or menu command to execute.  Just start
;;  typing its name.  Each menu item's full name, for completion, has
;;  its parent menu names as prefixes.
;;
;;  ESC M-x
;;  Command:
;;  Command: t [TAB]
;;  Command: Tools >
;;  Command: Tools > Compa [TAB]
;;  Command: Tools > Compare (Ediff) > Two F [TAB]
;;  Command: Tools > Compare (Ediff) > Two Files... [RET]
;;
;;
;;  Not Just for Wimps and Noobs Anymore
;;  ------------------------------------
;;
;;  *You* don't use menus.  Nah, they're too slow!  Only newbies and
;;  wimps use menus.  Well not any more.  Use the keyboard to access
;;  any menu item, without knowing where it is or what its full name
;;  is.  Type just part of its name and use completion to get the
;;  rest: the complete path and item name.
;;
;;
;;  Commands and Menu Commands
;;  --------------------------
;;
;;  You can bind either `lacarte-execute-menu-command' or
;;  `lacarte-execute-command' to a key such as `ESC M-x'.
;;
;;  `lacarte-execute-menu-command' uses only menu commands.
;;  `lacarte-execute-command' lets you choose among ordinary Emacs
;;  commands, in addition to menu commands.  You can use a prefix arg
;;  with `lacarte-execute-command' to get the same effect as
;;  `lacarte-execute-menu-command'.
;;
;;  Use `lacarte-execute-command' if you don't care whether a command
;;  is on a menu.  Then, if you want a command that affects a buffer,
;;  just type `buf'.  This is especially useful if you use Icicles -
;;  see below.
;;
;;  You can use a prefix arg with `lacarte-execute-menu-command' to
;;  have it offer only items from specific keymaps: the local (major
;;  mode) keymap, the global keymap, or the minor-mode keymaps.
;;
;;  By default, in Icicle mode, `ESC M-x' is bound to
;;  `lacarte-execute-command', and `M-`' is bound to
;;  `lacarte-execute-menu-command'.
;;
;;
;;  Icicles Enhances Dining A La Carte
;;  ----------------------------------
;;
;;  Use Icicles with La Carte to get more power and convenience.
;;
;;  It is Icicles that lets you choose menu items a la carte, in fact.
;;  That is, you can access them directly, wherever they might be in
;;  the menu hierachy.  Without Icicles, you are limited to choosing
;;  items by their menu-hierarchy prefixes, and you must complete the
;;  entire menu prefix to the item, from the top of the menu on down.
;;  With Icicles, you can directly match any parts of a menu item and
;;  its hierarchy path.  Icicles is here:
;;  http://www.emacswiki.org/cgi-bin/wiki/Icicles.
;;
;;  Type any part of a menu-item, then use the Page Up and Page Down
;;  keys (`prior' and `next') to cycle through all menu commands that
;;  contain the text you typed somewhere in their name.  You can match
;;  within any menu or within all menus; that is, you can match any
;;  part(s) of the menu-hierachy prefix.
;;
;;  You can use `S-TAB' to show and choose from all such \"apropos
;;  completions\", just as you normally use `TAB' to show all prefix
;;  completions (that is, ordinary completions).  Vanilla, prefix
;;  completion is still available using `TAB', and you can cycle
;;  through the prefix completions using the arrow keys.
;;
;;  You can use Icicles \"progressive completion\" to match multiple
;;  parts of a menu item separately, in any order.  For example, if
;;  you want a menu command that has to do with buffers and
;;  highlighting, type `buf M-SPC hig S-TAB'.
;;
;;  Icicles apropos completion also lets you type a regular expression
;;  (regexp) - it is matched against all of the possible menu items.
;;  So, for instance, you could type `^e.+buff [next] [next]...' to
;;  quickly cycle to menu command `Edit > Go To > Goto End of Buffer'.
;;  Or type `.*print.*buf S-TAB' to choose from the list of all menu
;;  commands that match `print' followed somewhere by `buf'.
;;
;;  If you know how to use regexps, you can easily and quickly get to
;;  a menu command you want, or at least narrow the list of candidates
;;  for completion and cycling.
;;
;;  Additional benefits of using Icicles with La Carte:
;;
;;  * When you cycle to a candidate menu item, or you complete to one
;;    (entirely), the Emacs command associated with the menu item is
;;    shown in the mode line of buffer `*Completions*'.
;;
;;  * You can use `M-h' to complete your minibuffer input against
;;    commands, including menu-item commands, that you have entered
;;    previously.  You can also use the standard history keys
;;    (e.g. `M-p', `M-r') to access these commands.
;;
;;
;;  Menu Organization Helps You Find a Command
;;  ------------------------------------------
;;
;;  Unlike commands listed in a flat `*Apropos*' page, menu items are
;;  organized, grouped logically by common area of application
;;  (`File', `Edit',...).  This grouping is also available when
;;  cycling completion candidates using Icicles, and you can take
;;  advantage of it to hasten your search for the right command.
;;
;;  You want to execute a command that puts the cursor at the end of a
;;  buffer, but you don't remember its name, what menu it might be a
;;  part of, or where it might appear in that (possibly complex) menu.
;;  With Icicles and La Carte, you type `ESC M-x' and then type
;;  `buffer' at the prompt.  You use the Page Up and Page Down keys to
;;  cycle through all menu items that contain the word `buffer'.
;;
;;  There are lots of such menu items.  But all items from the same
;;  menu (e.g. `File') are grouped together.  You cycle quickly (not
;;  reading) to the `Edit' menu, because you guess that moving the
;;  cursor has more to do with editing than with file operations, tool
;;  use, buffer choice, help, etc.  Then you cycle more slowly among
;;  the `buffer' menu items in the `Edit' menu.  You quickly find
;;  `Edit > Go To > Goto End of Buffer'.  QED.
;;
;;
;;  Learn About Menu Items By Exploring Them
;;  ----------------------------------------
;;
;;  With Icicles, you can display the complete documentation (doc
;;  string) for the command corresponding to each menu item, as the
;;  item appears in the minibuffer.  To do this, just cycle menu-item
;;  candidates using `C-down' or `C-next', instead of `[down]' or
;;  `[next]'.  The documentation appears in buffer `*Help*'.
;;
;;  In sum, if you use La Carte, you will want to use it with Icicles!
 
;;(@> \"Index\")
;;
;;  If you have library `linkd.el' and Emacs 22 or later, load
;;  `linkd.el' and turn on `linkd-mode' now.  It lets you easily
;;  navigate around the sections of this doc.  Linkd mode will
;;  highlight this Index, as well as the cross-references and section
;;  headings throughout this file.  You can get `linkd.el' here:
;;  http://dto.freeshell.org/notebook/Linkd.html.
;;
;;  (@> \"Change log\")
;;  (@> \"User Options\")
;;  (@> \"Internal Variables\")
;;  (@> \"Functions\")
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (kwin . [(20130206 2231) nil "communcate with the KWin window manager" single ";;; Commentary:
;;
;; This file implements communcation with the KWin window manager from
;; KDE. This is not really a repl, as KWin does not keep the state
;; between scripts.
;;
;; This file contains
;;
;;   * a major mode for displaying output and errors.
;;   * a minor mode for sending code portions or whole files from
;;     other buffers to KWin, `kwin-minor-mode'.
;;
"]) (kv . [(20140108 734) nil "key/value data structure functions" single ";;; Commentary:

;; Some routines for working with key/value data structures like
;; hash-tables and alists and plists.

;; This also takes over the dotassoc stuff and provides it separately.

"]) (kpm-list . [(20130131 148) nil "An emacs buffer list that tries to intelligently group together buffers." single nil]) (know-your-http-well . [(20131125 1540) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar ";;; Commentary:
"]) (kmacro-decision . [(20130919 826) ((el-x (1 0)) (jb-misc-macros (0 2))) "Add conditional branching to keyboard macros" single ";;; Commentary: 
;;
;; Bitcoin donations gratefully accepted: 1D6meUBuHXLxQNiBfaNKYRfWVVTTYU2okM
;;
;; This library changes keyboard macro query points into decision points or conditional
;; branches. A query point can be created by typing C-x q or entering the `kbd-macro-query'
;; command when entering a keyboard macro.
;; When the macro is replayed and the query point is reached the user will be prompted with
;; options to either quit the macro, continue the rest of the macro, enter recursive edit and
;; store a new macro, add a conditional branch (explained next), or replay a previously saved
;; (named) macro. The user may also recenter the window by pressing C-l.
;; If the user chooses to add a conditional branch they will be prompted for a condition form,
;; and an action to perform if that condition evaluates to non-nil. The action can be to quit the macro,
;; continue the macro, create a new macro for that condition, execute an elisp form or command, or replay
;; a previously saved macro.
;; If the condition evaluates to non-nil the next time the macro is replayed then the corresponding
;; action will be performed. If several conditions-action pairs are created for a given query point
;; then the conditions will be evaluated in the order in which they where created until one of them evaluates
;; to non-nil. If they all evaluate to nil then the user will be prompted as before to either quit, continue,
;; create/replay a macro, or add another condition-action pair.

;; By adding query points to the end of each newly created macro, macro decision trees can be built up
;; and complex automated operations performed.

;; NOTES: 
;;
;; If you are creating a complex macro with several layers of conditional branching you should build it up
;; layer at a time from the bottom up, naming the constituent macros as you go. You need to make sure all
;; conditions of a constituent macro are defined before using that macro in another one as you will not be
;; able to edit the constituent macro while running the parent macro. It may be safer to just write a program
;; to do the task instead.
;; If you want to see what macros have been named (and maybe run one) you can use `kbd-macro-query' (C-x C-k q).
;; Also note that when prompted for a condition you can scroll forward through the input history using M-n to get
;; conditions for searching for strings/regexps. You can add to this list by customizing `kmacro-decision-conditions'.

;;; Customizable Options:
;;
;; Below are customizable option list:
;;
;;  `kmacro-decision-conditions'
;;    A list of conditions to be made available in the history list in calls to `kmacro-decision'
;;    default = (quote (\"(search-forward \\\"??\\\" nil nil)\" \"(re-search-forward \\\"??\\\" nil nil)\"))

;;; Installation:
;;
;; Put kmacro-decision.el in a directory in your load-path, e.g. ~/.emacs.d/
;; You can add a directory to your load-path with the following line in ~/.emacs
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;; where ~/elisp is the directory you want to add 
;; (you don't need to do this for ~/.emacs.d - it's added by default).
;;
;; Add the following to your ~/.emacs startup file.
;;
;; (require 'kmacro-decision)


"]) (kivy-mode . [(20130712 546) nil "Emacs major mode for editing Kivy files" single nil]) (kite . [(20130201 1138) ((json (1 2)) (websocket (0 93 1))) "WebKit inspector front-end" tar ";;; Commentary:

;; Kite is a front-end for the WebKit inspector remote API.  It allows
;; to debug web applications running in a WebKit browser instance and
;; aims to provide functionality similar to the default inspector
;; front-end built into WebKit browsers.


"]) (killer . [(20120808 422) nil "kill and delete text" single ";;; Commentary:

;; This package defines additional commands to kill and delete text.
;; Most notably it defines \"smarter\" variants of some built-in
;; commands which delete text.  Where the built-in command always
;; deletes text the variant defined here instead kills the text if
;; (and only if) the previous command was a kill command.

;; Note that this package is not namespace-safe and that the author
;; does not use it any longer.  However because the function
;; definitions in this library are all quite simple you might still
;; want to give it a try if you often wish some command which deleted
;; some text had instead killed it.

"]) (kill-ring-search . [(20110605 844) nil "incremental search for the kill ring" tar ";;; Commentary:
;;
;; To install, add the following to your .emacs file:
;; (autoload 'kill-ring-search \"kill-ring-search\"
;;  \"Search the kill ring in the minibuffer.\"
;;  (interactive))
;; (global-set-key \"\\M-\\C-y\" 'kill-ring-search)
;;
;; Just call kill-ring-search and enter your search.
;; M-y and C-y work as usual.  You can also use C-r like in a shell.
;; C-v, M-v, C-n and C-p will scroll the view.
;;
"]) (kibit-mode . [(20140110 612) nil "No description available." tar nil]) (keymap-utils . [(20130427 1026) ((cl-lib (0 2))) "keymap utilities" single ";;; Commentary:

;; This package provides some utilities useful for inspecting and
;; modifying keymaps.

"]) (keyfreq . [(20131109 926) nil "track command frequencies" single ";;; Commentary:
;;
;; HOW TO USE IT?
;;
;; Include the following lines in your .emacs file:
;;
;;   (require 'keyfreq)
;;   (keyfreq-mode 1)
;;   (keyfreq-autosave-mode 1)
;;
;; And use `keyfreq-show' to see how many times you used a command.
;;
"]) (keydef . [(20090428 1231) nil "a simpler way to define keys, with kbd syntax" single ";;; Commentary:

;;; The macro keydef provides a simplified interface to define-key that
;;; smoothly handles a number of common complications.

;;; The global-set-key command isn't ideal for novices because of its
;;; relatively complex syntax. And I always found it a little
;;; inconvenient to have to quote the name of the command---that is, I
;;; tend to forget the quote every once in a while and then have to go
;;; back and fix it after getting a load error.

;;; One of the best features is that you can give an Emacs lisp form (or
;;; even a series of forms) as the key definition argument, instead of a
;;; command name, and the keydef macro will automatically add an
;;; interactive lambda wrapper. I use this to get, for example, a more
;;; emphatic kill-buffer command (no confirmation query) by writing
;;;
;;;   (keydef \"<S-f11>\" (kill-buffer nil))
;;;
;;; For keydef the key sequence is expected to be given uniformly in the
;;; form of a string for the 'kbd' macro, with one or two refinements
;;; that are intended to conceal from users certain points of confusion,
;;; such as (for those whose keyboards lack a Meta key) the whole
;;; Meta/ESC/escape muddle.

;;; I have had some trouble in the past regarding the distinction
;;; between ESC and [escape] (in a certain combination of circumstances
;;; using the latter form caused definitions made with the other form to
;;; be masked---most puzzling when I wasn't expecting it). Therefore the
;;; ESC form is actually preprocessed a bit to ensure that the binding
;;; goes into esc-map.

;;; There is one other special feature of the key sequence syntax
;;; expected by the keydef macro: You can designate a key definition for
;;; a particular mode-map by giving the name of the mode together with
;;; the key sequence string in list form, for example
;;;
;;;   (keydef (latex \"C-c %\") comment-region)
;;;
;;; This means that the key will be defined in latex-mode-map. [The
;;; point of using this particular example will be made clear below.] I
;;; arranged for the mode name to be given in symbol form just because I
;;; didn't want to have to type extra quotes if I could get away with
;;; it. For the same reason this kind of first arg is not written in
;;; dotted pair form.

;;; If the given mode-map is not defined, keydef \"does the right thing\"
;;; using eval-after-load. In order to determine what library the
;;; mode-map will be loaded from, it uses the following algorithm:
;;;
;;; First check if foo-mode has autoload information. If not, check
;;; whether \"foo-mode\" is the name of a library that can be found
;;; somewhere in the load-path (using locate-library); otherwise check
;;; whether \"foo\" is the name of a locatable library. Failing that, give
;;; up and return nil.
;;;
;;; There is a fall-back mechanism, however, to handle exceptional
;;; cases. If foo-mode-map is undefined but the list mode-map-alist
;;; contains an entry of the form (foo-mode-map foo-other-name-map),
;;; then foo-other-name-map is used as the name of the
;;; keymap.
;;;
;;; If the mode-map is not loaded yet AND the command being bound to a
;;; key is undefined at the time of the keydef assignment, it presents
;;; further problems. The simplest solution is to assume that after the
;;; package is loaded that defines the mode-map, the given command will
;;; be defined and satisfy commandp. With some extra effort it should be
;;; possible to determine more accurately whether the command will be
;;; defined or not, but I'm not sure I want to go to that extreme, since
;;; as far as I can see it would require opening the package file and
;;; searching through it for a matching defun/defalias/fset statement.
;;;
;;; If the mode name matches the mode map name, but foo-mode is not
;;; autoloaded, then some autoload information may need to be provided.
;;; For example, the following line allows definitions to be made for
;;; debugger-mode-map even before debug.el is loaded.
;;;
;;;  (autoload 'debugger-mode \"debug\" \"Autoloaded.\" 'interactive)
;;;
;;; Although there is no easy way provided by keydef for
;;; gnus-summary-limit-map to be accessed directly, because
;;; its name does not include \"mode\", you can get a binding into
;;; such a map by writing
;;;
;;;   (keydef (gnus-summary \"/ z\") gnus-summary-limit-to-zapped)
;;;
;;; which binds /z in gnus-summary-mode-map, which is equivalent to
;;; binding z in gnus-summary-limit-map.
;;;
;;; You might need to add an autoload statement for gnus-summary-mode
;;; in order for this to work, so that keydef knows that it should use
;;; eval-after-load and that the file the mode function will be loaded
;;; from is called \"gnus-sum\" rather than \"gnus-summary-mode\". (If it
;;; were the latter, keydef would be able to resolve everything
;;; automatically.)

;;; We COULD HAVE just put the definitions into the mode hook in the
;;; standard way, instead of using eval-after-load, but that would mean
;;; the key definitions get executed repetitiously every time the mode
;;; function gets called, which seems better to avoid, if only for
;;; esthetic reasons (if it can be done without too much trouble).

;;; The following examples show some typical keydef lines followed by the
;;; results of the macro expansion.

;;; Simplest kind of definition:
;;;
;;; (keydef \"C-x m\" gnus-group-mail)
;;;
;;;   -->(define-key global-map (kbd \"C-x m\") (quote gnus-group-mail))

;;; What if the command name is misspelled?
;;;
;;; (keydef \"C-x m\" gnus-gruop-mail)
;;;
;;;   -->(message \"keydef: gnus-gruop-mail unknown \\
;;;                \\(perhaps misspelled, or not loaded yet\\)\")

;;; A leading ESC gets special handling to go through esc-map.
;;;
;;; (keydef \"ESC &\" query-replace-regexp)
;;;
;;;   -->(define-key esc-map (kbd \"&\") (quote query-replace-regexp))

;;; Undefine a key:
;;;
;;; (keydef \"ESC `\")
;;;
;;;   -->(define-key esc-map (kbd \"`\") nil)

;;; If the second arg is a string, keydef defines the given key sequence
;;; as a keyboard macro. The following macro puts in TeX-style double
;;; quotes and then moves the cursor backward to leave it in the middle:
;;;
;;; (keydef \"\\\"\" \"``''\\C-b\\C-b\")
;;;
;;;   -->(define-key global-map (kbd \"\\\"\") \"``''\\002\\002\")

;;; Reset a key to self-insert
;;;
;;; (keydef \"\\\"\" \"\\\"\")
;;;
;;;   -->(define-key global-map (kbd \"\\\"\") (quote self-insert-command))

;;; If the second arg is a list, wrap it in an interactive lambda form.
;;;
;;; (keydef \"C-z\"
;;;   (message \"Control-Z key disabled---redefine it if desired.\"))
;;;
;;;   -->(define-key global-map
;;;       (kbd \"C-z\")
;;;       (lambda (arg)
;;;         \"anonymous keydef function\"
;;;         (interactive \"p\")
;;;         (message \"Control-Z key disabled---redefine it if desired.\")))
;;;
;;; Note that the interactive lambda wrapper added by keydef, when the
;;; CMD does not satisfy commandp, always takes a single prefix argument
;;; named \"arg\", which is read in the usual way with (interactive \"p\");
;;; so this could be used in the body of the function if need be.

;;; This shows the notation for F-keys.
;;;
;;; (keydef \"<C-f17>\" (kill-buffer nil))
;;;
;;;   -->(define-key global-map
;;;       (kbd \"<C-f17>\")
;;;       (lambda (arg)
;;;         \"*Anonymous function created by keydef.\"
;;;         (interactive \"p\")
;;;         (kill-buffer nil)))

;;; Because of the confusing Meta/Escape complications, I recommend to
;;; the users that I support that they use the ESC notation
;;; consistently if that is what they type from their keyboard, even
;;; for F-key definitions that might normally be written with <M-...>
;;; notation.
;;;
;;; (keydef \"ESC <f3>\" find-file-read-only)
;;;
;;;   -->(define-key esc-map (kbd \"<f3>\") (quote find-file-read-only))

;;; The next two definitions go together. The second one shows how to
;;; write a mode-specific definition.
;;;
;;; (keydef \"<f5>\" isearch-forward)
;;;
;;;   -->(define-key global-map (kbd \"<f5>\") (quote isearch-forward))
;;;
;;; (keydef (isearch \"<f5>\") isearch-repeat-forward)
;;;
;;;   -->(define-key isearch-mode-map (kbd \"<f5>\")
;;;                                   (quote isearch-repeat-forward))

;;; Making a definition for a mode-map that is not loaded yet.
;;;
;;; (keydef (latex \"C-c %\") comment-region)
;;;
;;;   -->(eval-after-load \"tex-mode\"
;;;        (quote
;;;         (define-key latex-mode-map
;;;           (kbd \"C-c %\")
;;;           (quote comment-region))))

"]) (keychain-environment . [(20121026 1246) nil "load keychain environment variables" single ";;; Commentary:

;; Keychain is a script that manages ssh-agent and gpg-agent.  It is
;; typically run from the shell's initialization file.  It allows your
;; shells and cron jobs to share a single ssh-agent and/or gpg-agent.

;; When keychain is run, it checks for running agent, otherwise it
;; starts them.  It saves the agents' environment variables to files
;; inside ~/.keychain/, so that subsequent shells can source these
;; files.

;; When Emacs is started under X11 and not directly from a terminal
;; these variables are not.  This library looks for the files created
;; by keychain and sets Emacs' environment variables accordingly.  It
;; does not actually run keychain, so you still have to run that from
;; a login shell first.

;; To use run the function `keychain-refresh-environment' in your init
;; file.  If keychain has not been run yet when you start Emacs you
;; can also later call that function interactively.

;; Also see: http://www.funtoo.org/wiki/Keychain

"]) (key-combo . [(20131205 1338) nil "map key sequence to commands" tar ";;; Commentary:

;; ########   Compatibility   ########################################
;;
;; Works with Emacs-23.2.1, 23.1.1

;; ########   Quick start   ########################################
;;
;; Add to your ~/.emacs
;;
;; (require 'key-combo)
;; (key-combo-mode 1)
;;
;; and some chords, for example
;;
;;  (key-combo-define-global (kbd \"=\") '(\" = \" \" == \" \" === \" ))
;;  (key-combo-define-global (kbd \"=>\") \" => \")
;;
;; or load default settings
;;
;;  (key-combo-load-default)

"]) (key-chord . [(20080915 2156) nil "map pairs of simultaneously pressed keys to commands" single ";;; Commentary:

;; ########   Compatibility   ########################################
;;
;; Works with Emacs-20.3, 20.6, 20.7, 21.2, 21.4 and 22.1.
;; Does not work with Emacs-19.31 nor XEmacs-20.4 and 21.4.

;; ########   Quick start   ########################################
;;
;; Add to your ~/.emacs
;;
;;	(require 'key-chord)
;;	(key-chord-mode 1)
;;
;; and some chords, for example
;;
;;      (key-chord-define-global \"hj\"     'undo)
;;      (key-chord-define-global \",.\"     \"<>\\C-b\")

;; ########   Terminology   ########################################
;;
;; In this package, a \"key chord\" is two keys pressed simultaneously,
;; or a single key quickly pressed twice.
;;
;; (Sometimes pressing SHIFT and/or META plus another key is call a chord,
;; but not here. However SHIFT plus two normal keys can be a \"key chord\".)

;; ########   Description   ########################################
;;
;; Key chord mode acts like a global minor mode controlled by the function
;; `key-chord-mode'.
;;
;; Key chord definitions are stored in ordinary key-maps.
;; The function `key-chord-define-global' defines a chord in the global
;; key-map and `key-chord-define' defines a chord in a specified key-map,
;; for example for a specific mode.
;;
;; A TWO-key chord is two distinct keys pressed simultaneously (within
;; one tenth of a second, or so).
;;
;; Examples:
;;
;;      (key-chord-define-global \",.\"     \"<>\\C-b\")
;;      (key-chord-define-global \"hj\"     'undo)
;;      (key-chord-define-global [?h ?j]  'undo)  ; the same
;;      (key-chord-define-global \"jk\"     'dabbrev-expand)
;;      (key-chord-define-global \"cv\"     'reindent-then-newline-and-indent)
;;      (key-chord-define-global \"4r\"     \"$\")
;;
;; Comma and dot pressed together insert a pair of angle brackets.
;; `h' and `j' pressed together invoke the undo command.
;; `j' and `k' pressed together invoke the dabbrev-expand command.
;; 'c' and 'v' pressed together insert a newline.
;; `4' and `r' pressed together insert a dollar sign.
;;
;; A ONE-key chord is a single key quickly pressed twice (within one third
;; of a second or so). 
;;
;; Examples:
;;
;;      (key-chord-define-global \"''\"     \"`'\\C-b\")
;;      (key-chord-define-global \",,\"     'indent-for-comment)
;;      (key-chord-define-global \"qq\"     \"the \")
;;      (key-chord-define-global \"QQ\"     \"The \")
;;
;; Tick (') pressed twice inserts a back-tick and a tick (`').
;; Comma (,) pressed twice indents for and/or inserts a comment.
;; `q' pressed twice inserts the word \"the \".
;;
;; Examples: Mode specific chords
;;
;;      (key-chord-define c++-mode-map \";;\"  \"\\C-e;\")
;;      (key-chord-define c++-mode-map \"{}\"  \"{\\n\\n}\\C-p\\t\")
;;
;; The command `key-chord-describe' lists currently defined key chords.
;; The standard command `describe-bindings' (C-h b) will also show key chords.
;;
;; The standard command `describe-key' (C-h k) will accept a key chord and
;; show its definition. (Isn't that amazing. There is no explicit code to
;; carry out this functionality.)

;; ########   Tips   ########################################
;;
;; Don't chord key combinations that exists in the languages you typically
;; write. Otherwise, if you are typing fast, two key intended to be separate
;; letters might instead trig a chord.
;; E.g. \"uu\" would be a good chord in spanish but not in finnish, and
;; \"hj\" would be a good chord in english but not in swedish. 
;;
;; Don't rely solely on /usr/dict/words to find unusual combination.
;; For example \"cv\" or \"fg\" can be quite common in certain kinds of
;; programming. Grep your own texts to verify that a combination is unusual.
;; And don't forget to check both permutations: \"fg\" and \"gf\".
;;
;; Choose two keys that are close to each other on the keyboard, so they
;; can be quickly typed without effort. Chords involving two hands (as
;; opposed to two fingers on one hand) are harder to type (quickly).
;; The idea is that key chords are to replace function keys for functions
;; that are frequently performed while the hands are in writing position.
;;
;; Key chords might not work well over a slow network.

;; ########   Limitations   ########################################
;;
;; When recording keyboard macros, the time between keyboard inputs are not
;; recorded. Thus, the key-chord-input-method cannot know for sure if two keys
;; in a macro was a chord or not. The current solution remembers the first key
;; of the chords typed during macro recording, and keys that match those (and
;; are defined as chords) are considered key-chords during macro execution.
;; This knowledge is not saved with `name-last-kbd-macro', so they may
;; execute wrong if they contain pair of keys that match defined chords.
;;
;; Emacs will not call input-method-function for keys that have non numeric
;; codes or whos code is outside the range 32..126. Thus you cannot define
;; key chords involving function keys, control keys, or even your non-english
;; letters (on national keyboards) that otherwise are well positioned for
;; chording on your keyboard.
;; (I think chording left and right arrow keys would be useful, but cannot do.
;; I consider this a bug in Emacs. Input methods could happily return
;; unmodified *any* key they don't know about.)
;;
;; Key chords longer that 2 keys are not supported. It could be done, but I
;; don't think it is worth the trubbel since most keyboards will not reliably
;; send all key codes when 3 or more keys are pressed simultaneously.
;; It might also be a bit trickier to maintain performance.
;;
;; Key chord mode uses input-method-function. And so do internationalisation
;; packages (mule, quail, etc). Do not expect them to work well together.
;; The last one that gets the input-method-function rules.

;; ########   Implementation   ########################################
;;
;; Key chords piggy back in ordinary key maps, so they can be defined
;; per mode without having to add hooks to all modes.
;;
;; Key chord key codes are vectors beginning with the atom `key-chord'.
;; A two key chord, e.g. \"hj\", will add two entries in the key-map.
;; E.g. [key-chord ?h ?j] and [key-chord ?h ?j].
;;
;; When key-chord-mode is enabled input-method-function is set to
;; key-chord-input-method.

;; ########   To do   ########################################
;;
;; * Find a way to save key-chord info in keyboard macros.
;;
;; * Save previous value of input-method-function? And call it?
;;
;; * input-method-function is reset in *info* buffers! What to do?
;;
;; * How to enter interactively command OR string in key-chord-define-global?
;;
;; * Customize public vars (defcustom).

;; ########   History   ########################################
;;
;; 0.5 (2008-09-15) l.david.andersson(at)sverige.nu
;;      Bugfix sit-for; Improved examples; New E-mail in comment
;; 0.4 (2005-05-07) david(at)symsoft.se
;; 	Slightly better macro heuristics; Added option key-chord-in-macros
;; 0.3 (2005-04-14) david(at)symsoft.se
;; 	Require advice; More examples
;; 0.2 (2003-09-13) david(at)symsoft.se
;; 	Quick and dirty fix for keyboard macros
;; 0.1 (2003-04-27) david(at)symsoft.se
;;	First release

"]) (kanban . [(20130815 48) nil "Parse org-todo headlines to use org-tables as Kanban tables" single ";;; Commentary:

;; If you have not installed this from a package such as those on
;; Marmalade or MELPA, then save kanban.el to a directory in your
;; load-path and add
;;
;; (require 'kanban)
;;
;; to your Emacs start-up files.
;;
;; Usage:
;;
;; * Zero state Kanban: Directly displaying org-mode todo states as kanban board
;;
;; Use the functions kanban-headers and kanban-zero in TBLFM lines to
;; get your org-mode todo states as kanban table. Update with C-c C-c
;; on the TBLFM line.
;;
;; Example:
;;
;; |   |   |   |
;; |---+---+---|
;; |   |   |   |
;; |   |   |   |
;; #+TBLFM: @1='(kanban-headers $#)::@2$1..@>$>='(kanban-zero @# $# \"TAG\" '(list-of-files))
;; \"TAG\" and the list of files are optional
;;
;; * Stateful Kanban: Use org-mode to retrieve tasks, but track their state in the Kanban board
;;
;; |   |   |   |
;; |---+---+---|
;; |   |   |   |
;; |   |   |   |
;; #+TBLFM: @1='(kanban-headers $#)::@2$1..@>$1='(kanban-todo @# @2$2..@>$> \"TAG\" '(list-of-files))
;; \"TAG\" and the list of files are optional
;;
;; TODO: The links don\342\200\231t yet work for tagged entries. Fix that. There
;; has to be some org-mode function to retrieve the plain header.
;;
;; TODO: kanban-todo sometimes inserts no tasks at all if there are multiple tasks in non-standard states.
;;
;; TODO: bold text in headlines breaks the parser (*bold*).
;; 
"]) (kaesar-mode . [(20130911 745) ((kaesar (0 1 4))) "Encrypt/Decrypt buffer by AES with password." single nil]) (kaesar-file . [(20130912 212) ((kaesar (0 1 1))) "Encrypt/Decrypt file by AES with password." single nil]) (kaesar . [(20130914 1709) nil "Another AES algorithm encrypt/decrypt string with password." single ";;; Commentary:

;; This package provides AES algorithm to encrypt/decrypt Emacs
;; string. Supported algorithm desired to get interoperability with
;; openssl command. You can get decrypted text by that command if
;; you won't forget password.

;; Why kaesar?
;; This package previously named 'cipher/aes' but ELPA cannot handle
;; such package name.  So, I had to change the name but `aes' package
;; already exists. (That is faster than this package!)  I continue to
;; consider the new name which contains \"aes\" string. There is the
;; ancient cipher algorithm caesar
;; http://en.wikipedia.org/wiki/Caesar_cipher
;;  K`aes'ar is change the first character of Caesar. There is no
;; meaning more than containing `aes' word.

;; How to suppress password prompt?
;; There is no official way to suppress that prompt. If you want to
;; learn more information, please read `kaesar-password' doc string.

"]) (jump-to-line . [(20130122 853) nil "Jump to line number at point." single ";;; Commentary:

;; Jump to line number at point.
:; Back to position before the jump.
;;

;;; Examples of jump:

;; /path/to/a.txt:5 ; Jump to /path/to/a.txt, line 5 (Ruby style)
;; ../a.txt:5       ; Relative path
;; a.txt            ; Only filename
;; a.txt(1,2)       ; C# style
;; a.txt, line 1    ; Python
;; a.txt line 1     ; Perl

"]) (jump-char . [(20130529 1652) nil "navigation by char" single ";;; Commentary:

;; Navigate by char.  The best way to \"get\" it is to try it.
;;
;; Interface (while jumping):
;;
;;   <char>   :: move to the next match in the current direction.
;;   ;        :: next match forward (towards end of buffer)
;;   ,        :: next match backward (towards beginning of buffer)
;;   C-c C-c  :: invoke ace-jump-mode if available (also <M-/>)
;;
;; Any other key stops jump-char and edits as normal.
;;
;; The behaviour is strongly modeled after `iy-go-to-char' with the following
;; differences:
;;
;;   * point always stays before match
;;
;;   * point during search is same as after exiting
;;
;;   * lazy highlighting courtesy of isearch
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
:;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

"]) (jump . [(20130702 33) ((findr (0 7)) (inflections (1 1))) "build functions which contextually jump between files" single ";;; Commentary:

;; This library is intended to aid in the construction of functions
;; for navigating projects.  The `defjump' function using a hopefully
;; convenient specification schema which jumps to new file/methods
;; based upon the file/method context of the current buffer/point.

;; This effort was inspired heavily by find-file-in-project.el by Phil
;; Hagelberg and Doug Alcorn, and toggle.el by Ryan Davis.  The
;; initial goal of jump.el was to subsume both of these tools.

;;; Example: (jumping to the related model in a rails application)

;; (defjump
;;   'rinari-find-model
;;   '((\"app/controllers/\\\\1_controller.rb#\\\\2\"  . \"app/models/\\\\1.rb#\\\\2\")
;;     (\"app/views/\\\\1/.*\"                       . \"app/models/\\\\1.rb\")
;;     (\"app/helpers/\\\\1_helper.rb\"              . \"app/models/\\\\1.rb\")
;;     (\"db/migrate/.*create_\\\\1.rb\"             . \"app/models/\\\\1.rb\")
;;     (\"test/functional/\\\\1_controller_test.rb\" . \"app/models/\\\\1.rb\")
;;     (\"test/unit/\\\\1_test.rb#test_\\\\2\"         . \"app/models/\\\\1.rb#\\\\2\")
;;     (\"test/unit/\\\\1_test.rb\"                  . \"app/models/\\\\1.rb\")
;;     (\"test/fixtures/\\\\1.yml\"                  . \"app/models/\\\\1.rb\")
;;     (t                                        . \"app/models/\"))
;;   'rinari-root
;;   \"Go to the most logical model given the current location.\"
;;   '(lambda (path)
;;      (message (shell-command-to-string
;; 	       (format \"ruby %sscript/generate model %s\"
;; 		       (rinari-root)
;; 		       (and (string-match \".*/\\\\(.+?\\\\)\\.rb\" path)
;; 			    (match-string 1 path))))))
;;   'ruby-add-log-current-method)

"]) (jumblr . [(20131005 1810) ((s (1 8 0)) (dash (2 2 0))) "an anagram game for emacs" tar ";;; Commentary:

;; Provides a function `jumblr-new-game' (aliased to `jumblr') which
;; launches a word game closely based on the old TextTwist by Yahoo.

;; The interface should be pretty intuitive: it displays a sequence of
;; letters, along with a series of blanks.  The blanks represent words
;; which can be made from the letters.  You type a word and \"submit\"
;; it by either hitting SPC or RET; the word replaces one of the
;; blanks if it fits.  Hitting SPC or RET with an empty guess
;; reshuffles the letters.

;; I tried to make the interface pretty responsive; take a look at the
;; screenshots in the github repository for a sense of how it works.

;;; Notes about the implementation:

;; The implementation is pretty straightforward and mostly consists of
;; functions to find permutations and subsets of words; I'm sure this
;; could be made much faster.

;; The most important aspect for game play is actually the word list:
;; in order for the game to be fun it must know all the words you can
;; think of, but not have too many obscure words.  It turns out to be
;; surprisingly difficult to find that balance.  My approach is as
;; follows:
;;
;; 1. Take the SIL english word list and intersect it with the New
;;    Oxford English Dictionary which comes with mac osx.  I then
;;    removed the three letter words which were obviously acronyms,
;;    abbreviations for longer words, or racial slurs.  This is the
;;    \"expert\" word list and contains about 85,000 words.
;;    (source: http://www-01.sil.org/linguistics/wordlists/english/)
;;
;; 2. Take the \"8\" word list from
;;    http://www.keithv.com/software/wlist/ and intersect it with the
;;    \"expert\" list.  This becomes the \"hard\" list and contains about
;;    47,000 words.
;;
;; 3. Take the \"9\" word list from the above link and intersect with
;;    with the \"expert\" list.  This is the \"medium\" list and contains
;;    about 36,000 words.
;;
;; 4. Take the \"10\" word list from the above link and intersect it
;;    with the \"expert\" list.  This contains 21,000 words and is the
;;    \"easy\" list.
;;
;; Let me know how you find the difficulty levels -- I'd really
;; appreciate the feedback!

;;; Installation:

;; Use package.el. You'll need to add MELPA to your archives:

;; (require 'package)
;; (add-to-list 'package-archives
;;              '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)

;; Alternatively, you can just save this file and do the standard
;; (add-to-list 'load-path \"/path/to/jumblr.el\")
;; (require 'jumblr)

;;; Customization:

;; See the defvar definitions at the beginning of the source code.
;; For example, to switch the dictionary, add the following to your
;; .emacs:
;;
;; (setq jumblr-dict-file \"dict/easy.txt\")

"]) (jtags . [(20111208 1022) nil "enhanced tags functionality for Java development" tar ";;; Commentary:

;; The main purpose of `jtags-mode' is to provide an improved tags lookup
;; function for Java source code, compared to the ordinary etags package.
;; While etags knows only the name of the identifier, jtags also knows the
;; context in which the identifier is used. This allows jtags to find the
;; correct declaration at once, instead of the declaration that happens to
;; appear first in the tags table file. The jtags package also contains a
;; function for completing partly typed class members, and functions for
;; managing tags table files.
;;
;; The following interactive functions are included in jtags mode:
;;
;; - jtags-member-completion:      find all completions of the partly typed
;;                                 method or variable name at point
;; - jtags-show-declaration:       look up and display the declaration of the
;;                                 indentifier at point
;; - jtags-show-documentation:     look up and display the Javadoc for the
;;                                 indentifier at point
;; - jtags-update-tags-files:      update all tags table files with the latest
;;                                 source code changes
;; - jtags-update-this-tags-file:  update the tags table file in which the
;;                                 class in the current buffer is tagged
;;
;; Throughout this file, the two terms DECLARATION and DEFINITION are used
;; repeatedly. The DECLARATION of an identifier is the place in the Java source
;; code where the identifier is declared, e.g. the class declaration. The
;; DEFINITION of an identifier is the data structure used by jtags to describe
;; the declaration, containing file name, line number etc.

;; Installation:

;; Place \"jtags.el\" in your `load-path' and place the following lines in your
;; init file:
;;
;; (autoload 'jtags-mode \"jtags\" \"Toggle jtags mode.\" t)
;; (add-hook 'java-mode-hook 'jtags-mode)

;; Configuration:

;; Add the Emacs \"bin\" directory to your path, and restart Emacs to make the
;; etags program available to jtags mode.
;;
;; Unzip the source code files that come with the JDK and other products you
;; use, e.g. JUnit. The etags program can only extract information from source
;; code files, and not from class files.
;;
;; Configure the tags table list in your init file. Include the directories
;; where you unzipped the external source code files, and the directories where
;; your project's source code is located.
;;
;; GNU Emacs example:
;;
;; (setq tags-table-list '(\"c:/java/jdk1.6.0/src\"
;;                         \"c:/projects/tetris/src\"))
;; (setq tags-revert-without-query 't)
;;
;; XEmacs example:
;;
;; (setq tag-table-alist '((\"\\\\.java$\" . \"c:/java/jdk1.6.0/src\")
;;                         (\"\\\\.java$\" . \"c:/projects/tetris/src\")))
;; (setq tags-auto-read-changed-tag-files 't)
;;
;; Type `M-x jtags-update-tags-files' to update all of the files in the tags
;; table list. If you do not have write access to all of the tags table files,
;; e.g. in the JDK installation directory, you can copy the source code tree,
;; or ask the system administrator to create the tags table files for you. If
;; you are running Linux, you can start Emacs using the sudo command once, to
;; create the tags table files.
;;
;; The shell command that runs when you update tags table files is defined in
;; the variable `jtags-etags-command'. Change this variable to run a specific
;; version of etags, or to include other source code files in the tags table
;; files.
;;
;; To display Javadoc for third party libraries, you need to customize the
;; `jtags-javadoc-root-alist' and add Javadoc root URLs for these libraries.
;; Package jtags now supports both http URLs and file URLs.
;;
;; If you want to use the jtags submenu, set `jtags-display-menu-flag' to
;; non-nil. If this variable is non-nil, the jtags submenu will be displayed
;; when jtags mode is active.
;;
;; You can customize all the variables above, as well as the faces used in
;; member completion. Type `M-x customize-group' and enter group \"jtags\" for
;; the jtags mode variables, or \"etags\" for the tags table list.
;;
;; The jtags package defines four key bindings in the `jtags-mode-map':
;;
;; - C-,   is bound to `jtags-member-completion'
;; - M-,   is bound to `jtags-show-declaration'
;; - M-f1  is bound to `jtags-show-documentation'
;; - C-c , is bound to `jtags-update-this-tags-file'

"]) (jsx-mode . [(20130908 1024) nil "major mode for JSX" single ";;; Commentary:

;; =============
;;  Get Started
;; =============

;; Put this file in your Emacs lisp path (e.g. ~/.emacs.d/site-lisp)
;; and add to the following lines to your ~/.emacs.d/init.el.

;;    (add-to-list 'auto-mode-alist '(\"\\\\.jsx\\\\'\" . jsx-mode))
;;    (autoload 'jsx-mode \"jsx-mode\" \"JSX mode\" t)

;; See also init.el.example.


;; ==============
;;  Key Bindings
;; ==============

;; In `jsx-mode', the following keys are bound by default.

;; C-c C-c     comment-region (Comment or uncomment each line in the region)
;; C-c c       jsx-compile-file (Compile the current buffer)
;; C-c C       jsx-compile-file-async (Compile the current buffer asynchronously)
;; C-c C-r     jsx-run-buffer (Run the current buffer)


;; TODO:
;; * support imenu
;; * fix a bug that any token after implements is colored
;;   e.g. 'J' will be colored in the code like 'class C implements I { J'
;; * support indentations for lambda statment
;; * support auto-complete

"]) (jss . [(20130508 723) ((emacs (24 1)) (websocket (0)) (js2-mode (0))) "An emacs interface to webkit and mozilla debuggers" tar ";;; Commentary:

;; An emacs implementation of the client side protocol of webkit and
;; firefox's over-the-wire debugging protocols.

;; jsSlime (jss for short) is designed for emacs users who program web
;; based javascript applications. It connects directly to the browser
;; and uses the tools (debugger, inspector, source code browsing,
;; evaluator, etc.) as they are in the browser.

;; jss is, currently at least, focused on the features required by
;; javascript developers, tools for live editing (or even just
;; inspecting) the DOM and CSS are not currently available.

;; See README.org for more details.

"]) (json-snatcher . [(20131110 1107) ((emacs (24))) "Grabs the path to JSON values in a JSON file" single ";;; Commentary:
;;
;; Well this was my first excursion into ELisp programmming.  It didn't go too badly once
;; I fiddled around with a bunch of the functions.
;;
;; The process of getting the path to a JSON value at point starts with
;; a call to the jsons-print-path function.
;;
;; It works by parsing the current buffer into a list of parse tree nodes
;; if the buffer hasn't already been parsed in the current Emacs session.
;; While parsing, the region occupied by the node is recorded into the
;; jsons-parsed-regions hash table as a list.The list contains the location
;; of the first character occupied by the node, the location of the last
;; character occupied, and the path to the node.  The parse tree is also stored
;; in the jsons-parsed list for possible future use.
;;
;; Once the buffer has been parsed, the node at point is looked up in the
;; jsons-curr-region list, which is the list of regions described in the
;; previous paragraph for the current buffer.  If point is not in one of these
;; interval ranges nil is returned, otherwise the path to the value is returned
;; in the form [<key-string>] for objects, and [<loc-int>] for arrays.
;; eg: ['value1'][0]['value2'] gets the array at with name value1, then gets the
;; 0th element of the array (another object), then gets the value at 'value2'.
;;

;;; Installation:
;;
;; IMPORTANT: Works ONLY in Emacs 24 due to the use of the lexical-binding variable.
;;
;; To install add the json-snatcher.el file to your load-path, and
;; add the following lines to your .emacs file:
;;(require 'json-snatcher)
;; (defun js-mode-bindings ()
;;   \"Sets a hotkey for using the json-snatcher plugin.\"
;;   (when (string-match  \"\\\\.json$\" (buffer-name))
;;       (local-set-key (kbd \"C-c C-g\") 'jsons-print-path)))
;; (add-hook 'js-mode-hook 'js-mode-bindings)
;; (add-hook 'js2-mode-hook 'js-mode-bindings)
;;
;; This binds the key to snatch the path to the JSON value to C-c C-g only
;; when either JS mode, or JS2 mode is active on a buffer ending with
;; the .json extension.

"]) (json-mode . [(20131016 1225) nil "Major mode for editing JSON files" single ";;; Commentary:

;; extend the builtin js-mode's syntax highlighting

"]) (js3-mode . [(20130904 1444) nil "An improved JavaScript editing mode" tar ";;; Commentary:

;; This JavaScript editing mode supports:
;;
;;  - the full JavaScript language through version 1.8
;;  - support for most Rhino and SpiderMonkey extensions from 1.5 to 1.8
;;  - accurate syntax highlighting using a recursive-descent parser
;;  - syntax-error and strict-mode warning reporting
;;  - smart line-wrapping within comments (Emacs 22+) and strings
;;  - code folding:
;;    - show some or all function bodies as {...}
;;    - show some or all block comments as /*...*/
;;  - context-sensitive menu bar and popup menus
;;  - code browsing using the `imenu' package
;;  - typing helpers (e.g. inserting matching braces/parens)
;;  - many customization options
;;
;; It is only compatible with GNU Emacs versions 21 and higher (not XEmacs).
;;
;; Installation:
;;
;;  - put `js3.el' somewhere in your emacs load path
;;  - M-x byte-compile-file RET <path-to-js3.el> RET
;;    Note:  it will refuse to run unless byte-compiled
;;  - add these lines to your .emacs file:
;;    (autoload 'js3-mode \"js3\" nil t)
;;    (add-to-list 'auto-mode-alist '(\"\\\\.js$\" . js3-mode))
;;
;; To customize how it works:
;;   M-x customize-group RET js3-mode RET
;;
;; The variable `js3-mode-version' is a date stamp.  When you upgrade
;; to a newer version, you must byte-compile the file again.
;;
;; Notes:
;;
;; This mode is different in many ways from standard Emacs language editing
;; modes, inasmuch as it attempts to be more like an IDE.  If this drives
;; you crazy, it IS possible to customize it to be more like other Emacs
;; editing modes.  Please customize the group `js3-mode' to see all of the
;; configuration options.
;;
;; Some of the functionality does not work in Emacs 21 -- upgrading to
;; Emacs 22 or higher will get you better results.  If you byte-compiled
;; js3.el with Emacs 21, you should re-compile it for Emacs 22.
;;
;; This mode does not yet work with \"multi-mode\" modes such as mmm-mode
;; and mumamo, although it could possibly be made to do so with some effort.
;; This means that js3-mode is currently only useful for editing JavaScript
;; files, and not for editing JavaScript within <script> tags or templates.
;;
;; Please submit bug reports to github at https://github.com/thomblake/js3-mode

"]) (js2-refactor . [(20131221 501) ((js2-mode (20101228)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (20130218))) "A JavaScript refactoring library for emacs." tar nil]) (js2-mode . [(20140113 1754) ((emacs (24 1))) "Improved JavaScript editing mode" tar ";;; Commentary:

;; This JavaScript editing mode supports:

;;  - strict recognition of the Ecma-262 language standard
;;  - support for most Rhino and SpiderMonkey extensions from 1.5 and up
;;  - parsing support for ECMAScript for XML (E4X, ECMA-357)
;;  - accurate syntax highlighting using a recursive-descent parser
;;  - on-the-fly reporting of syntax errors and strict-mode warnings
;;  - undeclared-variable warnings using a configurable externs framework
;;  - \"bouncing\" line indentation to choose among alternate indentation points
;;  - smart line-wrapping within comments and strings
;;  - code folding:
;;    - show some or all function bodies as {...}
;;    - show some or all block comments as /*...*/
;;  - context-sensitive menu bar and popup menus
;;  - code browsing using the `imenu' package
;;  - many customization options

;; Installation:
;;
;; To install it as your major mode for JavaScript editing:

;;   (add-to-list 'auto-mode-alist '(\"\\\\.js\\\\'\" . js2-mode))

;; Alternatively, to install it as a minor mode just for JavaScript linting,
;; you must add it to the appropriate major-mode hook.  Normally this would be:

;;   (add-hook 'js-mode-hook 'js2-minor-mode)

;; You may also want to hook it in for shell scripts running via node.js:

;;   (add-to-list 'interpreter-mode-alist '(\"node\" . js2-mode))

;; To customize how it works:
;;   M-x customize-group RET js2-mode RET

;; Notes:

;; This mode includes a port of Mozilla Rhino's scanner, parser and
;; symbol table.  Ideally it should stay in sync with Rhino, keeping
;; `js2-mode' current as the EcmaScript language standard evolves.

;; Unlike cc-engine based language modes, js2-mode's line-indentation is not
;; customizable.  It is a surprising amount of work to support customizable
;; indentation.  The current compromise is that the tab key lets you cycle among
;; various likely indentation points, similar to the behavior of python-mode.

;; This mode does not yet work with \"multi-mode\" modes such as `mmm-mode'
;; and `mumamo', although it could be made to do so with some effort.
;; This means that `js2-mode' is currently only useful for editing JavaScript
;; files, and not for editing JavaScript within <script> tags or templates.

;; The project page on GitHub is used for development and issue tracking.
;; The original homepage at Google Code has outdated information and is mostly
;; unmaintained.

"]) (js-doc . [(20131215 519) nil "Insert JsDoc style comment easily" single ";;; Commentary:

;; Installation:
;; put `js-doc.el' somewhere in your emacs load path
;; add a line below to your .emacs file
;; (require 'js-doc)

;; Example:
;; paste the codes below into your .emacs.el file and you can
;;
;; 1. insert function document by pressing Ctrl + c, i
;; 2. insert @tag easily by pressing @ in the JsDoc style comment
;;
;; (setq js-doc-mail-address \"your email address\"
;;       js-doc-author (format \"your name <%s>\" js-doc-mail-address)
;;       js-doc-url \"url of your website\"
;;       js-doc-license \"license name\")
;;
;; (add-hook 'js2-mode-hook
;;           #'(lambda ()
;;               (define-key js2-mode-map \"\\C-ci\" 'js-doc-insert-function-doc)
;;               (define-key js2-mode-map \"@\" 'js-doc-insert-tag)))
;;
;; If you want to see the tag description, just input the next command
;;   M-x js-doc-describe-tag

"]) (js-comint . [(20080530 757) nil "Run javascript in an inferior process window." single ";;; Commentary:
;;; js-comint.el let's you run an inferior javascript process in emacs, 
;;; and defines a few functions for sending javascript input to it quickly.

;;  Usage: 
;;  Put js-comint.el in your load path
;;  Add (require 'js-comint) to your .emacs
;;  Set inferior-js-program-command to the execution command for running your javascript REPL
;;  (setq inferior-js-program-command \"/path/to/executable <args>\")
;;  Do: M-x run-js
;;  Away you go.

;;  I've added the following couple of lines to my .emacs to take advantage of 
;;  cool keybindings for sending things to the javascript interpreter inside
;;  of Steve Yegge's most excellent js2-mode.

;; (add-hook 'js2-mode-hook '(lambda () 
;;			    (local-set-key \"\\C-x\\C-e\" 'js-send-last-sexp)
;;			    (local-set-key \"\\C-\\M-x\" 'js-send-last-sexp-and-go)
;;			    (local-set-key \"\\C-cb\" 'js-send-buffer)
;;			    (local-set-key \"\\C-c\\C-b\" 'js-send-buffer-and-go)
;;			    (local-set-key \"\\C-cl\" 'js-load-file-and-go)
;;			    ))

;;  This is version 0.0.1, so I've only tested it on my own version of emacs which is currently:
;;  GNU Emacs 22.0.90.1 (i386-apple-darwin8.8.1, Carbon Version 1.6.0) of 2006-10-28
;;  Not sure if it'll work anywhere else, but it doesn't require anything apple-ish, just emacs-ish.

;; Additionally, I've only tested this with rhino.  I'm sure it'll probably work with spidermonkey, 
;; though if it barfs let me know, and I'll update it.

;; I'm a newbie elisper, so please let me know if I'm a. doing things the wrong way, b.
;; making things work they way they shouldn't in the elisp world.

"]) (jquery-doc . [(20131223 845) nil "jQuery api documentation interface for emacs" tar ";;; Commentary:

;; provides completion source for autocomplete, documentation lookup

"]) (jknav . [(20121006 1325) nil "Automatically enable j/k keys for line-based navigation" single nil]) (jira . [(20131210 1822) nil "Connect to JIRA issue tracking software" single nil]) (jinja2-mode . [(20120827 203) nil "A major mode for jinja2" single ";;; Commentary:

;;   This is an emacs major mode for jinja2 with:
;;        syntax highlighting
;;        sgml/html integration
;;        indentation (working with sgml)
;;        more to come

;; This file comes from http://github.com/paradoxxxzero/jinja2-mode

"]) (jenkins-watch . [(20121004 1626) nil "Watch continuous integration build status" single ";;; Commentary:
;; Displays an icon representing the current build status of
;; jenkins/hudson on the modeline.

"]) (jedi-direx . [(20130525 1039) ((jedi (0 1 2)) (direx (0 1 -3))) "Tree style source code viewer for Python buffer" single ";;; Commentary:

;;

"]) (jedi . [(20130714 1228) ((epc (0 1 0)) (auto-complete (1 4))) "Python auto-completion for Emacs" tar nil]) (javap-mode . [(20120223 1408) nil "Javap major mode" single nil]) (javadoc-lookup . [(20130618 1736) nil "Javadoc Emacs integration with Maven" tar ";;; Commentary:

;; This package provides a quick way to look up any Javadoc
;; documentation from Emacs, using your browser to display the
;; information. Since the mechanism is already there, java-import.el
;; provides the completing function `add-java-import' for quickly
;; adding an import to a source file.

;; This mode stores database and index information in
;; `javadoc-lookup-cache-dir'.

;; Indexing:

;; Give `javadoc-lookup' your root Java documentation directories. It
;; will scan and index those directories, exposing them to
;; `javadoc-lookup'. Multiple directories can be provided at once, for
;; example,

;;   (javadoc-add-roots \"/usr/share/doc/openjdk-6-jdk/api\"
;;                      \"~/src/project/doc\")

;; If you haven't loaded the core Java Javadoc, it will load a
;; pre-made database for you, which indexes the official website.

;; More conveniently, you can list Maven artifacts to index,

;;   (javadoc-add-artifacts [org.lwjgl.lwjgl lwjgl \"2.8.2\"]
;;                          [com.nullprogram native-guide \"0.2\"]
;;                          [org.apache.commons commons-math3 \"3.0\"])

;; Browser configuration:

;; To view documentation, the browser is launched with `browse-url'.
;; This may require setting `browse-url-browser-function' in order to
;; select the proper browser. For example,

;;   (setq browse-url-browser-function 'browse-url-firefox)

"]) (jaunte . [(20130413 219) nil "Emacs Hit a Hint" single nil]) (japanlaw . [(20131109 224) ((revive (20121022 1311))) "Japan law from law.e-gov.go.jp" single ";;; Commentary:

"]) (japanese-holidays . [(20130928 949) ((cl-lib (0 3))) "calendar functions for the Japanese calendar" single ";;; Commentary:

;; \343\201\223\343\201\256\343\203\227\343\203\255\343\202\260\343\203\251\343\203\240\343\201\257\343\200\201calender \343\201\247\346\227\245\346\234\254\343\201\256\347\245\235\346\227\245\343\202\222\350\241\250\347\244\272\343\201\247\343\201\215\343\202\213\343\202\210\343\201\206\343\201\253
;; japanese-holidays \345\244\211\346\225\260\343\202\222\345\256\232\347\276\251\343\201\227\343\201\276\343\201\231\343\200\202\344\275\277\347\224\250\343\201\231\343\202\213\343\201\253\343\201\257\343\200\201\343\201\223\343\201\256\343\203\225\343\202\241\343\202\244\343\203\253\343\202\222
;; load-path \343\201\256\351\200\232\343\201\243\343\201\237\346\211\200\343\201\253\347\275\256\343\201\215\343\200\201~/.emacs.d/init.el \343\201\253\344\273\245\344\270\213\343\201\256\350\250\255\345\256\232\343\202\222\350\277\275\345\212\240\343\201\227
;; \343\201\276\343\201\231\343\200\202

;; (eval-after-load \"holidays\"
;;   '(progn
;;      (require 'japanese-holidays)
;;      (setq calendar-holidays ; \344\273\226\343\201\256\345\233\275\343\201\256\347\245\235\346\227\245\343\202\202\350\241\250\347\244\272\343\201\225\343\201\233\343\201\237\343\201\204\345\240\264\345\220\210\343\201\257\351\201\251\345\275\223\343\201\253\350\252\277\346\225\264
;;            (append japanese-holidays local-holidays other-holidays))
;;      (setq mark-holidays-in-calendar t) ; \347\245\235\346\227\245\343\202\222\343\202\253\343\203\254\343\203\263\343\203\200\343\203\274\343\201\253\350\241\250\347\244\272
;;      ;; \345\234\237\346\233\234\346\227\245\343\203\273\346\227\245\346\233\234\346\227\245\343\202\222\347\245\235\346\227\245\343\201\250\343\201\227\343\201\246\350\241\250\347\244\272\343\201\231\343\202\213\345\240\264\345\220\210\343\200\201\344\273\245\344\270\213\343\201\256\350\250\255\345\256\232\343\202\222\350\277\275\345\212\240\343\201\227\343\201\276\343\201\231\343\200\202
;;      ;; \343\203\207\343\203\225\343\202\251\343\203\253\343\203\210\343\201\247\350\250\255\345\256\232\346\270\210\343\201\277
;;      (setq japanese-holiday-weekend '(0 6)     ; \345\234\237\346\227\245\343\202\222\347\245\235\346\227\245\343\201\250\343\201\227\343\201\246\350\241\250\347\244\272
;;            japanese-holiday-weekend-marker     ; \345\234\237\346\233\234\346\227\245\343\202\222\346\260\264\350\211\262\343\201\247\350\241\250\347\244\272
;;            '(holiday nil nil nil nil nil japanese-holiday-saturday))
;;      (add-hook 'calendar-today-visible-hook 'japanese-holiday-mark-weekend)
;;      (add-hook 'calendar-today-invisible-hook 'japanese-holiday-mark-weekend)))

;; \342\200\234\343\201\215\343\202\207\343\201\206\342\200\235\343\202\222\343\203\236\343\203\274\343\202\257\343\201\231\343\202\213\343\201\253\343\201\257\344\273\245\344\270\213\343\201\256\350\250\255\345\256\232\343\202\222\350\277\275\345\212\240\343\201\227\343\201\276\343\201\231\343\200\202
;;  (add-hook 'calendar-today-visible-hook 'calendar-mark-today)

"]) (jade-mode . [(20131018 1010) ((sws-mode (0))) "Major mode for editing .jade files" single nil]) (jabber . [(20140110 710) nil "A Jabber client for Emacs." tar nil]) (j-mode . [(20131224 1309) nil "Major mode for editing J programs" tar ";;; Commentary:

;; Provides font-lock and basic REPL integration for the
;; [J programming language](http://www.jsoftware.com)

;;; Installation

;; The only method of installation is to check out the project, add it to the
;; load path, and load normally. This may change one day.
;;
;; Put this in your emacs config
;;   (add-to-list 'load-path \"/path/to/j-mode/\")
;;   (load \"j-mode\")
;;
;; Add for detection of j source files if the auto-load fails
;;   (add-to-list 'auto-mode-alist '(\"\\\\.ij[rstp]$\" . j-mode)))

"]) (iy-go-to-char . [(20130901 729) nil "Go to next CHAR which is similar to \"f\" and \"t\" in vim" single ";;; Commentary:

;; This package defines the function `iy-go-to-char' which behaves like \"f\" in
;; vim, and `iy-go-up-to-char` like \"t\" in vim.  It reads a char and go the
;; next Nth occurence of the char.  User can continue such search using that
;; char key.

;; To use, make sure this file is on your `load-path' and put the
;; following in your .emacs file:
;;
;;     (require 'iy-go-to-char)
;;
;; To make `iy-go-to-char' works better with `multiple-cursors', add
;; `iy-go-to-char-start-pos' to `mc/cursor-specific-vars' when mc is loaded:
;;
;;     (add-to-list 'mc/cursor-specific-vars 'iy-go-to-char-start-pos)
;;
;; Then you can bind functions like:
;;
;;     (global-set-key (kbd \"C-c f\") 'iy-go-to-char)
;;     (global-set-key (kbd \"C-c F\") 'iy-go-to-char-backward)
;;     (global-set-key (kbd \"C-c ;\") 'iy-go-to-or-up-to-continue)
;;     (global-set-key (kbd \"C-c ,\") 'iy-go-to-or-up-to-continue-backward)
;;
;; Or if you prefer up-to (vim \"t\") versions:
;;
;;     (global-set-key (kbd \"C-c f\") 'iy-go-up-to-char)
;;     (global-set-key (kbd \"C-c F\") 'iy-go-up-to-char-backward)
;;
;; You also can bind go-to methods and up-to methods to different keys.
;;
;; Except repeating the char key, followings keys are defined before
;; quitting the search:
;;
;;    ;   -- search forward the char, customizable:
;;           `iy-go-to-char-key-forward'
;;
;;    ,   -- search backward the char, customizable:
;;           `iy-go-to-char-key-backward'
;;
;;    C-g -- quit
;;
;;    C-s -- start `isearch-forward' using char as initial search
;;           string
;;
;;    C-r -- start `isearch-backward' using char as initial search
;;           string
;;
;;    C-w -- quit and kill region between start and current point.  If region is
;;           activated before search, then use the original mark instead of the
;;           start position.
;;
;;    M-w -- quit and save region between start and current point.  If region is
;;           activated before search, use the mark instead of start position.
;;
;; All other keys will quit the search.  Then the key event is
;; intepreted in the original environment before search.
;;
;; if the search quits because of error or using \"C-g\", point is set
;; back to the start position.  Otherwise, point is not change and the
;; start position is set as marker.  So you can use \"C-x C-x\" back to
;; that position.

;; `iy-go-to-char-backward' search backward by default.  Also the search can
;; cross lines.  To continue search last char, use `iy-go-to-char-continue' and
;; `iy-go-to-char-continue-backward'.

"]) (ix . [(20131027 929) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single ";;; Commentary:

;; ix.el is a simple emacs client to http://ix.io cmdline pastebin. At
;; the moment using the `ix' command on a selection sends the
;; selection to ix.io, entire buffer is sent if selection is inactive,
;; on success the url is notified in the minibuffer as well as saved
;; in the kill ring.
;;
;; It is recommended to set a user name and token so that you can
;; later delete or replace a paste. Set this via the variables
;; `ix-user' and `ix-token' via M-x customize-group RET ix
;;
;; Posts (if posted with user and token) can be deleted by `ix-delete'
;; command which prompts for post id (the string after http://ix.io/)
;;
;; curl is used as the backend via grapnel http request library.
;;

;; History

;; 0.5 - Initial release.
;; 0.6 - Added delete posts functionality
;; 0.6.1 - Minor fix for `ix-delete' interactive form & adding
;;         `ix-version' as a const
;; 0.6.2 - `ix-delete' accepts a full url or the post id
;; 0.7.0 - Adding `ix-browse'
;;           `ix-browse' lets you browse a post at http://ix.io
"]) (itail . [(20130102 1159) nil "An interactive tail mode" single nil]) (isgd . [(20130927 657) nil "Shorten URLs using the isgd.com shortener service" single ";;; Commentary:

;; Simple mode to shorten URLs from Emacs.

;; Adapted from bitly.el from Jorgen Schaefer <forcer@forcix.cx>
;; available here https://github.com/jorgenschaefer/bitly-el

;; Use (isgd-shorten URL) from an Emacs Lisp program, or
;; M-x isgd-url-at-point to replace the URL at point (or the region)
;; with a shortened version.

"]) (isend-mode . [(20130419 258) nil "Interactively send parts of an Emacs buffer to an interpreter" single ";;; Commentary:

;; `isend-mode' is an Emacs extension allowing interaction with code
;; interpreters in `ansi-term' or `term' buffers. Some language-specific
;; modes (e.g. `python-mode') already provide similar features; `isend-mode'
;; does the same in a language-agnostic way.


;; Basic usage:

;; 1. Open an `ansi-term' buffer where the interpreter will live.
;;    For example:
;;
;;      M-x ansi-term RET /bin/sh RET

;; 2. Open a buffer with the code you want to execute, and associate it
;;    to the interpreter buffer using the `isend-associate' command (also
;;    aliased to `isend'). For example:
;;
;;      M-x isend-associate RET *ansi-term* RET

;; 3. Press C-RET (or M-x `isend-send') to send the current line to the
;;    interpreter. If the region is active, all lines spanned by the region
;;    will be sent (i.e. no line will be only partially sent). Point is
;;    then moved to the next non-empty line (but see configuration variable
;;    `isend-skip-empty-lines').


;; Contributing:

;; If you make improvements to this code or have suggestions, please do not
;; hesitate to fork the repository or submit bug reports on github. The
;; repository is at:
;;
;;     https://github.com/ffevotte/isend-mode.el

"]) (isearch-symbol-at-point . [(20130728 1521) nil "Use isearch to search for the symbol at point" single ";;; Commentary:

;; Taken / adapted from stuff in http://www.emacswiki.org/emacs/SearchAtPoint

"]) (isearch-prop . [(20131227 127) nil "Search text-property or overlay-property contexts." single ";;; Commentary:
;;
;;    Search text-property or overlay-property contexts.
;;
;;  Such contexts are either zones of text that have certain text
;;  properties or overlays that have certain overlay properties.
;;
;;  This file is part of package Isearch+, which includes also file
;;  `isearch+.el'.  You can use either of the files without the other,
;;  if you like, but I recommend that you use them together.
;;
;;
;;  The features provided by this library are based on similar
;;  features introduced by Icicles (http://www.emacswiki.org/Icicles).
;;
;;  More description below - see Overview of Features.
;;
;;
;;  Index
;;  -----
;;
;;  If you have library `linkd.el' and Emacs 22 or later, load
;;  `linkd.el' and turn on `linkd-mode' now.  It lets you easily
;;  navigate around the sections of this doc.  Linkd mode will
;;  highlight this Index, as well as the cross-references and section
;;  headings throughout this file.  You can get `linkd.el' here:
;;  http://dto.freeshell.org/notebook/Linkd.html.
;;
;;  (@> \"Overview of Features\")
;;  (@> \"Change Log\")
;;  (@> \"Variables\")
;;  (@> \"Keys\")
;;  (@> \"General Commands\")
;;  (@> \"General Non-Interactive Functions\")
;;  (@> \"Imenu Commands and Functions\")
;;  (@> \"THING Commands and Functions\")
;;  (@> \"Character-Property Search\")
;;
;;
;;  Macros defined here:
;;
;;    `isearchp-with-comments-hidden'.
;;
;;  Commands defined here:
;;
;;    `isearchp-hide/show-comments', `isearchp-imenu',
;;    `isearchp-imenu-command', `isearchp-imenu-macro',
;;    `isearchp-imenu-non-interactive-function',
;;    `isearchp-next-visible-thing',
;;    `isearchp-previous-visible-thing', `isearchp-property-backward',
;;    `isearchp-property-backward-regexp',
;;    `isearchp-property-forward', `isearchp-property-forward-regexp',
;;    `isearchp-put-prop-on-region', `isearchp-regexp-context-search',
;;    `isearchp-regexp-define-contexts',
;;    `isearchp-remove-all-properties', `isearchp-remove-property',
;;    `isearchp-thing', `isearchp-thing-define-contexts',
;;    `isearchp-toggle-complementing-domain',
;;    `isearchp-toggle-dimming-non-prop-zones',
;;    `isearchp-toggle-ignoring-comments',
;;    `isearchp-toggle-hiding-comments'.
;;
;;  User options defined here:
;;
;;    `isearchp-dimming-color', `isearchp-dim-non-prop-zones-flag',
;;    `isearchp-ignore-comments-flag'.
;;
;;  Non-interactive functions defined here:
;;
;;    `isearchp-add-regexp-as-property',
;;    `isearchp-add/remove-dim-overlay',
;;    `isearchp-bounds-of-thing-at-point',
;;    `isearchp-complement-dimming', `isearchp-defined-thing-p',
;;    `isearchp-dim-color', `isearchp-dim-face-spec',
;;    `isearchp-message-prefix', `isearchp-next-visible-thing-1',
;;    `isearchp-next-visible-thing-2',
;;    `isearchp-next-visible-thing-and-bounds',
;;    `isearchp-properties-in-buffer', `isearchp-property-1',
;;    `isearchp-property-default-match-fn',
;;    `isearchp-property-filter-pred', `isearchp-property-finish',
;;    `isearchp-property-matches-p', `isearchp-read-context-regexp',
;;    `isearchp-read-face-names', `isearchp-read-face-names--read',
;;    `isearchp-read-sexps', `isearchp-regexp-read-args',
;;    `isearchp-regexp-scan', `isearchp-remove-duplicates',
;;    `isearchp-some', `isearchp-thing-read-args',
;;    `isearchp-text-prop-present-p', `isearchp-thing-scan',
;;    `isearchp-things-alist'.
;;
;;  Internal variables defined here:
;;
;;    `isearchp-dimmed-overlays', `isearchp-property-prop',
;;    `isearchp-property-prop-prefix', `isearchp-property-type',
;;    `isearchp-property-values', `isearchp-complement-domain-p',
;;    `isearchp-context-level', `isearchp-filter-predicate-orig',
;;    `isearchp-last-thing-type'.
;;
;;
;;  Keys bound in `isearch-mode-map' here:
;;
;;    `C-t'        `isearchp-property-forward'
;;    `C-M-t'      `isearchp-property-forward-regexp'
;;    `C-M-;'      `isearchp-toggle-ignoring-comments'
;;    `C-M-~'      `isearchp-toggle-complementing-domain'
;;
;;
;;  This file should be loaded *AFTER* loading the standard GNU file
;;  `isearch.el'.  So, in your `~/.emacs' file, do this:
;;
;;  (eval-after-load \"isearch\" '(require 'isearch-prop))
 
;;(@* \"Overview of Features\")
;;
;;; Overview of Features ---------------------------------------------
;;
;;  * You can search within text-property or overlay-property zpnes of
;;    the buffer or active region.  Example: search within zones
;;    having a `face' text property with a value of
;;    `font-lock-comment-face' or `font-lock-string-face'.
;;
;;  * The basic commands for searching propertied zones are
;;    `isearchp-property-forward' and
;;    `isearchp-property-forward-regexp', and their backward
;;    counterparts.  By default, you are prompted for the property
;;    type (`text' or `overlay'), the property, and the property
;;    values (e.g., a list of faces, for property `face').  These
;;    commands are bound to `C-t' and `C-M-t', respectively, during
;;    Isearch.
;;
;;  * Besides relying on other code to set `face' and other text
;;    properties for use with `C-t', you can use command
;;    `isearchp-put-prop-on-region' (outside of Isearch) to add a text
;;    property to a zone of text.  By default, it applies the last
;;    property and value whose zones you searched using `C-t', but a
;;    prefix arg lets you specify the property and value to apply.
;;    This gives you an interactive way to set up zones for
;;    text-property search (`C-t').  For property `face', empty input
;;    removes all faces from the region.
;;
;;  * You can search zones of text/overlays that have a given
;;    property, as described above, or you can search the complement:
;;    the zones that do *NOT* have a given property.  You can toggle
;;    this search-domain complementing at any time during Isearch,
;;    using `C-M-~' (command `isearchp-toggle-complementing-domain').
;;
;;  * When you search propertied zones, the non-searchable zones are
;;    dimmed, to make the searchable areas stand out.  Option
;;    `isearchp-dim-non-prop-zones-flag' controls whether such dimming
;;    occurs.  You can toggle it anytime during Isearch, using `C-M-D'
;;    (aka `C-M-S-d').  Option `isearchp-dimming-color' defines the
;;    dimming behavior.  It specifies a given background color to use
;;    always, or it specifies that the current background color is to
;;    be dimmed a given amount.
;;
;;  * You can search the zones of text that match a given regexp,
;;    using command `isearchp-regexp-context-search'.  This is
;;    equivalent to using command `isearchp-regexp-define-contexts',
;;    which marks such zones with a text property, and then using
;;    command `isearchp-property-forward' (`C-t' during Isearch).
;;
;;  * You can search the text of THINGS of various kind (sexps, lists,
;;    defuns, lines, pages, sentences, filenames, strings, comments,
;;    xml/html elements, symbols,...), using command `isearchp-thing'.
;;    This is equivalent to using command
;;    `isearchp-thing-define-contexts', which marks such zones with a
;;    text property, and then using `isearchp-property-forward'.
;;
;;  * Not related to searching, but you can also move forward and
;;    backward among things of a given kind, using the repeatable
;;    commands `isearchp-next-visible-thing' and
;;    `isearchp-previous-visible-thing'.  For best results I strongly
;;    recommend that you also use library `thingatpt+.el'.  It
;;    enhances the vanilla treatment of THINGS and fixes various
;;    vanilla thing-at-point bugs.
;;
;;  * You can search the text of Emacs-Lisp definitions of different
;;    kinds, using commands `isearchp-imenu',
;;    `isearchp-imenu-command', `isearchp-imenu-macro', and
;;    `isearchp-imenu-non-interactive-function'.  Since Imenu is based
;;    on regexps that recognize definitions, these commands are based
;;    on the behavior of `isearchp-regexp-context-search'.
;;
;;  * You can remove properties from text or overlays using commands
;;    `isearchp-remove-property' and `isearchp-remove-all-properties'.
;;    By default, the latter removes only properties whose names begin
;;    with `isearchp-'.  These are the properties inserted
;;    automatically by the commands of this library, when you do not
;;    specify a property.
;;
;;  * You can hide or show code comments during Isearch, using `M-;'
;;    (command `isearchp-toggle-hiding-comments').  You can toggle
;;    ignoring comments during Isearch, using `C-M-;' (command
;;    `isearchp-toggle-ignoring-comments').
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (isearch+ . [(20140110 1907) nil "Extensions to `isearch.el' (incremental search)." single ";;; Commentary:
;;
;;    Extensions to `isearch.el' (incremental search).
;;
;;  The Isearch+ libraries are these:
;;
;;  `isearch+.el' (this file)    - Various extensions to `isearch.el'.
;;                                 Can be used with Emacs 20 or later.
;;  `isearch-prop.el' (optional) - Commands to search within contexts,
;;                                 which are character-property zones:
;;                                 spans of text that have certain
;;                                 text or overlay properties.  Can be
;;                                 Used with Emacs 23 or later.
;;
;;  You can use either of the Isearch+ files without the other, but I
;;  recommend that you use them together.
;;
;;
;;  This file should be loaded *AFTER* loading the standard GNU file
;;  `isearch.el'.  So in your `~/.emacs' file, do this:
;;
;;  (eval-after-load \"isearch\" '(require 'isearch+))
;;
;;  Library `isearch-prop.el' is optional.  If you do not want to use
;;  it then do not put it in your `load-path'.  If it is in your
;;  `load-path' then it will automatically be loaded when you load
;;  library `isearch+.el'.
;;
;;  More description below - see Overview of Features.
;;
;;
;;  Index
;;  -----
;;
;;  If you have library `linkd.el' and Emacs 22 or later, load
;;  `linkd.el' and turn on `linkd-mode' now.  It lets you easily
;;  navigate around the sections of this doc.  Linkd mode will
;;  highlight this Index, as well as the cross-references and section
;;  headings throughout this file.  You can get `linkd.el' here:
;;  http://dto.freeshell.org/notebook/Linkd.html.
;;
;;  (@> \"Overview of Features\")
;;  (@> \"Change log\")
;;  (@> \"Faces and Variables\")
;;  (@> \"Keys and Hooks\")
;;  (@> \"Macros\")
;;  (@> \"Commands\")
;;  (@> \"Non-Interactive Functions\")
;;
;;
;;  Commands defined here:
;;
;;    `isearchp-act-on-demand' (Emacs 22+), `isearch-char-by-name'
;;    (Emacs 23-24.3), `isearchp-cycle-mismatch-removal',
;;    `isearchp-fontify-buffer-now', `isearchp-init-edit',
;;    `isearchp-open-recursive-edit' (Emacs 22+),
;;    `isearchp-retrieve-last-quit-search',
;;    `isearchp-set-region-around-search-target',
;;    `isearchp-toggle-literal-replacement' (Emacs 22+),
;;    `isearchp-toggle-option-toggle',
;;    `isearchp-toggle-regexp-quote-yank',
;;    `isearchp-toggle-search-invisible',
;;    `isearchp-toggle-set-region', `isearchp-yank-char' (Emacs 22+),
;;    `isearchp-yank-line' (Emacs 22+),
;;    `isearchp-yank-sexp-symbol-or-char' (Emacs 22+),
;;    `isearchp-yank-sexp-symbol-or-char-1' (Emacs 22+),
;;    `isearchp-yank-symbol-or-char' (Emacs 22+),
;;    `isearchp-yank-symbol-or-char-1' (Emacs 22+),
;;    `isearchp-yank-word-or-char' (Emacs 22+).
;;
;;  User options defined here:
;;
;;    `isearchp-case-fold', `isearchp-deactivate-region-flag' (Emacs
;;    24.3+), `isearchp-drop-mismatch',
;;    `isearchp-initiate-edit-commands' (Emacs 22+),
;;    `isearchp-mouse-2-flag', `isearchp-on-demand-action-function'
;;    (Emacs 22+), `isearchp-regexp-quote-yank-flag',
;;    `isearchp-restrict-to-region-flag' (Emacs 24.3+),
;;    `isearchp-set-region-flag', `isearchp-toggle-option-flag'.
;;
;;  Faces defined here:
;;
;;    `isearch-fail'.
;;
;;  Macros defined here:
;;
;;    `isearchp-user-error'.
;;
;;  Non-interactive functions defined here:
;;
;;    `isearchp-barf-if-use-minibuffer', `isearchp-fail-pos',
;;    `isearchp-highlight-lighter', `isearchp-message-prefix',
;;    `isearchp-message-suffix', `isearchp-read-face-names',
;;    `isearchp-read-face-names--read', `isearchp-read-sexps',
;;    `isearchp-remove-duplicates', `isearchp-remove-mismatch',
;;    `isearchp-repeat-command', `isearchp-replace-fixed-case-p'
;;    (Emacs 22+), `isearchp-replace-match' (Emacs 22+),
;;    `isearchp-replace-multiple' (Emacs 22+),
;;    `isearchp-replace-on-demand' (Emacs 22+),
;;    `isearchp-reset-noprompt-action-fn', `isearchp-set-region',
;;    `isearchp-set-sel-and-yank',
;;    `isearchp-update-edit-init-commands' (Emacs 22+).
;;
;;  Internal variables defined here:
;;
;;    `isearchp-last-non-nil-invisible',
;;    `isearchp-last-quit-regexp-search', `isearchp-last-quit-search',
;;    `isearchp-nomodify-action-hook' (Emacs 22+),
;;    `isearchp-noprompt-action-function', `isearchp-pref-arg',
;;    `isearchp-reg-beg', `isearchp-reg-end',
;;    `isearchp-replace-literally' (Emacs 22+), `isearchp-replacement'
;;    (Emacs 22+), `isearchp-win-pt-line', `isearch-update-post-hook'
;;    (Emacs 20-21).
;;
;;
;;  ***** NOTE: The following macros and functions defined in
;;              `isearch.el' have been REDEFINED OR ADVISED HERE:
;;
;;  `isearch-abort'       - Save search string when `C-g'.
;;  `isearch-cancel'      - Restore cursor position relative to window.
;;  `isearch-dehighlight' - Remove unused arg, for Emacs 20.
;;  `isearch-edit-string' - Put point at mismatch position.
;;  `isearch-lazy-highlight-search' - Can limit to region (24.3+)
;;  `isearch-lazy-highlight-update' - Can limit to region (24.3+)
;;  `isearch-mode'        - Save cursor position relative to window.
;;  `isearch-mode-help'   - End isearch.  List bindings.
;;  `isearch-message'     - Highlight failed part of search string in
;;                          echo area, in face `isearch-fail'.
;;  `isearch-message-prefix' - Highlight prompt keywords:
;;                             wrapped, regexp, word, multi
;;  `isearch-mouse-2'     - Respect `isearchp-mouse-2-flag'(Emacs 21+)
;;  `isearch-search'      - Can limit to active region (Emacs 24.3+)
;;  `isearch-repeat'      - Can limit to active region (Emacs 24.3+)
;;  `isearch-printing-char' - Respect option `isearchp-drop-mismatch'
;;  `isearch-toggle-case-fold' - Respect `isearchp-toggle-option-flag'
;;                               Show case sensitivity in mode-line.
;;                               Message.
;;  `isearch-toggle-invisible' - Respect `isearchp-toggle-option-flag'
;;                               Message.
;;  `isearch-toggle-word' - Message, and turn off regexp search.
;;  `isearch-update' - Run `isearch-update-post-hook' (Emacs 20-21).
;;                   - Run `isearchp-noprompt-action-function' and
;;                     `isearchp-nomodify-action-hook' (Emacs 22+).
;;  `isearch-yank-string' - Respect `isearchp-regexp-quote-yank-flag'.
;;  `with-isearch-suspended' - Add `catch': update `isearch-success'.
;;
;;
;;  ***** NOTE: The following internal variables defined in
;;              `isearch.el' have been REDEFINED HERE:
;;
;;  `isearch-invisible'   - defined for Emacs<24.4 & added doc string.
;;
;;
;;  Keys bound in `isearch-mode-map' here:
;;
;;    `C-`'        `isearchp-toggle-regexp-quote-yank'
;;    `C-+'        `isearchp-toggle-search-invisible'
;;    `C-_'        `isearchp-yank-symbol-or-char' (Emacs 22+)
;;    `C-('        `isearchp-yank-sexp-symbol-or-char' (Emacs 22+)
;;    `C-SPC'      `isearchp-toggle-set-region'
;;    `C-end'      `goto-longest-line' (requires `misc-cmds.el')
;;    `C-h'        `isearch-mode-help'
;;    `C-x n'      `isearchp-toggle-region-restriction' (Emacs 24.3+)
;;    `C-x o'      `isearchp-open-recursive-edit' (Emacs 22+)
;;    `C-x 8 RET'  `isearch-char-by-name' (Emacs 23-24.3)
;;    `C-y C-_'    `isearchp-yank-symbol-or-char' (Emacs 22+)
;;    `C-y C-('    `isearchp-yank-sexp-symbol-or-char' (Emacs 22+)
;;    `C-y C-2'    `isearch-yank-secondary'
;;    `C-y C-c'    `isearchp-yank-char' (Emacs 22+)
;;    `C-y C-e'    `isearchp-yank-line'
;;    `C-y C-w'    `isearchp-yank-word-or-char' (Emacs 22+)
;;    `C-y C-y'    `isearch-yank-kill'
;;    `C-y M-y'    `isearch-yank-pop' (Emacs 24+)
;;    `M-c'        `isearch-toggle-case-fold'
;;    `M-e'        `isearch-edit-string'
;;    `M-g'        `isearchp-retrieve-last-quit-search'
;;    `M-k'        `isearchp-cycle-mismatch-removal'
;;    `M-r'        `isearch-toggle-regexp'
;;    `M-s i'      `isearch-toggle-invisible'
;;    `M-s w'      `isearch-toggle-word'
;;    `M-w'        `isearchp-kill-ring-save'
;;    `C-M-y'      `isearch-yank-secondary'
;;    `C-M-RET'    `isearchp-act-on-demand' (Emacs 22+)
;;    `C-M-tab'    `isearch-complete' (on MS Windows)
;;    `next'       `isearch-repeat-forward'
;;    `prior'      `isearch-repeat-backward'
;;
;;
;;  User option `isearchp-initiate-edit-commands' causes certain keys
;;  not to exit Isearch but rather to edit the search string.
;;  Customize it to `nil' if you do not want this behavior at all.
;;
;;
;;  The following bindings are made here for incremental search edit
;;  mode:
;;
;;    `C-x 8 RET'  `insert-char' (Emacs 23+)
;;    `C-M-tab'    `isearch-complete-edit' (MS Windows only)
 
;;(@* \"Overview of Features\")
;;
;;; Overview of Features ---------------------------------------------
;;
;;  * Case-sensitivity is indicated in the mode line minor-mode
;;    lighter: `ISEARCH' for case-insensitive; `Isearch' for
;;    case-sensitive.
;;
;;  * Highlighting of the mode-line minor-mode lighter when search has
;;    wrapped around (Emacs 24+ only).
;;
;;  * Highlighting of parts of the prompt, to indicate the type of
;;    search: regexp, word, multiple-buffer, and whether searching has
;;    wrapped around the buffer (Emacs 22+ only).
;;
;;  * Optional limiting of search to the active region, controlled by
;;    option `isearchp-restrict-to-region-flag'.  Deactivation of the
;;    active region, controlled by option
;;    `isearchp-deactivate-region-flag'.  Both of these are available
;;    for Emacs 24.3 and later.  You can use `C-x n' (command
;;    `isearchp-toggle-region-restriction') during search to toggle
;;    `isearchp-restrict-to-region-flag'.
;;
;;    NOTE: For search to be limited to the active region in Info, you
;;    must also use library `info+.el'.
;;
;;  * Option and commands to let you select the last target occurrence
;;    (set the region around it):
;;
;;    - Option `isearchp-set-region-flag' - Non-`nil' means
;;      automatically set the region around the last search target.
;;    - Command `isearchp-toggle-set-region', bound to `C-SPC' during
;;      isearch - toggle `isearchp-set-region-flag'.
;;    - Command `set-region-around-search-target' - manually set the
;;      region around the last search target.
;;
;;  * When you visit a search hit, you can perform an action on it.
;;    Use `C-M-RET' (command `isearchp-act-on-demand' - Emacs 22+
;;    only) to invoke the action function that is the value of option
;;    `isearchp-on-demand-action-function'.  That function is passed
;;    the current search-hit string and its start and end positions in
;;    the buffer.  Search moves to the next hit in the same search
;;    direction, so just repeating `C-M-RET' carries out the action on
;;    subsequent hits.
;;
;;  * The default value of `isearchp-on-demand-action-function' is
;;    function `isearchp-replace-on-demand', which replaces the search
;;    hit.  This means that you can replace (or delete) chosen search
;;    hits on demand.
;;
;;    By default, the replacement string is empty, so with no prefix
;;    argument the action is to delete the search hit (replace it with
;;    nothing).
;;
;;    With a prefix arg, `isearchp-replace-on-demand' prompts for the
;;    replacement, which is used thereafter until you again use a
;;    prefix arg.  Since you can use a prefix arg at any time, you can
;;    provide different replacements for different search hits.  When
;;    prompted, if you clear the minibuffer and hit `RET', hit
;;    replacement just becomes search-hit deletion.
;;
;;    . With a plain prefix arg (`C-u') or a numeric prefix arg of
;;      value 1 (e.g. `C-1'), `isearchp-replace-on-demand' replaces
;;      only the current search hit.
;;
;;    . With a negative prefix arg (e.g. `M--'),
;;      `isearchp-replace-on-demand' changes searching so that it also
;;      replaces.  That is, the search key (e.g., `C-s') then acts the
;;      same as `C-M-RET'.  (You can cancel this by using a
;;      non-negative prefix arg or by quitting and restarting
;;      Isearch.)
;;
;;    . With a positive prefix arg N (e.g. `C-8' or `C-u 200'),
;;      `isearchp-replace-on-demand' replaces N search hits (but it
;;      stops at the search limit, if reached).
;;
;;    . With a zero prefix arg (e.g. `C-0),
;;      `isearchp-replace-on-demand' replaces *all* remaining search
;;      hits (up to the search limit).
;;
;;    (NOTE: To use a prefix arg within Isearch, you must set
;;    `isearch-allow-prefix' (if available) or `isearch-allow-scroll'
;;    to non-nil.)
;;
;;  * When you use on-demand replacement (with `C-M-RET') the
;;    replacement text can be either inserted literally, as is, or
;;    interpreted as in `query-replace-regexp'.  In the latter case,
;;    you can use `\\&', `\\=\\N', `\\#', `\\,' and `\\?'.
;;
;;    For example, suppose you use a regexp-search pattern of
;;    `\\(e\\)\\|a' and a replacement pattern of `\\,(if \\1 \"a\" \"e\")'.
;;    Each `C-M-RET' will then swap `e' for `a' and vice versa.
;;
;;    See the doc for `query-replace-regexp' and node `Regexp Replace'
;;    of the Emacs manual for more information.
;;
;;    (Note that `\\?' is supported, but it is not very useful in this
;;    context, because it prompts you to edit the result each time you
;;    hit `C-M-RET'.  Instead, use `C-u C-M-RET' whenever you want to
;;    change (edit) the replacement pattern.)
;;
;;  * You can use `C-M-`' (`isearchp-toggle-literal-replacement')
;;    anytime during Isearch to toggle whether replacement text is
;;    used literally or interpreted per the special regexp-replacement
;;    constructs.
;;
;;    Note that the use of the special regexp replacement patterns is
;;    unrelated to the kind of incremental search: literal string
;;    search or regexp search.  Just remember that the way to switch
;;    on/off the special behavior of `\\&' and so on is to use `C-M-`'.
;;
;;  * The value of variable `isearchp-noprompt-action-function' is a
;;    function that is invoked automatically, after you visit each
;;    search hit.  The function is called with no arguments.  It
;;    cannot use the minibuffer, but it can modify buffer contents.
;;    The variable is reset to `nil' when you quit Isearch.  As an
;;    example of use, command `isearchp-replace-on-demand' with a
;;    negative prefix arg sets this to `isearchp-replace-match', which
;;    causes automatic replacement each time you visit a search hit.
;;
;;  * Hook `isearchp-nomodify-action-hook' (Emacs 22+ only) is also
;;    run after each search visit.  Its functions also must accept the
;;    same arguments as `isearchp-act-on-demand'.  The functions can
;;    use the minibuffer, but they must not update the buffer text (in
;;    a way noticeable by Isearch), or else that will likely lead to a
;;    call-stack overflow.  This is because they are called with
;;    Isearch suspended during `isearch-update' (which can itself be
;;    invoked by the action...).
;;
;;  * Option (`isearchp-regexp-quote-yank-flag') and command
;;    (`isearchp-toggle-regexp-quote-yank', bound to `C-`') to toggle
;;    quoting (escaping) of regexp special characters.  With escaping
;;    turned off, you can yank text such as `^\\*.*' without it being
;;    transformed to `\\^\\\\\\*\\.\\*'.
;;
;;  * `M-g' (`isearchp-retrieve-last-quit-search') yanks the last
;;    successful search string (regexp or plain) from when you last
;;    hit `C-g' in Isearch.  Sometimes you search for something but
;;    abandon the search - you just want to check the locations of
;;    something, without staying at any of them.  Afterward, if you
;;    want to find them again, use `M-g'.  This yanks that search
;;    string, so you can append it to whatever you are already
;;    searching for.
;;
;;  * `C-M-y' (`isearch-yank-secondary') yanks the secondary selection
;;    into the search string, if you also use library `second-sel.el'.
;;
;;  * `C-c' (`isearchp-yank-char') yanks successive characters onto
;;    the search string.
;;
;;  * `C-_' (`isearchp-yank-symbol-or-char') yanks successive symbols
;;    (or words or subwords or chars) into the search string.
;;
;;  * `C-(' (`isearchp-yank-sexp-symbol-or-char') yanks successive
;;    sexps (or symbols or words or subwords or chars) into the search
;;    string.
;;
;;  * `M-w' (`isearchp-kill-ring-save') copies the current search
;;    string to the kill ring.  You can then, for example, use `C-s
;;    M-y' to search for the same thing in another Emacs session.
;;
;;    (I use this all the time, but you might not use multiple Emacs
;;    sessions.)  Note that if you did not have this feature then you
;;    would need to select the search-string text (in the text buffer
;;    or in the `M-e' Isearch edit buffer) and copy it to the kill
;;    ring. (Note: `M-w' used to toggle word search, but
;;    `isearch-toggle-word' is now `M-s w'.)
;;
;;  * All commands that yank text onto the search string are bound to
;;    keys with prefix `C-y' (in addition to any other Isearch
;;    bindings):
;;
;;      `C-y C-_'   isearchp-yank-symbol-or-char
;;      `C-y C-('   isearchp-yank-sexp-symbol-or-char
;;      `C-y C-2'   isearch-yank-secondary
;;      `C-y C-c'   isearchp-yank-char
;;      `C-y C-e'   isearchp-yank-line
;;      `C-y C-w'   isearchp-yank-word-or-char
;;      `C-y C-y'   isearch-yank-kill
;;      `C-y M-y'   isearch-yank-pop
;;
;;    You can repeat any of these for which it makes sense (i.e., all
;;    except `isearch-yank-secondary', `isearch-yank-kill', and
;;    `isearch-yank-pop') by just repeating the last key.  For
;;    example: `C-y C-e C-e C-e' adds the text up to the end of three
;;    lines.
;;
;;  * `C-x 8 RET' (`isearch-char-by-name') reads the name of a Unicode
;;    character with completion and appends it to the search string.
;;    Same thing when editing the search string (i.e., after `M-e').
;;    This is part of GNU Emacs starting with Emacs 24.4.
;;
;;  * `C-x o' (`isearchp-open-recursive-edit') opens a recursive
;;    editing session, where you can do anything you like (including
;;    search for something different).  Using `C-M-c' closes the
;;    recursive editing session and resumes the search (from the
;;    current position when you hit `C-M-c').
;;
;;  * Highlighting of the mismatched portion of your search string in
;;    the minibuffer.  This is the portion that is removed if you do
;;    `C-g', or removed/replaced automatically if you use `M-k' (see
;;    next).  I added this feature to GNU Emacs 23.1.
;;
;;  * `C-g' after successfully finding matches restores not only the
;;    original position but also its relative position in the window.
;;    IOW, you get back to what you saw before searching.  Fixes Emacs
;;    bug #12253 for Isearch.
;;
;;  * `M-k' (`isearchp-cycle-mismatch-removal') cycles automatic
;;    removal or replacement of the input portion that does not match,
;;    bound to .  The behavior is controlled by the value of option
;;    `isearchp-drop-mismatch':
;;
;;    `replace-last' - Your current input replaces the last mismatched
;;                     text.  You can always see your last input, even
;;                     if it is a mismatch.  And it is available for
;;                     editing using `M-e'.
;;    nil            - Your current input is appended, even if the
;;                     previous input has a mismatched portion.
;;    anything else  - Your current input is ignored (removed) if it
;;                     causes a mismatch.  The search string always
;;                     has successful matches.
;;
;;  * Non-`nil' option `isearchp-toggle-option-flag', which you can
;;    toggle using `M-s v' (`isearchp-toggle-option-toggle'),
;;    determines whether commands that toggle behavior also toggle an
;;    associated user option.  For such commands, a prefix argument
;;    flips the behavior, as if `isearchp-toggle-option-flag' were
;;    toggled temporarily.  Currently this feature applies to toggles
;;    `M-c' (case-sensitivity) and `M-s i' (matching hidden text).
;;
;;  * `M-c' (`isearch-toggle-case-fold') toggles case sensitivity.  If
;;    option `isearchp-toggle-option-flag' is non-nil then it toggles
;;    option `isearchp-case-fold' to change the sensitivity from now
;;    on.  Otherwise, the option value is not changed, so the effect
;;    is for the current search only.
;;
;;  * `M-s i' (`isearch-toggle-invisible') toggles invisible-text
;;    sensitivity.  If option `isearchp-toggle-option-flag' is non-nil
;;    then it toggles option `search-invisible' to change the
;;    sensitivity from now on.  Otherwise, the option value is not
;;    changed, so the effect is for the current search only.
;;
;;  * `C-+' (`isearchp-toggle-search-invisible') toggles the value of
;;    option `search-invisible'.  The effect is like that of `M-s i'
;;    with no prefix argument and with non-nil
;;    `isearchp-toggle-option-flag'.
;;
;;  * Other bindings during Isearch:
;;
;;    - `next', `prior' repeat the last Isearch forward and backward
;;      (easier than using the chords `C-s', `C-r').
;;    - `C-end' - go to the longest line.  Repeat to go to the longest
;;      line following that one in the buffer.  As usual, `C-g' puts
;;      you back where you started.  This binding is made only if you
;;      also use `misc-cmds.el'.
;;    - `C-h' provides help on Isearch while searsching.  This library
;;      also redefines `isearch-mode-help' so that it lists all
;;      Isearch bindings and ends Isearch properly.
;;
;;  * `M-e' (`isearch-edit-string') automatically puts the cursor at
;;    the first mismatch position in the search string, for easy
;;    editing.  Whereas `C-g' (see also `M-k') removes all of the
;;    mismatch, this feature lets you change or insert a character or
;;    two, without losing the rest of the search string.
;;
;;  * A user option, `isearchp-initiate-edit-commands', that specifies
;;    commands whose keys will not exit Isearch but will instead
;;    initiate editing of the search string.  For example, if
;;    `backward-char' is included in the list then `C-b' and `left'
;;    will just move the cursor backward over the search string so you
;;    can change, delete, or insert chars in the middle somewhere.
;;    This makes the search string more minibuffer-like.
;;
;;  * You can, by default, select text with the mouse, then hit `C-s'
;;    etc. to search for it.  This is controlled by user option
;;    `isearchp-mouse-2-flag'.
;;
;;  If you have Emacs 23 or later then I recommend that you also use
;;  the companion library, `isearch-prop.el'.  If it is in your
;;  `load-path' then it will be loaded by `isearch+.el'.  It lets you
;;  limit incremental searching to contexts that you define.
;;
;;  Example: search within zones having a `face' text property with a
;;  value of `font-lock-comment-face' or `font-lock-string-face'.
;;  Search overlays or text properties.
;;
;;  Besides relying on existing text properties such as `face' for
;;  contexts to search, you can use command
;;  `isearchp-put-prop-on-region' to add any text property to the
;;  region.  This gives you an easy way to set up contexts for
;;  text-property search.  For property `face', empty input to
;;  `isearchp-put-prop-on-region' removes all faces from the region.
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (irfc . [(20130824 1207) nil "Interface for IETF RFC document." single ";;; Commentary:
;;
;; Interface for IETF RFC document.
;;
;; This package use some code from `rfcview.el'.
;; Thanks \"Neil W.  Van Dyke\"!
;;
;; The features this package provide:
;;
;; * Format RFC document for easy reading.
;; * Single keystroke for fast view.
;; * Render status switch.
;; * Smart table and content switch.
;; * Visit RFC link around point.
;; * Jump to RFC reference around point.
;; * Download RFC document *asynchronous*.
;;
;; Below are commands you can use:
;;
;; `irfc-render-toggle'         Toggle render status with RFC buffer.
;; `irfc-quit'                  Quit RFC buffer.
;; `irfc-visit'                 Ask for RFC number and visit document.
;; `irfc-reference-goto'        Ask for RFC reference and jump to it.
;; `irfc-head-goto'             Ask for heading name and jump to it.
;; `irfc-head-number-goto'      Ask for heading number and jump to it.
;; `irfc-follow'                Visit RFC document around point.
;; `irfc-table-jump'            Switch between table and content.
;; `irfc-page-goto'             Goto page.
;; `irfc-page-next'             Jump next page.
;; `irfc-page-prev'             Jump previous page.
;; `irfc-page-first'            Jump first page.
;; `irfc-page-last'             Jump last page.
;; `irfc-page-table'            Jump table page.
;; `irfc-head-next'             Jump next heading.
;; `irfc-head-prev'             Jump previous heading.
;; `irfc-rfc-link-next'         Jump next RFC link.
;; `irfc-rfc-link-prev'         Jump previous RFC link.
;; `irfc-scroll-up-one-line'    Scroll up one line.
;; `irfc-scroll-down-one-line'  Scroll down one line.
;;
;; Tips:
;;
;; You can use command `irfc-render-toggle' to toggle render status.
;;
;; Command `irfc-table-jump' can switch between table and content,
;; example you stay cursor at *table*, and type \"G\" will jump corresponding
;; content in buffer, alike, you can stay at any content and type \"G\"
;; will jump corresponding table item.
;;
;; Command `irfc-follow' will visit RFC document around point,
;; example you stay cursor at \"[RFC3986]\", and type \"o\" will
;; open rfc3986.txt in storage directory.  If have not found
;; this file in directory, will download from `http://www.ietf.org/rfc/'
;; and open it when download complete.
;;
;; And command \342\200\230irfc-follow\342\200\231 can also use at title of RFC document.
;; Example rfc3986.txt contain \342\200\234Obsoletes: 2732, 2396, 1808\342\200\235 at title,
;; you can move cursor to \342\200\2342732\342\200\235 and type \342\200\234o\342\200\235 will visit RFC 2732 document.
;; \342\200\230irfc-follow\342\200\231 support below keywords in title:
;;
;;        \342\200\234Request for Comments:\342\200\235
;;        \342\200\234Updates:\342\200\235
;;        \342\200\234Obsoletes:\342\200\235
;;
;; You can use command `irfc-rfc-link-next' or `irfc-rfc-link-prev'
;; to jump next or previous RFC link in document.
;;
;; Command `irfc-visit' will ask the user for a RFC number and will
;; visit that document, either from `irfc-directory', if exists, or by
;; downloading it.  This command can serve as entry point for Irfc,
;; to go to a RFC without having to visit the file or remember
;; whether it is already in `irfc-directory'.
;; And if you visit same document with your previous type, so just
;; hit RET, and don't need type RFC document number.
;;
;; Command `irfc-reference-goto' will ask the user for a reference
;; number and will jump to that citation in the Normative
;; References/Informative References heading.
;;
;; Command `irfc-head-goto' will ask the user for a heading name and
;; will jump to that heading.  Completion list in minibuffer is
;; available.
;;
;; Command `irfc-head-number-goto' will ask the user for a heading
;; number and will jump to that heading.  Completion list in minibuffer
;; is available.
;;


;;; Installation:
;;
;; Put irfc.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'irfc)
;;
;; Setup your storage directory for RFC documents.
;;
;; (setq irfc-directory \"YourStorageDirectory\")
;;
;; If you want make RFC document load `irfc-mode' automatically,
;; setup like below:
;;
;; (setq irfc-assoc-mode t)
;;

"]) (ir-black-theme . [(20130302 2355) nil "Port of ir-black theme" single ";;; Commentary:

;; This is an Emacs 24 port of Todd Werth's IR Black theme available at URL
;; `http://blog.toddwerth.com/entries/8'. It still needs font-locking for
;; operators, numbers, and regular expressions, and it could definitely use
;; some cleaning up. Improvements are welcome!
;;
;; To use this theme, download it to ~/.emacs.d/themes. In your `.emacs' or
;; `init.el', add this line:
;;
;;    (add-to-list 'custom-theme-load-path \"~/.emacs.d/themes\")
;;
;; Once you have reloaded your configuration (`eval-buffer'), do `M-x
;; load-theme' and select \"ir-black\".

"]) (iplayer . [(20131230 211) nil "Browse and download BBC TV/radio shows" single ";;; Commentary:

;; Requires and uses the 'get-iplayer' script to provide a
;; convenient interface to BBC iPlayer.

"]) (io-mode . [(20140102 810) nil "Major mode to edit Io language files in Emacs" single ";;; Commentary:

;; No documentation is availible at the moment, but a nice and clean
;; README is soon to come.

;;; Installation

;; In your shell:

;;     $ cd ~/.emacs.d/packges
;;     $ git clone git://github.com/superbobry/io-mode.git

;; In your Emacs config:

;;     (add-to-list 'load-path \"~/.emacs.d/packages/io-mode\")
;;     (require 'io-mode)

;;; Thanks

;; Major thanks to defunkt's coffee-mode, which helped me to get over most
;; of the tought parts of writing a major mode.
;;
;; Sources:
;; http://renormalist.net/Renormalist/EmacsLanguageModeCreationTutorial
;;


"]) (interval-tree . [(20130325 707) ((dash (1 1 0))) "Interval tree data structure for 1D range queries" single ";;; Commentary:

;; This package implements a 1D range query datastructure, namely
;; interval tree. Use `interval-tree-build' to create the search
;; structure and `interval-tree-find-*' family of functions to query it.

;; See github readme at https://github.com/Fuco1/interval-tree

"]) (interaction-log . [(20131106 1757) nil "exhaustive log of interactions with Emacs" single ";;; Commentary:
;;;
;;; This package provides a buffer *Emacs Log* showing the last hit
;;; keys and executed commands, messages and file loads in
;;; chronological order.  This enables you to reconstruct the last
;;; seconds of your work with Emacs.  It's also useful for
;;; giving presentations or making screencasts with Emacs.
;;;
;;; Installation: Put this file in your load path and byte-compile it.
;;; To start logging automatically at startup, add this to your init
"]) (instapaper . [(20130104 621) nil "add URLs to instapaper from emacs" single nil]) (insfactor . [(20131115 2359) nil "No description available." single nil]) (insert-shebang . [(20140106 2209) nil "Insert shebang line automatically." single ";;; Commentary:
;; Inserts shebang line automatically
;; URL: http://github.com/psachin/insert-shebang

;; Install

;; Using `package'
;; M-x package-install insert-shebang

;; Unless installed from a `package', add the directory containing
;; this file to `load-path', and then:
;; (require 'insert-shebang)
;;
;; Then enable it globally using:
;;
;; (add-hook 'find-file-hook 'insert-shebang)

;; Customize
;; M-x customize-group RET insert-shebang RET
;;
;; See ReadMe.org for more info.

"]) (inlineR . [(20120520 732) nil "insert Tag for inline image of R graphics" single ";;; Commentary:
;;
;; Put the inlineR.el to your
;; load-path.
;; Add to .emacs:
;; (require 'inlineR)
;; cacoo.el is very cool.
;; You should install cacoo.el.
;; In detail, 
;; https://github.com/kiwanami/emacs-cacoo

;;; Installation:
;;
;; Put the inlineR.el to your
;; load-path.
;; Add to .emacs:
;; (require 'inlineR)
;;
"]) (inline-crypt . [(20130409 507) nil "Simple inline encryption via openssl" tar nil]) (inkpot-theme . [(20120505 708) nil "port of vim's inkpot theme" single nil]) (initsplit . [(20120630 944) nil "code to split customizations into different files" single ";;; Commentary:

;; This file allows you to split Emacs customizations (set via M-x
;; customize) into different files, based on the names of the
;; variables.  It uses a regexp to match against each face and
;; variable name, and associates with a file that the variable should
;; be stored in.

;; To use it, just load the file in your .emacs:
;;
;;   (load \"initsplit\")
;;
;; If you want configuration files byte-compiled, add this after it:
;;
;;   (add-hook 'after-save-hook 'initsplit-byte-compile-files t)

;; Note that that you *must* load each file that contains your various
;; customizations from your .emacs.  Otherwise, the variables won't
;; all be set, and the next time you use the customize interface, it
;; will delete the settings in those other files.

;; Then, customize the variable `initsplit-customizations-alist', to
;; associate various configuration names with their respective
;; initialization files.

;; I find this module most useful for splitting up Gnus and Viper
;; customizations.

"]) (init-loader . [(20130217 1910) nil "Loader for configuration files" single ";;; Commentary:

;; Place init-loader.el somewhere in your `load-path'.  Then, add the
;; following lines to ~/.emacs or ~/.emacs.d/init.el:
;;
;;     (require 'init-loader)
;;     (init-loader-load \"/path/to/init-directory\")
;;
;; The last line loads configuration files in /path/to/init-directory.
;; If you omit arguments for `init-loader-load', the value of
;; `init-loader-directory' is used.
;;
;; Note that not all files in the directory are loaded.  Each file is
;; examined that if it is a .el or .elc file and, it has a valid name
;; specified by `init-loader-default-regexp' or it is a platform
;; specific configuration file.
;;
;; By default, valid names of configuration files start with two
;; digits.  For example, the following file names are all valid:
;;     00_util.el
;;     01_ik-cmd.el
;;     21_javascript.el
;;     99_global-keys.el
;;
;; Files are loaded in the lexicographical order.  This helps you to
;; resolve dependency of the configurations.
;;
;; A platform specific configuration file has a prefix corresponds to
;; the platform.  The following is the list of prefixes and platform
;; specific configuration files are loaded in the listed order after
;; non-platform specific configuration files.
;;
;; Platform   Subplatform        Prefix         Example
;; ------------------------------------------------------------------------
;; Windows                       windows-       windows-fonts.el
;;            Meadow             meadow-        meadow-commands.el
;; ------------------------------------------------------------------------
;; Mac OS X   Carbon Emacs       carbon-emacs-  carbon-emacs-applescript.el
;;            Cocoa Emacs        cocoa-emacs-   cocoa-emacs-plist.el
;; ------------------------------------------------------------------------
;; GNU/Linux                     linux-         linux-commands.el
;; ------------------------------------------------------------------------
;; All        Non-window system  nw-            nw-key.el
;;
;; If `init-loader-byte-compile' is non-nil, each configuration file
;; is byte-compiled when it is loaded.  If you modify the .el file,
;; then it is recompiled next time it is loaded.
;;
;; Loaded files and errors during the loading process are recorded.
;; If `init-loader-show-log-after-init' is non-nil, the record is
;; shown after the overall loading process.  You can do this manually
;; by M-x init-loader-show-log.

"]) (inform7-mode . [(20131009 2354) ((sws-mode (0 1))) "Major mode for editing Inform 7 source files" single ";;; Commentary:

;; A basic major mode for editing Inform 7 story files. It handles highlighting
;; and indentation, but nothing else at the moment. So you'll still need the full
;; Inform IDE for actual development.

"]) (info+ . [(20131226 1951) nil "Extensions to `info.el'." single ";;; Commentary:
;;
;;    Extensions to `info.el'.
;;
;;  Faces defined here:
;;
;;    `info-command-ref-item', `info-constant-ref-item', `info-file',
;;    `info-function-ref-item',`info-macro-ref-item', `info-menu',
;;    `info-node', `info-quoted-name', `info-reference-item',
;;    `info-single-quote', `info-special-form-ref-item',
;;    `info-string', `info-syntax-class-item',
;;    `info-user-option-ref-item', `info-variable-ref-item',
;;    `info-xref', `minibuffer-prompt'.
;;
;;  Options (user variables) defined here:
;;
;;    `Info-breadcrumbs-in-header-flag' (Emacs 23+),
;;    `Info-display-node-header-fn', `Info-fit-frame-flag',
;;    `Info-fontify-angle-bracketed-flag',
;;    `Info-fontify-quotations-flag',
;;    `Info-fontify-reference-items-flag',
;;    `Info-fontify-single-quote-flag', `Info-saved-nodes',
;;    `Info-subtree-separator'.
;;
;;  Commands defined here:
;;
;;    `Info-breadcrumbs-in-mode-line-mode' (Emacs 23+),
;;    `info-emacs-manual', `Info-follow-nearest-node-new-window',
;;    `Info-history-clear', `Info-merge-subnodes',
;;    `Info-mouse-follow-nearest-node-new-window',
;;    `Info-save-current-node', `Info-set-breadcrumbs-depth' (Emacs
;;    23+), `Info-toggle-fontify-angle-bracketed',
;;    `Info-toggle-fontify-quotations',
;;    `Info-toggle-fontify-single-quote',
;;    `Info-toggle-breadcrumbs-in-header-line' (Emacs 23+),
;;    `Info-virtual-book', `menu-bar-read-lispref',
;;    `menu-bar-read-lispintro',
;;
;;  Macros defined here:
;;
;;    `info-user-error'.
;;
;;  Non-interactive functions defined here:
;;
;;    `Info-display-node-default-header', `info-fontify-quotations',
;;    `info-fontify-reference-items',
;;    `Info-insert-breadcrumbs-in-mode-line' (Emacs 23+),
;;    `Info-isearch-search-p' (Emacs 23+), `info-quotation-regexp',
;;    `Info-search-beg' (Emacs 23+), `Info-search-end' (Emacs 23+).
;;
;;  Internal variables defined here:
;;
;;    `Info-breadcrumbs-depth-internal' (Emacs 23+),
;;    `Info-merged-map', `Info-mode-syntax-table',
;;    `info-quoted+<>-regexp'.
;;
;;
;;  ***** NOTE: The following standard faces defined in `info.el'
;;              (Emacs 21+) have been REDEFINED HERE:
;;
;;  `info-title-1', `info-title-2', `info-title-3', `info-title-4'.
;;
;;
;;  ***** NOTE: The following standard functions defined in `info.el'
;;              have been REDEFINED or ADVISED HERE:
;;
;;  `info-display-manual' - Use completion to input manual name.
;;  `Info-find-emacs-command-nodes' - Added arg MSGP and message.
;;  `Info-find-file' (Emacs 23+) - Handle virtual books.
;;  `Info-find-node', `Info-find-node-2' -
;;     Call `fit-frame' if `Info-fit-frame-flag'.
;;     Added optional arg NOMSG.
;;  `Info-fontify-node' -
;;     1. Show breadcrumbs in header line and/or mode line.
;;     2. File name in face `info-file'.
;;     3. Node names in face `info-node'.
;;     4. Menu items in face `info-menu'.
;;     5. Only 5th and 9th menu items have their `*' colored.
;;     6. Notes in face `info-xref'.
;;     7. If `Info-fontify-quotations-flag', then fontify `...' in
;;        face `info-quoted-name' and \"...\" in face `info-string'.
;;     8. If `Info-fontify-angle-bracketed-flag' and
;;        `Info-fontify-quotations-flag' then fontify <...> in face
;;        `info-quoted-name'.
;;     9. If `Info-fontify-single-quote-flag' and
;;        `Info-fontify-quotations-flag', then fontify ' in face
;;        `info-single-quote'.
;;  `Info-goto-emacs-command-node' -
;;     1. Uses `completing-read' in interactive spec, with,
;;        as default, `symbol-nearest-point'.
;;     2. Added optional arg MSGP.
;;     3. Message if single node found.
;;     4. Returns `num-matches' if found; nil if not.
;;  `Info-goto-emacs-key-command-node' -
;;     1. Added optional arg MSGP.
;;     2. If key's command not found, then `Info-search's for key
;;        sequence in text and displays message about repeating.
;;  `Info-history' - A prefix arg clears the history.
;;  `Info-insert-dir' -
;;     Added optional arg NOMSG to inhibit showing progress msgs.
;;  `Info-mode' - Doc string shows all bindings.
;;  `Info-read-node-name-1' - Treat file name entries, e.g. \"(emacs)\".
;;  `Info-search' - 1. Fits frame.
;;                  2. Highlights found regexp if `search-highlight'.
;;  `Info-set-mode-line' - Handles breadcrumbs in the mode line.
;;  `Info-mouse-follow-nearest-node' (Emacs 21+) -
;;     With prefix arg, show node in new info buffer.
;;  `Info-isearch-search' - Respect restriction to active region.
;;  `Info-isearch-wrap' - Respect restriction to active region.
;;
;;
;;  ***** NOTE: The following behavior defined in `info.el'
;;              has been changed.
;;
;;  \"*info\" has been removed from `same-window-buffer-names', so that
;;  a separate window can be used if the user so chooses.
;;
;;
;;  Suggestion: Use a medium-dark background for Info.  Try, for
;;  example, setting the background to \"LightSteelBlue\" in your
;;  `~/.emacs' file.  You can do this as follows:
;;
;;         (setq special-display-buffer-names
;;               (cons '(\"*info*\" (background-color . \"LightSteelBlue\"))
;;                     special-display-buffer-names))
;;
;;  Alternatively, you can change the background value of
;;  `special-display-frame-alist' and set `special-display-regexps' to
;;  something matching \"*info*\":
;;
;;         (setq special-display-frame-alist
;;               (cons '(background-color . \"LightSteelBlue\")
;;                     special-display-frame-alist))
;;         (setq special-display-regexps '(\"[ ]?[*][^*]+[*]\"))
;;
;;  If you do use a medium-dark background for Info, consider
;;  customizing face to a lighter foreground color - I use \"Yellow\".
;;
;;  Also, consider customizing face `link' to remove its underline
;;  attribute.
;;
;;
;;  The following bindings are made here for Info-mode:
;;
;;    `?'              `describe-mode' (replaces `Info-summary')
;;    `+'              `Info-merge-subnodes'
;;    `.'              `Info-save-current-node'
;;    `a'              `info-apropos'
;;    `v'              `Info-virtual-book'
;;    `mouse-4'        `Info-history-back'
;;    `mouse-5'        `Info-history-forward'
;;    `S-down-mouse-2' `Info-mouse-follow-nearest-node-new-window'
;;    `S-RET'          `Info-follow-nearest-node-new-window'
;;
;;  The following bindings are made here for merged Info buffers:
;;
;;    `.'              `beginning-of-buffer'
;;    `b'              `beginning-of-buffer'
;;    `q'              `quit-window'
;;    `s'              `nonincremental-re-search-forward'
;;    `M-s'            `nonincremental-re-search-forward'
;;    `TAB'            `Info-next-reference'
;;    `ESC TAB'        `Info-prev-reference'
;;
;;
;;
;;  This file should be loaded after loading the standard GNU file
;;  `info.el'.  So, in your `~/.emacs' file, do this:
;;  (eval-after-load \"info\" '(require 'info+))
;;
;;
;;  Acknowledgement:
;;
;;    Lennart Borgman and Stefan Monnier for regexp suggestions.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (inflections . [(20121016 157) nil "convert english words between singular and plural" single nil]) (inf-ruby . [(20131222 1633) nil "Run a Ruby process in a buffer" single ";;; Commentary:
;;
;; inf-ruby provides a REPL buffer connected to a Ruby subprocess.
;;
;; If you're installing manually, you'll need to:
;; * drop the file somewhere on your load path (perhaps ~/.emacs.d)
;; * Add the following lines to your .emacs file:
;;
;;    (autoload 'inf-ruby \"inf-ruby\" \"Run an inferior Ruby process\" t)
;;    (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
;;
;; Or, for enh-ruby-mode:
;;
;;    (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)
;;
;; Installation via ELPA interface does the above for you
;; automatically.
;;
;; Additionally, consider adding
;;
;;    (add-hook 'after-init-hook 'inf-ruby-switch-setup)
;;
;; to your init file to easily switch from common Ruby compilation
;; modes to interact with a debugger.

"]) (inf-php . [(20130414 21) ((php-mode (1 5 0))) "Run a php interactive shell in a buffer" single ";;; Commentary:
;;
;; inf-php.el provides a REPL buffer connected to an php interactive shell.
;; Most codes are derived from inf-ruby.el ;)
;;
;;; Usage
;; put inf-php.el to load path, and add following code to your .emacs
;; 
;; (require 'inf-php)
;;
;;; TODO
;; * syntax highlight
;; * fix completion
;; * support load file
;; * better implementation


(require 'comint)
(require 'compile)
(require 'php-mode)

(defvar inf-php-first-prompt-pattern \"^php > *\"
  \"First prompt regex pattern of php interpreter.\")

(defvar inf-php-prompt-pattern \"^php > *\"
  \"Prompt regex pattern of php interpreter.\")

(defvar php-prev-l/c-dir/file nil
  \"Caches the last (directory . file) pair.
Caches the last pair used in the last ruby-load-file command.
Used for determining the default in the next one.\")

(defvar inf-php-mode-hook nil
  \"*Hook for customising inf-php mode.\")

(defvar inf-php-preload-code
  \"function p($x) { return var_dump($x); }\\n\"
  \"php code to be loaded after launching php interactive shell.\")

(defvar inf-php-runner-script-path \"/tmp/inf-php.sh\"
  \"Path to runner script, which is used to launch php interactive
  shell on emacs, a dirty work around :(\")

(defvar inf-php-enable-launch-workaround nil
  \"The value t enable launcher script.\")

(defvar inf-php-mode-map
  (let ((map (copy-keymap comint-mode-map)))
;    (define-key map (kbd \"C-c C-l\") 'inf-php-load-file)
    (define-key map (kbd \"C-x C-e\") 'php-send-last-sexp)
    (define-key map (kbd \"TAB\") 'inf-php-complete-or-tab)
    map)
  \"*Mode map for inf-php-mode\")

(defun inf-php-keys ()
  \"Set local key defs to invoke inf-php from php-mode.\"
  (define-key php-mode-map \"\\M-\\C-x\" 'php-send-definition)
  (define-key php-mode-map \"\\C-x\\C-e\" 'php-send-last-sexp)
  (define-key php-mode-map \"\\C-c\\C-x\" 'php-send-definition)
  (define-key php-mode-map \"\\C-c\\M-x\" 'php-send-definition-and-go)
  (define-key php-mode-map \"\\C-c\\C-r\" 'php-send-region)
  (define-key php-mode-map \"\\C-c\\M-r\" 'php-send-region-and-go)
  (define-key php-mode-map \"\\C-c\\C-z\" 'php-switch-to-inf)
;  (define-key php-mode-map \"\\C-c\\C-l\" 'php-load-file)
  (define-key php-mode-map \"\\C-c\\C-s\" 'inf-php))

(defvar inf-php-buffer nil \"Current php-cli process buffer.\")

(defvar php-shell-output-syntax-table
  (let ((table (make-syntax-table)))
    (modify-syntax-entry ?\\' \".\" table)
    (modify-syntax-entry ?\\\" \".\" table)
    (modify-syntax-entry ?\\( \".\" table)
    (modify-syntax-entry ?\\[ \".\" table)
    (modify-syntax-entry ?\\{ \".\" table)
    (modify-syntax-entry ?\\) \".\" table)
    (modify-syntax-entry ?\\] \".\" table)
    (modify-syntax-entry ?\\} \".\" table)
    table)
  \"Syntax table for shell output.
It makes parens and quotes be treated as punctuation chars.\")


(defun inf-php-mode ()
  \"Major mode for interacting with an inferior php (irb) process.

The following commands are available:
\\\\{inf-php-mode-map}

A php process can be fired up with M-x inf-php.

Customisation: Entry to this mode runs the hooks on comint-mode-hook and
inf-php-mode-hook (in that order).

You can send text to the inferior php process from other buffers containing
Php source.
    php-switch-to-inf switches the current buffer to the php process buffer.
    php-send-definition sends the current definition to the php process.
    php-send-region sends the current region to the php process.

    php-send-definition-and-go, php-send-region-and-go,
        switch to the php process buffer after sending their text.

Commands:
Return after the end of the process' output sends the text from the
    end of process to point.
Return before the end of the process' output copies the sexp ending at point
    to the end of the process' output, and sends it.
Delete converts tabs to spaces as it moves back.
Tab indents for php; with arugment, shifts rest
    of expression rigidly with the current line.
C-M-q does Tab on each line starting within following expression.
Paragraphs are separated only by blank lines.  # start comments.
If you accidentally suspend your process, use \\\\[comint-continue-subjob]
to continue it.\"
  (interactive)
  (comint-mode)
  (setq comint-prompt-regexp inf-php-prompt-pattern)
  (setq major-mode 'inf-php-mode)
  (setq mode-name \"Inf-Php\")
  (setq mode-line-process '(\":%s\"))
  (use-local-map inf-php-mode-map)
  (setq comint-input-filter (function inf-php-input-filter))
  (setq comint-get-old-input (function inf-php-get-old-input))
;  (make-local-variable 'compilation-error-regexp-alist)
;  (setq compilation-error-regexp-alist inf-php-error-regexp-alist)
  (compilation-shell-minor-mode t)

  ;; TODO syntax highlight
;;   (set-syntax-table php-mode-syntax-table)
;;   (set (make-local-variable 'font-lock-defaults)
;;        '(php-font-lock-keywords-3 nil nil nil nil))
;;   (set (make-local-variable 'syntax-propertize-function)
;;        (eval
;;         ;; XXX: Unfortunately eval is needed here to make use of the
;;         ;; dynamic value of `comint-prompt-regexp'.
;;         `(syntax-propertize-rules
;;           (,comint-prompt-regexp
;;            (0 (ignore
;;                (put-text-property
;;                 comint-last-input-start end 'syntax-table
;;                 php-shell-output-syntax-table)
;;                ;; XXX: This might look weird, but it is the easiest
;;                ;; way to ensure font lock gets cleaned up before the
;;                ;; current prompt, which is needed for unclosed
;;                ;; strings to not mess up with current input.
;;                (font-lock-unfontify-region comint-last-input-start end))))
;;           ;; (,(python-rx string-delimiter)
;;           ;;  (0 (ignore
;;           ;;      (and (not (eq (get-text-property start 'field) 'output))
;;           ;;           (python-syntax-stringify)))))
;; )))
  
  ;; first php interactive shell will exit
  (comint-send-string (inf-php-proc) \"\\n\")

  ;; load the code
  (comint-send-string (inf-php-proc) inf-php-preload-code)
  (compilation-shell-minor-mode 1)
  (run-hooks 'inf-php-mode-hook)
)

(defvar inf-php-filter-regexp \"\\\\`\\\\s *\\\\S ?\\\\S ?\\\\s *\\\\'\"
  \"*Input matching this regexp are not saved on the history list.
Defaults to a regexp ignoring all inputs of 0, 1, or 2 letters.\")

(defun inf-php-input-filter (str)
  \"Don't save anything matching inf-php-filter-regexp\"
  (not (string-match inf-php-filter-regexp str)))

;; adapted from replace-in-string in XEmacs (subr.el)
(defun inf-php-remove-in-string (str regexp)
  \"Remove all matches in STR for REGEXP and returns the new string.\"
  (let ((rtn-str \"\") (start 0) match prev-start)
    (while (setq match (string-match regexp str start))
      (setq prev-start start
            start (match-end 0)
            rtn-str (concat rtn-str (substring str prev-start match))))
    (concat rtn-str (substring str start))))

(defun inf-php-get-old-input ()
  \"Snarf the sexp ending at point\"
  (save-excursion
    (let ((end (point)))
      (re-search-backward inf-php-first-prompt-pattern)
      (inf-php-remove-in-string (buffer-substring (point) end)
                                 inf-php-prompt-pattern))))

(defun inf-php (&optional impl)
  \"Run an inferior Php process in a buffer. With prefix argument,
prompts for which Php implementation to use. Runs the hooks
`inf-php-mode-hook' \\(after the `comint-mode-hook' is run).\"

  (interactive)
  (if inf-php-enable-launch-workaround
      (progn
        (shell-command (format \"echo 'php -a >/dev/null && php -a' > %s\" inf-php-runner-script-path))
        (run-php (format \"sh %s\" inf-php-runner-script-path) \"php\"))
    (run-php \"php -a\" \"php\")))

(defun run-php (&optional command name)
  \"Run an inferior Php process, input and output via buffer *php*.
If there is a process already running in `*php*', switch to that buffer.
With argument, allows you to edit the command line (default is value
of `php-program-name').  Runs the hooks `inferior-php-mode-hook'
\\(after the `comint-mode-hook' is run).
\\(Type \\\\[describe-mode] in the process buffer for a list of commands.)\"

  (interactive)
  (setq command (or command \"php -a\"))
  (setq name (or name \"php\"))
  

  (if (not (comint-check-proc inf-php-buffer))
      (let ((commandlist (split-string command)))
        (set-buffer (apply 'make-comint name (car commandlist)
                           nil (cdr commandlist)))
        (inf-php-mode)
        ))
  (pop-to-buffer (setq inf-php-buffer (format \"*%s*\" name))))

(defun inf-php-proc ()
  \"Returns the current php process. See variable inf-php-buffer.\"
  (or (get-buffer-process (if (eq major-mode 'inf-php-mode)
                              (current-buffer)
                            inf-php-buffer))
      (error \"No current process. See variable inf-php-buffer\")))

;; These commands are added to the php-mode keymap:

(defconst php-eval-separator \" \")

(defun php-send-region (start end)
  \"Send the current region to the inferior Php process.\"
  (interactive \"r\")
;  (let (term (file (buffer-file-name)) line)
    (save-excursion
      (save-restriction
        (widen)
        (goto-char start)
        (setq line (+ start (forward-line (- start)) 1))
        (goto-char start)
        ;; (while (progn
        ;;          (setq term (apply 'format php-send-terminator (random) (current-time)))
        ;;          (re-search-forward (concat \"^\" (regexp-quote term) \"$\") end t)))
        ))
    ;; compilation-parse-errors parses from second line.
    (save-excursion
      (let ((m (process-mark (inf-php-proc))))
        (set-buffer (marker-buffer m))
        (goto-char m)
        (insert php-eval-separator \"\\n\")
        (set-marker m (point))))
;    (comint-send-string (inf-php-proc) (format \"eval(<<<%s\\n\" term))
    (comint-send-region (inf-php-proc) start end)
    (comint-send-string (inf-php-proc) \"\\n\")
;    (comint-send-string (inf-php-proc) (concat \"\\n\" term \"\\n);\\n\"))
)


(defun php-send-definition ()
  \"Send the current definition to the inferior Php process.\"
  (interactive)
  (save-excursion
    (php-end-of-defun)
    (let ((end (point)))
      (php-beginning-of-defun)
      (php-send-region (point) end))))

(defun php-send-last-sexp ()
  \"Send the previous sexp to the inferior Php process.\"
  (interactive)
  (php-send-region (save-excursion (backward-sexp) (point)) (point)))

(defun php-switch-to-inf (eob-p)
  \"Switch to the php process buffer.
With argument, positions cursor at end of buffer.\"
  (interactive \"P\")
  (if (get-buffer inf-php-buffer)
      (pop-to-buffer inf-php-buffer)
    (error \"No current process buffer. See variable inf-php-buffer.\"))
  (cond (eob-p
         (push-mark)
         (goto-char (point-max)))))

(defun php-send-region-and-go (start end)
  \"Send the current region to the inferior Php process.
Then switch to the process buffer.\"
  (interactive \"r\")
  (php-send-region start end)
  (php-switch-to-inf t))

(defun php-send-definition-and-go ()
  \"Send the current definition to the inferior Php.
Then switch to the process buffer.\"
  (interactive)
  (php-send-definition)
  (php-switch-to-inf t))


;; (defun php-load-file (file-name)
;;   \"Load a Php file into the inferior Php process.\"
;;   (interactive (comint-get-source \"Load Php file: \" php-prev-l/c-dir/file
;;                                   php-source-modes t)) ;; T because LOAD needs an exact name
;;   (comint-check-source file-name) ; Check to see if buffer needs saved.
;;   (setq php-prev-l/c-dir/file (cons (file-name-directory    file-name)
;;                                      (file-name-nondirectory file-name)))
;;   (comint-send-string (inf-php-proc) (concat \"(load \\\"\"
;;                                               file-name
;;                                               \"\\\"\\)\\n\")))

;; (defun inf-php-completions (seed)
;;   \"Return a list of completions for the line of php code starting with SEED.\"
;;   (let* ((proc (get-buffer-process inf-php-buffer))
;; 	 (comint-filt (process-filter proc))
;; 	 (kept \"\") completions)
;;     (set-process-filter proc (lambda (proc string) (setf kept (concat kept string))))
;;     (process-send-string proc (format \"puts IRB::InputCompletor::CompletionProc.call('%s').compact\\n\" seed))
;;     (while (not (string-match inf-php-prompt-pattern kept)) (accept-process-output proc))
;;     (if (string-match \"^[[:alpha:]]+?Error: \" kept) (error kept))
;;     (setf completions (butlast (split-string kept \"[\\r\\n]\") 2))
;;     (set-process-filter proc comint-filt)
;;     completions))

;; (defun inf-php-complete-or-tab (&optional command)
;;   \"Either complete the php code at point or call
;; `indent-for-tab-command' if no completion is available.  Relies
;; on the irb/completion Module used by readline when running irb
;; through a terminal.\"
;;   (interactive (list (let* ((curr (thing-at-point 'line))
;; 			    (completions (inf-php-completions curr)))
;; 		       (case (length completions)
;; 			 (0 nil)
;; 			 (1 (car completions))
;; 			 (t (completing-read \"possible completions: \" completions nil 'confirm-only curr))))))
;;   (if (not command)
;;       (call-interactively 'indent-for-tab-command)
;;     (move-beginning-of-line 1)
;;     (kill-line 1)
;;     (insert command)))

(eval-after-load 'php-mode
  '(add-hook 'php-mode-hook 'inf-php-keys))

(provide 'inf-php)
;;; inf-php.el ends here
"]) (inf-mongo . [(20131216 228) nil "Run a MongoDB shell process in a buffer" single ";;; Commentary:

;; inf-mongo.el provides a REPL buffer connected to a MongoDB shell
;; (mongo) subprocess.

;; Install

;; $ cd ~/.emacs.d/vendor
;; $ git clone git://github.com/tobiassvn/inf-mongo.git

;; In your emacs config:

;; (add-to-list 'load-path \"~/.emacs.d/vendor/inf-mongo\")
;; (require 'inf-mongo)

;; Usage

;; Run with `M-x inf-mongo'

"]) (indicators . [(20130217 1405) nil "Display the buffer relative location of line in the fringe." single ";;; Commentary:

;; See github readme at https://github.com/Fuco1/indicators.el

;; Known limitations:
;;
;; 1. you can't have more than one color on one \"physical line\".
;;    This is becuse fringes operate on \"per-line\" basis and it is
;;    only possible to set face for bitmap for the whole line.
;; 2. if you are at the end of file the indicators are displaied
;;    incorrectly. This is because it's impossible to set fringe
;;    bitmaps for lines past the end of file.
;;
;; Both of these are currently imposible to fix.

"]) (indent-guide . [(20131227 1854) nil "show vertical lines to guide indentation" single ";;; Commentary:

;; Require this script
;;
;;   (require 'indent-guide)
;;
;; and call command \"M-x indent-guide-mode\".

;; If you want to enable indent-guide-mode automatically,
;; call \"indent-guide-global-mode\" function.
;;
;;   (indent-guide-global-mode)

;; Column lines are propertized with \"indent-guide-face\". So you may
;; configure this face to make guides more pretty in your colorscheme.
;;
;;   (set-face-background 'indent-guide-face \"dimgray\")
;;
;; You may also change the character for guides.
;;
;;   (setq indent-guide-char \":\")

"]) (import-popwin . [(20130819 1929) ((popwin (0 6))) "popwin buffer near by import statements with popwin" single ";;; Commentary:

;; Inspired by http://shibayu36.hatenablog.com/entry/2013/01/03/223056

"]) (impatient-mode . [(20131231 1729) ((simple-httpd (1 4 0)) (htmlize (1 40))) "Serve buffers live over HTTP" tar ";;; Commentary:

;; impatient-mode is a minor mode that publishes the live buffer
;; through the local simple-httpd server under /imp/<buffer-name>. To
;; unpublish a buffer, toggle impatient-mode off.

;; Start the simple-httpd server (`httpd-start') and visit /imp/ on
;; the local server. There will be a listing of all the buffers that
;; currently have impatient-mode enabled. This is likely to be found
;; here:

;;   http://localhost:8080/imp/

;; Except for html-mode buffers, buffers will be prettied up with
;; htmlize before being sent to clients. This can be toggled at any
;; time with `imp-toggle-htmlize'.

;; Because html-mode buffers are sent raw, you can use impatient-mode
;; see your edits to an HTML document live! This is perhaps the
;; primary motivation of this mode.

;; To receive updates the browser issues a long poll on the client
;; waiting for the buffer to change -- server push. The response
;; happens in an `after-change-functions' hook. Buffers that do not
;; run these hooks will not be displayed live to clients.

"]) (imenu-anywhere . [(20131210 1130) nil "ido/helm imenu tag selection across all buffers with the same mode" single ";;; Commentary:
;;
;; `imenu-anywhere` command pops an IDO interface with all the imenu tags across
;; all buffers with the same mode as the current one. In a sense it is similar
;; to etag selection, but works only for the open buffers. This is often more
;; convenient as you don't have to explicitly build the etags table.
;;
;; To activate, just bind imenu-anywhere to a convenient key:
;;
;;    (global-set-key (kbd \"C-.\") 'imenu-anywhere)
;;
;; There is also `helm-imenu-anywhere` which is like imenu-anywhere but uses
;; helm (https://github.com/emacs-helm) interface instead of IDO. Helm library
;; is not loaded by imenu-anywhere.el and you have to install helm separately.


(require 'ido nil t)
(require 'imenu)

(defvar imenu-anywhere-use-ido t
  \"Use ido even when ido-mode is not enabled.\")
(defvar imenu-anywhere-delimiter-ido \"/\")
(defvar imenu-anywhere-delimiter-helm \" / \")

(defvar imenu-anywhere-cached-candidates nil
  \"An alist of flatten imenu tags from of the form (name . marker)\")
(make-variable-buffer-local 'imenu-anywhere-cached-candidates)
(defvar imenu-anywhere-cached-tick nil
  \"Value of buffer's tick counter at last imenu-anywere update.\")
(make-variable-buffer-local 'imenu-anywhere-cached-tick)


(defun imenu-anywhere-candidates (&optional modes force-update)
  \"Return an alist of imenu tags from buffers where imenu is meaningful.
If MODES is nil look only for buffers with the mode equal to the
mode of the current buffer.  If MODES is t return all the buffers
irrespective of mode.  Else MODES must be a _list_ of symbols of
the major modes of interest.\"
  (when (null modes)
    (setq modes (list major-mode)))
  (apply 'append
         (mapcar (lambda (buff)
                    (when (or (eq modes t) ; all of them
                              (member (buffer-local-value 'major-mode buff) modes))
                      (with-current-buffer buff
                        (let ((tick (buffer-modified-tick buff)))
                          (if (and (eq imenu-anywhere-cached-tick tick)
                                   (not force-update))
                              ;; return cached
                              imenu-anywhere-cached-candidates
                            ;; else update the indexes if in imenu buffer
                            (setq imenu-anywhere-cached-tick tick)
                            (setq imenu-anywhere-cached-candidates
                                  (imenu-anywhere-buffer-candidates)))))))
                 (buffer-list))))

(defun imenu-anywhere-buffer-candidates ()
  \"Return an alist of candidates in the current buffer.\"
  ;; avoid imenu throwing ugly messages
  (when (or (and imenu-prev-index-position-function
                 imenu-generic-expression)
            (not (eq imenu-create-index-function 'imenu-default-create-index-function)))
    ;; (ignore-errors
    (setq imenu--index-alist nil)
    (delete-if '(lambda (el) (or (null (car el))
                                 (equal (car el) \"*Rescan*\")))
               (sort (mapcan 'imenu-anywhere--candidates-from-entry
                             (imenu--make-index-alist t))
                     (lambda (a b) (< (length (car a)) (length (car b))))))))

(defvar imenu-anywhere--preprocess-entry 'imenu-anywhere--preprocess-entry-ido
  \"Holds a function to process each entry.
See the code for `imenu-anywhere--preprocess-entry-ido' and
`imenu-anywhere--preprocess-entry-helm'\")

(defun imenu-anywhere--preprocess-entry-ido (entry prefix)
  (setcar entry (concat (replace-regexp-in-string \"\\\\c-*$\" \"\" (car entry))
                        imenu-anywhere-delimiter-ido
                        prefix))
  entry)

(defun imenu-anywhere--preprocess-entry-helm (entry prefix)
  (setcar entry (concat prefix
                        imenu-anywhere-delimiter-helm
                        (car entry)))
  entry)


(defun imenu-anywhere--candidates-from-entry (entry)
  \"Create candidates from imenu ENTRY.\"
  (if (imenu--subalist-p entry)
      (mapcar (lambda (sub-entry)
                (funcall imenu-anywhere--preprocess-entry sub-entry (car entry)))
              (mapcan 'imenu-anywhere--candidates-from-entry (cdr entry)))
    (let ((pos (cdr entry)))
      (unless (markerp pos)
        (setq pos (copy-marker pos))) ;; assumes it is an integer, throw error if not?
      (list (cons (car entry) pos)))))


(defun imenu-anywhere--guess-default (index-alist str-at-pt)
  \"Guess a default choice from the given imenu list and string at point.\"
  (let ((name (regexp-quote str-at-pt)))
    (catch 'found
      (dolist (regex (list (concat \"\\\\`\" name \"\\\\'\")
                           (concat \"\\\\`\" name)
                           (concat name \"\\\\'\")
                           name))
        (dolist (item index-alist)
          (if (string-match regex (car item))
              (throw 'found (car item))))))))

(defun imenu-anywhere--goto-function (name position &optional rest)
  \"Function to be used as `imenu-default-goto-function'\"
  (let* ((is-overlay (overlayp position))
         (buff (or (and is-overlay (overlay-buffer position))
                   (marker-buffer position)))
         (position (or (and is-overlay (overlay-start position))
                       (marker-position position))))
    (switch-to-buffer buff)
    (if (or (< position (point-min))
            (> position (point-max)))
        ;; widen if outside narrowing
        (widen))
    (goto-char position)))

(defun imenu-anywhere--read (index-alist &optional guess)
  \"Read a choice from an INDEX-ALIST of imenu items via IDO.\"
  (let* ((str-at-pt (thing-at-point 'symbol))
         (default (and guess str-at-pt
                       (imenu-anywhere--guess-default index-alist str-at-pt)))
         (names (mapcar 'car index-alist))
         (name (ido-completing-read \"Imenu: \" names nil t nil nil default)))
    (assoc name index-alist)))

;;;###autoload
(defun imenu-anywhere (&optional modes)
  \"Switch to a buffer-local tag from Imenu via Ido.\"
  (interactive \"P\")
  (when (called-interactively-p 'interactive)
    (if modes
        (setq modes t)))
  (let (reset-ido)
    (when  (and (not ido-mode)
                (featurep 'ido )
                imenu-anywhere-use-ido)
      ;; ido initialization
      (ido-init-completion-maps)
      (add-hook 'minibuffer-setup-hook 'ido-minibuffer-setup)
      (add-hook 'choose-completion-string-functions 'ido-choose-completion-string)
      (setq reset-ido t))
    (unwind-protect
        (progn
          ;; set up ido completion list
          (let ((imenu-default-goto-function 'imenu-anywhere--goto-function)
                (index-alist (imenu-anywhere-candidates modes)))
            (if (null index-alist)
                (message \"No imenu tags\")
              (imenu (imenu-anywhere--read index-alist t)))))
      ;; ido initialization
      (when reset-ido
        (remove-hook 'minibuffer-setup-hook 'ido-minibuffer-setup)
        (remove-hook 'choose-completion-string-functions 'ido-choose-completion-string)
        ))))

;;;###autoload
(defalias 'ido-imenu-anywhere 'imenu-anywhere)

(defvar helm-source-imenu-anywhere
  '((name . \"imenu-anywere\")
    (candidates . helm-imenu-anywhere-candidates)
    (persistent-action . (lambda (elm)
                           (imenu-anywhere--goto-function \"\" elm)
                           (unless (fboundp 'semantic-imenu-tag-overlay)
                             (helm-match-line-color-current-line))))
    (persistent-help . \"Show this entry\")
    (action . (lambda (elm) (imenu-anywhere--goto-function \"\" elm))))
  \"See (info \\\"(emacs)Imenu\\\") and `imenu-anywhere'\")

(defun helm-imenu-anywhere-candidates ()
  (with-helm-current-buffer
    (let ((imenu-anywhere--preprocess-entry 'imenu-anywhere--preprocess-entry-helm))
      (imenu-anywhere-candidates))))

;;;###autoload
(defun helm-imenu-anywhere ()
  \"`helm' source for `imenu-anywhere'.
Sorting is in increasing order of length of imenu symbols. The
pyramidal view allows distinguishing different buffers.\"
  (interactive)
  (let ((imenu-default-goto-function 'imenu-anywhere--goto-function))
        ;; (imenu-default-goto-function
        ;;  (if (fboundp 'semantic-imenu-goto-function)
        ;;      'semantic-imenu-goto-function
        ;;    'imenu-default-goto-function)))
    (helm :sources 'helm-source-imenu-anywhere
          :default (thing-at-point 'symbol)
          :buffer \"*helm imenu-anywhere*\")))

(eval-after-load \"helm\"
  '(add-to-list 'helm-sources-using-default-as-input 'helm-source-imenu-anywhere))

(provide 'imenu-anywhere)

;;; imenu-anywhere.el ends here
"]) (imenu+ . [(20131226 1948) nil "Extensions to `imenu.el'." single ";;; Commentary:
;;
;; Extensions to `imenu.el'.
;;
;;   User options defined here:
;;
;;    `imenup-ignore-comments-flag' (Emacs 22+),
;;    `imenup-sort-ignores-case-flag'.
;;
;;   Commands defined here:
;;
;;    `imenup-add-defs-to-menubar',
;;    `imenup-toggle-case-sensitive-sorting',
;;    `imenup-toggle-ignoring-comments' (Emacs 22+),
;;    `imenup-toggle-sort',
;;
;;   Non-interactive functions defined here:
;;
;;    `imenup--sort-submenu', `imenup-invisible-p'.
;;
;;   Internal variables defined here:
;;
;;    `imenup-emacs-face-defn-regexp',
;;    `imenup-emacs-key-defn-regexp-1',
;;    `imenup-emacs-key-defn-regexp-2',
;;    `imenup-emacs-lisp-generic-expression',
;;    `imenup-emacs-option-defn-regexp', `imenup-last-sort-function',
;;    `imenup-lisp-fn-defn-regexp-1', `imenup-lisp-fn-defn-regexp-2',
;;    `imenup-lisp-macro-defn-regexp',
;;    `imenup-lisp-other-defn-regexp', `imenup-lisp-var-defn-regexp',
;;
;;
;;  ***** NOTE: The following functions and macro defined in `imenu.el'
;;              have been REDEFINED HERE:
;;
;;    `imenu--generic-function', `imenu--make-index-alist',
;;    `imenu--mouse-menu', `imenu--sort-by-name',
;;    `imenu--split-submenus', `imenu-progress-message',
;;    `imenu-update-menubar' (Emacs <22).
;;
;;
;;  ***** NOTE: The following variable defined in `imenu.el' has
;;              been REDEFINED HERE:
;;
;;  `imenu-sort-function'.
;;
;;  ***** NOTE: The following variable defined in `lisp-mode.el' has
;;              been REDEFINED HERE:
;;
;;  `lisp-imenu-generic-expression'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (image-dired+ . [(20130604 2309) nil "Image-dired extensions" single ";;; Commentary:

;; * Toggle the asynchronous image-dired feature
;;
;;  M-x image-diredx-async-mode

;; * Toggle the adjusting image in image-dired feature
;;
;;  M-x image-diredx-adjust-mode

"]) (image+ . [(20130221 820) nil "Image manupulation extensions for Emacs" single nil]) (igrep . [(20130824 1207) nil "An improved interface to `grep` and `find`" single ";;; Commentary:

;; The `igrep' command is like `grep' except that it takes three
;; required arguments (PROGRAM, REGEX, and FILES) and an optional
;; argument (OPTIONS) instead of just one argument (COMMAND).  The
;; analogous `egrep' and `fgrep' commands are also defined for
;; convenience.
;; 
;; The `igrep-find' command is like `igrep' except that it uses `find`
;; to recursively `grep` a directory.  The analogous `egrep-find' and
;; `fgrep-find' commands are also defined for convenience.
;; 
;; When called interactively, `igrep' and `igrep-find' (and their
;; analogues) provide defaults for the REGEX and FILES arguments based
;; on the current word and the visited file name (if the `igrep-regex-
;; default' and `igrep-files-default' options are set, respectively).
;; The `igrep-insert-default-key' option allows the default value to be
;; inserted into the minibuffer for editing; since Emacs 20 provides
;; that via the minibuffer history, it's only enabled for older
;; versions by default. Other options that control the user interface
;; are `igrep-insert-default-directory', `igrep-read-options', `igrep-
;; read-multiple-files', `igrep-verbose-prompts', `igrep-save-buffers',
;; and `igrep-menu-bar'.
;; 
;; Besides the basic `igrep-program' and `igrep-find-program' global
;; variables, other variables control the syntax of the `grep` and
;; `find` shell commands that are executed: `igrep-options', `igrep-
;; regex-option', `igrep-case-fold-search', `igrep-find-prune-clause',
;; `igrep-find-file-clause', and `igrep-find-use-xargs'.
;; 
;; The `igrep-use-zgrep' user option controls whether the corresponding
;; GNU (gzip) \"zPROGRAM\" script is used, to `grep` compressed files.
;; Special minibuffer history lists are maintained for the REGEX and
;; FILES arguments.
;; 
;; The `agrep' and `agrep-find' commands are interfaces to the
;; approximate `grep` utility, which is distributed with the `glimpse'
;; indexing and query tool (available from http://www.tgries.de/agrep/).
;; 
;; `grep' itself can be advised to provide the `igrep' interface when
;; it is invoked interactively (but still use the original argument
;; list when it is called from Emacs Lisp), via the `igrep-insinuate'
;; command.  `igrep-insinuate' also defines `grep-find' as an alias for
;; `igrep-find', `dired-do-grep' and `dired-do-grep-find' as aliases
;; for `dired-do-igrep' and `dired-do-igrep-find', and `Buffer-menu-
;; grep' as an alias for `Buffer-menu-igrep'.
;; 
;; When run interactively from Dired mode, the various `igrep' commands
;; provide defaults for the REGEX and FILES arguments that are based on
;; the visited directory (including any inserted subdirectories) and
;; the current file.  The alternative `dired-do-igrep' and `dired-do-
;; igrep-find' commands respect the `dired-do-*' command conventions: a
;; prefix argument is interpreted as the number of succeeding files to
;; `grep`, otherwise all the marked files are `grep`ed.
;; 
;; The `igrep-visited-files' command provides a simple way to `grep`
;; just those files that are being visited in buffers.  The `Buffer-
;; menu-igrep' command does the same thing, for buffers marked for
;; selection in Buffer Menu mode.

;; Installation:
;; 
;; 1. Put this file in a directory that is a member of load-path, and
;;    byte-compile it (e.g. with `M-x byte-compile-file') for better
;;    performance.  You can ignore any warnings about references to free
;;    variables and \"not known to be defined\" functions.
;; 2. Put these forms in default.el or ~/.emacs:
;;    (autoload 'igrep \"igrep\"
;;       \"*Run `grep` PROGRAM to match REGEX in FILES...\" t)
;;    (autoload 'igrep-find \"igrep\"
;;       \"*Run `grep` via `find`...\" t)
;;    (autoload 'igrep-visited-files \"igrep\"
;;       \"*Run `grep` ... on all visited files.\" t)
;;    (autoload 'dired-do-igrep \"igrep\"
;;       \"*Run `grep` on the marked (or next prefix ARG) files.\" t)
;;    (autoload 'dired-do-igrep-find \"igrep\"
;;       \"*Run `grep` via `find` on the marked (or next prefix ARG) directories.\" t)
;;    (autoload 'Buffer-menu-igrep \"igrep\"
;;      \"*Run `grep` on the files visited in buffers marked with '>'.\" t)
;;    (autoload 'igrep-insinuate \"igrep\"
;;      \"Define `grep' aliases for the corresponding `igrep' commands.\" t)
;; 2. a. For completeness, you can add these forms as well:
;;    (autoload 'grep \"igrep\"
;;       \"*Run `grep` PROGRAM to match REGEX in FILES...\" t)
;;    (autoload 'egrep \"igrep\"
;;       \"*Run `egrep`...\" t)
;;    (autoload 'fgrep \"igrep\"
;;       \"*Run `fgrep`...\" t)
;;    (autoload 'agrep \"igrep\"
;;       \"*Run `agrep`...\" t)
;;    (autoload 'grep-find \"igrep\"
;;       \"*Run `grep` via `find`...\" t)
;;    (autoload 'egrep-find \"igrep\"
;;       \"*Run `egrep` via `find`...\" t)
;;    (autoload 'fgrep-find \"igrep\"
;;       \"*Run `fgrep` via `find`...\" t)
;;    (autoload 'agrep-find \"igrep\"
;;       \"*Run `agrep` via `find`...\" t)
;; 3. If you are running Windows 95/NT, you should install findutils
;;    and grep from release 17.1 (or higher) of the Cygnus GNU-Win32
;;    distribution (http://www.cygnus.com/misc/gnu-win32/).

;; Usage:
;; 
;; These igrep commands accept 1, 2, or 3 `C-u' prefix arguments:
;; 	M-x igrep		M-x igrep-find
;; 	M-x  grep		M-x  grep-find	[after `M-x igrep-insinuate']
;; 	M-x egrep		M-x egrep-find
;; 	M-x fgrep		M-x fgrep-find
;; 	M-x agrep		M-x agrep-find
;; 
;; These igrep commands accept a single `C-u' prefix argument:
;; 	M-x igrep-visited-files
;; 	M-x Buffer-menu-igrep	[in the *Buffer List* buffer]
;; 
;; These igrep commands interpret a prefix argument like the Emacs
;; `dired-do-*' commands:
;; 	M-x dired-do-igrep	M-x dired-do-igrep-find
;; 	M-x  dired-do-grep	M-x  dired-do-grep-find	[after `M-x
;; 							 igrep-insinuate']
;; 
;; These Emacs commands can be used after any igrep command:
;; 	C-x ` (M-x next-error)
;; 	C-c C-c (M-x compile-goto-error)	[in the *igrep* buffer]

;; Customization examples:
;; 
;; To ignore case by default:
;; 	(setq igrep-options \"-i\")
;; or:
;; 	(setq igrep-case-fold-search t)
;; To search subdirectories by default:
;; 	(setq igrep-find t)
;; To search files with the GNU (gzip) zgrep script:
;; 	(setq igrep-use-zgrep t)
;; or define new igrep commands (this works for zegrep and zfgrep as well):
;; 	(igrep-define zgrep)		; M-x zgrep
;; 	(igrep-find-define zgrep)	; M-x zgrep-find
;; To search \"*.[ch]\" files by default in C mode:
;; 	(put 'igrep-files-default 'c-mode
;; 	     (lambda () \"*.[ch]\"))
;; To disable the default search regex and/or files pattern, except for
;; specific modes:
;; 	(setq igrep-regex-default 'ignore)
;; 	(setq igrep-files-default 'ignore)
;; To avoid exceeding some shells' limit on command argument length
;; (this only searches files in the current directory):
;; 	(setq igrep-find t
;; 	      igrep-find-prune-clause \"-type d \\\\! -name .\")

;; To do:
;; 1. Replace igrep-options with a table that maps igrep-program
;;    to the appropriate options, and/or support POSIX (egrep -> `grep -E`).
;; 2. Generalize support for the -prune find clause (e.g. -fstype nfs).
;; 3. Provide support for `glimpse`.

"]) (ignoramus . [(20131230 549) nil "Ignore backups, build files, et al." single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'dired-x)
;;     (require 'ignoramus)
;;
;;     (ignoramus-setup)    ; sets `vc-directory-exclusion-list',
;;                          ; `dired-omit-files', `ido-ignore-directories',
;;                          ; `completion-ignored-extensions', etc.
;;
;;     C-x C-j              ; backups and build files now omitted from dired
;;
;; Explanation
;;
;; Every library has its own method for defining uninteresting files
;; to ignore.  Ignoramus puts the listing of ignorable-file patterns
;; and the logic for applying those patterns together in one place.
;;
;; To use ignoramus, place the ignoramus.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'ignoramus)
;;     (ignoramus-setup)
;;
;; By default, `ignoramus-setup' will apply every action that it
;; knows about for ignoring files.  Currently these are
;;
;;     comint
;;     completions
;;     dired
;;     eshell
;;     grep
;;     ido
;;     nav
;;     pcomplete
;;     projectile
;;     shell
;;     speedbar
;;     vc
;;
;; You can specify a shorter list of actions as an argument
;;
;;     (ignoramus-setup '(pcomplete shell ido))
;;
;; or customize the value of `ignoramus-default-actions'.
;;
;; See Also
;;
;;     M-x customize-group RET ignoramus RET
;;
;; Notes
;;
;; Three functions are provided to be called from Lisp:
;;
;;     `ignoramus-boring-p'
;;     `ignoramus-register-datafile'
;;     `ignoramus-matches-datafile'
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     No external dependencies
;;
;; Bugs
;;
;;     The one-size-fits-all approach necessarily makes this library
;;     a blunt instrument.
;;
;;     Grep commands may become inconveniently long.
;;
;;     File names and directory names are conflated.
;;
;;     Works poorly on built-in completions (eg find-file).
;;
;;     Overwrites customizable variables from other libraries.
;;
;;     Hardcoded directory separator.
;;
;;     Different results may be obtained from the datafile
;;     functions depending on whether external libraries are
;;     loaded.
;;
;; TODO
;;
;;     Separate variables for directory names.
;;
;;     Complete eshell action.
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (iflipb . [(20130331 1108) nil "interactively flip between recently visited buffers" single ";;; Commentary:
;;
;; iflipb lets you flip between recently visited buffers in a way that
;; resembles what Alt-(Shift-)TAB does in Microsoft Windows and other graphical
;; window managers. iflipb treats the buffer list as a stack, and (by design)
;; it doesn't wrap around. This means that when you have flipped to the last
;; buffer and continue, you don't get to the first buffer again. This is a good
;; thing. (If you disagree and want wrap-around, set iflipb-wrap-around to
;; non-nil.)
;;
;;
;; OPERATION
;; =========
;;
;; iflipb provides two commands: iflipb-next-buffer and iflipb-previous-buffer.
;;
;; iflipb-next-buffer behaves like Alt-TAB: it switches to the previously used
;; buffer, just like \"C-x b RET\" (or C-M-l in XEmacs). However, another
;; consecutive call to iflipb-next-buffer switches to the next buffer in the
;; buffer list, and so on. When such a consecutive call is made, the
;; skipped-over buffer is not regarded as visited.
;;
;; While flipping, the names of the most recent buffers are displayed in the
;; minibuffer, and the currently visited buffer is surrounded by square
;; brackets and marked with a bold face.
;;
;; A key thing to notice here is that iflipb displays the buffer contents after
;; each step forward/backwards (in addition to displaying the buffer names),
;; unlike for instance the buffer switching model of ido-mode where only the
;; buffer names are displayed.
;;
;; iflipb-previous-buffer behaves like Alt-Shift-TAB: it walks backwards in the
;; buffer list.
;;
;; Here is an illustration of what happens in a couple of different scenarios:
;;
;;                    Minibuffer    Actual
;;                    display       buffer list
;; --------------------------------------------
;; Original:                        A B C D E
;; Forward flip:      A [B] C D E   B A C D E
;; Forward flip:      A B [C] D E   C A B D E
;; Forward flip:      A B C [D] E   D A B C E
;;
;; Original:                        A B C D E
;; Forward flip:      A [B] C D E   B A C D E
;; Forward flip:      A B [C] D E   C A B D E
;; Backward flip:     A [B] C D E   B A C D E
;;
;; Original:                        A B C D E
;; Forward flip:      A [B] C D E   B A C D E
;; Forward flip:      A B [C] D E   C A B D E
;; [Edit buffer C]:                 C A B D E
;; Forward flip:      C [A] B D E   A C B D E
;;
;; iflipb by default ignores buffers whose names start with an asterisk or
;; space. You can give a prefix argument to iflipb-next-buffer to make it flip
;; between more buffers. See the documentation of the variables
;; iflipb-ignore-buffers and iflipb-always-ignore-buffers for how to change
;; this.
;;
;;
;; INSTALLATION
;; ============
;;
;; To load iflipb, store iflipb.el in your Emacs load path and put
;;
;;   (require 'iflipb)
;;
;; in your .emacs file or equivalent.
;;
;; This file does not install any key bindings for the two commands. I
;; personally use M-h and M-H (i.e., M-S-h) since I don't use the standard
;; binding of M-h (mark-paragraph) and M-h is quick and easy to press. To
;; install iflipb with M-h and M-H as keyboard bindings, put something like
;; this in your .emacs:
;;
;;   (global-set-key (kbd \"M-h\") 'iflipb-next-buffer)
;;   (global-set-key (kbd \"M-H\") 'iflipb-previous-buffer)
;;
;; Another alternative is to use C-tab and C-S-tab:
;;
;;   (global-set-key (kbd \"<C-tab>\") 'iflipb-next-buffer)
;;   (global-set-key
;;    (if (featurep 'xemacs) (kbd \"<C-iso-left-tab>\") (kbd \"<C-S-iso-lefttab>\"))
;;     'iflipb-previous-buffer)
;;
;; Or perhaps use functions keys like F9 and F10:
;;
;;   (global-set-key (kbd \"<f10>\") 'iflipb-next-buffer)
;;   (global-set-key (kbd \"<f9>\")  'iflipb-previous-buffer)
;;
;;
;; ABOUT
;; =====
;;
;; iflipb was inspired by cycle-buffer.el
;; <http://kellyfelkins.org/pub/cycle-buffer.el>. cycle-buffer.el has some more
;; features, but doesn't quite behave like I want, so I wrote my own simple
;; replacement.
;;
;; Have fun!
;;
;; /Joel Rosdahl <joel@rosdahl.net>
;;

"]) (iedit . [(20131021 116) nil "Edit multiple regions in the same way simultaneously." tar ";;; Commentary:

;; This package is an Emacs minor mode and allows you to edit one occurrence of
;; some text in a buffer (possibly narrowed) or region, and simultaneously have
;; other occurrences edited in the same way.
;;
;; Normal scenario of iedit-mode is like:
;;
;; - Highlight certain contents - by press C-; (The default binding)
;;   All occurrences of a symbol, string in the buffer or a region may be
;;   highlighted corresponding to current mark, point and prefix argument.
;;   Refer to the document of `iedit-mode' for details.
;;
;; - Edit one of the occurrences
;;   The change is applied to other occurrences simultaneously.
;;
;; - Finish - by pressing C-; again
;;
;; You can also use Iedit mode as a quick way to temporarily show only the
;; buffer lines that match the current text being edited.  This gives you the
;; effect of a temporary `keep-lines' or `occur'.  To get this effect, hit C-'
;; when in Iedit mode - it toggles hiding non-matching lines.
;;
;; Renaming refactoring is convenient in Iedit mode
;;
;; - The symbol under point is selected as occurrence by default and only
;;   complete symbols are matched
;; - With digit prefix argument 0, only symbols in current function are matched
;; - Restricting symbols in current region can be done by pressing C-; again
;; - Last renaming refactoring is remembered and can be applied to other buffers
;;   later
;;
;; There are also some other facilities you may never think about.  Refer to the
;; document of function `iedit-mode' (C-h f iedit-mode RET) for more details.

;; The code was developed and fully tested on Gnu Emacs 24.0.93, partially
;; tested on Gnu Emacs 22. If you have any compatible problem, please let me
;; know.

"]) (idris-mode . [(20140114 2152) ((emacs (24))) "Major mode for editing Idris code" tar ";;; Commentary:

;; This is an Emacs mode for editing Idris code. It requires the latest
;; version of Idris, and some features may rely on the latest Git version of
;; Idris.

"]) (idomenu . [(20111122 1048) nil "imenu tag selection a la ido" single ";;; Commentary:
;;
;; This package provides the `idomenu' command for selecting an imenu tag using
;; ido completion.  The buffer needs to have support for imenu already enabled.
;;
;; Add something like the following to your .emacs:
;;
;; (autoload 'idomenu \"idomenu\" nil t)
;;
"]) (ido-vertical-mode . [(20131209 938) nil "Makes ido-mode display vertically." single ";;; Commentary:

;; Makes ido-mode display prospects vertically

"]) (ido-ubiquitous . [(20131009 1047) ((emacs (24 1))) "Use ido (nearly) everywhere." single ";;; Commentary:

;; If you use the excellent `ido-mode' for efficient completion of
;; file names and buffers, you might wonder if you can get ido-style
;; completion everywhere else too. Well, that's what this package
;; does! ido-ubiquitous is here to enable ido-style completion for
;; (almost) every function that uses the standard completion function
;; `completing-read'.

"]) (ido-sort-mtime . [(20131117 530) nil "Sort Ido's file list by modification time" single ";;; Commentary:

;; Display recently modified files at the beginning of Ido's file list.
;;
;; To activate after installing, add to ~/.emacs:
;;   (ido-sort-mtime-mode 1)
;;
;; To display TRAMP files before local ones, use:
;;   (setq ido-sort-mtime-tramp-files-at-end nil)
;; (Checking modification time for TRAMP files is not yet supported.)
;;
;; See also: M-x customize-group RET ido-sort-mtime RET

"]) (ido-select-window . [(20131220 1247) ((emacs (24 1))) "Select a window using ido and buffer names" single ";;; Commentary:
;;
;; A very simple alternative to the numerous packages that allow you
;; to easily switch between windows.  When you have more than two
;; windows in the current frame and you invoke ido-select-window
;; you'll be prompted in the mini-buffer via ido to select a window
;; based on its buffer name.
;;
"]) (ido-load-library . [(20131106 706) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Load-library alternative using ido-completing-read" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'ido-load-library)
;;     M-x ido-load-library RET
;;
;; Explanation
;;
;; Ido-load-library is an alternative to `load-library' which
;; uses `ido-completing-read' for completion against all
;; available libraries in your `load-path'.
;;
;; To use ido-load-library, place the ido-load-library.el file
;; somewhere Emacs can find it, and add the following to your
;; ~/.emacs file:
;;
;;     (require 'ido-load-library)
;;
;; The interactive command `ido-load-library' is provided, though
;; not bound to any key.  It can be executed via
;;
;;     M-x ido-load-library
;;
;; or bound via something like
;;
;;     (define-key global-map (kbd \"C-c l\") 'ido-load-library)
;;
;; or safely aliased to `load-library'
;;
;;     (defalias 'load-library 'ido-load-library)
;;
;; The interactive command `ido-load-library-find' is also
;; provided.  Like `ido-load-library', it searches your
;; `load-path', but instead of loading the selected library,
;; it visits the file in a buffer.
;;
;; See Also
;;
;;     M-x customize-group RET ido-load-library RET
;;     M-x customize-group RET ido RET
;;
;; Notes
;;
;;     Defines the variable `library-name-history' outside of the
;;     `ido-load-library-' namespace.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.3 and lower : no
;;
;;     Uses if present: persistent-soft.el (Recommended)
;;
;; Bugs
;;
;;     When invalidating the disk cache, `ido-load-library' only checks
;;     whether `load-path' has changed, not whether new files were added
;;     to existing paths.  Workarounds:
;;
;;         1. Install libraries using ELPA/package.el, in which case this
;;            assumption always works.
;;         2. Wait for the cache to expire (7 days).
;;         3. Give universal prefix argument to `ido-load-library'
;;            to force invalidation of the cache.
;;
;;     Should not remove -autoloads and -pkg library names unless there
;;     is another name found with the same base.
;;
;; TODO
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (ido-hacks . [(20130411 1859) nil "Put more IDO in your IDO" single ";;; Commentary:

;; Provides optimizations for IDO, and enables it in more places

"]) (ido-gnus . [(20130726 1010) ((gnus (5 13))) "Access gnus groups or servers using ido" single ";;; Commentary: 
;;
;; Bitcoin donations gratefully accepted: 16mhw12vvtzCwQyvvLAqCSBvf8i41CfKhK
;;

"]) (ido-complete-space-or-hyphen . [(20130228 208) nil "Complete SPACE or HYPHEN when type SPACE in ido" single ";;; Commentary:

;; The default behavior of ido SPACE key will try to insert SPACE if it makes
;; sence (a.k.a, the comman part of all matches contains SPACE). Howerver,
;; when ido is used to complete lisp functions or variables, like what smex
;; does, HYPHEN is used as separator. This extension for ido inserts SPACE or
;; HYPHEN whenever which one makes sence, just like what built-in M-x does.
;;
;; Example:
;;
;; (ido-completing-read \"test: \" '(\"ido-foo-bar\" \"ido-space\" \"ido-test\"))
;;
;;     | Key Sequence | Result |
;;     |--------------+--------|
;;     | i            | \"i\"    |
;;     | SPACE        | \"ido-\" |
;;
;; (ido-completing-read \"test: \" '(\"ido foo-bar\" \"ido space\" \"ido test\"))
;;
;;     | Key Sequence | Result |
;;     |--------------+--------|
;;     | i            | \"i\"    |
;;     | SPACE        | \"ido \" |
;;
;; (ido-completing-read \"test: \" '(\"ido-foo-bar\" \"ido-space\" \"idotest\"))
;;
;;     | Key Sequence | Result |
;;     |--------------+--------|
;;     | i            | \"i\"    |
;;     | SPACE        | \"ido\"  |
;;     | SPACE        | \"ido-\" |
;;
;; When HYPHEN can be inserted and SPACE cannot, insert HYPHEN when user enter SPACE.
;;
;; (ido-completing-read \"test: \" '(\"ido-foo-bar\" \"ido-space\" \"ido test\"))
;;
;;     | Key Sequence | Result                           |
;;     |--------------+----------------------------------+
;;     | i            | \"i\"                              |
;;     | SPACE        | \"ido\"                            |
;;     | SPACE        | \"ido\"  Completion popup is shown |
;;     | SPACE        | \"ido \"                           |
;;
;; If both HYPHEN and SPACE can be inserted, SPACE first brings the completion
;; popup window, if user types SPACE again, then SPACE itself is inserted.

"]) (ido-at-point . [(20131221 1344) ((emacs (24))) "ido-style completion-at-point" single ";;; Commentary:

;; This package is an alternative frontend for `completion-at-point'.
;; It replaces the standard completions buffer with ido prompt.
;; Press <M-tab> or <C-M-i> to complete a symbol at point.

;;; Installation:

;; (require 'ido-at-point) ; unless installed from a package
;; (ido-at-point-mode)

"]) (idle-require . [(20090715 1503) nil "load elisp libraries while Emacs is idle" single ";;; Commentary:
;;
;; Add the following to your .emacs file:
;; (require 'idle-require)
;; (setq idle-require-symbols '(cedet nxml-mode)) ;; <- Specify packages here.
;; (idle-require 'cedet) ;; <- Or like this.
;; (idle-require-mode 1) ;; starts loading
;;
;; As soon as Emacs goes idle for `idle-require-idle-delay' seconds,
;; `idle-require-mode' will start loading the files, symbols or functions in
;; `idle-require-symbols'.  If that is nil, all autoload functions will be
;; loaded, one at a time.
;;
;; Use `idle-require-load-break' to give your CPU a break between each load.
;; Otherwise, you might create 100% CPU load on your system.
;;
"]) (idle-highlight-mode . [(20120920 948) nil "highlight the word the point is on" single ";;; Commentary:

;; Based on some snippets by fledermaus from the #emacs channel.

;; M-x idle-highlight-mode sets an idle timer that highlights all
;; occurences in the buffer of the word under the point.

;; Enabling it in a hook is recommended. But you don't want it enabled
;; for all buffers, just programming ones.
;;
;; Example:
;;
;; (defun my-coding-hook ()
;;   (make-local-variable 'column-number-mode)
;;   (column-number-mode t)
;;   (if window-system (hl-line-mode t))
;;   (idle-highlight-mode t))
;;
;; (add-hook 'emacs-lisp-mode-hook 'my-coding-hook)
;; (add-hook 'ruby-mode-hook 'my-coding-hook)
;; (add-hook 'js2-mode-hook 'my-coding-hook)

"]) (identica-mode . [(20130204 1453) nil "Major mode API client for status.net open microblogging" tar ";;; Commentary:

;; Identica Mode is a major mode to check friends timeline, and update your
;; status on Emacs.

;; identica-mode.el is a major mode for Identica.  Based on the twittering mode
;; version 0.6 by Y.  Hayamizu and Tsuyoshi CHO found at
;; <http://hayamin.com/wiliki.cgi?twittering-mode-en&l=en>

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FORCouldn't findSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.	If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth floor,
;; Boston, MA 02110-1301, USA.

;; Requirements
;; if using Emacs22 or previous, you'll need json.el
;; get it from http://edward.oconnor.cx/2006/03/json.el
;; json.el is part of Emacs23
;; To use the OAuth support, you need oauth.el
;; Downloadable from http://github.com/psanford/emacs-oauth/

;; If using Oauth with Emacs earlier than 23.3 you'll also need w3m.

"]) (icomplete+ . [(20140112 616) nil "Extensions to `icomplete.el'." single ";;; Commentary:
;;
;;  Extensions to `icomplete.el'.
;;
;;  * Better display of candidates, including highlighting them and showing how many there are.
;;  * Shows key bindings for command candidates, optionally including menu bindings.
;;  * Does not bind keys for cycling in `icomplete-mode'.  Defines a separate mode for that, so you
;;    can use Icomplete with or without those key bindings.  (Emacs 24.4+)
;;  * Support for Icicles:
;;    . Respect current Icicles sort order, which you can cycle using `C-,'.
;;    . When you change direction cycling candidates, show the number of other cycle candidates.
;;
;;
;;  Macros defined here (but identical to those in Emacs 23):
;;
;;    `with-local-quit', `with-no-input'.
;;
;;  Commands define here:
;;
;;    `icompletep-cycling-mode'.
;;
;;  Faces defined here:
;;
;;    `icompletep-choices', `icompletep-determined',
;;    `icompletep-keys', `icompletep-nb-candidates'.
;;
;;  User options defined here:
;;
;;    `icompletep-exact-separator',
;;    `icompletep-include-menu-items-flag' (Emacs 23+),
;;    `icompletep-prospects-length' (Emacs < 23),
;;    `icomplete-show-key-bindings'.
;;
;;  Non-interactive functions defined here:
;;
;;    `icomplete-get-keys' (Emacs > 24.2),
;;    `icompletep-completion-all-sorted-completions',
;;    `icompletep-remove-if'.
;;
;;
;;  ***** NOTE: The following functions defined in `icomplete.el'
;;              have been REDEFINED HERE:
;;
;;    `icomplete-get-keys' (Emacs < 24.3) -
;;       1. Respect `icompletep-include-menu-items-flag'.
;;       2. Do not wrap with `<...>'.
;;       3. If string of keys would be too long then shorten it.
;;
;;    `icomplete-completions' -
;;       1. Prepend the total number of candidates.
;;       2. For file-name completion, respect `completion-ignored-extensions'.
;;       3. With Icicles, sort candidates using `icicle-reversible-sort' and show number of
;;          remaining cycle candidates.  You can cycle the sort order using `C-,'.
;;       4. Show candidates in a different face.
;;       5. Optionally show and highlight key bindings, truncating if too long.
;;
;;    `icomplete-exhibit' -
;;       1. Save match-data.
;;       2. Do not insert if input begins with `(' (e.g. `repeat-complex-command').
;;       3. Ensure that the insertion does not deactivate mark.
;;
;;
;;  This file should be loaded after loading the standard GNU file
;;  `icomplete.el'.  So, in your `~/.emacs' file, do this:
;;  (eval-after-load \"icomplete\" '(progn (require 'icomplete+)))
;;
;;  Usage notes:
;;
;;  * Starting with Emacs 23 you can get icompletion of things like
;;    file names also.  See variable (non-option)
;;    `icomplete-with-completion-tables'.  If you set it to the
;;    (undocumented) value `t' then icompletion is available anytime
;;    the completion COLLECTION parameter is a function, which
;;    includes file-name completion.
;;
;;  * Starting with Emacs 24 you can specify the kinds of completion
;;    you want by customizing option `completion-category-overrides'
;;    for file names, buffer names, bookmark names, and so on.
;;
;;  * Starting with Emacs 24.4, Icomplete mode automatically binds
;;    keys that are otherwise useful in the minibuffer (for Isearch,
;;    symbol completion, etc.) to its own keys for cycling among
;;    icompletion candidates.  This is a BAD idea - see Emacs bug
;;    #13602.  Icomplete+ fixes this by having a separate mode that
;;    binds Icomplete keys, making that optional.  This is analogous
;;    to the difference between `cua-selection-mode' and `cua-mode'.
;;
;;    So with Icomplete+, just turning on Icomplete mode does not
;;    co-opt those keys taking them away from you for use in the
;;    minibuffer.  If you really want to do that then turn on
;;    `icomplete-cycling-mode' in addition to `icomplete-mode'.  And
;;    in that case, consider also choosing different keys to bind in
;;    `icomplete-minibuffer-map' from those that are bound by default.
;;
;;  (The first two features above are not particular to Icomplete+ -
;;  they are available also for vanilla Icomplete.)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (icicles . [(20140115 354) nil "Minibuffer input completion and cycling." tar ";;; Commentary:
;;
;;  Minibuffer input completion and cycling of completion candidates.
;;
;;  Input completion takes as input a string and returns a name that
;;  contains the input string.  This library enables minibuffer
;;  cycling of completion candidates, and provides additional support
;;  for input completion.
;;
;;  Two kinds of completion are offered here, which are distinguished
;;  by how the input string is matched against the completed name:
;;
;;   - Prefix completion - The input string is a prefix of the
;;                         completed name.  This is the usual Emacs
;;                         completion.
;;
;;   - Apropos completion - The input string is a regular expression
;;                          that matches somewhere (anywhere) within
;;                          the completed name.  You can think of the
;;                          name as having been returned by `apropos'
;;                          (except it also works for file and buffer
;;                          names).
;;
;;  Files `icicles-doc1.el' and `icicles-doc2.el' contain the doc for
;;  Icicles, including how to install and use Icicles.  You can also
;;  read the Icicles doc, in formatted form, on the Emacs-Wiki Web
;;  site: http://www.emacswiki.org/Icicles.  Emacs Wiki also has a few
;;  addtional pages about Icicles.  In particular, if you are new to
;;  Emacs, as well as Icicles, see this page:
;;  http://www.emacswiki.org/EmacsNewbieWithIcicles.
;;
;;  See also: Library `lacarte.el', which lets you execute menu
;;  commands, cycling and completing them.  It is not part of Icicles,
;;  but it is greatly enhanced by Icicles.
 
;;(@> \"Index\")
;;
;;  Index
;;  -----
;;
;;  If you have library `linkd.el' and Emacs 22 or later, load
;;  `linkd.el' and turn on `linkd-mode' now.  It lets you easily
;;  navigate around the sections of this doc.  Linkd mode will
;;  highlight this Index, as well as the cross-references and section
;;  headings throughout this file.  You can get `linkd.el' here:
;;  http://dto.freeshell.org/notebook/Linkd.html.
;;
;;  (@> \"Things Defined in Icicles\")
;;  (@> \"Miscellaneous\")
 
;;(@* \"Things Defined in Icicles\")
;;
;;  Things Defined in Icicles
;;  -------------------------
;;
;;  Key bindings defined in Icicles: see (@> \"Key Bindings\"), below.
;;
;;  Macros defined in Icicles:
;;
;;    `icicle-buffer-bindings', `icicle-condition-case-no-debug',
;;    `icicle-define-add-to-alist-command',
;;    `icicle-define-bookmark-command',
;;    `icicle-define-bookmark-command-1',
;;    `icicle-define-bookmark-other-window-command',
;;    `icicle-define-command', `icicle-define-file-command',
;;    `icicle-define-search-bookmark-command',
;;    `icicle-define-sort-command', `icicle-file-bindings',
;;    `icicle-find-file-abs-no-search-action-1',
;;    `icicle-find-file-abs-of-content-action-1',
;;    `icicle-find-file-no-search-action-1',
;;    `icicle-find-file-of-content-action-1',
;;    `icicle-maybe-cached-action', `icicle-search-modes',
;;    `icicle-with-comments-hidden', `icicle-with-selected-window'.
;;
;;  Commands defined in Icicles -
;;
;;   Commands to be used mainly at top level:
;;
;;    `a', `any', `buffer', `clear-option',
;;    `cycle-icicle-expand-to-common-match',
;;    `cycle-icicle-image-file-thumbnail',
;;    `cycle-icicle-incremental-completion',
;;    `cycle-icicle-sort-order',
;;    `cycle-icicle-S-TAB-completion-method',
;;    `cycle-icicle-TAB-completion-method', `file',
;;    `icicle-add-buffer-candidate', `icicle-add-buffer-config',
;;    `icicle-add-entry-to-saved-completion-set',
;;    `icicle-add-file-to-fileset',
;;    `icicle-add/update-saved-completion-set', `icicle-anything',
;;    `icicle-apply' `icicle-apropos', `icicle-apropos-command',
;;    `icicle-apropos-function', `icicle-apropos-option',
;;    `icicle-apropos-options-of-type', `icicle-apropos-value',
;;    `icicle-apropos-variable',
;;    `icicle-apropos-vars-w-val-satisfying', `icicle-apropos-zippy',
;;    `icicle-bbdb-complete-mail', `icicle-bbdb-complete-name',
;;    `icicle-bookmark', `icicle-bookmark-a-file',
;;    `icicle-bookmark-all-tags',
;;    `icicle-bookmark-all-tags-other-window',
;;    `icicle-bookmark-all-tags-regexp',
;;    `icicle-bookmark-all-tags-regexp-other-window',
;;    `icicle-bookmark-autofile', `icicle-bookmark-autofile-all-tags',
;;    `icicle-bookmark-autofile-all-tags-other-window',
;;    `icicle-bookmark-autofile-all-tags-regexp',
;;    `icicle-bookmark-autofile-all-tags-regexp-other-window',
;;    `icicle-bookmark-autofile-other-window',
;;    `icicle-bookmark-autofile-some-tags',
;;    `icicle-bookmark-autofile-some-tags-other-window',
;;    `icicle-bookmark-autofile-some-tags-regexp',
;;    `icicle-bookmark-autofile-some-tags-regexp-other-window',
;;    `icicle-bookmark-autonamed',
;;    `icicle-bookmark-autonamed-other-window',
;;    `icicle-bookmark-autonamed-this-buffer',
;;    `icicle-bookmark-autonamed-this-buffer-other-window',
;;    `icicle-bookmark-bookmark-file',
;;    `icicle-bookmark-bookmark-list', `icicle-bookmark-cmd',
;;    `icicle-bookmark-desktop', `icicle-bookmark-dired',
;;    `icicle-bookmark-dired-other-window',
;;    `icicle-bookmarked-buffer-list', `icicle-bookmarked-file-list',
;;    `icicle-bookmark-file', `icicle-bookmark-file-all-tags',
;;    `icicle-bookmark-file-all-tags-other-window',
;;    `icicle-bookmark-file-all-tags-regexp',
;;    `icicle-bookmark-file-all-tags-regexp-other-window',
;;    `icicle-bookmark-file-other-window',
;;    `icicle-bookmark-file-some-tags',
;;    `icicle-bookmark-file-some-tags-other-window',
;;    `icicle-bookmark-file-some-tags-regexp',
;;    `icicle-bookmark-file-some-tags-regexp-other-window',
;;    `icicle-bookmark-file-this-dir',
;;    `icicle-bookmark-file-this-dir-other-window',
;;    `icicle-bookmark-file-this-dir-all-tags',
;;    `icicle-bookmark-file-this-dir-all-tags-other-window',
;;    `icicle-bookmark-file-this-dir-all-tags-regexp',
;;    `icicle-bookmark-file-this-dir-all-tags-regexp-other-window',
;;    `icicle-bookmark-file-this-dir-some-tags',
;;    `icicle-bookmark-file-this-dir-some-tags-other-window',
;;    `icicle-bookmark-file-this-dir-some-tags-regexp',
;;    `icicle-bookmark-file-this-dir-some-tags-regexp-other-window',
;;    `icicle-bookmark-gnus', `icicle-bookmark-gnus-other-window',
;;    `icicle-bookmark-image', `icicle-bookmark-image-other-window',
;;    `icicle-bookmark-info', `icicle-bookmark-info-other-window',
;;    `icicle-bookmark-jump', `icicle-bookmark-jump-other-window',
;;    `icicle-bookmark-list', `icicle-bookmark-local-file',
;;    `icicle-bookmark-local-file-other-window',
;;    `icicle-bookmark-man', `icicle-bookmark-man-other-window',
;;    `icicle-bookmark-non-file',
;;    `icicle-bookmark-non-file-other-window',
;;    `icicle-bookmark-other-window', `icicle-bookmark-region',
;;    `icicle-bookmark-region-other-window',
;;    `icicle-bookmark-remote-file',
;;    `icicle-bookmark-remote-file-other-window',
;;    `icicle-bookmark-save-marked-files',
;;    `icicle-bookmark-save-marked-files-as-project',
;;    `icicle-bookmark-save-marked-files-more',
;;    `icicle-bookmark-save-marked-files-persistently',
;;    `icicle-bookmark-save-marked-files-to-variable',
;;    `icicle-bookmark-set', `icicle-bookmark-some-tags',
;;    `icicle-bookmark-some-tags-other-window',
;;    `icicle-bookmark-some-tags-regexp',
;;    `icicle-bookmark-some-tags-regexp-other-window',
;;    `icicle-bookmark-specific-buffers',
;;    `icicle-bookmark-specific-buffers-other-window',
;;    `icicle-bookmark-specific-files',
;;    `icicle-bookmark-specific-files-other-window',
;;    `icicle-bookmark-temporary',
;;    `icicle-bookmark-temporary-other-window',
;;    `icicle-bookmark-this-buffer',
;;    `icicle-bookmark-this-buffer-other-window',
;;    `icicle-bookmark-url', `icicle-bookmark-url-other-window'
;;    `icicle-bookmark-w3m-other-window', `icicle-buffer',
;;    `icicle-buffer-config', `icicle-buffer-list',
;;    `icicle-buffer-no-search',
;;    `icicle-buffer-no-search-other-window',
;;    `icicle-buffer-other-window',
;;    `icicle-change-alternative-sort-order', `icicle-choose-faces',
;;    `icicle-choose-invisible-faces', `icicle-choose-visible-faces',
;;    `icicle-clear-history', `icicle-clear-current-history',
;;    `icicle-color-theme', `icicle-comint-command',
;;    `icicle-comint-dynamic-complete',
;;    `icicle-comint-dynamic-complete-filename',
;;    `icicle-comint-replace-by-expanded-filename',
;;    `icicle-comint-search', `icicle-command-abbrev',
;;    `icicle-compilation-search', `icicle-complete-keys',
;;    `icicle-complete-menu-bar', `icicle-complete-thesaurus-entry',
;;    `icicle-completing-yank', `icicle-customize-apropos',
;;    `icicle-customize-apropos-faces',
;;    `icicle-customize-apropos-groups',
;;    `icicle-customize-apropos-options',
;;    `icicle-customize-apropos-options-of-type',
;;    `icicle-customize-apropos-opts-w-val-satisfying',
;;    `icicle-customize-face', `icicle-customize-icicles-group',
;;    `icicle-custom-theme', `icicle-cycle-expand-to-common-match',
;;    `icicle-cycle-image-file-thumbnail',
;;    `icicle-cycle-incremental-completion',
;;    `icicle-dabbrev-completion', `icicle-delete-file',
;;    `icicle-delete-window', `icicle-delete-windows',
;;    `icicle-delete-windows-on', `icicle-describe-file',
;;    `icicle-describe-option-of-type', `icicle-describe-process',
;;    `icicle-describe-var-w-val-satisfying', `icicle-directory-list',
;;    `icicle-dired', `icicle-dired-chosen-files',
;;    `icicle-dired-chosen-files-other-window',
;;    `icicle-dired-insert-as-subdir', `icicle-dired-other-window',
;;    `icicle-dired-project', `icicle-dired-project-other-window',
;;    `icicle-dired-saved-file-candidates',
;;    `icicle-dired-saved-file-candidates-other-window',
;;    `icicle-dired-save-marked',
;;    `icicle-dired-save-marked-as-project',
;;    `icicle-dired-save-marked-more',
;;    `icicle-dired-save-marked-more-recursive',
;;    `icicle-dired-save-marked-persistently',
;;    `icicle-dired-save-marked-recursive',
;;    `icicle-dired-save-marked-to-cache-file-recursive',
;;    `icicle-dired-save-marked-to-fileset-recursive',
;;    `icicle-dired-save-marked-to-variable',
;;    `icicle-dired-save-marked-to-variable-recursive',
;;    `icicle-dired-smart-shell-command', `icicle-doc',
;;    `icicle-doremi-increment-variable+',
;;    `icicle-exchange-point-and-mark',
;;    `icicle-execute-extended-command',
;;    `icicle-execute-named-keyboard-macro', `icicle-face-list',
;;    `icicle-file', `icicle-file-list', `icicle-file-other-window',
;;    `icicle-find-file', `icicle-find-file-abs-no-search',
;;    `icicle-find-file-abs-no-search-other-window',
;;    `icicle-find-file-abs-of-content',
;;    `icicle-find-file-abs-of-content-other-window',
;;    `icicle-find-file-absolute',
;;    `icicle-find-file-absolute-other-window',
;;    `icicle-find-file-abs-read-only',
;;    `icicle-find-file-abs-read-only-other-window',
;;    `icicle-find-file-all-tags',
;;    `icicle-find-file-all-tags-other-window',
;;    `icicle-find-file-all-tags-regexp',
;;    `icicle-find-file-all-tags-regexp-other-window',
;;    `icicle-find-file-handle-bookmark',
;;    `icicle-find-file-handle-bookmark-other-window',
;;    `icicle-find-file-in-tags-table',
;;    `icicle-find-file-in-tags-table-other-window',
;;    `icicle-find-file-of-content',
;;    `icicle-find-file-of-content-other-window',
;;    `icicle-find-file-other-window', `icicle-find-file-read-only',
;;    `icicle-find-file-read-only-other-window',
;;    `icicle-find-file-some-tags',
;;    `icicle-find-file-some-tags-other-window',
;;    `icicle-find-file-some-tags-regexp',
;;    `icicle-find-file-some-tags-regexp-other-window',
;;    `icicle-find-file-tagged',
;;    `icicle-find-file-tagged-other-window', `icicle-find-first-tag',
;;    `icicle-find-first-tag-other-window', `icicle-find-tag',
;;    `icicle-font', `icicle-font-lock-keyword', `icicle-frame-bg',
;;    `icicle-frame-fg', `icicle-fundoc', `icicle-goto-global-marker',
;;    `icicle-goto-global-marker-or-pop-global-mark',
;;    `icicle-goto-marker', `icicle-goto-marker-or-set-mark-command',
;;    `icicle-grep-saved-file-candidates',
;;    `icicle-gud-gdb-complete-command', `icicle-handle-switch-frame',
;;    `icicle-hide-faces', `icicle-hide-only-faces',
;;    `icicle-hide/show-comments', `icicle-ido-like-mode',
;;    `icicle-imenu', `icicle-imenu-command',
;;    `icicle-imenu-command-full', `icicle-imenu-face',
;;    `icicle-imenu-face-full', `icicle-imenu-full',
;;    `icicle-imenu-key-explicit-map',
;;    `icicle-imenu-key-explicit-map-full',
;;    `icicle-imenu-key-implicit-map',
;;    `icicle-imenu-key-implicit-map-full', `icicle-imenu-macro',
;;    `icicle-imenu-macro-full',
;;    `icicle-imenu-non-interactive-function',
;;    `icicle-imenu-non-interactive-function-full',
;;    `icicle-imenu-user-option', `icicle-imenu-user-option-full',
;;    `icicle-imenu-variable', `icicle-imenu-variable-full',
;;    `icicle-increment-option', `icicle-increment-variable',
;;    `icicle-Info-goto-node', `icicle-Info-goto-node-no-search',
;;    `icicle-Info-goto-node-of-content', `icicle-Info-index',
;;    `icicle-Info-index-20', `icicle-Info-menu',
;;    `icicle-Info-menu-cmd', `icicle-Info-virtual-book',
;;    `icicle-insert-buffer', `icicle-insert-thesaurus-entry',
;;    `icicle-keyword-list', `icicle-kill-buffer', `icicle-kmacro',
;;    `icicle-lisp-complete-symbol', `icicle-locate',
;;    `icicle-locate-file', `icicle-locate-file-no-search',
;;    `icicle-locate-file-no-search-no-symlinks',
;;    `icicle-locate-file-no-search-no-symlinks-other-window',
;;    `icicle-locate-file-no-search-other-window',
;;    `icicle-locate-file-no-symlinks',
;;    `icicle-locate-file-no-symlinks-other-window',
;;    `icicle-locate-file-of-content',
;;    `icicle-locate-file-of-content-no-symlinks',
;;    `icicle-locate-file-of-content-no-symlinks-other-window',
;;    `icicle-locate-file-of-content-other-window',
;;    `icicle-locate-file-other-window', `icicle-locate-no-search',
;;    `icicle-locate-no-search-other-window',
;;    `icicle-locate-of-content',
;;    `icicle-locate-of-content-other-window',
;;    `icicle-locate-other-window',
;;    `icicle-minibuffer-default-add-dired-shell-commands',
;;    `icicle-minibuffer-help', `icicle-mode', `icy-mode',
;;    `icicle-next-font-lock-keywords',
;;    `icicle-next-font-lock-keywords-repeat',
;;    `icicle-next-visible-thing', `icicle-object-action',
;;    `icicle-occur', `icicle-occur-dired-marked',
;;    `icicle-occur-dired-marked-recursive',
;;    `icicle-ORIG-bbdb-complete-mail',
;;    `icicle-ORIG-bbdb-complete-name',
;;    `icicle-ORIG-comint-dynamic-complete',
;;    `icicle-ORIG-comint-dynamic-complete-filename',
;;    `icicle-ORIG-comint-replace-by-expanded-filename',
;;    `icicle-ORIG-dired-read-shell-command',
;;    `icicle-ORIG-ess-complete-object-name',
;;    `icicle-ORIG-gud-gdb-complete-command',
;;    `icicle-ORIG-read-buffer', `icicle-ORIG-read-file-name',
;;    `icicle-ORIG-read-shell-command',
;;    `icicle-other-window-or-frame', `icicle-pick-color-by-name',
;;    `icicle-plist', `icicle-pop-tag-mark',
;;    `icicle-pp-eval-expression', `icicle-previous-visible-thing',
;;    `icicle-read-buffer', `icicle-read-color',
;;    `icicle-read-color-wysiwyg', `icicle-read-kbd-macro',
;;    `icicle-recent-file', `icicle-recent-file-no-search',
;;    `icicle-recent-file-no-search-other-window',
;;    `icicle-recent-file-of-content',
;;    `icicle-recent-file-of-content-other-window',
;;    `icicle-recent-file-other-window',
;;    `icicle-recompute-shell-command-candidates',
;;    `icicle-regexp-list', `icicle-remove-buffer-candidate',
;;    `icicle-remove-buffer-config',
;;    `icicle-remove-entry-from-saved-completion-set',
;;    `icicle-remove-file-from-recentf-list',
;;    `icicle-remove-saved-completion-set',
;;    `icicle-repeat-complex-command', `icicle-reset-option-to-nil',
;;    `icicle-resolve-file-name', `icicle-save-string-to-variable',
;;    `icicle-search', `icicle-search-all-tags-bookmark',
;;    `icicle-search-all-tags-regexp-bookmark',
;;    `icicle-search-autofile-bookmark',
;;    `icicle-search-autonamed-bookmark', `icicle-search-bookmark',
;;    `icicle-search-bookmark-list-bookmark',
;;    `icicle-search-bookmark-list-marked',
;;    `icicle-search-bookmarks-together', `icicle-search-buffer',
;;    `icicle-search-buff-menu-marked', `icicle-search-char-property',
;;    `icicle-search-defs', `icicle-search-defs-full',
;;    `icicle-search-dired-bookmark', `icicle-search-dired-marked',
;;    `icicle-search-dired-marked-recursive', `icicle-search-file',
;;    `icicle-search-file-bookmark', `icicle-search-generic',
;;    `icicle-search-gnus-bookmark',
;;    `icicle-search-highlight-cleanup',
;;    `icicle-search-ibuffer-marked', `icicle-search-info-bookmark',
;;    `icicle-search-keywords', `icicle-search-lines',
;;    `icicle-search-local-file-bookmark',
;;    `icicle-search-man-bookmark', `icicle-search-non-file-bookmark',
;;    `icicle-search-overlay-property', `icicle-search-pages',
;;    `icicle-search-paragraphs', `icicle-search-region-bookmark',
;;    `icicle-search-remote-file-bookmark', `icicle-search-sentences',
;;    `icicle-search-some-tags-bookmark',
;;    `icicle-search-some-tags-regexp-bookmark',
;;    `icicle-search-specific-buffers-bookmark',
;;    `icicle-search-specific-files-bookmark',
;;    `icicle-search-temporary-bookmark',
;;    `icicle-search-text-property', `icicle-search-thing',
;;    `icicle-search-this-buffer-bookmark',
;;    `icicle-search-url-bookmark', `icicle-search-w3m-bookmark',
;;    `icicle-search-w-isearch-string', `icicle-search-word',
;;    `icicle-search-xml-element',
;;    `icicle-search-xml-element-text-node',
;;    `icicle-select-bookmarked-region', `icicle-select-frame',
;;    `icicle-select-frame-by-name', `icicle-select-text-at-point',
;;    `icicle-select-window', `icicle-select-window-by-name',
;;    `icicle-send-bug-report', `icicle-send-signal-to-process',
;;    `icicle-set-option-to-t',
;;    `icicle-set-S-TAB-methods-for-command',
;;    `icicle-set-TAB-methods-for-command', `icicle-sexp-list',
;;    `icicle-shell-command', `icicle-shell-command-on-region',
;;    `icicle-shell-dynamic-complete-command',
;;    `icicle-shell-dynamic-complete-environment-variable',
;;    `icicle-shell-dynamic-complete-filename', `icicle-show-faces',
;;    `icicle-show-only-faces', `icicle-skip-this-command',
;;    `icicle-string-list', `icicle-synonyms', `icicle-tag-a-file',
;;    `icicle-tags-search', `icicle-switch-to/from-minibuffer',
;;    `icicle-toggle-.', `icicle-toggle-~-for-home-dir',
;;    `icicle-toggle-alternative-sorting',
;;    `icicle-toggle-angle-brackets', `icicle-toggle-annotation',
;;    `icicle-toggle-case-sensitivity', `icicle-toggle-C-for-actions',
;;    `icicle-toggle-completions-format', `icicle-toggle-dot',
;;    `icicle-toggle-expand-directory',
;;    `icicle-toggle-expand-to-common-match',
;;    `icicle-toggle-hiding-common-match',
;;    `icicle-toggle-hiding-non-matching-lines',
;;    `icicle-toggle-highlight-all-current',
;;    `icicle-toggle-highlight-historical-candidates',
;;    `icicle-toggle-highlight-saved-candidates',
;;    `icicle-toggle-ignored-extensions',
;;    `icicle-toggle-ignored-space-prefix',
;;    `icicle-toggle-ignoring-comments',
;;    `icicle-toggle-include-cached-files',
;;    `icicle-toggle-include-recent-files',
;;    `icicle-toggle-literal-replacement',
;;    `icicle-toggle-network-drives-as-remote',
;;    `icicle-toggle-option', `icicle-toggle-proxy-candidates',
;;    `icicle-toggle-regexp-quote',
;;    `icicle-toggle-remote-file-testing',
;;    `icicle-toggle-search-cleanup',
;;    `icicle-toggle-search-complementing-domain',
;;    `icicle-toggle-search-replace-common-match',
;;    `icicle-toggle-search-replace-whole',
;;    `icicle-toggle-search-whole-word',
;;    `icicle-toggle-show-multi-completion', `icicle-toggle-sorting',
;;    `icicle-toggle-transforming',
;;    `icicle-toggle-WYSIWYG-Completions', `icicle-top-level',
;;    `icicle-untag-a-file', `icicle-vardoc',
;;    `icicle-visit-marked-file-of-content',
;;    `icicle-visit-marked-file-of-content-other-window',
;;    `icicle-visit-marked-file-of-content-recursive',
;;    `icicle-visit-marked-file-of-content-recursive-other-window',
;;    `icicle-where-is', `icicle-widget-file-complete',
;;    `icicle-yank-maybe-completing', `icicle-yank-pop-commands',
;;    `icicle-zap-to-char', `toggle', `synonyms',
;;    `toggle-icicle-~-for-home-dir',
;;    `toggle-icicle-alternative-sorting',
;;    `toggle-icicle-angle-brackets', `toggle-icicle-annotation',
;;    `toggle-icicle-case-sensitivity', `toggle-icicle-C-for-actions',
;;    `toggle-icicle-completions-format', `toggle-icicle-dot',
;;    `toggle-icicle-expand-directory',
;;    `toggle-icicle-expand-to-common-match',
;;    `toggle-icicle-hiding-common-match',
;;    `toggle-icicle-hiding-non-matching-lines',
;;    `toggle-icicle-highlight-all-current',
;;    `toggle-icicle-highlight-historical-candidates',
;;    `toggle-icicle-highlight-saved-candidates',
;;    `toggle-icicle-ignored-extensions',
;;    `toggle-icicle-ignored-space-prefix',
;;    `toggle-icicle-include-cached-files',
;;    `toggle-icicle-include-recent-files',
;;    `toggle-icicle-incremental-completion',
;;    `toggle-icicle-literal-replacement',
;;    `toggle-icicle-network-drives-as-remote',
;;    `toggle-icicle-proxy-candidates', `toggle-icicle-regexp-quote',
;;    `toggle-icicle-remote-file-testing',
;;    `toggle-icicle-search-cleanup',
;;    `toggle-icicle-search-complementing-domain',
;;    `toggle-icicle-search-replace-common-match',
;;    `toggle-icicle-search-replace-whole',
;;    `toggle-icicle-search-whole-word',
;;    `toggle-icicle-show-multi-completion', `toggle-icicle-sorting',
;;    `toggle-icicle-transforming',
;;    `toggle-icicle-WYSIWYG-Completions', `what-which-how'.
;;
;;   Commands to be used mainly in the minibuffer or `*Completions*':
;;
;;    `cycle-icicle-expand-to-common-match',
;;    `cycle-icicle-image-file-thumbnail',
;;    `icicle-abort-recursive-edit', `icicle-all-candidates-action',
;;    `icicle-all-candidates-alt-action',
;;    `icicle-all-candidates-list-action',
;;    `icicle-all-candidates-list-alt-action',
;;    `icicle-apropos-complete', `icicle-apropos-complete-and-exit',
;;    `icicle-apropos-complete-and-narrow',
;;    `icicle-apropos-complete-and-widen',
;;    `icicle-apropos-complete-no-display',
;;    `icicle-bookmark-autofile-narrow',
;;    `icicle-bookmark-autonamed-narrow',
;;    `icicle-bookmark-autonamed-this-buffer-narrow',
;;    `icicle-backward-char-magic',
;;    `icicle-backward-delete-char-untabify',
;;    `icicle-backward-kill-paragraph',
;;    `icicle-backward-kill-sentence', `icicle-backward-kill-sexp',
;;    `icicle-backward-kill-word', `icicle-beginning-of-line+',
;;    `icicle-bookmark-bookmark-file-narrow',
;;    `icicle-bookmark-bookmark-list-narrow',
;;    `icicle-bookmark-desktop-narrow',
;;    `icicle-bookmark-dired-narrow',`icicle-bookmark-file-narrow',
;;    `icicle-bookmark-file-this-dir-narrow',
;;    `icicle-bookmark-gnus-narrow', `icicle-bookmark-image-narrow',
;;    `icicle-bookmark-info-narrow',
;;    `icicle-bookmark-local-file-narrow',
;;    `icicle-bookmark-man-narrow', `icicle-bookmark-non-file-narrow',
;;    `icicle-bookmark-region-narrow',
;;    `icicle-bookmark-remote-file-narrow',
;;    `icicle-bookmark-specific-buffers-narrow',
;;    `icicle-bookmark-specific-files-narrow',
;;    `icicle-bookmark-temporary-narrow',
;;    `icicle-bookmark-this-buffer-narrow',
;;    `icicle-bookmark-url-narrow', `icicle-bookmark-w3m-narrow',
;;    `icicle-candidate-action', `icicle-candidate-alt-action',
;;    `icicle-candidate-read-fn-invoke',
;;    `icicle-candidate-set-complement',
;;    `icicle-candidate-set-define',
;;    `icicle-candidate-set-difference',
;;    `icicle-candidate-set-intersection',
;;    `icicle-candidate-set-retrieve',
;;    `icicle-candidate-set-retrieve-from-variable',
;;    `icicle-candidate-set-retrieve-more',
;;    `icicle-candidate-set-retrieve-persistent',
;;    `icicle-candidate-set-save', `icicle-candidate-set-save-more',
;;    `icicle-candidate-set-save-more-selected',
;;    `icicle-candidate-set-save-persistently',
;;    `icicle-candidate-set-save-selected',
;;    `icicle-candidate-set-save-to-variable',
;;    `icicle-candidate-set-swap', `icicle-candidate-set-truncate',
;;    `icicle-candidate-set-union', `icicle-cd-for-abs-files',
;;    `icicle-cd-for-loc-files',
;;    `icicle-change-alternative-sort-order',
;;    `icicle-change-history-variable', `icicle-change-sort-order',
;;    `icicle-change-sort-order', `icicle-choose-completion',
;;    `icicle-clear-current-history',
;;    `icicle-complete-current-candidate-as-input',
;;    `icicle-completing-read+insert',
;;    `icicle-Completions-mouse-3-menu',
;;    `icicle-cycle-expand-to-common-match',
;;    `icicle-cycle-image-file-thumbnail',
;;    `icicle-cycle-incremental-completion',
;;    `icicle-search-define-replacement',
;;    `icicle-delete-backward-char', `icicle-delete-candidate-object',
;;    `icicle-delete-char', `icicle-digit-argument',
;;    `icicle-dispatch-C-^', `icicle-dispatch-C-.',
;;    `icicle-dispatch-C-x.', `icicle-dispatch-M-_',
;;    `icicle-dispatch-M-comma', `icicle-dispatch-M-q',
;;    `icicle-doremi-candidate-width-factor+',
;;    `icicle-doremi-increment-max-candidates+',
;;    `icicle-doremi-increment-swank-prefix-length+',
;;    `icicle-doremi-increment-swank-timeout+',
;;    `icicle-doremi-inter-candidates-min-spaces',
;;    `icicle-doremi-zoom-Completions+', `icicle-end-of-line+',
;;    `icicle-erase-minibuffer',
;;    `icicle-erase-minibuffer-or-history-element',
;;    `icicle-exit-minibuffer', `icicle-file-all-tags-narrow',
;;    `icicle-file-all-tags-regexp-narrow',
;;    `icicle-file-some-tags-narrow',
;;    `icicle-file-some-tags-regexp-narrow',
;;    `icicle-forward-char-magic', `icicle-goto/kill-failed-input',
;;    `icicle-help-on-candidate',
;;    `icicle-help-on-next-apropos-candidate',
;;    `icicle-help-on-next-prefix-candidate',
;;    `icicle-help-on-previous-apropos-candidate',
;;    `icicle-help-on-previous-prefix-candidate',
;;    `icicle-help-string-non-completion', `icicle-history',
;;    `icicle-insert-completion', `icicle-insert-dot-command',
;;    `icicle-insert-history-element',
;;    `icicle-insert-key-description',
;;    `icicle-insert-list-join-string',
;;    `icicle-insert-newline-in-minibuffer',
;;    `icicle-insert-string-at-point',
;;    `icicle-insert-string-from-variable', `icicle-isearch-complete',
;;    `icicle-isearch-history-complete',
;;    `icicle-isearch-history-insert',
;;    `icicle-keep-only-buffer-cands-for-derived-mode',
;;    `icicle-keep-only-buffer-cands-for-mode',
;;    `icicle-keep-only-buffer-cands-for-visible',
;;    `icicle-keep-only-past-inputs', `icicle-kill-line',
;;    `icicle-kill-paragraph', `icicle-kill-region',
;;    `icicle-kill-region-wimpy', `icicle-kill-sentence',
;;    `icicle-kill-sexp', `icicle-kill-word', `icicle-make-directory',
;;    `icicle-minibuffer-complete-and-exit', `icicle-minibuffer-help',
;;    `icicle-mouse-candidate-action',
;;    `icicle-mouse-candidate-alt-action',
;;    `icicle-mouse-candidate-read-fn-invoke',
;;    `icicle-mouse-candidate-set-save',
;;    `icicle-mouse-candidate-set-save-more',
;;    `icicle-mouse-choose-completion',
;;    `icicle-mouse-help-on-candidate',
;;    `icicle-mouse-remove-candidate',
;;    `icicle-mouse-save/unsave-candidate',
;;    `icicle-mouse-save-then-kill', `icicle-mouse-yank-secondary',
;;    `icicle-move-to-next-completion',
;;    `icicle-move-to-previous-completion', `icicle-multi-inputs-act',
;;    `icicle-multi-inputs-save', `icicle-narrow-candidates',
;;    `icicle-narrow-candidates-with-predicate',
;;    `icicle-negative-argument', `icicle-next-apropos-candidate',
;;    `icicle-next-apropos-candidate-action',
;;    `icicle-next-apropos-candidate-alt-action',
;;    `icicle-next-candidate-per-mode',
;;    `icicle-next-candidate-per-mode-action',
;;    `icicle-next-candidate-per-mode-alt-action',
;;    `icicle-next-candidate-per-mode-help', `icicle-next-line',
;;    `icicle-next-prefix-candidate',
;;    `icicle-next-prefix-candidate-action',
;;    `icicle-next-prefix-candidate-alt-action',
;;    `icicle-next-S-TAB-completion-method',
;;    `icicle-ORIG-choose-completion', `icicle-ORIG-exit-minibuffer',
;;    `icicle-ORIG-minibuffer-complete-and-exit',
;;    `icicle-ORIG-mouse-choose-completion',
;;    `icicle-ORIG-next-history-element', `icicle-ORIG-sit-for',
;;    `icicle-ORIG-switch-to-completions', `icicle-other-history',
;;    `icicle-plus-saved-sort',
;;    `icicle-pp-eval-expression-in-minibuffer',
;;    `icicle-prefix-complete', `icicle-prefix-complete-no-display',
;;    `icicle-prefix-word-complete',
;;    `icicle-previous-apropos-candidate',
;;    `icicle-previous-apropos-candidate-action',
;;    `icicle-previous-apropos-candidate-alt-action',
;;    `icicle-previous-candidate-per-mode',
;;    `icicle-previous-candidate-per-mode-action',
;;    `icicle-previous-candidate-per-mode-alt-action',
;;    `icicle-previous-candidate-per-mode-help',
;;    `icicle-previous-line', `icicle-previous-prefix-candidate',
;;    `icicle-previous-prefix-candidate-action',
;;    `icicle-previous-prefix-candidate-alt-action',
;;    `icicle-read+insert-file-name',
;;    `icicle-recomplete-from-original-domain',
;;    `icicle-regexp-quote-input',
;;    `icicle-remove-buffer-cands-for-derived-mode',
;;    `icicle-remove-buffer-cands-for-mode',
;;    `icicle-remove-buffer-cands-for-visible',
;;    `icicle-remove-candidate', `icicle-remove-Completions-window',
;;    `icicle-resolve-file-name', `icicle-retrieve-last-input',
;;    `icicle-retrieve-next-input', `icicle-retrieve-previous-input',
;;    `icicle-reverse-sort-order', `icicle-roundup',
;;    `icicle-save-predicate-to-variable',
;;    `icicle-save/unsave-candidate',
;;    `icicle-scroll-Completions-backward',
;;    `icicle-scroll-Completions-forward', `icicle-scroll-backward',
;;    `icicle-scroll-forward', `icicle-search-define-replacement',
;;    `icicle-self-insert', `icicle-sort-alphabetical',
;;    `icicle-sort-by-abbrev-frequency',
;;    `icicle-sort-by-directories-first',
;;    `icicle-sort-by-directories-last', `icicle-sort-by-file-type.',
;;    `icicle-sort-by-last-file-access-time',
;;    `icicle-sort-by-last-file-modification-time',
;;    `icicle-sort-by-last-use', `icicle-sort-by-last-use-as-input',
;;    `icicle-sort-by-last-use\\,-dirs-first',
;;    `icicle-sort-by-previous-use-alphabetically',
;;    `icicle-sort-by-2nd-parts-alphabetically',
;;    `icicle-sort-case-insensitive',
;;    `icicle-sort-extra-candidates-first',
;;    `icicle-sort-proxy-candidates-first',
;;    `icicle-sort-special-candidates-first',
;;    `icicle-sort-special-candidates-first',
;;    `icicle-sort-turned-OFF', `icicle-switch-to-Completions-buf',
;;    `icicle-switch-to-completions',
;;    `icicle-switch-to/from-minibuffer', `icicle-toggle-.',
;;    `icicle-toggle-~-for-home-dir',
;;    `icicle-toggle-alternative-sorting',
;;    `icicle-toggle-angle-brackets',
;;    `icicle-toggle-case-sensitivity', `icicle-toggle-C-for-actions',
;;    `icicle-toggle-completions-format', `icicle-toggle-dot',
;;    `icicle-toggle-expand-to-common-match',
;;    `icicle-toggle-hiding-common-match',
;;    `icicle-toggle-hiding-non-matching-lines',
;;    `icicle-toggle-highlight-all-current',
;;    `icicle-toggle-highlight-historical-candidates',
;;    `icicle-toggle-highlight-saved-candidates',
;;    `icicle-toggle-ignored-extensions',
;;    `icicle-toggle-ignored-space-prefix',
;;    `icicle-toggle-ignoring-comments',
;;    `icicle-toggle-literal-replacement',
;;    `icicle-toggle-proxy-candidates', `icicle-toggle-regexp-quote',
;;    `icicle-toggle-search-cleanup',
;;    `icicle-toggle-search-complementing-domain',
;;    `icicle-toggle-search-replace-common-match',
;;    `icicle-toggle-search-replace-whole',
;;    `icicle-toggle-search-whole-word',
;;    `icicle-toggle-show-multi-completion', `icicle-toggle-sorting',
;;    `icicle-toggle-transforming', `icicle-top-level',
;;    `icicle-transpose-chars', `icicle-transpose-sexps',
;;    `icicle-transpose-words', `icicle-universal-argument',
;;    `icicle-universal-argument-minus',
;;    `icicle-universal-argument-more',
;;    `icicle-universal-argument-other-key', `icicle-up-directory',
;;    `icicle-use-interactive-command-history',
;;    `icicle-widen-candidates', `icicle-yank', `icicle-yank-pop',
;;    `icicle-yank-secondary', `toggle-icicle-.',
;;    `toggle-icicle-~-for-home-dir',
;;    `toggle-icicle-alternative-sorting',
;;    `toggle-icicle-angle-brackets',
;;    `toggle-icicle-case-sensitivity', `toggle-icicle-C-for-actions',
;;    `toggle-icicle-completions-format', `toggle-icicle-dot',
;;    `toggle-icicle-expand-to-common-match',
;;    `toggle-icicle-hiding-common-match',
;;    `toggle-icicle-hiding-non-matching-lines',
;;    `toggle-icicle-highlight-all-current',
;;    `toggle-icicle-highlight-historical-candidates',
;;    `toggle-icicle-ignored-extensions',
;;    `toggle-icicle-ignored-space-prefix',
;;    `toggle-icicle-incremental-completion',
;;    `toggle-icicle-literal-replacement',
;;    `toggle-icicle-network-drives-as-remote',
;;    `toggle-icicle-proxy-candidates', `toggle-icicle-regexp-quote',
;;    `toggle-icicle-search-cleanup',
;;    `toggle-icicle-search-complementing-domain',
;;    `toggle-icicle-search-replace-common-match',
;;    `toggle-icicle-search-replace-whole',
;;    `toggle-icicle-search-whole-word', `toggle-icicle-sorting',
;;    `toggle-icicle-transforming'.
;;
;;  Faces defined in Icicles (in Custom group `icicles'):
;;
;;    `icicle-annotation', `icicle-candidate-part',
;;    `icicle-common-match-highlight-Completions',
;;    `icicle-complete-input', `icicle-completion',
;;    `icicle-Completions-instruction-1',
;;    `icicle-Completions-instruction-2',
;;    `icicle-current-candidate-highlight', `icicle-extra-candidate',
;;    `icicle-historical-candidate',
;;    `icicle-historical-candidate-other',
;;    `icicle-input-completion-fail',
;;    `icicle-input-completion-fail-lax', `icicle-key-complete-menu',
;;    `icicle-key-complete-menu-local',
;;    `icicle-match-highlight-Completions',
;;    `icicle-match-highlight-minibuffer', `icicle-mode-line-help',
;;    `icicle-msg-emphasis', `icicle-multi-command-completion',
;;    `icicle-mustmatch-completion', `icicle-proxy-candidate',
;;    `icicle-saved-candidate', `icicle-search-context-level-1',
;;    `icicle-search-context-level-2',
;;    `icicle-search-context-level-3',
;;    `icicle-search-context-level-4',
;;    `icicle-search-context-level-5',
;;    `icicle-search-context-level-6',
;;    `icicle-search-context-level-7',
;;    `icicle-search-context-level-8', `icicle-search-current-input',
;;    `icicle-search-main-regexp-current',
;;    `icicle-search-main-regexp-others', `icicle-special-candidate',
;;    `icicle-whitespace-highlight', `minibuffer-prompt'.
;;
;;  Widgets defined in Icicles:
;;
;;    `icicle-color', `icicle-file', `icicle-ORIG-color',
;;    `icicle-ORIG-file'.
;;
;;  User options defined in Icicles:
;;
;;    `icicle-act-before-cycle-flag',
;;    `icicle-add-proxy-candidates-flag',
;;    `icicle-alternative-actions-alist',
;;    `icicle-alternative-sort-comparer',
;;    `icicle-anything-transform-candidates-flag',
;;    `icicle-apropos-complete-keys',
;;    `icicle-apropos-complete-no-display-keys',
;;    `icicle-apropos-cycle-next-keys',
;;    `icicle-apropos-cycle-next-action-keys',
;;    `icicle-apropos-cycle-next-alt-action-keys',
;;    `icicle-apropos-cycle-next-help-keys',
;;    `icicle-apropos-cycle-previous-keys',
;;    `icicle-apropos-cycle-previous-action-keys',
;;    `icicle-apropos-cycle-previous-alt-action-keys',
;;    `icicle-apropos-cycle-previous-help-keys',
;;    `icicle-bookmark-name-length-max',
;;    `icicle-bookmark-refresh-cache-flag',
;;    `icicle-buffer-candidate-key-bindings', `icicle-buffer-configs',
;;    `icicle-buffer-extras',
;;    `icicle-buffer-ignore-space-prefix-flag',
;;    `icicle-buffer-include-cached-files-nflag',
;;    `icicle-buffer-include-recent-files-nflag',
;;    `icicle-buffer-match-regexp', `icicle-buffer-no-match-regexp',
;;    `icicle-buffer-predicate', `icicle-buffer-prefix-arg-filtering',
;;    `icicle-buffer-require-match-flag'
;;    `icicle-buffer-skip-functions', `icicle-buffer-sort',
;;    `icicle-buffers-ido-like-flag', `icicle-candidate-action-keys',
;;    `icicle-candidate-help-keys', `icicle-candidate-width-factor',
;;    `icicle-change-region-background-flag',
;;    `icicle-change-sort-order-completion',
;;    `icicle-C-l-uses-completion-flag', `icicle-color-themes',
;;    `icicle-comint-dynamic-complete-replacements',
;;    `icicle-command-abbrev-alist',
;;    `icicle-command-abbrev-match-all-parts-flag',
;;    `icicle-command-abbrev-priority-flag',
;;    `icicle-complete-key-anyway-flag',
;;    `icicle-complete-keys-self-insert-ranges',
;;    `icicle-completing-read+insert-keys',
;;    `icicle-completion-history-max-length',
;;    `icicle-completion-key-bindings',
;;    `icicle-completion-list-key-bindings',
;;    `icicle-Completions-display-min-input-chars',
;;    `icicle-completions-format',
;;    `icicle-Completions-mouse-3-menu-entries',
;;    `icicle-Completions-max-columns',
;;    `icicle-Completions-text-scale-decrease',
;;    `icicle-Completions-window-max-height',
;;    `icicle-customize-save-flag',
;;    `icicle-customize-save-variable-function',
;;    `icicle-custom-themes', `icicle-custom-themes-accumulate-flag',
;;    `icicle-custom-themes-update-flag',
;;    `icicle-default-cycling-mode',
;;    `icicle-default-in-prompt-format-function',
;;    `icicle-default-thing-insertion', `icicle-default-value',
;;    `icicle-define-alias-commands-flag',
;;    `icicle-deletion-action-flag', `icicle-dot-show-regexp-flag',
;;    `icicle-dot-string', `icicle-expand-input-to-common-match',
;;    `icicle-expand-input-to-common-match-alt', `icicle-file-extras',
;;    `icicle-file-match-regexp', `icicle-file-no-match-regexp',
;;    `icicle-file-predicate', `icicle-file-require-match-flag',
;;    `icicle-file-skip-functions', `icicle-file-sort',
;;    `icicle-files-ido-like-flag',
;;    `icicle-filesets-as-saved-completion-sets-flag',
;;    `icicle-find-file-expand-directory-flag',
;;    `icicle-functions-to-redefine', `icicle-guess-commands-in-path',
;;    `icicle-help-in-mode-line-delay',
;;    `icicle-hide-common-match-in-Completions-flag',
;;    `icicle-hide-non-matching-lines-flag',
;;    `icicle-highlight-historical-candidates-flag',
;;    `icicle-highlight-input-completion-failure',
;;    `icicle-highlight-input-completion-failure-delay',
;;    `icicle-highlight-input-completion-failure-threshold',
;;    `icicle-highlight-input-initial-whitespace-flag',
;;    `icicle-highlight-lighter-flag',
;;    `icicle-highlight-saved-candidates-flag',
;;    `icicle-ignore-comments-flag', `icicle-ignored-directories',
;;    `icicle-image-files-in-Completions',
;;    `icicle-incremental-completion',
;;    `icicle-incremental-completion-delay',
;;    `icicle-incremental-completion-threshold',
;;    `icicle-Info-visited-max-candidates',
;;    `icicle-inhibit-advice-functions', `icicle-inhibit-ding-flag',
;;    `icicle-input-string', `icicle-inter-candidates-min-spaces',
;;    `icicle-isearch-complete-keys',
;;    `icicle-isearch-history-insert-keys',
;;    `icicle-keep-Completions-for-sole-dir-flag',
;;    `icicle-key-complete-keys',
;;    `icicle-key-complete-keys-for-minibuffer',
;;    `icicle-key-descriptions-use-<>-flag',
;;    `icicle-key-descriptions-use-angle-brackets-flag',
;;    `icicle-keymaps-for-key-completion',
;;    `icicle-kill-visited-buffers-flag', `icicle-kmacro-ring-max',
;;    `icicle-levenshtein-distance', `icicle-list-join-string',
;;    `icicle-list-nth-parts-join-string',
;;    `icicle-mark-position-in-candidate', `icicle-max-candidates',
;;    `icicle-menu-items-to-history-flag',
;;    `icicle-minibuffer-key-bindings',
;;    `icicle-minibuffer-setup-hook', `icicle-modal-cycle-down-keys',
;;    `icicle-modal-cycle-down-action-keys',
;;    `icicle-modal-cycle-down-alt-action-keys',
;;    `icicle-modal-cycle-down-help-keys',
;;    `icicle-modal-cycle-up-keys',
;;    `icicle-modal-cycle-up-action-keys',
;;    `icicle-modal-cycle-up-alt-action-keys',
;;    `icicle-modal-cycle-up-help-keys', `icicle-mode',
;;    `icicle-mode-hook', `icicle-move-Completions-frame',
;;    `icicle-network-drive-means-remote-flag',
;;    `icicle-no-match-hook', `icicle-option-type-prefix-arg-list',
;;    `icicle-point-position-in-candidate',
;;    `icicle-populate-interactive-history-flag',
;;    `icicle-pp-eval-expression-print-length',
;;    `icicle-pp-eval-expression-print-level',
;;    `icicle-prefix-complete-keys',
;;    `icicle-prefix-complete-no-display-keys',
;;    `icicle-prefix-cycle-next-keys',
;;    `icicle-prefix-cycle-next-action-keys',
;;    `icicle-prefix-cycle-next-alt-action-keys',
;;    `icicle-prefix-cycle-next-help-keys',
;;    `icicle-prefix-cycle-previous-keys',
;;    `icicle-prefix-cycle-previous-action-keys',
;;    `icicle-prefix-cycle-previous-alt-action-keys',
;;    `icicle-prefix-cycle-previous-help-keys',
;;    `icicle-quote-shell-file-name-flag',
;;    `icicle-read+insert-file-name-keys', `icicle-recenter',
;;    `icicle-regexp-quote-flag', `icicle-regexp-search-ring-max',
;;    `icicle-region-background', `icicle-require-match-flag',
;;    `icicle-saved-completion-sets', `icicle-search-cleanup-flag',
;;    `icicle-search-from-isearch-keys',
;;    `icicle-search-highlight-all-current-flag',
;;    `icicle-search-highlight-context-levels-flag',
;;    `icicle-search-highlight-threshold', `icicle-search-hook',
;;    `icicle-search-key-prefix',
;;    `icicle-search-replace-common-match-flag',
;;    `icicle-search-replace-literally-flag',
;;    `icicle-search-replace-whole-candidate-flag',
;;    `icicle-search-ring-max', `icicle-search-whole-word-flag',
;;    `icicle-shell-command-candidates-cache',
;;    `icicle-show-annotations-flag',
;;    `icicle-show-Completions-help-flag',
;;    `icicle-show-Completions-initially-flag',
;;    `icicle-show-multi-completion-flag', `icicle-sort-comparer',
;;    `icicle-sort-orders-alist', `icicle-special-candidate-regexp',
;;    `icicle-S-TAB-completion-methods-alist',
;;    `icicle-S-TAB-completion-methods-per-command',
;;    `icicle-swank-prefix-length', `icicle-swank-timeout',
;;    `icicle-TAB-completion-methods',
;;    `icicle-TAB-completion-methods-per-command',
;;    `icicle-TAB-shows-candidates-flag',
;;    `icicle-TAB/S-TAB-only-completes-flag',
;;    `icicle-test-for-remote-files-flag',
;;    `icicle-thing-at-point-functions',
;;    `icicle-top-level-key-bindings',
;;    `icicle-top-level-when-sole-completion-delay',
;;    `icicle-top-level-when-sole-completion-flag',
;;    `icicle-touche-pas-aux-menus-flag', `icicle-type-actions-alist',
;;    `icicle-unpropertize-completion-result-flag',
;;    `icicle-update-input-hook', `icicle-use-~-for-home-dir-flag',
;;    `icicle-use-C-for-actions-flag',
;;    `icicle-use-anything-candidates-flag',
;;    `icicle-use-candidates-only-once-flag',
;;    `icicle-widgets-to-redefine', `icicle-word-completion-keys',
;;    `icicle-WYSIWYG-Completions-flag', `icicle-yank-function',
;;    `icicle-zap-to-char-candidates'.
;;
;;  Non-interactive functions in Icicles:
;;
;;    `custom-variable-p', `icicle-2nd-part-string-less-p',
;;    `icicle-abbreviate-or-expand-file-name', `icicle-activate-mark',
;;    `icicle-add-key+cmd', `icicle-add-menu-item-to-cmd-history',
;;    `icicle-all-candidates-action-1', `icicle-all-completions',
;;    `icicle-all-exif-data', `icicle-alpha-p',
;;    `icicle-alt-act-fn-for-type', `icicle-any-candidates-p',
;;    `icicle-anychar-regexp', `icicle-anything-candidate-value',
;;    `icicle-apply-action', `icicle-apply-list-action',
;;    `icicle-apply-to-saved-candidate',
;;    `icicle-apropos-any-candidates-p',
;;    `icicle-apropos-any-file-name-candidates-p',
;;    `icicle-apropos-candidates', `icicle-apropos-complete-1',
;;    `icicle-apropos-complete-2', `icicle-apropos-opt-action',
;;    `icicle-autofile-action',
;;    `icicle-backward-delete-char-untabify-magic',
;;    `icicle-barf-if-outside-Completions',
;;    `icicle-barf-if-outside-Completions-and-minibuffer',
;;    `icicle-barf-if-outside-minibuffer', `icicle-binary-option-p',
;;    `icicle-bind-completion-keys',
;;    `icicle-bind-buffer-candidate-keys',
;;    `icicle-bind-custom-minibuffer-keys',
;;    `icicle-bind-file-candidate-keys', `icicle-bind-isearch-keys',
;;    `icicle-bind-key-completion-keys-for-map-var',
;;    `icicle-bind-key-completion-keys-in-keymaps-from',
;;    `icicle-bind-other-keymap-keys',
;;    `icicle-bind-top-level-commands',
;;    `icicle-bookmark-bind-narrow-commands',
;;    `icicle-bookmark-cleanup', `icicle-bookmark-cleanup-on-quit',
;;    `icicle-bookmark-delete-action', `icicle-bookmark-help-string',
;;    `icicle-bookmark-jump-1', `icicle-bounds-of-thing-at-point',
;;    `icicle-buffer-file/process-name-less-p',
;;    `icicle-buffer-apropos-complete-match',
;;    `icicle-buffer-cand-help', `icicle-buffer-multi-complete',
;;    `icicle-buffer-name-prompt', `icicle-buffer-smaller-p',
;;    `icicle-buffer-sort-*...*-last',
;;    `icicle-cached-files-without-buffers',
;;    `icicle-call-then-update-Completions',
;;    `icicle-cancel-Help-redirection', `icicle-candidate-action-1',
;;    `icicle-candidate-set-1', `icicle-candidate-set-retrieve-1',
;;    `icicle-candidate-set-save-1',
;;    `icicle-candidate-set-save-selected-1',
;;    `icicle-candidate-short-help',
;;    `icicle-case-insensitive-string-less-p',
;;    `icicle-case-string-less-p', `icicle-cdr-lessp',
;;    `icicle-char-cands-from-charlist',
;;    `icicle-char-properties-in-buffer',
;;    `icicle-char-properties-in-buffers',
;;    `icicle-choose-anything-candidate',
;;    `icicle-choose-candidate-of-type',
;;    `icicle-choose-completion-string', `icicle-clear-history-1',
;;    `icicle-clear-history-entry', `icicle-clear-lighter',
;;    `icicle-clear-minibuffer', `icicle-cmd2-after-load-bookmark+',
;;    `icicle-cmd2-after-load-hexrgb',
;;    `icicle-cmd2-after-load-highlight',
;;    `icicle-cmd2-after-load-palette',
;;    `icicle-cmd2-after-load-synonyms',
;;    `icicle-cmd2-after-load-wid-edit+', `icicle-color-blue-lessp',
;;    `icicle-color-completion-setup',
;;    `icicle-color-distance-hsv-lessp',
;;    `icicle-color-distance-rgb-lessp', `icicle-color-green-lessp',
;;    `icicle-color-help', `icicle-color-hsv-lessp',
;;    `icicle-color-hue-lessp', `icicle-color-name-w-bg',
;;    `icicle-color-red-lessp', `icicle-color-saturation-lessp',
;;    `icicle-color-value-lessp', `icicle-column-wise-cand-nb',
;;    `icicle-completion--embedded-envvar-table',
;;    `icicle-Completions-popup-choice',
;;    `icicle-Completions-popup-choice-1',
;;    `icicle-comint-completion-at-point',
;;    `icicle-comint-dynamic-complete-as-filename',
;;    `icicle-comint-dynamic-simple-complete',
;;    `icicle-comint-hook-fn',
;;    `icicle-comint-replace-orig-completion-fns',
;;    `icicle-comint-search-get-final-choice',
;;    `icicle-comint-search-get-minibuffer-input',
;;    `icicle-comint-search-send-input',
;;    `icicle-command-abbrev-action', `icicle-command-abbrev-command',
;;    `icicle-command-abbrev-matching-commands',
;;    `icicle-command-abbrev-record', `icicle-command-abbrev-regexp',
;;    `icicle-command-abbrev-save',
;;    `icicle-command-abbrev-used-more-p',
;;    `icicle-command-names-alphabetic-p',
;;    `icicle-compilation-hook-fn',
;;    `icicle-compilation-search-in-context-fn',
;;    `icicle-complete-again-update', `icicle-complete-keys-1',
;;    `icicle-complete-keys-action', `icicle-completing-p',
;;    `icicle-completing-read', , `icicle-completing-read-multiple',
;;    `icicle-completing-read-history',
;;    `icicle-completion-all-completions',
;;    `icicle-completion-setup-function',
;;    `icicle-completion-try-completion',
;;    `icicle-compute-shell-command-candidates',
;;    `icicle-convert-dots',
;;    `icicle-current-completion-in-Completions',
;;    `icicle-current-sort-functions', `icicle-current-sort-order',
;;    `icicle-current-TAB-method',
;;    `icicle-customize-apropos-opt-action', `icicle-customize-faces',
;;    `icicle-custom-type', `icicle-dabbrev--abbrev-at-point',
;;    `icicle-default-buffer-names', `icicle-defaults-at-point',
;;    `icicle-define-crm-completion-map', ,
;;    `icicle-define-cycling-keys', `icicle-defined-thing-p',
;;    `icicle-define-icicle-maps', `icicle-define-minibuffer-maps',
;;    `icicle-delete-alist-dups', `icicle-delete-backward-char-magic',
;;    `icicle-delete-candidate-object-1', `icicle-delete-char-magic',
;;    `icicle-delete-count', `icicle-delete-current-candidate-object',
;;    `icicle-delete-dups', `icicle-delete-file-or-directory',
;;    `icicle-delete-whitespace-from-string',
;;    `icicle-describe-opt-action',
;;    `icicle-describe-opt-of-type-complete', `icicle-ding',
;;    `icicle-dired-read-shell-command',
;;    `icicle-dir-prefix-wo-wildcards',
;;    `icicle-dirs-and-latest-use-first-p', `icicle-dirs-first-p',
;;    `icicle-dirs-last-p', `icicle-displayable-cand-from-saved-set',
;;    `icicle-display-cand-from-full-cand',
;;    `icicle-display-completion-list', `icicle-display-Completions',
;;    `icicle-display-candidates-in-Completions', `icicle-doc-action',
;;    `icicle-edmacro-parse-keys',
;;    `icicle-ensure-overriding-map-is-bound',
;;    `icicle-execute-extended-command-1',
;;    `icicle-expanded-common-match',
;;    `icicle-expanded-common-match-1', `icicle-expand-file-name-20',
;;    `icicle-expand-file-or-dir-name',
;;    `icicle-explicit-saved-completion-candidates', `icicle-explore',
;;    `icicle-extra-candidates-first-p',
;;    `icicle-face-valid-attribute-values', `icicle-file-directory-p',
;;    `icicle-file-name-apropos-candidates',
;;    `icicle-file-name-directory',
;;    `icicle-file-name-directory-w-default',
;;    `icicle-file-name-input-p', `icicle-file-name-nondirectory',
;;    `icicle-file-name-prefix-candidates',
;;    `icicle-file-of-content-apropos-complete-match',
;;    `icicle-file-readable-p', `icicle-file-remote-p',
;;    `icicle-file-type-less-p', `icicle-file-writable-p',
;;    `icicle-filesets-files-under', `icicle-files-within',
;;    `icicle-files-within-1', `icicle-filter-alist',
;;    `icicle-filter-wo-input', `icicle-find-file-abs-no-search-1',
;;    `icicle-find-file-abs-no-search-action',
;;    `icicle-find-file-abs-no-search-other-window-action',
;;    `icicle-find-file-abs-no-search-ro-action',
;;    `icicle-find-file-abs-no-search-ro-ow-action',
;;    `icicle-find-file-abs-of-content-1',
;;    `icicle-find-file-abs-of-content-action',
;;    `icicle-find-file-abs-of-content-other-window-action',
;;    `icicle-find-file-abs-of-content-ro-action',
;;    `icicle-find-file-abs-of-content-ro-ow-action',
;;    `icicle-find-file-no-search-action',
;;    `icicle-find-file-no-search-other-window-action',
;;    `icicle-find-file-of-content-ro-action',
;;    `icicle-find-file-of-content-ro-ow-action',
;;    `icicle-find-file-or-expand-dir',
;;    `icicle-find-first-tag-action',
;;    `icicle-find-first-tag-other-window-action',
;;    `icicle-find-tag-action', `icicle-find-tag-default-as-regexp',
;;    `icicle-find-tag-define-candidates',
;;    `icicle-find-tag-define-candidates-1',
;;    `icicle-find-tag-final-act', `icicle-find-tag-help',
;;    `icicle-find-tag-quit-or-error',
;;    `icicle-first-matching-candidate', `icicle-first-N',
;;    `icicle-fit-completions-window', `icicle-fix-default-directory',
;;    `icicle-flat-list', `icicle-fn-doc-minus-sig',
;;    `icicle-frame-name-history', `icicle-frames-on',
;;    `icicle-function-name-history', `icicle-fuzzy-candidates',
;;    `icicle-get-alist-candidate',
;;    `icicle-get-anything-actions-for-type',
;;    `icicle-get-anything-cached-candidates',
;;    `icicle-get-anything-candidates',
;;    `icicle-get-anything-candidates-of-type',
;;    `icicle-get-anything-default-actions-for-type',
;;    `icicle-get-anything-input-delay',
;;    `icicle-get-anything-req-pat-chars',
;;    `icicle-get-anything-types',
;;    `icicle-get-candidates-from-saved-set', `icicle-get-safe',
;;    `icicle-goto-marker-1', `icicle-goto-marker-1-action',
;;    `icicle-group-regexp', `icicle-dired-guess-shell-command',
;;    `icicle-handle-default-for-prompt',
;;    `icicle-help-on-candidate-symbol', `icicle-help-line-buffer',
;;    `icicle-help-line-file', `icicle-help-string-completion',
;;    `icicle-highlight-candidate-in-Completions',
;;    `icicle-highlight-complete-input',
;;    `icicle-highlight-initial-whitespace',
;;    `icicle-highlight-input-noncompletion',
;;    `icicle-highlight-input-noncompletion-rest',
;;    `icicle-highlight-lighter', `icicle-historical-alphabetic-p',
;;    `icicle-image-file-p', `icicle-imenu-command-p',
;;    `icicle-imenu-help', `icicle-imenu-in-buffer-p',
;;    `icicle-imenu-macro-p',
;;    `icicle-imenu-non-interactive-function-p',
;;    `icicle-increment-cand-nb+signal-end',
;;    `icicle-Info-apropos-complete-match',
;;    `icicle-Info-build-node-completions',
;;    `icicle-Info-build-node-completions-1',
;;    `icicle-Info-content-match', `icicle-Info-goto-node-1',
;;    `icicle-Info-goto-node-action', `icicle-Info-index-action',
;;    `icicle-Info-multi-read-node-name',
;;    `icicle-Info-node-is-indexed-by-topic',
;;    `icicle-Info-read-node-name',
;;    `icicle-Info-read-node-of-content',
;;    `icicle-input-from-minibuffer',
;;    `icicle-input-is-a-completion-p', `icicle-insert-candidates',
;;    `icicle-insert-candidate-action',
;;    `icicle-insert-cand-in-minibuffer',
;;    `icicle-insert-Completions-help-string', `icicle-insert-dot',
;;    `icicle-insert-for-yank', `icicle-insert-input',
;;    `icicle-insert-thesaurus-entry-cand-fn', `icicle-insert-thing',
;;    `icicle-invisible-face-p', `icicle-invisible-p',
;;    `icicle-isearch-complete-past-string', `icicle-join-nth-parts',
;;    `icicle-kbd', `icicle-keep/remove-buffer-cands-for-visible',
;;    `icicle-key-description', `icicle-keys+cmds-w-prefix',
;;    `icicle-kill-a-buffer',
;;    `icicle-kill-a-buffer-and-update-completions',
;;    `icicle-kmacro-action', `icicle-latest-access-first-p',
;;    `icicle-latest-input-first-p',
;;    `icicle-latest-modification-first-p',
;;    `icicle-latest-use-first-p', `icicle-levenshtein-match',
;;    `icicle-levenshtein-one-match', `icicle-levenshtein-one-regexp',
;;    `icicle-levenshtein-strict-match',
;;    `icicle-lisp-completion-at-point',
;;    `icicle-lisp-vanilla-completing-read', `icicle-list-position',
;;    `icicle-load-library', `icicle-local-keys-first-p',
;;    `icicle-locate-file-no-search-1',
;;    `icicle-locate-file-of-content-1', `icicle-looking-at-p',
;;    `icicle-looking-back-at-p', `icicle-major-mode-name-less-p',
;;    `icicle-make-bookmark-candidate', `icicle-make-char-candidate',
;;    `icicle-make-color-candidate', `icicle-make-face-candidate',
;;    `icicle-make-frame-alist', `icicle-make-plain-predicate',
;;    `icicle-make-window-alist', `icicle-map', `icicle-markers',
;;    `icicle-markers-to-readable', `icicle-marker+text',
;;    `icicle-maybe-multi-completion-completing-p',
;;    `icicle-maybe-sort-and-strip-candidates',
;;    `icicle-maybe-sort-maybe-truncate', `icicle-mctize-all',
;;    `icicle-mctized-display-candidate',
;;    `icicle-mctized-full-candidate',
;;    `icicle-merge-saved-order-less-p',
;;    `icicle-minibuffer-default-add-completions',
;;    `icicle-minibuf-input', `icicle-minibuf-input-sans-dir',
;;    `icicle-minibuffer-prompt-end', `icicle-minibuffer-setup',
;;    `icicle-mode-line-name-less-p',
;;    `icicle-mouse-candidate-action-1',
;;    `icicle-msg-maybe-in-minibuffer', `icicle-ms-windows-NET-USE',
;;    `icicle-multi-comp-apropos-complete-match', `icicle-multi-sort',
;;    `icicle-nb-Completions-cols',
;;    `icicle-nb-of-cand-at-Completions-pos',
;;    `icicle-nb-of-cand-in-Completions-horiz',
;;    `icicle-next-candidate',
;;    `icicle-next-single-char-property-change',
;;    `icicle-next-visible-thing-1', `icicle-next-visible-thing-2',
;;    `icicle-next-visible-thing-and-bounds',
;;    `icicle-non-whitespace-string-p',
;;    `icicle-not-basic-prefix-completion-p',
;;    `icicle-ORIG-choose-completion-string',
;;    `icicle-ORIG-completing-read',
;;    `icicle-ORIG-completing-read-multiple',
;;    `icicle-ORIG-completion-setup-function',
;;    `icicle-ORIG-dired-smart-shell-command',
;;    `icicle-ORIG-display-completion-list',
;;    `icicle-ORIG-face-valid-attribute-values',
;;    `icicle-ORIG-minibuffer-default-add-completions',
;;    `icicle-ORIG-read-char-by-name', `icicle-ORIG-read-color',
;;    `icicle-ORIG-read-face-name',
;;    `icicle-ORIG-read-from-minibuffer', `icicle-ORIG-read-number',
;;    `icicle-ORIG-read-string', `icicle-ORIG-shell-command',
;;    `icicle-ORIG-shell-command-on-region',
;;    `icicle-ORIG-widget-color-complete', `icicle-part-1-cdr-lessp',
;;    `icicle-part-1-lessp', `icicle-part-2-lessp',
;;    `icicle-part-3-lessp', `icicle-part-4-lessp',
;;    `icicle-part-N-lessp', `icicle-pick-color-by-name-action',
;;    `icicle-place-cursor', `icicle-place-overlay',
;;    `icicle-position', `icicle-prefix-any-candidates-p',
;;    `icicle-prefix-any-file-name-candidates-p',
;;    `icicle-prefix-candidates', `icicle-prefix-complete-1',
;;    `icicle-prefix-complete-2', `icicle-prefix-keys-first-p',
;;    `icicle-previous-single-char-property-change',
;;    `icicle-propertize', `icicle-proxy-candidate-first-p',
;;    `icicle-put-at-head', `icicle-put-whole-cand-prop',
;;    `icicle-quote-file-name-part-of-cmd',
;;    `icicle-raise-Completions-frame', `icicle-readable-to-markers',
;;    `icicle-read-args-w-val-satisfying', `icicle-read-char-by-name',
;;    `icicle-read-args-for-set-completion-methods',
;;    `icicle-read-char-exclusive',
;;    `icicle-read-char-maybe-completing', `icicle-read-face-name',
;;    `icicle-read-file-name', `icicle-read-from-minibuffer',
;;    `icicle-read-from-minibuf-nil-default', `icicle-read-number',
;;    `icicle-read-regexp', `icicle-read-shell-command',
;;    `icicle-read-shell-command-completing', `icicle-read-string',
;;    `icicle-read-string-completing',
;;    `icicle-read-var-value-satisfying', `icicle-rebind-global',
;;    `icicle-recent-file-of-content-1',
;;    `icicle-recent-files-without-buffers.',
;;    `icicle-recentf-make-menu-items', `icicle-recompute-candidates',
;;    `icicle-redefine-standard-functions',
;;    `icicle-redefine-standard-options',
;;    `icicle-redefine-std-completion-fns',
;;    `icicle-region-or-buffer-limits', `icicle-remap',
;;    `icicle-remove-buffer-candidate-action',
;;    `icicle-remove-buffer-config-action',
;;    `icicle-remove-cand-from-lists',
;;    `icicle-remove-candidate-display-others',
;;    `icicle-remove-color-duplicates', `icicle-remove-dots',
;;    `icicle-remove-duplicates', `icicle-remove-dups-if-extras',
;;    `icicle-remove-from-recentf-candidate-action',
;;    `icicle-remove-if', `icicle-remove-if-not',
;;    `icicle-remove-property', `icicle-replace-mct-cand-in-mct',
;;    `icicle-remove-saved-set-action', `icicle-repeat-command',
;;    `icicle-replace-input-w-parent-dir', `icicle-require-match-p',
;;    `icicle-restore-completion-keys',
;;    `icicle-restore-custom-minibuffer-keys',
;;    `icicle-restore-other-keymap-keys',
;;    `icicle-restore-region-face',
;;    `icicle-restore-standard-commands',
;;    `icicle-restore-standard-options',
;;    `icicle-restore-std-completion-fns',
;;    `icicle-retrieve-candidates-from-set', `icicle-reversible-sort',
;;    `icicle-row-wise-cand-nb',
;;    `icicle-run-icicle-post-command-hook',
;;    `icicle-run-icicle-pre-command-hook', `icicle-saved-fileset-p',
;;    `icicle-save-or-restore-input', `icicle-save-raw-input',
;;    `icicle-scatter', `icicle-scatter-match',
;;    `icicle-scroll-or-update-Completions', `icicle-search-action',
;;    `icicle-search-action-1', `icicle-search-bookmark-action',
;;    `icicle-search-char-property-scan',
;;    `icicle-search-char-prop-matches-p',
;;    `icicle-search-choose-buffers', `icicle-search-cleanup',
;;    `icicle-search-define-candidates',
;;    `icicle-search-define-candidates-1',
;;    `icicle-search-dired-marked-recursive-1',
;;    `icicle-search-file-found-p', `icicle-search-final-act',
;;    `icicle-search-help',
;;    `icicle-search-highlight-all-input-matches',
;;    `icicle-search-highlight-and-maybe-replace',
;;    `icicle-search-highlight-input-matches-here',
;;    `icicle-search-in-context-default-fn',
;;    `icicle-search-property-args',
;;    `icicle-search-property-default-match-fn',
;;    `icicle-search-quit-or-error',
;;    `icicle-search-read-context-regexp', `icicle-search-read-word',
;;    `icicle-search-regexp-scan',
;;    `icicle-search-replace-all-search-hits',
;;    `icicle-search-replace-cand-in-alist',
;;    `icicle-search-replace-cand-in-mct',
;;    `icicle-search-replace-fixed-case-p',
;;    `icicle-search-replace-match', `icicle-search-thing-args',
;;    `icicle-search-thing-scan', `icicle-search-where-arg',
;;    `icicle-select-minibuffer-contents' `icicle-set-calling-cmd',
;;    `icicle-set-completion-methods-for-command',
;;    `icicle-set-difference', `icicle-set-intersection',
;;    `icicle-set-union', `icicle-shell-command-on-file',
;;    `icicle-shell-dynamic-complete-as-command',
;;    `icicle-shell-dynamic-complete-as-environment-variable',
;;    `icicle-show-current-help-in-mode-line',
;;    `icicle-show-help-in-mode-line', `icicle-show-in-mode-line',
;;    `icicle-signum', `icicle-S-iso-lefttab-to-S-TAB',
;;    `icicle-sit-for', `icicle-some',
;;    `icicle-special-candidates-first-p', `icicle-split-input',
;;    `icicle-start-of-candidates-in-Completions',
;;    `icicle-string-match-p', `icicle-strip-ignored-files-and-sort',
;;    `icicle-subst-envvar-in-file-name',
;;    `icicle-substring-no-properties', `icicle-substrings-of-length',
;;    `icicle-substitute-keymap-vars', `icicle-successive-action',
;;    `icicle-take', `icicle-thing-at-point', `icicle-things-alist',
;;    `icicle-this-command-keys-prefix',
;;    `icicle-toggle-icicle-mode-twice', `icicle-top-level-prep',
;;    `icicle-transform-candidates',
;;    `icicle-transform-multi-completion',
;;    `icicle-transform-sole-candidate',
;;    `icicle-transpose-chars-magic', `icicle-try-switch-buffer',
;;    `icicle-ucs-names', `icicle-unbind-buffer-candidate-keys',
;;    `icicle-unbind-file-candidate-keys',
;;    `icicle-unbind-isearch-keys',
;;    `icicle-unbind-key-completion-keys-for-map-var',
;;    `icicle-unbind-key-completion-keys-in-keymaps-from',
;;    `icicle-undo-std-completion-faces',
;;    `icicle-unhighlight-lighter', `icicle-unmap',
;;    `icicle-unpropertize-completion',
;;    `icicle-unsorted-apropos-candidates',
;;    `icicle-unsorted-file-name-apropos-candidates',
;;    `icicle-unsorted-file-name-prefix-candidates',
;;    `icicle-unsorted-prefix-candidates',
;;    `icicle-universal-argument--mode' (Emacs 24.4+),
;;    `icicle-upcase', `icicle-upcase-if-ignore-case',
;;    `icicle-update-and-next', `icicle-update-f-l-keywords',
;;    `icicle-update-ignored-extensions-regexp',
;;    `icicle-value-satisfies-type-p', `icicle-var-inherits-type-p',
;;    `icicle-var-is-of-type-p', `icicle-var-matches-type-p',
;;    `icicle-var-val-satisfies-type-p',
;;    `icicle-visit-marked-file-of-content-1',
;;    `icicle-widget-color-complete', `icicle-widgetp',
;;    `icicle-WYSIWYG-font'.
;;
;;  Internal variables and constants defined in Icicles:
;;
;;    `icicle-abs-file-candidates', `icicle-acting-on-next/prev',
;;    `icicle-active-map', `icicle-advice-info-list',
;;    `icicle-all-candidates-action',
;;    `icicle-all-candidates-list-action-fn',
;;    `icicle-all-candidates-list-alt-action-fn',
;;    `icicle-allowed-sort-predicate', `icicle-anychar-regexp',
;;    `icicle-apply-nomsg', `icicle-apropos-complete-match-fn',
;;    `icicle-apropos-value-last-initial-cand-set',
;;    `icicle-bookmark-history', `icicle-bookmark-list-names-only-p',
;;    `icicle-bookmark-menu-map', `icicle-bookmark-types',
;;    `icicle-buffer-config-history', `icicle-buffer-name-input-p',
;;    `icicle-buffer-sort-first-time-p', `icicle-bufflist',
;;    `icicle-candidate-action-fn', `icicle-candidate-alt-action-fn',
;;    `icicle-candidate-entry-fn', `icicle-candidate-help-fn',
;;    `icicle-candidate-nb', `icicle-candidate-properties-alist',
;;    `icicle-candidates-alist', `icicle-cands-to-narrow',
;;    `icicle-char-property-value-history',
;;    `icicle-cmd-calling-for-completion', `icicle-cmd-reading-input',
;;    `icicle-color-history', `icicle-color-theme-history',
;;    `icicle-command-abbrev-history', `icicle-commands-for-abbrev',
;;    `icicle-common-match-string',
;;    `icicle-comp-base-is-default-dir-p',
;;    `icicle-complete-input-overlay', `icicle-complete-keys-alist',
;;    `icicle-completing-p',
;;    `icicle-completing-read+insert-candidates',
;;    `icicle-completion-candidates',
;;    `icicle-completion-prompt-overlay',
;;    `icicle-completion-set-history',
;;    `icicle-Completions-misc-submenu',
;;    `icicle-Completions-save/retrieve-submenu',
;;    `icicle-Completions-sets-submenu',
;;    `icicle-Completions-sorting-submenu',
;;    `icicle-Completions-this-candidate-submenu',
;;    `icicle-Completions-toggle-submenu',
;;    `icicle-compute-narrowing-regexp-p',
;;    `icicle-confirm-exit-commands',
;;    `icicle-crm-local-completion-map',
;;    `icicle-crm-local-must-match-map',
;;    `icicle-current-completion-candidate-overlay',
;;    `icicle-current-completion-mode',
;;    `icicle-current-font-lock-part', `icicle-current-input',
;;    `icicle-current-raw-input', `icicle-current-TAB-method',
;;    `icicle-custom-menu-map', `icicle-cycling-p',
;;    `icicle-default-thing-insertion-flipped-p',
;;    `icicle-delete-candidate-object', `icicle-describe-menu-map',
;;    `icicle-dictionary-history', `icicle-dir-candidate-can-exit-p',
;;    `icicle-dirs-done', `icicle-doc-last-initial-cand-set',
;;    `icicle-dot-string-internal', `icicle-edit-menu-map',
;;    `icicle-edit-update-p', `icicle-ess-use-ido',
;;    `icicle-exclude-default-proxies', `icicle-existing-bufs',
;;    `icicle-explore-final-choice',
;;    `icicle-explore-final-choice-full', `icicle-extra-candidates',
;;    `icicle-extra-candidates-dir-insert-p',
;;    `icicle-face-name-history', `icicle-fancy-candidates-p',
;;    `icicle-fancy-cands-internal-p', `icicle-file-menu-map',
;;    `icicle-file-name-completion-table', `icicle-files',
;;    `icicle-file-sort-first-time-p',
;;    `icicle-filtered-default-value',
;;    `icicle-find-file-abs-action-fn', `icicle-find-file-action-fn',
;;    `icicle-font-name-history', `icicle-frame-alist',
;;    `icicle-frame-name-history', `icicle-frames-menu-map',
;;    `icicle-full-cand-fn', `icicle-function-name-history',
;;    `icicle-fundoc-last-initial-cand-set',
;;    `icicle-general-help-string',
;;    `icicle-get-alist-candidate-function',
;;    `icicle-hist-cands-no-highlight', `icicle-hist-var',
;;    `icicle-ignored-extensions', `icicle-ignored-extensions-regexp',
;;    `icicle-incremental-completion-p', `icicle-info-buff',
;;    `icicle-Info-index-cache', `icicle-info-menu-map',
;;    `icicle-Info-only-rest-of-book-p', `icicle-Info-tag-table-posn',
;;    `icicle-info-window', `icicle-inhibit-sort-p',
;;    `icicle-inhibit-try-switch-buffer', `icicle-initial-value',
;;    `icicle-input-completion-fail-overlay', `icicle-input-fail-pos',
;;    `icicle-insert-string-at-pt-end',
;;    `icicle-insert-string-at-pt-start',
;;    `icicle-interactive-history', `icicle-key-prefix',
;;    `icicle-key-prefix-2', `icicle-key-prefix-description',
;;    `icicle-kill-history', `icicle-kmacro-alist',
;;    `icicle-kmacro-history',
;;    `icicle-last-apropos-complete-match-fn',
;;    `icicle-last-completion-candidate',
;;    `icicle-last-completion-command', `icicle-last-input',
;;    `icicle-last-sort-comparer', `icicle-last-top-level-command',
;;    `icicle-last-transform-function', `icicle-last-thing-type',
;;    `icicle-locate-file-no-symlinks-p',
;;    `icicle-locate-file-use-locate-p', `icicle-lighter-truncation',
;;    `icicle-list-use-nth-parts', `icicle-menu-map',
;;    `icicle-minibuf-act-on-all-menu-map',
;;    `icicle-minibuf-candidate-set-menu-map',
;;    `icicle-minibuf-edit-menu-map' `icicle-minibuffer-message-ok-p',
;;    `icicle-minibuf-history-menu-map',
;;    `icicle-minibuf-save-retrieve-menu-map',
;;    `icicle-minor-mode-map-entry', `icicle-mode-line-help',
;;    `icicle-mode-map', `icicle-ms-windows-drive-hash',
;;    `icicle-multi-completing-p', `icicle-multi-inputs-action-fn',
;;    `icicle-must-match-regexp', `icicle-must-not-match-regexp',
;;    `icicle-must-pass-after-match-predicate',
;;    `icicle-must-pass-predicate', `icicle-named-colors',
;;    `icicle-narrow-regexp',
;;    `icicle-nb-candidates-before-truncation',
;;    `icicle-nb-of-other-cycle-candidates',
;;    `icicle-new-bufs-to-keep', `icicle-new-bufs-to-kill',
;;    `icicle-new-last-cmd', `icicle-next-apropos-complete-cycles-p',
;;    `icicle-next-prefix-complete-cycles-p',
;;    `icicle-options-menu-map', `icicle-orig-buff',
;;    `icicle-ORIG-crm-local-completion-map',
;;    `icicle-ORIG-crm-local-must-match-map',
;;    `icicle-orig-extra-cands', `icicle-orig-font',
;;    `icicle-orig-font-lock-keywords', `icicle-orig-frame',
;;    `icicle-orig-menu-bar',
;;    `icicle-orig-minibuffer-completion-pred',
;;    `icicle-orig-minibuffer-completion-table',
;;    `icicle-orig-must-match-regexp',
;;    `icicle-orig-must-not-match-regexp',
;;    `icicle-orig-must-pass-after-match-pred',
;;    `icicle-orig-must-pass-predicate', `icicle-orig-pixelsize',
;;    `icicle-orig-pointsize', `icicle-orig-pt-explore',
;;    `icicle-orig-read-file-name-fn',
;;    `icicle-orig-show-initially-flag',
;;    `icicle-orig-sort-orders-alist', `icicle-orig-window',
;;    `icicle-other-window', `icicle-path-variables',
;;    `icicle-plist-last-initial-cand-set',
;;    `icicle-pre-minibuffer-buffer', `icicle-post-command-hook',
;;    `icicle-pre-command-hook', `icicle-predicate-types-alist',
;;    `icicle-previous-raw-file-name-inputs',
;;    `icicle-previous-raw-non-file-name-inputs',
;;    `icicle-progressive-completing-p', `icicle-prompt',
;;    `icicle-proxy-candidate-regexp', `icicle-proxy-candidates',
;;    `icicle-read-expression-map', `icicle-read-char-history',
;;    `icicle-remove-icicles-props-p', `icicle-re-no-dot',
;;    `icicle-require-match-p', `icicle-reverse-multi-sort-p',
;;    `icicle-reverse-sort-p', `icicle-saved-candidate-overlays',
;;    `icicle-saved-candidates-variables-obarray',
;;    `icicle-saved-completion-candidate',
;;    `icicle-saved-completion-candidates',
;;    `icicle-saved-completion-candidates-internal',
;;    `icicle-saved-ignored-extensions',
;;    `icicle-saved-kmacro-ring-max', `icicle-saved-proxy-candidates',
;;    `icicle-saved-regexp-search-ring-max',
;;    `icicle-saved-region-background',
;;    `icicle-saved-search-ring-max',
;;    `icicle-scroll-Completions-reverse-p', `icicle-search-command',
;;    `icicle-search-complement-domain-p',
;;    `icicle-search-context-level', `icicle-search-context-regexp',
;;    `icicle-search-current-overlay', `icicle-search-final-choice',
;;    `icicle-search-history', `icicle-search-in-context-fn',
;;    `icicle-searching-p', `icicle-search-regexp',
;;    `icicle-search-level-overlays', `icicle-search-map',
;;    `icicle-search-modes', `icicle-search-menu-map',
;;    `icicle-search-tags-menu-map', `icicle-search-overlays',
;;    `icicle-search-refined-overlays', `icicle-search-replacement',
;;    `icicle-search-replacement-history',
;;    `icicle-successive-grab-count',
;;    `icicle-text-property-value-history',
;;    `icicle-thing-at-pt-fns-pointer', `icicle-this-cmd-keys',
;;    `icicle-transform-before-sort-p', `icicle-transform-function',
;;    `icicle-toggle-transforming-message',
;;    `icicle-universal-argument-map',
;;    `icicle-vardoc-last-initial-cand-set',
;;    `icicle-variable-name-history', `icicle-vmfoc-other-win-p',
;;    `icicle-vmfoc-recursive-p',
;;    `icicle-whole-candidate-as-text-prop-p',
;;    `lacarte-menu-items-alist'.
;;
;;  Emacs functions defined in Icicles for older Emacs versions:
;;
;;    `select-frame-set-input-focus'.
;;
;;  Widgets (customization types) defined in Icicles:
;;
;;    `icicle-key-definition'.
;;
;;
;;  ***** NOTE: These EMACS PRIMITIVES have been REDEFINED in Icicles:
;;
;;  `completing-read'              - (See below and doc string.)
;;  `display-completion-list'      - (See below and doc string.)
;;  `exit-minibuffer'              - Remove *Completion* window.
;;  `minibuffer-complete-and-exit' - Remove *Completion* window.
;;  `read-file-name'               - (See below and doc string.)
;;  `read-from-minibuffer'         - (See below and doc string.)
;;  `read-string'                  - (See below and doc string.)
;;
;;
;;  ***** NOTE: The following functions defined in `dabbrev.el' have
;;              been REDEFINED in Icicles:
;;
;;  `dabbrev-completion' - Use Icicles completion when you repeat
;;                         (`C-M-/').
;;
;;
;;  ***** NOTE: The following functions defined in `lisp.el' have
;;              been REDEFINED in Icicles:
;;
;;  `lisp-complete-symbol' - Selects `*Completions*' window even if on
;;                           another frame.
;;
;;
;;  ***** NOTE: The following functions defined in `mouse.el' have
;;              been REDEFINED in Icicles:
;;
;;  `mouse-choose-completion' - Return the number of the completion.
;;
;;
;;  ***** NOTE: The following functions defined in `simple.el' have
;;              been REDEFINED in Icicles:
;;
;;  `choose-completion-string' -
;;     Don't exit minibuffer after `lisp-complete-symbol' completion.
;;  `completion-setup-function' - 1. Put faces on inserted string(s).
;;                                2. Help on help.
;;  `switch-to-completions' - Always selects `*Completions*' window.
;;
;;  `next-history-element' (advised only) -
;;     Depending on `icicle-default-value', select minibuffer
;;     contents.
;;
;;  `repeat-complex-command' - Use `completing-read' to read command.
;;
;;  For descriptions of changes to this file, see `icicles-chg.el'.
;;
;;  ******************
;;  NOTE: Whenever you update Icicles (i.e., download new versions of
;;  Icicles source files), I recommend that you do the following:
;;
;;      1. Delete all existing byte-compiled Icicles files
;;         (icicles*.elc).
;;      2. Load Icicles (`load-library' or `require').
;;      3. Byte-compile the source files.
;;
;;  In particular, always load `icicles-mac.el' (not
;;  `icicles-mac.elc') before you byte-compile new versions of the
;;  files, in case there have been any changes to Lisp macros (in
;;  `icicles-mac.el').
;;  ******************

 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or (at
;; your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (ibuffer-vc . [(20130924 608) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single ";;; Commentary:
;;
;; Adds functionality to ibuffer for grouping buffers by their parent
;; vc root directory, and for displaying and/or sorting by the vc
;; status of listed files.
;;
"]) (ibuffer-git . [(20110508 31) nil "show git status in ibuffer column" single ";;; Commentary:

;; This package adds git integration to Ibuffer.  Two columns are
;; defined, git-status and git-status-mini.
;;
;; To actually make these columns show up, you need to customize
;; `ibuffer-formats'.  The symbol `git-status-mini' can be inserted
;; where you want it, and `git-status' should be inserted with
;; something as something like `(git-status 8 8 :left)', where 8 is
;; the number you picked for `ibuffer-git-column-length'.

"]) (iasm-mode . [(20131004 1644) nil "interactive assembly major mode." tar ";;; Commentary:

;; Inspired by Justine Tunney's disaster.el (http://github.com/jart/disaster\342\200\216).

;; iasm provides a simple interactive interface objdump and ldd which
;; facilitates assembly exploration. It also provides tools to speed up the
;; edit-compile-disasm loop.

;; This mode currently only supports Linux because it relies rather heavily on
;; objdump and ldd. It also hasn't been tested for other CPU architectures or
;; other unixes so expect some of the regexes to spaz out in colourful ways.

;; Note that this is my first foray into elisp so monstrosities abound. Go forth
;; at your own peril. If you wish to slay the beasts that lurk within or simply
;; add a few functionalities, contributions are more then welcome. See the todo
;; section for ideas.


;;; Installation:

;; Make sure to place `iasm-mode.el` somewhere in the load-path and add the
;; following lines to your `.emacs` to enable iasm:

;;     (require 'iasm-mode)

;;     (global-set-key (kbd \"C-c C-d\") 'iasm-disasm)
;;     (global-set-key (kbd \"C-c C-l\") 'iasm-ldd)

;;     (add-hook 'c-mode-common-hook
;;               (lambda ()
;;                (local-set-key (kbd \"C-c d\") 'iasm-goto-disasm-buffer)
;;                (local-set-key (kbd \"C-c l\") 'iasm-disasm-link-buffer)))


"]) (hyde . [(20140108 950) nil "Major mode to help create and manage Jekyll blogs" tar nil]) (hy-mode . [(20140112 1021) nil "Major mode for Hy code" single ";;; Commentary:

;; Provides font-lock, indentation, and navigation for the Hy
;; language. (http://hylang.org)

(defgroup hy-mode nil
  \"A mode for Hy\"
  :prefix \"hy-mode-\"
  :group 'applications)

(defcustom hy-mode-inferior-lisp-command \"hy\"
  \"The command used by `inferior-lisp-program'.\"
  :type 'string
  :group 'hy-mode)

(defconst hy-font-lock-keywords
  `((,(concat \"(\\\\(\"
              (regexp-opt '(\"defn\" \"defun\" \"defclass\" \"import\"
                            \"defmacro\" \"require\" \"defmacro-alias\"
                            \"defmacro/g!\" \"defreader\"))
              \"\\\\)\\\\>\"
              ;; Spaces
              \"[ \\r\\n\\t]+\"
              ;; Function/class name
              \"\\\\([^ \\r\\n\\t()]+\\\\)\")
     (1 font-lock-keyword-face)
     (2 font-lock-function-name-face nil t))
    (,(concat \"(\\\\(\"
              (regexp-opt
               '(\"do\" \"for\" \"for*\" \"try\" \"throw\" \"raise\" \"progn\" \"catch\"
                 \"else\" \"finally\" \"except\" \"if\" \"unless\" \"when\" \"assert\" \"global\"
                 \"lambda\" \"fn\" \"yield\" \"with-decorator\" \"with_decorator\" \"with\"
                 \"with*\" \"kwapply\" \"while\" \"let\" \"cond\" \"_>\" \"->\" \"_>>\" \"->>\"
                 \"with-gensym\"))
              \"\\\\)[ \\n\\r\\t)]\")
     (1 font-lock-keyword-face))
    (,(concat \"(\\\\(\"
              (regexp-opt
               '(\"get\" \"slice\" \"assoc\" \",\" \"quote\" \"eval\" \"list-comp\" \"not\" \"~\"
                 \"and\" \"or\" \"=\" \"!=\" \"<\" \"<=\" \">\" \">=\" \"is\" \"in\" \"is-not\"
                 \"is_not\" \"not-in\" \"not_in\" \"+\" \"%\" \"/\" \"//\" \"*\" \"**\" \"<<\" \">>\"
                 \"|\" \"^\" \"&\" \"-\" \"+=\" \"/=\" \"//=\" \"*=\" \"-=\" \"_=\" \"%=\" \"**=\" \"<<=\"
                 \">>=\" \"|=\" \"^=\" \"&=\" \"setv\" \"def\" \"car\" \"first\" \"cdr\" \"rest\"
                 \"take\" \"drop\" \"print\" \"quasiquote\" \"unquote\" \"unquote-splice\"
                 \"take-while\" \"take-nth\" \"drop-while\" \"cycle\" \"dec\" \"distinct\"
                 \"empty?\" \"even?\" \"filter\" \"float?\" \"inc\" \"instance?\" \"iterable?\"
                 \"neg?\" \"odd?\" \"pos?\" \"remove\" \"repeat\" \"repeatedly\" \"second\"
                 \"string?\" \"zero?\" \"del\" \"gensym\" \"macroexpand\"
                 \"macroexpand-1\" \"nil?\" \"none?\" \"flatten\"))
              \"\\\\)[ \\n\\r\\t)]\")
     (1 font-lock-builtin-face))
    (\"\\\\<:[^ \\r\\n\\t]+\\\\>\" 0 font-lock-constant-face)
    (\"\\\\<&[^ \\r\\n\\t]+\\\\>\" 0 font-lock-type-face)))

(defcustom hy-indent-specform
  '((\"for\" . 1)
    (\"for*\" . 1)
    (\"while\" . 1)
    (\"except\" . 1)
    (\"catch\" . 1)
    (\"let\" . 1)
    (\"if\" . 1)
    (\"when\" . 1)
    (\"unless\" . 1))
  \"How to indent specials specform.\"
  :group 'hy-mode)

(defun hy-indent-function (indent-point state)
  \"This function is the normal value of the variable `lisp-indent-function' for `hy-mode'.
It is used when indenting a line within a function call, to see
if the called function says anything special about how to indent
the line.

INDENT-POINT is the position at which the line being indented begins.
Point is located at the point to indent under (for default indentation);
STATE is the `parse-partial-sexp' state for that position.

This function returns either the indentation to use, or nil if the
Lisp function does not specify a special indentation.\"
  (let ((normal-indent (current-column)))
    (goto-char (1+ (elt state 1)))
    (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
    (if (and (elt state 2)
             (not (looking-at \"\\\\sw\\\\|\\\\s_\")))
        ;; car of form doesn't seem to be a symbol
        (progn
          (if (not (> (save-excursion (forward-line 1) (point))
                      calculate-lisp-indent-last-sexp))
              (progn (goto-char calculate-lisp-indent-last-sexp)
                     (beginning-of-line)
                     (parse-partial-sexp (point)
                                         calculate-lisp-indent-last-sexp 0 t)))
          ;; Indent under the list or under the first sexp on the same
          ;; line as calculate-lisp-indent-last-sexp.  Note that first
          ;; thing on that line has to be complete sexp since we are
          ;; inside the innermost containing sexp.
          (backward-prefix-chars))
      (let* ((open-paren (elt state 1))
             (function (buffer-substring (point)
                                         (progn (forward-sexp 1) (point))))
             (specform (cdr (assoc function hy-indent-specform))))
        (cond ((member (char-after open-paren) '(?\\[ ?\\{))
               (goto-char open-paren)
               (1+ (current-column)))
              (specform
               (lisp-indent-specform specform state indent-point normal-indent))
              ((string-match-p \"\\\\`\\\\(?:\\\\S +/\\\\)?\\\\(def\\\\|with-\\\\|with_\\\\|fn\\\\|lambda\\\\)\" function)
               (lisp-indent-defform state indent-point)))))))

;;;###autoload
(progn
  (add-to-list 'auto-mode-alist '(\"\\\\.hy\\\\'\" . hy-mode))
  (add-to-list 'interpreter-mode-alist '(\"hy\" . hy-mode)))

(defvar hy-mode-syntax-table
  (let ((table (copy-syntax-table lisp-mode-syntax-table)))
    (modify-syntax-entry ?\\{ \"(}\" table)
    (modify-syntax-entry ?\\} \"){\" table)
    (modify-syntax-entry ?\\[ \"(]\" table)
    (modify-syntax-entry ?\\] \")[\" table)
    table))

(unless (fboundp 'setq-local)
  (defmacro setq-local (var val)
    `(set (make-local-variable ',var) ,val)))

;;;###autoload
(define-derived-mode hy-mode prog-mode \"Hy\"
  \"Major mode for editing Hy files.\"
  (setq font-lock-defaults
        '(hy-font-lock-keywords
          nil nil
          ((\"+-*/.<>=!?$%_&~^:@\" . \"w\")) ; syntax alist
          nil
          (font-lock-mark-block-function . mark-defun)
          (font-lock-syntactic-face-function
           . lisp-font-lock-syntactic-face-function)))
  (setq-local comment-start \";\")
  (setq-local comment-start-skip
              \"\\\\(\\\\(^\\\\|[^\\\\\\\\\\n]\\\\)\\\\(\\\\\\\\\\\\\\\\\\\\)*\\\\)\\\\(;+\\\\|#|\\\\) *\")
  (setq-local comment-add 1)
  (setq-local indent-tabs-mode nil)
  (setq-local inferior-lisp-program hy-mode-inferior-lisp-command)
  (setq-local indent-line-function 'lisp-indent-line)
  (setq-local lisp-indent-function 'hy-indent-function)
  (setq-local inferior-lisp-load-command
	      (concat \"(import [hy.importer [import-file-to-module]])\\n\"
		      \"(import-file-to-module \\\"__main__\\\" \\\"%s\\\")\\n\")))

(set-keymap-parent hy-mode-map lisp-mode-shared-map)
(define-key hy-mode-map (kbd \"C-M-x\")   'lisp-eval-defun)
(define-key hy-mode-map (kbd \"C-x C-e\") 'lisp-eval-last-sexp)
(define-key hy-mode-map (kbd \"C-c C-z\") 'switch-to-lisp)
(define-key hy-mode-map (kbd \"C-c C-l\") 'lisp-load-file)

(provide 'hy-mode)

;;; hy-mode.el ends here
"]) (hungry-delete . [(20120128 1153) nil "hungry delete minor mode" single ";;; Commentary:

;; This file contains all the necessary functions and macros, taken from
;; cc-mode, to implement hungry deletion without relying on cc-mode.  This
;; allows it to be used more easily in all modes, as it is now a minor mode in
;; it's own right.

;;; Installation

;; To use this mode, just put the following in your .emacs file:
;; (require 'hungry-delete)
;; and add turn-on-hungry-delete-mode to all relevant hooks.

"]) (httpcode . [(20121001 2045) nil "explains the meaning of an HTTP status code" single ";;; Commentary:
;;
;; Explain the meaning of an HTTP status code. Copy httpcode.el to your
;; load-path and add to your .emacs:
;;
;;   (require 'httpcode)
;;
;; Then run it with M-x hc
;;
;;; Code goes here:

(defconst http-codes
  '((100 (\"Continue\" \"Request received, please continue\"))
    (101 (\"Switching Protocols\"
          \"Switching to new protocol; obey Upgrade header\"))

   (200 (\"OK\" \"Request fulfilled, document follows\"))
   (201 (\"Created\" \"Document created, URL follows\"))
   (202 (\"Accepted\" \"Request accepted, processing continues off-line\"))
   (203 (\"Non-Authoritative Information\" \"Request fulfilled from cache\"))
   (204 (\"No Content\" \"Request fulfilled, nothing follows\"))
   (205 (\"Reset Content\" \"Clear input form for further input.\"))
   (206 (\"Partial Content\" \"Partial content follows.\"))

   (300 (\"Multiple Choices\" \"Object has several resources -- see URI list\"))
   (301 (\"Moved Permanently\" \"Object moved permanently -- see URI list\"))
   (302 (\"Found\" \"Object moved temporarily -- see URI list\"))
   (303 (\"See Other\" \"Object moved -- see Method and URL list\"))
   (304 (\"Not Modified\" \"Document has not changed since given time\"))
   (305 (\"Use Proxy\"
         \"You must use proxy specified in Location to access this resource.\"))
   (307 (\"Temporary Redirect\" \"Object moved temporarily -- see URI list\"))

   (400 (\"Bad Request\" \"Bad request syntax or unsupported method\"))
   (401 (\"Unauthorized\" \"No permission -- see authorization schemes\"))
   (402 (\"Payment Required\" \"No payment -- see charging schemes\"))
   (403 (\"Forbidden\" \"Request forbidden -- authorization will not help\"))
   (404 (\"Not Found\" \"Nothing matches the given URI\"))
   (405 (\"Method Not Allowed\"
         \"Specified method is invalid for this resource.\"))
   (406 (\"Not Acceptable\" \"URI not available in preferred format.\"))
   (407 (\"Proxy Authentication Required\"
         \"You must authenticate with this proxy before proceeding.\"))
   (408 (\"Request Timeout\" \"Request timed out; try again later.\"))
   (409 (\"Conflict\" \"Request conflict.\"))
   (410 (\"Gone\" \"URI no longer exists and has been permanently removed.\"))
   (411 (\"Length Required\" \"Client must specify Content-Length.\"))
   (412 (\"Precondition Failed\" \"Precondition in headers is false.\"))
   (413 (\"Request Entity Too Large\" \"Entity is too large.\"))
   (414 (\"Request-URI Too Long\" \"URI is too long.\"))
   (415 (\"Unsupported Media Type\" \"Entity body in unsupported format.\"))
   (416 (\"Requested Range Not Satisfiable\" \"The client has asked for a portion of the file, but the server cannot supply that portion. For example, if the client asked for a part of the file that lies beyond the end of the file.\"))
   (417 (\"Expectation Failed\" \"Expect condition could not be satisfied.\"))
   (418 (\"I'm a teapot\" \"The HTCPCP server is a teapot\"))
   (420 (\"Enhance Your Calm (Twitter)\" \"Not part of the HTTP standard, but returned by the Twitter Search and Trends API when the client is being rate limited. Other services may wish to implement the 429 Too Many Requests response code instead.\"))
   (422 (\"Unprocessable Entity (WebDAV)\" \"The request was well-formed but was unable to be followed due to semantic errors\"))
   (424 (\"Failed Dependency (WebDAV)\" \"The request failed due to failure of a previous request.\"))
   (426 (\"Precondition Required\" \"The origin server requires the request to be conditional. Intended to prevent the 'lost update' problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict.\"))
   (429 (\"Too Many Requests\" \"The user has sent too many requests in a given amount of time.\\nIntended for use with rate limiting schemes.\"))
   (431 (\"Request Header Fields Too Large\" \"The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large.\"))

   (500 (\"Internal Server Error\" \"Server got itself in trouble\"))
   (501 (\"Not Implemented\" \"Server does not support this operation\"))
   (502 (\"Bad Gateway\" \"Invalid responses from another server/proxy.\"))
   (503 (\"Service Unavailable\"
         \"The server cannot process the request due to a high load\"))
   (504 (\"Gateway Timeout\"
         \"The gateway server did not receive a timely response\"))
   (505 (\"HTTP Version Not Supported\" \"Cannot fulfill request.\"))
   (511 (\"Network Authentication Required\" \"The client needs to authenticate to gain network access. Intended for use by intercepting proxies used to control access to the network (e.g. 'captive portals' used to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\"))
   ))

;;;###autoload
(defun hc (code)
  \"Display the meaning of an HTTP status code\"
  (interactive \"nEnter HTTP code: \")
  (let ((found (assoc code http-codes)))
    (if found
        (let ((description (car (cdr found))))
          (message
           \"Status code %d\\nMessage: %s\\nCode explanation: %s\"
           code (car description) (car (cdr description))))
      (message \"No description found for code: %d\" code))
    ))

(provide 'httpcode)

;;; httpcode.el ends here
"]) (http-twiddle . [(20121117 812) nil "send & twiddle & resend HTTP requests" single ";;; Commentary:
;;
;; This is a program for testing hand-written HTTP requests. You write
;; your request in an Emacs buffer (using http-twiddle-mode) and then
;; press `C-c C-c' each time you want to try sending it to the server.
;; This way you can interactively debug the requests. To change port or
;; destination do `C-u C-c C-c'.
;;
;; The program is particularly intended for the POST-\"500 internal
;; server error\"-edit-POST loop of integration with SOAP programs.
;;
;; The mode is activated by `M-x http-twiddle-mode' or automatically
;; when opening a filename ending with .http-twiddle.
;;
;; The request can either be written from scratch or you can paste it
;; from a snoop/tcpdump and then twiddle from there.
;;
;; See the documentation for the `http-twiddle-mode' and
;; `http-twiddle-mode-send' functions below for more details and try
;; `M-x http-twiddle-mode-demo' for a simple get-started example.
;;
;; Tested with GNU Emacs 21.4.1 and not tested/ported on XEmacs yet.
;;
;; Example buffer:
;;
;; POST / HTTP/1.0
;; Connection: close
;; Content-Length: $Content-Length
;;
;; <The request body goes here>

"]) (http-post-simple . [(20131011 358) nil "HTTP POST requests using the url library" single ";;; Commentary:

;; Provides ways to use the url library to perform HTTP POST requests.
;; See the documentation to `http-post-simple' for more information.
;;
;; The `url-http' library does not handle 1xx response codes.

;; However, as RFC 2616 puts it:
;;     a server MAY send a 100 (Continue)
;;     status in response to an HTTP/1.1 PUT or POST request that does
;;     not include an Expect request-header field with the \"100-continue\"
;;     expectation.
;;
;; -- and some servers do, giving you annoying errors. To avoid these errors,
;; you can either set `url-http-version' to \"1.0\", in which case any compliant
;; server will not send the 100 (Continue) code, or call
;; `http-post-finesse-code-100'. Note that the latter advises
;; 'url-http-parse-response'
;;
"]) (htmlize . [(20130207 1202) nil "Convert buffer text and decorations to HTML." single ";;; Commentary:

;; This package converts the buffer text and the associated
;; decorations to HTML.  Mail to <hniksic@xemacs.org> to discuss
;; features and additions.  All suggestions are more than welcome.

;; To use it, just switch to the buffer you want HTML-ized and type
;; `M-x htmlize-buffer'.  You will be switched to a new buffer that
;; contains the resulting HTML code.  You can edit and inspect this
;; buffer, or you can just save it with C-x C-w.  `M-x htmlize-file'
;; will find a file, fontify it, and save the HTML version in
;; FILE.html, without any additional intervention.  `M-x
;; htmlize-many-files' allows you to htmlize any number of files in
;; the same manner.  `M-x htmlize-many-files-dired' does the same for
;; files marked in a dired buffer.

;; htmlize supports three types of HTML output, selected by setting
;; `htmlize-output-type': `css', `inline-css', and `font'.  In `css'
;; mode, htmlize uses cascading style sheets to specify colors; it
;; generates classes that correspond to Emacs faces and uses <span
;; class=FACE>...</span> to color parts of text.  In this mode, the
;; produced HTML is valid under the 4.01 strict DTD, as confirmed by
;; the W3C validator.  `inline-css' is like `css', except the CSS is
;; put directly in the STYLE attribute of the SPAN element, making it
;; possible to paste the generated HTML into existing HTML documents.
;; In `font' mode, htmlize uses <font color=\"...\">...</font> to
;; colorize HTML, which is not standard-compliant, but works better in
;; older browsers.  `css' mode is the default.

;; You can also use htmlize from your Emacs Lisp code.  When called
;; non-interactively, `htmlize-buffer' and `htmlize-region' will
;; return the resulting HTML buffer, but will not change current
;; buffer or move the point.  htmlize will do its best to work on
;; non-windowing Emacs sessions but the result will be limited to
;; colors supported by the terminal.

;; htmlize aims for compatibility with Emacsen version 21 and later.
;; Please let me know if it doesn't work on the version of XEmacs or
;; GNU Emacs that you are using.  The package relies on the presence
;; of CL extensions, especially for cross-emacs compatibility; please
;; don't try to remove that dependency.  I see no practical problems
;; with using the full power of the CL extensions, except that one
;; might learn to like them too much.

;; The latest version is available as a git repository at:
;;
;;        <http://fly.srk.fer.hr/~hniksic/emacs/htmlize.git>
;;
;; The snapshot of the latest release can be obtained at:
;;
;;        <http://fly.srk.fer.hr/~hniksic/emacs/htmlize.el.cgi>
;;
;; You can find a sample of htmlize's output (possibly generated with
;; an older version) at:
;;
;;        <http://fly.srk.fer.hr/~hniksic/emacs/htmlize.el.html>

;; Thanks go to the many people who have sent reports and contributed
;; comments, suggestions, and fixes.  They include Ron Gut, Bob
;; Weiner, Toni Drabik, Peter Breton, Ville Skytta, Thomas Vogels,
;; Juri Linkov, Maciek Pasternacki, and many others.

;; User quotes: \"You sir, are a sick, sick, _sick_ person. :)\"
;;                  -- Bill Perry, author of Emacs/W3


"]) (html-to-markdown . [(20131212 1441) nil "HTML to Markdown converter written in Emacs-lisp." single ";;; Commentary:
;;
;; ### HTML to Markdown converter written in Emacs-lisp. ###
;; 
;; This package defines two main functions: `html-to-markdown' and
;; `html-to-markdown-string'.
;; 
;; The functions are written entirely in Emacs-lisp (which means they'll
;; work on any platform with no external dependencies), and they convert
;; HTML source code into Markdown format. Of course, HTML has many more
;; features than Markdown, so any tags that can't be converted are left
;; as-is (or deleted, if the user so requests).
;; 
;; Instructions
;; ------
;; 
;; To use this package, simply install it from Melpa (M-x
;; `package-install' RET html-to-markdown) and the relevant functions will
;; be autoloaded.
;; 
;; - `html-to-markdown'  
;;   Is meant for interactive use. It takes the current buffer (or
;;   region), converts to Markdown, and displays the result in a separate
;;   window.
;; 
;; - `html-to-markdown-string'  
;;   Is meant for lisp code. It takes a string argument, which is
;;   converted to Markdown, and the result is returned.
;;   
;; Both of these functions take an extra boolean argument
;; `erase-unknown'. If it's non-nil, tags which can't be converted will
;; be erased.

"]) (html-script-src . [(20120403 1115) nil "Insert <script src=\"..\"> for popular JavaScript libraries" single ";;; Commentary:

;; Inserts a script tag for HTML and HAML documents with a URL to a
;; given JavaScript library taken from: http://scriptsrc.net/

;; To use this, make sure that this file is in Emacs load-path:
;;   (add-to-list 'load-path \"/path/to/directory/or/file\")
;;
;; Require it:
;;   (require 'html-script-src)
;;
;; Then in your HTML or HAML file, interactively call the function
;; `html-script-src'.


"]) (ht . [(20131217 610) nil "The missing hash table library for Emacs" single ";;; Commentary:

;; The missing hash table utility library for Emacs.
;;
;; See documentation on https://github.com/Wilfred/ht.el

"]) (hlinum . [(20140107 220) ((cl-lib (0 2))) "Extension for linum.el to highlight current line number" single ";;; Commentary:

;; Extension for linum-mode to highlight current line number.
;;
;; To use this package, add these lines to your .emacs file:
;;     (require 'hlinum)
;;     (hlinum-activate)
;; And by using M-x linum-mode, you can see line numbers
;; with highlighting current line number.
;;
;; You can customize the color of highlighting current line by
;; changing `linum-highlight-face'.
;; By default, hlinum highlights current line only in the active buffer.
;; To highlight current line in all buffers, change
;; `linum-highlight-in-all-buffersp' to t.

"]) (hl-todo . [(20131231 1819) nil "highlight TODO keywords" single ";;; Commentary:

;; Hightlight TODO keywords.  There are many minor modes like it
;; but this one is mine.  It also happens to be simpler than the
;; alternatives.

;; For now at least -- I might extend it.  Or I might abandon it
;; in favor of one of the following -- so you might be better of
;; going straight for one of these:

;; - [[http://emacswiki.org/fic-ext-mode.el][fic-ext-mode]]
;; - [[https://github.com/lewang/fic-mode][fic-mode]]
;; - [[http://emacswiki.org/FixmeMode][fixme-mode]]
;; - [[https://github.com/rolandwalker/fixmee][fixmee]]
;; - see http://emacswiki.org/FixmeMode for more alternatives

;; If you like this you might also like [[https://github.com/tarsius/orglink][orglink]].

"]) (hl-spotlight . [(20131226 1913) nil "Extension of hl-line.el to spotlight current few lines." single ";;; Commentary:
;;
;;  This library extends standard library `hl-line.el'.  It provides
;;  local and global modes to highlight several lines surrounding
;;  point using a different face, `hl-spotlight'.  You can enlarge or
;;  shrink this spotlight highlighting, using command
;;  `hl-spotlight-enlarge'.  You can repeat, to enlarge or shrink the
;;  spotlight incrementally, by using `C-x z z z z...'.
;;
;;  Spotlight highlighting can be used together with library
;;  `centered-cursor-mode.el', which keeps point (hence also the
;;  spotlight) centered in the window.  This can be helpful when
;;  reading text (as opposed to code).  This is controlled by user
;;  option `hl-spotlight-keep-centered-flag'. You can obtain library
;;  `centered-cursor-mode.el' here:
;;  http://www.emacswiki.org/emacs/centered-cursor-mode.el.
;;
;;  If you want the spotlight to automatically move down the page
;;  progressively, use command `hl-spotlight-scan'.  You might find
;;  this useful for some kinds of reading.  Or not.  ;-)
;;
;;  To use this library, put this in your Emacs init file (~/.emacs):
;;
;;    (require 'hl-spotlight) ; Load this file (it will load `hl-line.el')
;;
;;
;;  See also library `hl-line+.el', which extends `hl-line.el' in
;;  other ways.
;;
;;
;;  Faces defined here:
;;
;;    `hl-spotlight'.
;;
;;  User options defined here:
;;
;;    `hl-spotlight-height', `hl-spotlight-keep-centered-flag',
;;    `hl-spotlight-scan-period'.
;;
;;  Commands defined here:
;;
;;    `global-hl-spotlight-mode', `hl-spotlight-enlarge',
;;    `hl-spotlight-mode', `hl-spotlight-scan'.
;;
;;  Non-interactive functions defined here:
;;
;;    `hl-spotlight-down', `hl-spotlight-limits'.
;;
;;  Internal variables defined here:
;;
;;    `hl-spotlight-old-state', `hl-spotlight-scan-timer'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (hl-sexp . [(20101130 443) nil "highlight the current sexp" single ";;; Commentary:

;; A cheap hack of hl-line.el to highlight the thingy at point instead
;; of the line at point. Sort of inspired by a post by Kent Pitman to
;; CLL in which he ranted about font-locking. You can find the latest
;; version here: <URL:http://oconnor.cx/elisp/hl-sexp.el>

;; An overlay is used, active only on the selected window.  Hooks are
;; added to `pre-command-hook' and `post-command-hook' to activate and
;; deactivate (by deleting) the overlay.  `hl-sexp-unhighlight', on
;; `pre-command-hook', deactivates it unconditionally in case the
;; command changes the selected window.  (It does so rather than
;; keeping track of changes in the selected window).
;; `hl-sexp-highlight', on `post-command-hook', activates it again
;; across the window width.

;; You could make variable `hl-sexp-mode' buffer-local to avoid
;; highlighting specific buffers.

"]) (hl-sentence . [(20110815 954) nil "highlight a sentence based on customizable face" single nil]) (hl-line+ . [(20131226 1913) nil "Extensions to hl-line.el." single ";;; Commentary:
;;
;;  This library extends standard library `hl-line.el' in these ways:
;;
;;  1. As an alternative to turning on `hl-line' highlighting at all
;;     times, you can turn it on only when Emacs is idle.  To do that,
;;     use command `toggle-hl-line-when-idle' and customize
;;     `global-hl-line-mode' to nil.
;;
;;  2. As another alternative, you can turn it on for only a few
;;     seconds.  To do that, use command `flash-line-highlight' and
;;     customize `global-hl-line-mode' to nil.
;;
;;  3. It provides a face, `hl-line', that you can customize, instead
;;     of using option `hl-line-face'.
;;
;;     I suggested #3 to the Emacs developers, and it was added to
;;     Emacs 22, but with a different default value.  If you use
;;     library `crosshairs.el', you might want to customize this to a
;;     value similar to what is used there, so that the horizontal and
;;     vertical highlights will be the same.
;;
;;  4. Option `hl-line-overlay-priority' is provided, so that you can
;;     make hl-line highlighting appear on top of other overlay
;;     highlighting that might exist.
;;
;;  To use this library, put this in your Emacs init file (~/.emacs):
;;
;;    (require 'hl-line+) ; Load this file (it will load `hl-line.el')
;;
;;  To turn on `global-hl-line-mode' only when Emacs is idle, by
;;  default, add this line also to your init file:
;;
;;    (toggle-hl-line-when-idle 1) ; Highlight only when idle
;;
;;  You can use command `toggle-hl-line-when-idle' to turn idle
;;  highlighting on and off at any time.  You can use command
;;  `hl-line-when-idle-interval' to change the number of idle seconds
;;  to wait before highlighting.
;;
;;
;;  See also these libraries:
;;
;;  * `col-highlight.el', which highlights the current column.
;;
;;  * `crosshairs.el', which highlights the current line and the
;;    current column, at the same time.  It requires libraries
;;    `col-highlight.el' and `hl-line+.el'.
;;
;;  * `hl-spotlight.el', which extends `hl-line.el' by spotlighting
;;    the lines around the cursor.
;;
;;  * `cursor-chg.el' or library `oneonone.el', to change the cursor
;;    type when Emacs is idle.
;;
;;
;;  Faces defined here:
;;
;;    `hl-line'.
;;
;;  User options defined here:
;;
;;    `hl-line-flash-show-period',
;;    `hl-line-inhibit-highlighting-for-modes',
;;    `hl-line-overlay-priority'.
;;
;;  Commands defined here:
;;
;;    `flash-line-highlight', `hl-line-flash',
;;    `hl-line-toggle-when-idle', `hl-line-when-idle-interval',
;;    `toggle-hl-line-when-idle'.
;;
;;  Non-interactive functions defined here:
;;
;;    `hl-line-highlight-now', `hl-line-unhighlight-now'.
;;
;;  Internal variables defined here:
;;
;;    `hl-line-idle-interval', `hl-line-idle-timer',
;;    `hl-line-when-idle-p'.
;;
;;
;;  ***** NOTE: The following non-interactive functions defined in
;;              `hl-line.el' have been ADVISED HERE (to respect option
;;              `hl-line-overlay-priority'):
;;
;;    `global-hl-line-highlight', `hl-line-highlight'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (hl-defined . [(20131226 1912) nil "Highlight defined or undefined symbols in Emacs-Lisp." single ";;; Commentary:
;;
;;    Highlight defined or undefined symbols in Emacs-Lisp.
;;
;;  `hdefd-highlight-mode' is a minor mode that highlights, in the
;;  current buffer, symbols that are known to be defined as Emacs-Lisp
;;  functions or variables or both.  Alternatively, it can highlight
;;  symbols that are not known to be defined as functions or
;;  variables.
;;
;;  The current buffer should be in Emacs-Lisp mode.
;;
;;  Command `hdefd-highlight-mode' toggles highlighting on/off.  The
;;  highlighting respects option `hdefd-highlight-type'.
;;
;;  Command `hdefd-cycle' cycles highlighting among the available
;;  types and off, as follows: functions & variables > functions >
;;  variables > undefined > off .  It does this by changing the
;;  current value of option `hdefd-highlight-type'.
;;
;;  You can of course customize the faces used for highlighting.  You
;;  might want, for instance, to have face `hdefd-functions' inherit
;;  from face `font-lock-function-name-face', and `hdefd-variables'
;;  inherit from `font-lock-variable-name-face'.  This is not the
;;  default because I don't find it so useful.
;;
;;
;;  Put this in your init file:
;;
;;    (require 'hl-defined)
;;
;;  If you want to turn on this highlighting automatically whenever
;;  you enter Emacs-Lisp mode then you can do this in your init file:
;;
;;    (require 'hl-defined)
;;    (add-hook 'emacs-lisp-mode-hook 'hdefd-highlight-mode 'APPEND)
;;
;;  User option `hdefd-highlight-type' controls what gets highlighted.
;;
;;
;;  Faces defined here:
;;
;;    `hdefd-functions', `hdefd-variables', `hdefd-undefined'.
;;
;;  User options defined here:
;;
;;    `hdefd-highlight-type'.
;;
;;  Commands defined here:
;;
;;    `hdefd-highlight-mode'.
;;
;;  Non-interactive functions defined here:
;;
;;    `hdefd-highlight'.
;;
;;  Internal variables defined here:
;;
;;    `hdefd-face'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (hive . [(20131217 712) ((sql (3 0))) "Hive SQL mode extension" single ";;; Commentary:

;; This package adds Hive to the sql-mode product list.

"]) (historyf . [(20131203 22) nil "file history library like browser" single ";;; Commentary:

"]) (hippie-namespace . [(20131106 706) nil "Special treatment for namespace prefixes in hippie-expand" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'hippie-namespace)
;;
;;     (global-hippie-namespace-mode 1)
;;
;;     (define-key global-map (kbd \"M-/\") 'hippie-expand)
;;
;;     hi [M-/]     ; The first one or two letters of a namespace
;;                  ; found in the current buffer, followed by the
;;                  ; key bound to `hippie-expand'.
;;
;; Explanation
;;
;; The purpose of hippie-namespace is to save typing.
;;
;; Enabling this minor mode adds a limited number of very common
;; prefixes to the `hippie-expand' expansion list.  These prefixes
;; (deduced from buffer content) will be the first completions
;; considered.
;;
;; Furthermore, hippie-namespace completions are treated specially:
;; when `hippie-expand' proposes a namespace completion, it will not
;; cycle.  Instead, the namespace completion is implicitly accepted,
;; and further invocations of `hippie-expand' will build on the
;; expansion.
;;
;; For example, the common prefix of all symbols in this library is
;; \"hippie-namespace-\".  If, while editing this library, the user
;; types \"hi [hippie-expand]\" or even just \"h [hippie-expand]\",
;; the full prefix is expanded.
;;
;; \"hi [hippie-expand] [hippie-expand] ...\" will then cycle through
;; all completions which match the prefix.
;;
;; To use this library, install the file somewhere that Emacs can find
;; it and add the following to your ~/.emacs file
;;
;;     (require 'hippie-namespace)
;;     (global-hippie-namespace-mode 1)
;;
;; The minor mode will examine each buffer to guess namespace prefixes
;; dynamically.  If the guess is not good enough, you may add to the
;; list by executing
;;
;;     M-x hippie-namespace-add
;;
;; or by adding a file-local variable at the end of your file:
;;
;;     ;; Local Variables:
;;     ;; hippie-namespace-local-list: (namespace-1 namespace-2)
;;     ;; End:
;;
;; Note that you should also have `hippie-expand' bound to a key.
;; Many people override dabbrev expansion:
;;
;;     (define-key global-map (kbd \"M-/\") 'hippie-expand)
;;
;; See Also
;;
;;     M-x customize-group RET hippie-namespace RET
;;     M-x customize-group RET hippie-expand RET
;;
;; Notes
;;
;;     This mode makes more sense for some languages and less sense for
;;     others.  In most languages, the declared \"namespace\" is
;;     infrequently used in its own context.  (For Emacs Lisp that is
;;     not the case.)
;;
;;     Some attempt is made to detect the import of external
;;     namespaces, and a textual analysis is done, but nothing fancy.
;;
;;     Integrates with `expand-region', adding an expansion which is
;;     aware of the namespace and non-namespace portions of a symbol.
;;
;;     Mode-specific namespace plugins are easy to write.  Search for
;;     \"Howto\" in the source.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     Uses if present: expand-region.el
;;
;; Bugs
;;
;;     Breaks using C-u [hippie-expand] to undo.  Workaround: use
;;     regular undo commands.
;;
;; TODO
;;
;;     more and better language-specific functions
;;
;;     JavaScript namespaces are implicit, and a pain to deduce
;;
;;     clever interface to support identical subsequences in the
;;     namespace list
;;
;;     periodic refresh: idle-timer and save hook?
;;
;;; License
;;
;;  Simplified BSD License
;;
;;  Redistribution and use in source and binary forms, with or
;;  without modification, are permitted provided that the following
;;  conditions are met:
;;
;;     1. Redistributions of source code must retain the above
;;        copyright notice, this list of conditions and the following
;;        disclaimer.
;;
;;     2. Redistributions in binary form must reproduce the above
;;        copyright notice, this list of conditions and the following
;;        disclaimer in the documentation and/or other materials
;;        provided with the distribution.
;;
;;  This software is provided by Roland Walker \"AS IS\" and any express
;;  or implied warranties, including, but not limited to, the implied
;;  warranties of merchantability and fitness for a particular
;;  purpose are disclaimed.  In no event shall Roland Walker or
;;  contributors be liable for any direct, indirect, incidental,
;;  special, exemplary, or consequential damages (including, but not
;;  limited to, procurement of substitute goods or services; loss of
;;  use, data, or profits; or business interruption) however caused
;;  and on any theory of liability, whether in contract, strict
;;  liability, or tort (including negligence or otherwise) arising in
;;  any way out of the use of this software, even if advised of the
;;  possibility of such damage.
;;
;;  The views and conclusions contained in the software and
;;  documentation are those of the authors and should not be
;;  interpreted as representing official policies, either expressed
;;  or implied, of Roland Walker.
;;
;;
"]) (hippie-expand-slime . [(20130907 132) nil "Hook slime's completion into hippie-expand" single ";;; Commentary:

;; Usage:

;; (require 'hippie-expand-slime)
;; (add-hook 'slime-mode-hook 'set-up-slime-hippie-expand)
;; (add-hook 'slime-repl-mode-hook 'set-up-slime-hippie-expand))

"]) (hippie-exp-ext . [(20130824 1207) nil "Extension of hippie-expand" single ";;; Commentary: 
;; 
;; Extension of hippie-expand.
;;
;; I created this program to let `hippie-expand' expand only unibyte
;; chars and expand long symbols.
;;
;; M-x try-expand-dabbrev-limited-chars
;;   - expand dabbrev substring when input begins from `-' or `_'.
;;   - otherwise expand dabbrev
;;   - symbols expanded this command only contain 0-9a-zA-Z\\?!_-,
;;     which is controlled to set `he-dabbrev-chars'
;;
;; M-x hippie-expand-file-name
;;   - complete file name at point
;;
;;
;; Example:
;;
;; -ex [M-x hippie-expand-dabbrev-limited-chars] -> hippie-expand

;;; Installation:
;;
;; Put hippie-exp-ext.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'hippie-exp-ext)
;; (global-set-key (kbd \"C-@\") 'hippie-expand-dabbrev-limited-chars)
;; (global-set-key (kbd \"M-/\") 'hippie-expand-file-name)
;;
;; No need more.

"]) (highlight-unique-symbol . [(20130611 2242) ((deferred (0 3 2))) "highlight symbols which not appear in the repository" single ";;; Commentary:

;; Add the following to your Emacs init file:
;;
;; (require 'highlight-unique-symbol)  ;; Not necessary if using ELPA package
;; (highlight-unique-symbol t)
;;
;; You can configure these settings with `M-x customize-group RET highlight-unique-symbol RET`.
;;
;; `highlight-unique-symbol:interval`
;; Interval to check symbol at cursor.
;;
;; `highlight-unique-symbol:face`
;; Face of unique symbols.

"]) (highlight-symbol . [(20131103 1336) nil "automatic and manual symbol highlighting" tar ";;; Commentary:
;;
;; Add the following to your .emacs file:
;; (require 'highlight-symbol)
;; (global-set-key [(control f3)] 'highlight-symbol-at-point)
;; (global-set-key [f3] 'highlight-symbol-next)
;; (global-set-key [(shift f3)] 'highlight-symbol-prev)
;; (global-set-key [(meta f3)] 'highlight-symbol-query-replace)
;;
;; Use `highlight-symbol-at-point' to toggle highlighting of the symbol at
;; point throughout the current buffer.  Use `highlight-symbol-mode' to keep the
;; symbol at point highlighted.
;;
;; The functions `highlight-symbol-next', `highlight-symbol-prev',
;; `highlight-symbol-next-in-defun' and `highlight-symbol-prev-in-defun' allow
;; for cycling through the locations of any symbol at point.  Use
;; `highlight-symbol-nav-mode' to enable key bindings (M-p and M-p) for
;; navigation. When `highlight-symbol-on-navigation-p' is set, highlighting is
;; triggered regardless of `highlight-symbol-idle-delay'.
;;
;; `highlight-symbol-query-replace' can be used to replace the symbol.
;;
"]) (highlight-parentheses . [(20130523 852) nil "highlight surrounding parentheses" tar ";;; Commentary:
;;
;; Add the following to your .emacs file:
;; (require 'highlight-parentheses)
;;
;; Enable the mode using M-x highlight-parentheses-mode or by adding it to a
;; hook.
;;
"]) (highlight-indentation . [(20131207 835) nil "Minor modes for highlighting indentation" single ";;; Commentary:
;; Customize `highlight-indentation-face', and
;; `highlight-indentation-current-column-face' to suit your theme.

"]) (highlight-escape-sequences . [(20130531 1512) nil "Highlight escape sequences" single ";;; Commentary:

;; This global minor mode highlights escape sequences in strings and
;; other kinds of literals with `font-lock-regexp-grouping-backslash'
;; face when appropriate.

;; It currently supports `ruby-mode' and both main JavaScript modes.

;; To enable it elsewhere, customize `hes-simple-modes'.

;; Put this in the init file:
;;
;; (hes-mode)

"]) (highlight-current-line . [(20051013 1756) nil "highlight line where the cursor is." single ";;; Commentary:

;; Minor mode to highlight the line the cursor is in. You can change colors
;; of foreground (text) and background. The default behaviour is to set
;; only a background color, so that font-lock fontification colors remain
;; visible (syntax coloring). Enable a buffer using the command
;; `highlight-current-line-minor-mode' and customize via:
;;
;;   M-x customize-group highlight-current-line <RET>.
;;
;; You can select whether the whole line (from left to right window border)
;; is marked or only the really filled parts of the line (from left window
;; border to the last char in the line). The second behaviour is suitable
;; if it's important for you to see trailing spaces or tabs in a
;; line. Customize the variable `highlight-current-line-whole-line' (or use
;; the function `highlight-current-line-whole-line-on' retained for
;; compatibility with prior versions).
;;
;; You may enable the minor-mode automatically for (almost) all buffers by
;; customizing the variable `highlight-current-line-globally' (or using the
;; compatibility command `highlight-current-line-on').  Buffers whose
;; buffer-name match the regular expression in the customizable variable
;; `highlight-current-line-ignore-regexp' do not highlighted.  You can
;; extend or redefine this regexp. This works together with the default
;; ignore function `highlight-current-line-ignore-function'. You can
;; redefine this function to implement your own criterias.

;; (The functions `highlight-current-line-on',
;; `highlight-current-line-set-fg-color' and
;; `highlight-current-line-set-bg-color' are retained for backward
;; compatibility. There's a special color \"none\" defined to set no color.)


;;; People which made contributions or suggestions:

;; This list is ordered by time. Latest in time first.
;; - Peter S Galbraith   <psg@debian.org>
;; - Masatake Yamato     <jet@gyve.org>
;; - Hrvoje Niksic	 <hniksic@srce.hr>
;; - Jari Aalto		 <jari.aalto@ntc.nokia.com>
;; - Shawn Ostermann     <sdo@picard.cs.OhioU.Edu>
;; - Peter Ikier	 <p_ikier@infoac.rmi.de>
;;   Many thanks to him for the idea. He liked this behaviour in another
;;   editor (\"Q\").

;;; Installation:
;;
;; Put a copy of highlight-current-line.el/.elc into some path of
;; `load-path'. To show `load-path': <C-h v> load-path RET
;;
;; Load the file, e.g. add in ~/.emacs
;;
;;  (require 'highlight-current-line)
;;
;; Enable it on a buffer using `M-x highlight-current-line-minor-mode'
;; or globally by customizing `highlight-current-line-globally'.
;;
;; Previous versions of this code worked by adding other comamnds in
;; ~/.emacs instead of using the custom interface.  This is still
;; supported:
;;
;;  ;; If you want to mark only to the end of line:
;;  (highlight-current-line-whole-line-on nil)
;;  ;; switch highlighting on
;;  (highlight-current-line-on t)
;;  ;; Ignore no buffer
;;  (setq highlight-current-line-ignore-regexp nil) ; or set to \"\"
;;  ;; alternate way to ignore no buffers
;;  (fmakunbound 'highlight-current-line-ignore-function)
;;  ;; Ignore more buffers
;;  (setq highlight-current-line-ignore-regexp
;;       (concat \"Dilberts-Buffer\\\\|\"
;;	       highlight-current-line-ignore-regexp))

;;; Troubleshooting:

;; - Q: I do not see matching parens from paren.el any more!
;; - A: Check the colors from highlight-current-line or from show-paren-face
;;   and choose some combination which works together.

"]) (highlight-cl . [(20091012 1730) nil "Highlighting `cl' functions." single ";;; Commentary:
;; This package highlighting `cl' functions.
;;
;; Please byte compile this package on batch mode instead of runtime
;; byte compiling. Because this package using load state for classify
;; functions to `cl only' and `cl and other package'.

;;; Installation:
;; Run followings to byte compile this package:
;;
;;   $ emacs -Q -batch -f batch-byte-compile highlight-cl.el
;;
;; Put followings to your .emacs:
;;
;;   (require 'highlight-cl)
;;   (add-hook 'emacs-lisp-mode-hook 'highlight-cl-add-font-lock-keywords)
;;   (add-hook 'lisp-interaction-mode-hook 'highlight-cl-add-font-lock-keywords)

"]) (highlight-chars . [(20131226 1906) nil "Highlight specified sets of characters, including whitespace." single ";;; Commentary:
;;
;;    Highlight specified sets of characters, including whitespace.
;;
;; This library provides commands and non-interactive functions for
;; highlighting the following:
;;
;; * Tab chars (command `hc-toggle-highlight-tabs').
;;
;; * Hard space (aka no-break space, aka non-breaking space) chars
;;   (command `hc-toggle-highlight-hard-spaces').
;;
;; * Hard hyphen (aka non-breaking hyphen) chars (command
;;   `hc-toggle-highlight-hard-hyphens').
;;
;; * Trailing whitespace: tabs, spaces, and hard spaces at the end of
;;   a line of text (command
;;   `hc-toggle-highlight-trailing-whitespace')
;;
;; * Any set of chars you choose (commands `hc-highlight-chars' and
;;   `hc-toggle-highlight-other-chars').  You can specify characters
;;   in four ways: (1) individually, (2) using ranges, (3) using
;;   character classes (e.g. [:digit:]), and (4) using character sets
;;   (e.g. `iso-8859-1' or `lao').
;;
;;   For `hc-toggle-highlight-other-chars', you can also specify
;;   characters (the same four ways) that are to be *excluded* from
;;   highlighting.
;;
;;   You can thus, for example, highlight all characters in character
;;   set `greek-iso8859-7' except `GREEK SMALL LETTER LAMBDA'.  Or all
;;   characters in class `[:space:]' (whitespace) except `tab'.  Or
;;   all Unicode characters in the range ?\\u2190 through ?\\u21ff
;;   (mathematical arrows) except ?\\u21b6, ?\\u21b7, ?\\u21ba, and
;;   ?\\u21bb (curved arrows).  You get the idea.
;;
;;   - Command `hc-highlight-chars' prompts you for the characters to
;;     highlight and the face to use.  With a prefix arg it
;;     unhighlights.
;;
;;   - Command `hc-toggle-highlight-other-chars' toggles highlighting,
;;     using face `hc-other-char', of the characters specified by user
;;     option `hc-other-chars', but excluding the characters specified
;;     by option `hc-other-chars-NOT'.  With a prefix arg it prompts
;;     you for the face to use.
;;
;;   For these particular commands and functions, option
;;   `hc-other-chars-font-lock-override' controls whether the current
;;   highlighting face overrides (`t'), is overridden by (`keep'), or
;;   merges with (`append' or `prepend') any existing highlighting.
;;
;; To use this library, add this to your init file (~/.emacs):
;;
;;      (require 'highlight-chars) ; Load this library.
;;
;; You can then use the commands and functions defined here to turn
;; the various kinds of highlighting on and off when in Font-Lock
;; mode.  For example, you can bind a key to toggle highlighting of
;; trailing whitespace:
;;
;;      (global-set-key (kbd \"<f11>\")
;;                      'hc-toggle-highlight-trailing-whitespace)
;;
;; Because variable `font-lock-keywords' is buffer-local, that key
;; binding lets you use `f11' to toggle highlighting separately in
;; each buffer.
;;
;; But if you want to use a particular kind of highlighting by default
;; globally, then just add the corresponding `hc-highlight-*' function
;; to the hook `font-lock-mode-hook'.  Then, whenever Font-Lock mode
;; is turned on (in any buffer), the appropriate highlighting will
;; also be turned on.
;;
;; For example, you can turn on tab highlighting everywhere by default
;; by adding function `hc-highlight-tabs' to `font-lock-mode-hook' in
;; your init file (`~/.emacs'), as follows:
;;
;;     (add-hook 'font-lock-mode-hook 'hc-highlight-tabs)
;;
;; In addition to buffer-specific highlighting and global
;; highlighting, you can turn on a given kind of highlighting
;; automatically for all buffers that are in a certain major mode.
;;
;; For that, do the following, where `THE-MODE' is the appropriate
;; mode symbol (value of variable `major-mode'), such as `text-mode'.
;; This example turns on trailing whitespace highlighting - use
;; different `hc-highlight-*' and `hc-dont-highlight-*' functions for
;; other kinds of highlighting.
;;
;;      (add-hook 'change-major-mode-hook
;;                (lambda ()
;;                  (add-hook 'font-lock-mode-hook
;;                            'hc-highlight-trailing-whitespace)))
;
;;      (add-hook 'after-change-major-mode-hook
;;                (lambda ()
;;                  (when (eq major-mode 'THE-MODE)
;;                    (remove-hook 'font-lock-mode-hook
;;                                 'hc-highlight-trailing-whitespace)
;;                    (hc-dont-highlight-trailing-whitespace)))
;;                'APPEND)
;;
;; Highlighting Different Sets of Characters in Different Buffers
;; --------------------------------------------------------------
;;
;; Especially for highlighting non-whitespace characters (commands
;; `hc-toggle-highlight-other-chars' and `hc-highlight-chars'), it can
;; sometimes be useful to highlight different characters in different
;; buffers.  For example, you might want to highlight all Chinese
;; characters in a Gnus buffer and all hexadecimal digits in a CSS or
;; HTML buffer.
;;
;; You can do this by setting the local value of option
;; `hc-other-chars' (and perhaps option `hc-other-chars-NOT') in each
;; of the buffers.  For example:
;;
;;      (with-current-buffer (current-buffer)
;;        (set (make-local-variable 'hc-other-chars)
;;             '(chinese-big5-1)))
;;
;; You can use Customize to find the Lisp value that corresponds to
;; the highlighting you want: `M-x customize-option hc-other-chars',
;; then use button `Value Menu' to choose a value, then button `State
;; to `Set for Current Session'.
;;
;; Then use `C-h v hc-other-chars' to see what the Lisp value is (for
;; example, `(chinese-big5-1)'), and plug that value into the
;; `make-local-variable' expression.
;;
;; Vanilla Emacs Highlighting of Hard Spaces and Hyphens
;; -----------------------------------------------------
;;
;; Vanilla Emacs can itself highlight hard spaces and hard hyphens,
;; and it does so whenever `nobreak-char-display' is non-nil, which it
;; is by default.  By \"hard\" space and hyphen I mean \"no-break\" or
;; non-breaking.  These are the non-ASCII Unicode characters with code
;; points 160 (#xa0) and 8209 (#x2011), respectively.
;;
;; This low-level vanilla Emacs highlighting does not use Font Lock
;; mode, and it cannot highlight only one of these characters and not
;; the other.
;;
;; Using `highlight-chars.el' to highlight hard space and hyphen chars
;; requires turning off their default highlighting provided by vanilla
;; Emacs, that is, setting `nobreak-char-display' to nil.  This is
;; done automatically by the functions defined here.  When you turn
;; off this font-lock highlighting, the vanilla Emacs highlighting is
;; automatically restored.
;;
;; That is, the value of variable `nobreak-char-display' is reset to
;; its original value when `highlight-chars.el' was loaded (`t' is the
;; default value, so if you didn't change it prior to loading
;; `highlight-chars.el' then t is restored).
;;
;; NOTE: If you byte-compile this file in an older version of Emacs
;; (prior to Emacs 23) then the code for highlighting hard hyphens and
;; hard spaces will not work, even in Emacs 23+.  If you use Emacs 23+
;; then you should either byte-compile it using Emacs 23+ or evaluate
;; the source code that defines functions that highlight such
;; characters.  (This is because older Emacs versions interpret
;; [\\u2011] as just [u2011], etc.)
;;
;;
;; See Also:
;;
;; * Library `highlight.el' for ways to highlight text more generally,
;;   not just specific characters.  It is available here:
;;   http://www.emacswiki.org/cgi-bin/wiki/highlight.el     (code)
;;   http://www.emacswiki.org/cgi-bin/wiki/HighlightLibrary (doc)
;;
;; * Standard library `whitespace.el' for other ways to highlight
;;   whitespace characters.
;;
;;   This does some things similar to what `highlight-chars.el' does,
;;   plus other, unrelated things.  As its name suggests, its effects
;;   are limited to whitespace characters.  It is also somewhat
;;   complicated to use (10 faces, 24 options!), and it seems to have
;;   more than a few bugs.
;;
;;   Besides being simpler, I think that `highlight-chars.el' has an
;;   advantage of letting you easily highlight ONLY particular
;;   whitespace characters.  `whitespace.el' apparently makes you pick
;;   whether to highlight spaces and hard spaces together, or not, for
;;   instance.
;;
;;   (As a workaround, With `whitespace.el' you can get the effect of
;;   highlighting only one of these kinds of space by customizing the
;;   face used to highlight the other one so that it is the same as
;;   the `default' face.  But that will interfere with other font-lock
;;   highlighting of that other character.  Maybe I'm missing
;;   something, this seems to me the only workaround.)
;;
;;
;; Faces defined here:
;;
;;    `hc-hard-hyphen' (Emacs 23+), `hc-hard-space', `hc-other-char',
;;    `hc-tab', `hc-trailing-whitespace'.
;;
;; User options defined here:
;;
;;    `hc-other-chars', `hc-other-chars-font-lock-override',
;;    `hc-other-chars-NOT'.
;;
;; Commands defined here:
;;
;;    `toggle-highlight-hard-hyphens' (alias, Emacs 23+),
;;    `toggle-highlight-hard-spaces' (alias),
;;    `toggle-highlight-other-chars', `toggle-highlight-tabs' (alias),
;;    `toggle-highlight-trailing-whitespace' (alias),
;;    `hc-highlight-chars', `hc-toggle-highlight-hard-hyphens' (Emacs
;;    23+), `hc-toggle-highlight-hard-spaces',
;;    `hc-toggle-highlight-other-chars', `hc-toggle-highlight-tabs',
;;    `hc-toggle-highlight-trailing-whitespace'.
;;
;; Non-interactive functions defined here:
;;
;;    `hc-dont-highlight-hard-hyphens' (Emacs 23+),
;;    `hc-dont-highlight-hard-spaces',
;;    `hc-dont-highlight-other-chars', `hc-dont-highlight-tabs',
;;    `hc-dont-highlight-trailing-whitespace',
;;    `hc-highlight-hard-hyphens' (Emacs 23+),
;;    `hc-highlight-other-chars', `hc-highlight-hard-spaces',
;;    `hc-highlight-tabs', `hc-highlight-trailing-whitespace',
;;    `hc-other-chars-defcustom-spec', `hc-other-chars-description',
;;    `hc-other-chars-font-lock-spec', `hc-other-chars-matcher'.
;;
;; Internal variables defined here:
;;
;;    `hc-highlight-hard-hyphens-p', `hc-highlight-hard-spaces-p',
;;    `hc-highlight-tabs-p', `hc-highlight-trailing-whitespace-p',
;;    `hc--other-chars-last-match-data',
;;    `hc--saved-nobreak-char-display'.
;;
;;
;; History:
;;
;; Peter Steiner, <unistein@isbe.ch>, wrote `hilite-trail.el', which
;; included some whitespace character-highlighting commands.  Since
;; 2000 I have extended those and added other character-highlighting
;; functions, in `show-wspace.el'.  I eventually (2012) renamed
;; `show-wspace.el' to `highlight-chars.el'.  Highlighting whitespace
;; and other easily confused characters remains an important use case,
;; however.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (highlight . [(20131226 1911) nil "Highlighting commands." single ";;; Commentary:
;;
;;    Highlighting commands.
;;
;;    More description below.
 
;;(@> \"Index\")
;;
;;  Index
;;  -----
;;
;;  If you have library `linkd.el' and Emacs 22 or later, load
;;  `linkd.el' and turn on `linkd-mode' now.  It lets you easily
;;  navigate around the sections of this doc.  Linkd mode will
;;  highlight this Index, as well as the cross-references and section
;;  headings throughout this file.  You can get `linkd.el' here:
;;  http://dto.freeshell.org/notebook/Linkd.html.
;;
;;  (@> \"Things Defined Here\")
;;  (@> \"Documentation\")
;;    (@> \"Library `facemenu+.el' Puts Highlight on the Menu\")
;;    (@> \"User Option `hlt-use-overlays-flag'\")
;;    (@> \"Temporary or Permanent Highlighting\")
;;    (@> \"Commands\")
;;    (@> \"User Option `hlt-act-on-any-face-flag'\")
;;    (@> \"Hiding and Showing Text\")
;;      (@> \"Hiding and Showing Text - Icicles Multi-Commands\")
;;    (@> \"What Gets Highlighted: Region, Buffer, New Text You Type\")
;;    (@> \"Interference by Font Lock\")
;;    (@> \"Suggested Bindings\")
;;    (@> \"See Also\")
;;    (@> \"Commands That Won't Work in Emacs 20\")
;;    (@> \"To Do\")
;;  (@> \"Change log\")
;;  (@> \"Key Bindings\")
;;  (@> \"Menus\")
;;  (@> \"Variables and Faces\")
;;  (@> \"Misc Functions - Emacs 20+\")
;;  (@> \"Misc Functions - Emacs 21+\")
;;  (@> \"Functions for Highlighting Propertized Text - Emacs 21+\")
;;  (@> \"General functions\")
 
;;(@* \"Things Defined Here\")
;;
;;  Things Defined Here
;;  -------------------
;;
;;  Commands defined here:
;;
;;    `hlt-choose-default-face', `hlt-copy-props', `hlt-eraser',
;;    `hlt-eraser-mouse', `hlt-hide-default-face', `hlt-highlight',
;;    `hlt-highlight-all-prop', `hlt-highlight-enclosing-list',
;;    `hlt-highlighter', `hlt-highlighter-mouse',
;;    `hlt-highlight-property-with-value',
;;    `hlt-highlight-regexp-region', `hlt-highlight-regexp-to-end',
;;    `hlt-highlight-region', `hlt-highlight-single-quotations',
;;    `hlt-mouse-copy-props', `hlt-mouse-face-each-line',
;;    `hlt-next-face', `hlt-next-highlight', `hlt-paste-props',
;;    `hlt-previous-face', `hlt-previous-highlight',
;;    `hlt-replace-highlight-face', `hlt-show-default-face',
;;    `hlt-toggle-act-on-any-face-flag',
;;    `hlt-toggle-link-highlighting',
;;    `hlt-toggle-property-highlighting',
;;    `hlt-toggle-use-overlays-flag', `hlt-unhighlight-all-prop',
;;    `hlt-unhighlight-regexp-region',
;;    `hlt-unhighlight-regexp-to-end', `hlt-unhighlight-region',
;;    `hlt-unhighlight-region-for-face', `hlt-yank-props'.
;;
;;  User options (variables) defined here:
;;
;;    `hlt-act-on-any-face-flag', `hlt-auto-face-backgrounds',
;;    `hlt-auto-face-foreground', `hlt-auto-faces-flag',
;;    `hlt-default-copy/yank-props', `hlt-max-region-no-warning',
;;    `hlt-use-overlays-flag'.
;;
;;  Faces defined here:
;;
;;    `hlt-property-highlight', `minibuffer-prompt' (for Emacs 20).
;;
;;  Non-interactive functions defined here:
;;
;;    `hlt-+/--highlight-regexp-read-args',
;;    `hlt-+/--highlight-regexp-region', `hlt-add-listifying',
;;    `hlt-add-to-invisibility-spec', `hlt-delete-highlight-overlay',
;;    `hlt-highlight-faces-in-buffer', `hlt-flat-list',
;;    `hlt-highlight-faces-in-buffer',
;;    `hlt-listify-invisibility-spec',
;;    `hlt-mouse-toggle-link-highlighting',
;;    `hlt-mouse-toggle-property-highlighting',
;;    `hlt-nonempty-region-p', `hlt-props-to-copy/yank',
;;    `hlt-read-bg/face-name', `hlt-read-props-completing',
;;    `hlt-region-or-buffer-limits', `hlt-remove-if-not',
;;    `hlt-set-intersection', `hlt-set-union', `hlt-subplist',
;;    `hlt-tty-colors', `hlt-unhighlight-for-overlay'.
;;
;;  Internal variables defined here:
;;
;;    `hlt-copied-props', `hlt-face-nb', `hlt-last-face',
;;    `hlt-last-regexp', `hlt-map',
;;    `hlt-previous-use-overlays-flag-value',
;;    `hlt-prop-highlighting-state'.
 
;;(@* \"Documentation\")
;;
;;  Documentation
;;  -------------
;;
;;(@* \"Library `facemenu+.el' Puts Highlight on the Menu\")
;;  ** Library `facemenu+.el' Puts Highlight on the Menu **
;;
;;  If you load library `facemenu+.el' after you load library
;;  `highlight.el', then the commands defined here will also be
;;  available on a Highlight submenu in the Text Properties menus.
;;
;;(@* \"User Option `hlt-use-overlays-flag'\")
;;  ** User Option `hlt-use-overlays-flag'
;;
;;  You can highlight text in two ways using this library, depending
;;  on the value of user option `hlt-use-overlays-flag':
;;
;;   - non-nil means to highlight using overlays
;;   - nil means to highlight using text properties
;;
;;  Overlays are independent from the text itself.  They are not
;;  picked up when you copy and paste text.  By default, highlighting
;;  uses overlays.
;;
;;  Although highlighting recognizes only nil and non-nil values for
;;  `hlt-use-overlays-flag', other actions can have different
;;  behavior, depending on the non-nil value.  If it is `only' (the
;;  default value), then only overlay highlighting is affected.  If it
;;  is any other non-nil value, then both overlay highlighting and
;;  text-property highlighting are effected.  This is the case, for
;;  instance, for unhighlighting and for navigating among highlights.
;;
;;  For example, for unhighlighting, if `hlt-use-overlays-flag' is
;;  non-nil, then overlay highlighting is removed.  If it is not
;;  `only', then text-property highlighting is removed.  A value of
;;  nil thus removes both overlays and text properties.
;;
;;  Keep this sensitivity to the value of `hlt-use-overlays-flag' in
;;  mind.  For example, if you change the value after adding some
;;  highlighting, then that highlighting might not be removed by
;;  unhighlighting, unless you change the value back again.
;;
;;  You can toggle the value of `hlt-use-overlays-flag' at any time
;;  between nil and its previous non-nil value, using command
;;  `hlt-toggle-use-overlays-flag'.
;;
;;(@* \"Temporary or Permanent Highlighting\")
;; ** \"Temporary or Permanent Highlighting\" **
;;
;;  Generally, highlighting you add is temporary: it is not saved when
;;  you write your buffer to disk.  However, Emacs has a curious and
;;  unfamiliar feature called \"formatted\" or \"enriched\" text mode,
;;  which does record highlighting permanently.  See the Emacs manual,
;;  node `Requesting Formatted Text'.
;;
;;  To save highlighting permanently, do the following:
;;
;;  1. `M-x enriched-mode', to put your file buffer in minor mode
;;     `enriched-mode'.  You will see `Enriched' in the mode line.
;;
;;  2. Choose text-property highlighting, not overlay highlighting, by
;;     setting option `hlt-use-overlays-flag' to `nil'.  To do this
;;     using Customize, choose menu item `Highlight using text
;;     properties, not overlays'.
;;
;;  3. Choose the highlight face to use:
;;     `M-x hlt-choose-default-face'.
;;
;;  4. Highlight in any way provided by library `highlight.el'.  For
;;     example, use `hlt-highlighter' (personally, I bind it to `C-x
;;     mouse-2') to drag-highlight as if using a marker pen.
;;
;;  5. Save your file.
;;
;;     Note that, although highlighting in enriched-text mode modifies
;;     the buffer, it does not appear modified (check the beginning of
;;     the mode line), so if you make no other changes then using `C-x
;;     C-s' will not save your highlighting changes.  To remedy this,
;;     just do something besides highlighting - e.g., add a space and
;;     delete it - so that `C-x C-s' will save to disk.
;;
;;  When you reopen your file later, it will automatically be in
;;  enriched mode, and your highlighting will show.  However, be aware
;;  that font-locking interferes with enriched mode, so you will
;;  probably want to use it on files where you don't use font-locking.
;;
;;(@* \"Commands\")
;;  ** Commands **
;;
;;  You can use any face to highlight, and you can apply a mouse face
;;  instead of a face, if you like.  A mouse face shows up only when
;;  the mouse pointer is over it.
;;
;;  The main command to choose a face to use for highlighting (or for
;;  unhighlighting) is `hlt-choose-default-face'.  It reads a face
;;  name, with completion.
;;
;;  But you can alternatively choose a color name instead of a face
;;  name.  The completion candidates are annotated in buffer
;;  `*Completions*' with `Face' or `Color', to help you identify them.
;;
;;  If you choose a color instead of a face then an unnamed pseudo
;;  face is created and used.  It has the chosen color as background,
;;  and its foreground color is determined by the value of user option
;;  `hlt-auto-face-foreground'.  If that option is nil then
;;  highlighting does not change the existing foreground color.
;;  Otherwise, the option value is the foreground color used for
;;  highlighting.
;;
;;  Another way to choose the highlighting face is to use command
;;  `hlt-next-face' or `hlt-previous-face'.  These cycle among a
;;  smaller set of faces and background colors, the elements in the
;;  list value of option `hlt-auto-face-backgrounds'.  You can use a
;;  numeric prefix argument with these commands to choose any of the
;;  elements by its absolute position in the list.
;;
;;  Choosing the default highlighting face using
;;  `hlt-choose-default-face', `hlt-next-face', or `hlt-previous-face'
;;  affects the next highlighting or unhighlighting operation.  You
;;  can also choose to automatically cycle among the faces defined by
;;  `hlt-auto-face-backgrounds', with each (un)highlighting command
;;  using the next face in the list.  To choose this behavior,
;;  customize option `hlt-auto-faces-flag' to non-nil.
;;
;;  The commands with `region' in their name act on the text in the
;;  active region.  If the region is not active then they act on the
;;  text in the whole buffer.  The commands with `to-end' in their
;;  name act on the text from point to the end of the buffer.  See
;;  also (@* \"What Gets Highlighted: Region, Buffer, New Text You Type\").
;;
;;  The commands you will use the most often are perhaps
;;  `hlt-highlight', `hlt-highlighter', `hlt-next-highlight', and
;;  `hlt-previous-highlight'.  You might also often use the various
;;  commands to hide and show highlighted text.
;;
;;  You can use command `hlt-highlight' to highlight or unhighlight
;;  the region, or to highlight or unhighlight a regexp throughout the
;;  region, depending on the prefix argument.  It combines the
;;  behaviors of commands `hlt-highlight-region',
;;  `hlt-unhighlight-region', `hlt-highlight-regexp-region', and
;;  `hlt-highlight-regexp-region'.  I suggest that you bind
;;  `hlt-highlight' to a key - I use `C-x C-y'.
;;
;;  Commands `hlt-highlight-regexp-to-end' and
;;  `hlt-unhighlight-regexp-to-end' highlight and unhighlight a regexp
;;  from point to the end of the buffer, respectively.
;;
;;  Command `hlt-highlighter' lets you highlight text by simply
;;  dragging the mouse, just as you would use a highlighter (marker).
;;  You can thus highlight text the same way that you drag the mouse
;;  to define the region.
;;
;;  Command `hlt-eraser' lets you delete highlighting by dragging the
;;  mouse.  However, its behavior is different for overlays and text
;;  properties, and it is perhaps different from you expect.  If
;;  option `hlt-use-overlays-flag' is not `only' then it removes
;;  text-property highlighting for *ALL* faces (not just highlighting
;;  faces).
;;
;;  A prefix arg for `hlt-highlighter' and `hlt-eraser' acts the same
;;  as for `hlt-next-face': it lets you choose the face to use.  It
;;  has no effect for `hlt-eraser' unless `hlt-use-overlays-flag' is
;;  `only', in which case it erases the Nth face in
;;  `hlt-auto-face-backgrounds', where N is the prefix arg.
;;
;;  If you use Emacs 21 or later, you can use various commands that
;;  highlight and unhighlight text that has certain text properties
;;  with given values.  You can use them to highlight all text in the
;;  region or buffer that has a given property value.  An example is
;;  highlighting all links (text with property `mouse-face').  These
;;  commands are:
;;
;;  `hlt-highlight-all-prop' - Highlight text that has a given
;;                             property with any (non-nil) value.
;;
;;  `hlt-highlight-property-with-value' - Highlight text that has a
;;                             given property with certain values.
;;
;;  `hlt-unhighlight-all-prop' - Unhighlight highlighted propertized
;;                             text.
;;
;;  `hlt-mouse-toggle-link-highlighting' - Alternately highlight and
;;                             unhighlight links on a mouse click.
;;
;;  `hlt-toggle-link-highlighting' - Alternately highlight and
;;                             unhighlight links.
;;
;;  `hlt-mouse-toggle-property-highlighting' - Alternately highlight
;;                             and unhighlight propertized text on a
;;                             mouse click.
;;
;;  `hlt-toggle-property-highlighting' - Alternately highlight and
;;                             unhighlight propertized text.
;;
;;  As always for library `highlight.el', this \"highlighting\" can use
;;  property `mouse-face' instead of `face'.  You could, for example,
;;  highlight, using `mouse-face', all text that has property `foo' -
;;  or that has property `face', for that matter.
;;
;;  If you use Emacs 21 or later, you can use commands
;;  `hlt-next-highlight' and `hlt-previous-highlight' to navigate
;;  among highlights of a given face.
;;
;;  You can unhighlight the region/buffer or a regexp in the
;;  region/buffer using command `hlt-unhighlight-region' or
;;  `hlt-unhighlight-regexp-region'.  If you use overlay highlighting
;;  then you can use command `hlt-unhighlight-region-for-face' to
;;  unhighlight the region/buffer for an individual highlighting face
;;  - other highlighting faces remain.
;;
;;  You can replace a highlighting face in the region/buffer by
;;  another, using command `hlt-replace-highlight-face'.  With a
;;  prefix argument, property `mouse-face' is used, not property
;;  `face'.
;;
;;(@* \"Copy and Yank (Paste) Text Properties\")
;;  ** Copy and Yank (Paste) Text Properties **
;;
;;  You can highlight or unhighlight text by simply copying existing
;;  highlighting (or lack of any highlighting) from anywhere in Emacs
;;  and yanking (pasting) it anywhere else.
;;
;;  Put differently, you can copy and yank a set of text properties.
;;  You can use these commands to copy and yank any text properties,
;;  not just `face' or `mouse-face'.
;;
;;  To copy the text properties at a given position, use command
;;  `hlt-copy-props'.  You can then use command `hlt-yank-props' to
;;  yank those properties to the active region anywhere.  If the set
;;  of properties that you copy is empty, then yanking means
;;  effectively removing all text properties.
;;
;;  User option `hlt-default-copy/yank-props' controls which text
;;  properties to copy and yank, by default.  The default value of the
;;  option includes only `face', which means that only property `face'
;;  is copied and pasted.  That is typically what you want, for
;;  highlighting purposes.  A value of `t' for
;;  `hlt-default-copy/yank-props' means use all properties.
;;
;;  You can further control which text properties are copied or yanked
;;  when you use the commands, by using a prefix argument.  A plain or
;;  non-negative prefix arg means copy or yank all available text
;;  properties.  A negative prefix arg (e.g. `C--') means you are
;;  prompted for which text properties to use, among those available.
;;
;;  For copying, the available properties are those among
;;  `hlt-default-copy/yank-props' that are also present at the copy
;;  position.  For yanking, the available properties are those among
;;  `hlt-default-copy/yank-props' that have previously (last) been
;;  copied.
;;
;;(@* \"User Option `hlt-act-on-any-face-flag'\")
;;  ** User Option `hlt-act-on-any-face-flag' **
;;
;;  Library `highlight' generally acts only on faces that it controls,
;;  that is, faces that you have explicitly asked it to use for
;;  highlighting.  It sets the text property or overlay property
;;  `hlt-highlight' on such highlighted text, so that it can recognize
;;  which faces it has responsibility for.
;;
;;  Sometimes, you might want to hide and show text other than that
;;  controlled by library `highlight'.  Similarly, you might sometimes
;;  want to navigate among faces other than those used for
;;  highlighting.  You can control this using option
;;  `hlt-act-on-any-face-flag', which you can toggle at any time using
;;  command `hlt-toggle-act-on-any-face-flag'.
;;
;;(@* \"Hiding and Showing Text\")
;;  ** Hiding and Showing Text **
;;
;;  You can hide and show text that you have highlighted.  You will
;;  want to read the Emacs-Lisp manual (Elisp), section Invisible
;;  Text, to understand better what this entails.  In particular, you
;;  should understand that for library `highlight.el', hiding text
;;  means adding the symbol naming the face to be hidden to both:
;;
;;  1. a text or overlay `invisible' property, making the text or
;;     overlay susceptible to being hidden by buffer-local variable
;;     `buffer-invisibility-spec', and
;;
;;  2. the buffer's `buffer-invisibility-spec', so that it in fact
;;     becomes hidden.
;;
;;  After text has been hidden this way, and unless the highlighting
;;  has been removed completely by unhighlighting the text, the
;;  `invisible' property of that text keeps the names of the faces
;;  that have been applied to that text and hidden previously, even
;;  after you show that text again.  Showing a hidden face simply
;;  removes it from the `buffer-invisibility-spec'; it does not change
;;  any `invisible' properties.
;;
;;  For example, if you hide face `foo' at some buffer position:
;;
;;  1. The `invisible' property of the text or overlay at that
;;     position is updated to include `foo'.  If there are no other
;;     faces that have been applied to this text and then hidden, the
;;     `invisible' property is just `(foo)'.
;;
;;  2. `buffer-invisibility-spec' is also updated to include `foo'.
;;     This hides all text properties and overlay properties with
;;     `invisible' property `foo', throughout the buffer.  If there
;;     are no other invisible faces in the buffer, then
;;     `buffer-invisibility-spec' has value (foo).
;;
;;  If you then show face `foo' at that same buffer position, there is
;;  no change to the `invisible' property.  `buffer-invisibility-spec'
;;  is updated, by removing `foo': if it was (foo), it becomes ().
;;
;;  There are several commands for hiding and showing highlighted
;;  text.  The basic commands for hiding and showing are
;;  `hlt-hide-default-face' and `hlt-show-default-face', which you can
;;  use to hide and show the face last used for highlighting.  With a
;;  prefix argument, you are prompted for a different face to hide or
;;  show; it then becomes the default face for highlighting.  You can
;;  also change the default highlighting face at any time using
;;  command `hlt-choose-default-face'.
;;
;;(@* \"Hiding and Showing Text - Icicles Multi-Commands\")
;;  *** Hiding and Showing Text - Icicles Multi-Commands ***
;;
;;  The other hide and show commands depend on your also using
;;  Icicles, which is a set of libraries that offer enhanced
;;  completion.  Complete information about Icicles is here:
;;  `http://www.emacswiki.org/emacs/Icicles'.  You can obtain Icicles
;;  here: `http://www.emacswiki.org/emacs/Icicles_-_Libraries'.
;;
;;  The Icicles commands defined for `highlight.el' are the following:
;;
;;  `icicle-choose-faces', `icicle-choose-invisible-faces',
;;  `icicle-choose-visible-faces', `icicle-hide-faces',
;;  `icicle-hide-only-faces', `icicle-show-faces',
;;  `icicle-show-only-faces'.
;;
;;  These are all Icicles multi-commands, which means that they each
;;  let you choose multiple completion candidates or all candidates
;;  that match your current input (a regexp).  To use them you must
;;  also use Icicles.  You can use command `icicle-hide-faces' to hide
;;  any number of visible faces.  Any text is hidden that has that
;;  face as a text property or an overlay property, depending on the
;;  value of `hlt-use-overlays-flag'.
;;
;;  Command `icicle-show-faces' is the opposite of
;;  `icicle-hide-faces': it shows invisible text that has the faces
;;  you choose.  Neither `icicle-hide-faces' nor `icicle-show-faces'
;;  has any effect on other faces, besides those you choose to hide or
;;  show, respectively; they each do only one thing, hide or show.
;;
;;  Command `icicle-hide-only-faces' hides the faces you choose, and
;;  shows all other faces, and command `icicle-show-only-faces' does
;;  the opposite.  You can thus use these commands to specify exactly
;;  what faces should be invisible and visible.  Empty input means
;;  none: If you choose no faces to hide (that is, hit `RET' with an
;;  empty minibuffer), then all faces will be made visible; if you
;;  choose no faces to show, then all will be hidden.
;;
;;  Currently, face attributes for highlighting are combined when
;;  overlays overlap, but the same is not true for text properties.
;;  For example, if you highlight a word with face `foo', and then you
;;  highlight it with face `bar', only `bar' remains as the face for
;;  that word.  With overlays, the attributes of the two faces are
;;  composed.  When you hide or show faces, this behavior difference
;;  has an effect.
;;
;;  You can hide text using the commands in this library for any of
;;  the purposes that you might use invisible text in Emacs.  This
;;  gives you an easy, interactive way to control which sections of
;;  text are seen by search and other Emacs tools.  Use the regexp
;;  highlighting commands, for instance, to highlight text
;;  syntactically, and then hide that highlighted text.  Or use
;;  `hlt-highlighter' to sweep over text that you want to hide with
;;  the mouse.
;;
;;  Hiding and showing faces also provides a \"conditional text\"
;;  feature similar to that available in desktop publishing
;;  applications such as Adobe Framemaker.  Publishers often use such
;;  a feature to produce different output documents from the same
;;  source document (\"single sourcing\").  You can use this feature
;;  similarly, if you have an application (printing is one example)
;;  that is sensitive to whether text is visible or invisible.  One
;;  caveat: Emacs faces are not saved when you save your file.
;;
;;(@* \"What Gets Highlighted: Region, Buffer, New Text You Type\")
;;  ** What Gets Highlighted: Region, Buffer, New Text You Type **
;;
;;  Most mention of the \"region\" in this commentary should really say
;;  \"active region or buffer\".  If the region is active and non-empty,
;;  then only the text in the region is targeted by the commands in
;;  this library.  This lets you easily control the scope of
;;  operations.
;;
;;  If the region is not active or it is empty, then:
;;
;;  - If `hlt-use-overlays-flag' is nil and there is no prefix arg,
;;    then the face is applied to the next characters that you type.
;;
;;  - Otherwise, the face is applied to the entire buffer (or the
;;    current restriction, if the buffer is narrowed).
;;
;;(@* \"Interference by Font Lock\")
;;  ** Interference by Font Lock **
;;
;;  If you use Emacs 22 or later, then you can use this library in
;;  conjunction with library `font-lock+.el' (it is loaded
;;  automatically, if available).  That prevents font-locking from
;;  removing any highlighting face properties that you apply using the
;;  commands defined here.
;;
;;  Otherwise, when `hlt-use-overlays-flag' is nil, font-lock
;;  highlighting will interfere with the highlighting of this library.
;;  In most cases, you will be able to highlight text, but sooner or
;;  later font-lock will erase that highlighting when it refontifies
;;  the buffer.  If `hlt-use-overlays-flag' is non-nil, there is no
;;  such problem : font-lock has no effect on overlays.
;;
;;(@* \"Suggested Bindings\")
;;  ** Suggested Bindings **
;;
;;  Library `highlight.el' binds many of its commands to keys on the
;;  prefix key `C-x X'.  It also adds menu items to the `Region'
;;  submenu of the `Edit' menu-bar menu, if you have a `Region'
;;  submenu.  To obtain this menu, load library `menu-bar+.el'.
;;
;;  Library `highlight.el' makes no other key bindings.  Here are some
;;  additional, suggested bindings (`C-x C-y', `C-x mouse-2', `C-x
;;  S-mouse-2', `C-S-p', and `C-S-n', respectively):
;;
;;   (define-key ctl-x-map [(control ?y)]     'hlt-highlight)
;;   (define-key ctl-x-map [(down-mouse-2)]   'hlt-highlighter)
;;   (define-key ctl-x-map [(S-down-mouse-2)] 'hlt-eraser)
;;   (global-set-key [(shift control ?p)]     'hlt-previous-highlight)
;;   (global-set-key [(shift control ?n)]     'hlt-next-highlight)
;;   (global-set-key [(control meta shift ?s)]
;;                   'hlt-highlight-enclosing-list)
;;
;;(@* \"See Also\")
;;  ** See Also **
;;
;;  * `highlight-chars.el' - Provides ways to highlight different sets
;;    of characters, including whitespace and Unicode characters.  It
;;    is available here:
;;    http://www.emacswiki.org/highlight-chars.el              (code)
;;    http://www.emacswiki.org/ShowWhiteSpace#HighlightChars   (doc)
;;
;;  * `hi-lock.el' - The features of `highlight.el' are complementary
;;    to those of vanilla Emacs library `hi-lock.el', so you can use
;;    the two libraries together.  See this page for a comparison:
;;    http://www.emacswiki.org/HighlightTemporarily.
;;
;;(@* \"Commands That Won't Work in Emacs 20\")
;;  ** Commands That Won't Work in Emacs 20 **
;;
;;  The following commands and options work only for Emacs versions
;;  more recent than Emacs 20:
;;
;;  `hlt-act-on-any-face-flag', `hlt-hide-default-face',
;;  `hlt-highlight-property-with-value', `hlt-next-highlight',
;;  `hlt-previous-highlight', `hlt-show-default-face',
;;  `hlt-toggle-act-on-any-face-flag'.
;;
;;(@* \"To Do\")
;;  ** To Do **
;;
;;  1. Add commands to show and hide boolean combinations of faces.
;;
;;  2. Faces are not accumulated as text properties.
;;     Highlighting with one face completely replaces the previous
;;     highlight.  Overlays don't have this limitation.  Text
;;     properties need not have it either, but they do, for now.
;;
;;(@* \"Acknowledgement\")
;;  **  Acknowledgement **
;;
;;  Some parts of this library were originally based on a library of
;;  the same name written and copyrighted by Dave Brennan,
;;  brennan@hal.com, in 1992.  I haven't been able to locate that
;;  file, so my change log is the only record I have of what our
;;  relative contributions are.
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (hideshow-org . [(20120223 1450) nil "Provides org-mode like hide and show for hideshow.el" single ";;; Commentary:
;;
;; hideshow-org.el provides an org-mode like interface to the
;; hideshow.el file.
;;
;; org-mode provides an elegant means of interacting with outlines
;; that one can toggle with the TAB key and Shift TAB.
;; hideshow-org.el is my attempt to bring the org-mode like hiding and
;; showing to code.
;;
"]) (hide-lines . [(20130824 1207) nil "Commands for hiding lines based on a regexp" single nil]) (hide-comnt . [(20131227 116) nil "Hide/show comments in code." single ";;; Commentary:
;;
;;  Hide/show comments in code.
;;
;;
;;  Macros defined here:
;;
;;    `with-comments-hidden'.
;;
;;  Commands defined here:
;;
;;    `hide/show-comments', `hide/show-comments-toggle'.
;;
;;  User options defined here:
;;
;;    `ignore-comments-flag'.
;;
;;
;;  Put this in your init file (`~/.emacs'):
;;
;;   (require 'hide-comnt)
;;
;;
;;  Note for Emacs 20: The commands and option defined here DO NOTHING
;;  IN EMACS 20.  Nevertheless, the library can be byte-compiled in
;;  Emacs 20 and `hide-comnt.elc' can be loaded in later Emacs
;;  versions and used there.  This is the only real use of this
;;  library for Emacs 20: it provides macro `with-comments-hidden'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (hi2 . [(20130925 558) nil "indentation module for Haskell Mode" single ";;; Commentary:

;; This is a modified version of haskell-indentation-mode.  Currently
;; the semantic parser is not changed, but the UI of tab completion is
;; reworked.  Most notably:

;;  - DEL and C-d is not mapped: if you want to indent backwards, you can
;;    use S-TAB.  This means no random jumping on backspace anymore.
;;
;;  - TAB steps to the right as before, but when the end is reached, it
;;    starts going to the left instead of wrapping around.
;;
;;  - TAB stays inside the code, instead of going to the beginning of the
;;    line.  As in pyhton-mode and perl-mode.
;;
;;  - Region indentation common case is supported: TAB and S-TAB is simply
;;    moving the whole region to the left/right by 1-column.  Can be
;;    pressed repeatedly.
;;
;;  - The current indentations are shown as underscores in the current
;;    line.  So you have some visual indication on what's gonna happen.
;;    Also useful while hacking on the parser and want to see the results.
;;    Can be turned off by setting hi2-show-indentations to nil in your
;;    init file or calling hi2-disable-show-indentations from the buffer.
;;    If there are collisions with other overlay hacking modes
;;    (e.g. fill-column-indicator), try to turn off
;;    hi2-show-indentations-after-eol.
;;
;;  - The buffer is not changed when indentation is not changed (so there
;;    are no undo points created and no dirty flag in the buffer if
;;    pressing TAB had no effect).
;;
;;  - The code for all this is somewhat commented and cleaned.

;; There is ongoing development on making this better and I invite
;; everyone to participate (report bugs, fix issues, etc.):
;;   https://github.com/errge/hi2
;;
;; Once this is stable and better in every way than the default
;; haskell-indentation-mode, I'm happy to merge it with haskell-mode,
;; but until this is moving fast, I want to keep it separate.

;;; Installation:

;; To turn indentation on for all Haskell buffers under Haskell mode
;; <http://www.haskell.org/haskell-mode/> add this to .emacs:
;;
;;    (add-hook haskell-mode-hook 'turn-on-hi2)
;;
;; Otherwise, call `hi2-mode'.

"]) (hexrgb . [(20131226 1855) nil "Functions to manipulate colors, including RGB hex strings." single ";;; Commentary:
;;
;;  Functions to manipulate colors, including RGB hex strings.
;;
;;  This library provides functions for converting between RGB (red,
;;  green, blue) color components and HSV (hue, saturation, value)
;;  color components.  It helps you convert among Emacs color
;;  components (whole numbers from 0 through 65535), RGB and HSV
;;  floating-point components (0.0 through 1.0), Emacs color-name
;;  strings (such as \"blue\"), and hex RGB color strings (such as
;;  \"#FC43A7912\").
;;
;;  An RGB hex string, such as used as a frame `background-color'
;;  property, is a string of 1 + (3 * n) characters, the first of
;;  which is \"#\".  The other characters are hexadecimal digits, in
;;  three groups representing (from the left): red, green, and blue
;;  hex codes.
;;
;;  Constants defined here:
;;
;;    `hexrgb-defined-colors', `hexrgb-defined-colors-alist',
;;    `hexrgb-defined-colors-no-dups',
;;    `hexrgb-defined-colors-no-dups-alist'.
;;
;;  Options defined here:
;;
;;    `hexrgb-canonicalize-defined-colors-flag'.
;;
;;  Commands defined here:
;;
;;    `hexrgb-blue', `hexrgb-complement', `hexrgb-green',
;;    `hexrgb-hue', `hexrgb-read-color', `hexrgb-red',
;;    `hexrgb-saturation', `hexrgb-value'.
;;
;;  Non-interactive functions defined here:
;;
;;    `hexrgb-approx-equal', `hexrgb-canonicalize-defined-colors',
;;    `hexrgb-color-name-to-hex', `hexrgb-color-values-to-hex',
;;    `hexrgb-color-value-to-float', `hexrgb-defined-colors',
;;    `hexrgb-defined-colors-alist',
;;    `hexrgb-delete-whitespace-from-string',
;;    `hexrgb-float-to-color-value', `hexrgb-hex-char-to-integer',
;;    `hexrgb-hex-to-color-values', `hexrgb-hex-to-hex',
;;    `hexrgb-hex-to-hsv', `hexrgb-hex-to-rgb', `hexrgb-hsv-to-hex',
;;    `hexrgb-hex-to-int', `hexrgb-hsv-to-rgb',
;;    `hexrgb-increment-blue', `hexrgb-increment-equal-rgb',
;;    `hexrgb-increment-green', `hexrgb-increment-hex',
;;    `hexrgb-increment-hue', `hexrgb-increment-red',
;;    `hexrgb-increment-saturation', `hexrgb-increment-value',
;;    `hexrgb-int-to-hex', `hexrgb-blue-hex', `hexrgb-green-hex',
;;    `hexrgb-red-hex', `hexrgb-rgb-hex-string-p',
;;    `hexrgb-rgb-hex-to-rgb-hex', `hexrgb-rgb-to-hex',
;;    `hexrgb-rgb-to-hsv'.
;;
;;
;;  Add this to your initialization file (~/.emacs or ~/_emacs):
;;
;;    (require 'hexrgb)
;;
;;  Do not try to use this library without a window manager.
;;  That is, do not use this with `emacs -nw'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (heroku-theme . [(20130809 2143) nil "Heroku color theme" single ";;; Commentary:
;;
;; Based on the aesthetics of Heroku articles such as
;; http://devcenter.heroku.com/articles/python
;;
;; Installation (Package.el)
;; 1. M-x package-install color-theme-heroku
;; 2. (load-theme 'heroku t)


(deftheme heroku
  \"Heroku color theme\")

(custom-theme-set-faces
 'heroku
 '(default (( t (:background \"#3f464c\" :foreground \"#eeeeec\"))))
 '(cursor ((t (:background \"#fce94f\"))))
 '(border ((t (:foreground \"#ffffff\"))))
 '(region ((t (:background \"#6c91be\"))))
 '(fringe ((t (:background \"#3f464c\"))))
 '(header-line ((t (:foreground \"#f0dfaf\" :background \"#2b2b2b\"))))
 '(highlight ((t (:background \"#2b2b2b\"))))

 '(mode-line ((t (:foreground \"#030303\" :background \"#bdbdbd\"
                              :box (:line-width 1 :color \"#000000\" :style released-button)))))
 ;; uncomment and use the following mode-line below for use with emacs-powerline
 ;; (https://github.com/jonathanchu/emacs-powerline.git)
 ;; '(mode-line ((t (:foreground \"#030303\" :background \"#bdbdbd\"))))
 '(minibuffer-prompt ((t (:foreground \"#729fcf\" :bold t))))

 ;; magit
 '(magit-log-sha1 ((t (:foreground \"#cf6a4c\"))))
 '(magit-log-head-label-local ((t (:foreground \"#3387cc\"))))
 '(magit-log-head-label-remote ((t (:foreground \"#65b042\"))))
 '(magit-branch ((t (:foreground \"#fbde2d\"))))
 '(magit-section-title ((t (:foreground \"#adc6ee\"))))
 '(magit-item-highlight ((t (:background \"#6c91be\"))))

 ;; hl-line-mode
 '(hl-line-face ((t (:background \"#2b2b2b\"))))

 ;; font lock
 '(font-lock-builtin-face ((t (:foreground \"#ffffff\"))))
 '(font-lock-comment-face ((t (:foreground \"#aeaeae\"))))
 '(font-lock-function-name-face ((t (:foreground \"#ffffff\"))))
 '(font-lock-keyword-face ((t (:foreground \"#fbde2d\"))))
 '(font-lock-string-face ((t (:foreground \"#adc6ee\"))))
 '(font-lock-type-face ((t (:foreground\"#ffffff\"))))
 '(font-lock-variable-name-face ((t (:foreground \"#fbde2d\"))))
 '(font-lock-warning-face ((t (:foreground \"Red\" :bold t))))

 ;; show-paren
 '(show-paren-match-face ((t (:foreground \"#000000\" :background \"#F0F6FC\" :weight bold))))
 '(show-paren-mismatch-face ((t (:foreground \"#960050\" :background \"#1E0010\" :weight bold))))

 ;; search
 '(isearch ((t (:foreground \"#a33a37\" :background \"#f590ae\"))))
 '(isearch-fail ((t (:foreground \"#ffffff\" :background \"#f590ae\"))))
 '(lazy-highlight ((t (:foreground \"#465457\" :background \"#000000\"))))

 ;; ido mode
 '(ido-first-match ((t (:foreground \"#fbde2d\" :weight bold))))
 '(ido-only-match ((t (:foreground \"#d8fa3c\" :weight bold))))
 '(ido-subdir ((t (:foreground \"#adc6ee\"))))

 ;; org-mode
 '(org-agenda-date-today
   ((t (:foreground \"white\" :slant italic :weight bold))) t)
 '(org-agenda-structure
   ((t (:inherit font-lock-comment-face))))
 '(org-archived ((t (:foreground \"#eeeeec\" :weight bold))))
 '(org-checkbox ((t (:background \"#5f5f5f\" :foreground \"white\"
                                 :box (:line-width 1 :style released-button)))))
 '(org-date ((t (:foreground \"#8cd0d3\" :underline t))))
 '(org-deadline-announce ((t (:foreground \"#8787FF\"))))
 '(org-done ((t (:bold t :weight bold :foreground \"#bff740\"))))
 '(org-headline-done ((t (:foreground \"#8787ff\"))))
 '(org-level-1 ((t (:foreground \"#dfaf8f\"))))
 '(org-level-2 ((t (:foreground \"#aeaeae\"))))
 '(org-level-3 ((t (:foreground \"#94bff3\"))))
 '(org-level-4 ((t (:foreground \"#e0cf9f\"))))
 '(org-level-5 ((t (:foreground \"#93e0e3\"))))
 '(org-level-6 ((t (:foreground \"#8fb28f\"))))
 '(org-level-7 ((t (:foreground \"#8c5353\"))))
 '(org-level-8 ((t (:foreground \"#4c7073\"))))
 '(org-table ((t (:foreground \"#8787FF\"))))
 '(org-todo ((t (:bold t :foreground \"#e21d24\" :weight bold))))
 '(org-upcoming-deadline ((t (:inherit font-lock-keyword-face))))
 '(org-warning ((t (:bold t :foreground \"#cc9393\"d :weight bold))))
)

;;;###autoload
(and load-file-name
     (boundp 'custom-theme-load-path)
     (add-to-list 'custom-theme-load-path
                  (file-name-as-directory
                   (file-name-directory load-file-name))))

(provide-theme 'heroku)
;;; heroku-theme.el ends here
"]) (heroku . [(20120629 1113) nil "Interface to Heroku apps." single ";;; Commentary:

;; Enhance Heroku `run' and `pg:psql' commands with Emacs equivalents.

;; Requires `heroku' command-line client to be installed; this simply
;; shells out and wraps it in a nicer interface. See
;; https://toolbelt.herokuapp.com for installation instructions.

;; Install this via M-x package-install-file or from Marmalade:
;; http://marmalade-repo.org

"]) (hemisu-theme . [(20130508 1144) nil "Hemisu for Emacs." tar ";;; Commentary:
;;
;; A port of Hemisu theme to Emacs. (https://github.com/noahfrederick/Hemisu)
;;
;;; Installation:
;;
;;   M-x package-install -> hemisu-theme
;;
;;
;;   (load-theme 'hemisu-dark t)
;;
;;     or
;;
;;   (load-theme 'hemisu-light t)
;;
;; Don't forget that the theme requires Emacs 24.
;;
;;; Bugs
;;
;; None that I'm aware of.
;;
;;; Credits
;;
;; Noah Frederick created the original theme for vim on such this port
;; is based.
;;
"]) (help-mode+ . [(20131226 1855) nil "Extensions to `help-mode.el'" single ";;; Commentary:
;;
;;    Extensions to `help-mode.el'
;;
;;
;;  ***** NOTE: The following functions defined in `help-mode.el'
;;              have been REDEFINED HERE:
;;
;;  `help-make-xrefs' - Put symbol clause first, so cross-xref links
;;                      show doc for both fun and var, if available.
;;  `help-mode'       - If `one-window-p', then delete Help frame.
;;  `help-xref-on-pp' - Library names are buttonized.
;;
;;
;;  Put this in your initialization file (`~/.emacs'):
;;
;;    (require 'help-mode+)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (help-fns+ . [(20140104 2004) nil "Extensions to `help-fns.el'." single ";;; Commentary:
;;
;;    Extensions to `help-fns.el'.  Also includes a redefinition of
;;    `describe-face', which is from `faces.el'.
;;
;;    ************************** IMPORTANT ***************************
;;    *                                                              *
;;    *  Byte-compiling this file in one Emacs version and using the *
;;    *  compiled file in another version works ONLY as follows:     *
;;    *                                                              *
;;    *  If you compile in Emacs 22, use it only for Emacs 22.       *
;;    *  If you compile in Emacs 23. use it for Emacs 22, 23, or 24. *
;;    *  If you compile in Emacs 24, use it only for Emacs 24.       *
;;    *                                                              *
;;    ****************************************************************
;;
;;
;;  Keys bound here:
;;
;;    `C-h B'      `describe-buffer'
;;    `C-h c'      `describe-command'     (replaces `describe-key-briefly')
;;    `C-h o'      `describe-option'
;;    `C-h C-c'    `describe-key-briefly' (replaces `C-h c')
;;    `C-h C-o'    `describe-option-of-type'
;;    `C-h M-c'    `describe-copying'     (replaces `C-h C-c')
;;    `C-h M-f'    `describe-file'
;;    `C-h M-k'    `describe-keymap'
;;    `C-h M-l'    `find-function-on-key'
;;
;;  Commands defined here:
;;
;;    `describe-buffer', `describe-command', `describe-file',
;;    `describe-keymap', `describe-option', `describe-option-of-type'.
;;
;;  User options defined here:
;;
;;    `help-cross-reference-manuals' (Emacs 23.2+).
;;
;;  Faces defined here:
;;
;;    `describe-variable-value' (Emacs 24+).
;;
;;  Non-interactive functions defined here:
;;
;;    `describe-mode-1', `help-all-exif-data',
;;    `help-commands-to-key-buttons', `help-custom-type',
;;    `help-documentation', `help-documentation-property',
;;    `help-key-button-string', `help-remove-duplicates',
;;    `help-substitute-command-keys', `help-value-satisfies-type-p',
;;    `help-var-inherits-type-p', `help-var-is-of-type-p',
;;    `help-var-matches-type-p', `help-var-val-satisfies-type-p',
;;    `Info-first-index-occurrence' (Emacs 23.2+),
;;    `Info-indexed-find-file' (Emacs 23.2+), `Info-indexed-find-node'
;;    (Emacs 23.2+), `Info-index-entries-across-manuals' (Emacs
;;    23.2+), `Info-index-occurrences' (Emacs 23.2+),
;;    `Info-make-manuals-xref' (Emacs 23.2+).
;;
;;  Internal variables defined here:
;;
;;    `Info-indexed-file' (Emacs 23.2+), `Info-indexed-nodes' (Emacs
;;    23.2+), `variable-name-history'.
;;
;;
;;  ***** NOTE: The following command defined in `faces.el'
;;              has been REDEFINED HERE:
;;
;;  `describe-face'.
;;
;;
;;  ***** NOTE: The following command defined in `help.el'
;;              has been REDEFINED HERE:
;;
;;  `describe-mode'.
;;
;;
;;  ***** NOTE: The following functions defined in `help-fns.el'
;;              have been REDEFINED HERE:
;;
;;  `describe-function', `describe-function-1', `describe-variable',
;;  `help-fns--key-bindings', `help-fns--signature',
;;
;;
;;  ***** NOTE: The following command defined in `package.el'
;;              has been REDEFINED HERE:
;;
;;  `describe-package'.
;;
;;
;;  Put this in your initialization file (`~/.emacs'):
;;
;;    (require 'help-fns+)
;;
;;  Acknowledgement: Passing text properties on doc strings to the
;;  *Help* buffer is an idea from Johan bockgard.  He sent it on
;;  2007-01-24 to emacs-devel@gnu.org, Subject
;;  \"display-completion-list should not strip text properties\".
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (help+ . [(20131226 1852) nil "Extensions to `help.el'." single ";;; Commentary:
;;
;;    Extensions to `help.el' for Emacs 22 and later.  For similar
;;    extensions to `help.el' for Emacs 20, see `help+20.el'.
;;
;;  Commands defined here:
;;
;;    `help-on-click/key', `mouse-help-on-click',
;;    `mouse-help-on-mode-line-click', `pop-to-help-toggle'.
;;
;;  Non-interactive functions defined here:
;;
;;    `help-on-click/key-lookup'.
;;
;;  Internal variables defined here:
;;
;;    `help-origin-buffer'.
;;
;;
;;  ***** NOTE: The following functions defined in `help.el' have
;;              been REDEFINED HERE:
;;
;;  `describe-key', `where-is'.
;;
;;
;;  ***** NOTE: The doc string for `help-for-help' has been
;;              REDEFINED HERE (see `make-help-screen help-for-help')
;;
;;  The following bindings are made here:
;;
;;    `C-h u'      `manual-entry'
;;    `C-h C-a'    `apropos'
;;    `C-h C-l'    `locate-library'
;;    `C-h RET'    `help-on-click/key'
;;    `C-h M-a'    `apropos-documentation'
;;    `C-h M-o'    `pop-to-help-toggle'
;;    `C-h C-M-a'  `tags-apropos'
;;    [mouse-1]    `mouse-help-on-click' (non-mode-line)
;;    [mouse-1]    `mouse-help-on-mode-line-click' (mode-line)
;;
;;  Suggested additional binding:
;;
;;   (global-set-key [f1] 'help-on-click/key)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (helm-themes . [(20130905 731) ((helm (1 0))) "Color theme selection with helm interface" single ";;; Commentary:

;; helm-themes.el provide theme selection with helm interface.
;; Its persistent action can set theme temporary.
;;

"]) (helm-swoop . [(20140113 558) ((helm (1 0)) (emacs (24))) "Efficiently hopping squeezed lines powered by helm interface" tar ";;; Commentary:

;; List the all lines to another buffer, which is able to squeeze
;; by any words you input. At the same time, the original buffer's
;; cursor is jumping line to line according to moving up and down
;; the list.

;; Example config
;; ----------------------------------------------------------------
;; ;; helm from https://github.com/emacs-helm/helm
;; (require 'helm)

;; ;; Locate the helm-swoop folder to your path
;; ;; This line is unnecessary if you get this program from MELPA
;; (add-to-list 'load-path \"~/.emacs.d/elisp/helm-swoop\")

;; (require 'helm-swoop)

;; ;; Change keybinds to whatever you like :)
;; (global-set-key (kbd \"M-i\") 'helm-swoop)
;; (global-set-key (kbd \"M-I\") 'helm-swoop-back-to-last-point)
;; (global-set-key (kbd \"C-c M-i\") 'helm-multi-swoop)
;; (global-set-key (kbd \"C-x M-i\") 'helm-multi-swoop-all)

;; ;; When doing isearch, hand the word over to helm-swoop
;; (define-key isearch-mode-map (kbd \"M-i\") 'helm-swoop-from-isearch)
;; (define-key helm-swoop-map (kbd \"M-i\") 'helm-multi-swoop-all-from-helm-swoop)

;; ;; Save buffer when helm-multi-swoop-edit complete
;; (setq helm-multi-swoop-edit-save t)

;; ;; If this value is t, split window inside the current window
;; (setq helm-swoop-split-with-multiple-windows nil)

;; ;; Split direction. 'split-window-vertically or 'split-window-horizontally
;; (setq helm-swoop-split-direction 'split-window-vertically)

;; ;; If nil, you can slightly boost invoke speed in exchange for text color
;; (setq helm-swoop-speed-or-color nil)
;; ----------------------------------------------------------------

;; Helm Swoop Edit
;; While doing helm-swoop, press keybind [C-c C-e] to move to edit buffer.
;; Edit the list and apply by [C-x C-s]. If you'd like to cancel, [C-c C-g]

"]) (helm-spotify . [(20131014 1421) ((helm (0 0 0)) (multi (2 0 0))) "Control Spotify with Helm." single ";;; Commentary:
;;
;; A search & play interface for Spotify.
;;
;; Currently supports OSX, Linux & Windows.
;;
;; (Want support for another platform? There's a guide in the github README.)

"]) (helm-spaces . [(20130605 900) ((helm (1 0)) (spaces (0 1 0))) "helm sources for spaces" single ";;; Commentary:


;; Installation:

;; Add the following to your Emacs init file:
;;
;; (require 'helm-spaces)  ;; Not necessary if using ELPA package
;; (global-set-key (kbd \"C-c s\") 'helm-spaces)

;; That's all.

"]) (helm-sheet . [(20130630 539) ((helm (1 0))) "helm sources for sheet" single ";;; Commentary:

;; Add the following to your Emacs init file:
;;
;; (require 'helm-sheet)  ;; Not necessary if using ELPA package
;; (global-set-key (kbd \"C-c s\") 'helm-sheet)

;; That's all.

"]) (helm-rubygems-local . [(20130711 1811) ((helm (1 5 3))) "Installed local rubygems find-file for helm" single nil]) (helm-recoll . [(20130905 1822) ((helm (1 5 4))) "helm interface for the recoll desktop search tool." single ";;; Commentary:
;;  ===========
;;
;; You need to create some helm-recoll sources before you can use them.
;; You can create sources using the `helm-recoll-create-source' function,
;; e.g. like this:
;;  (helm-recoll-create-source \"docs\" \"~/.recoll/docs\")
;;  (helm-recoll-create-source \"progs\" \"~/.recoll/progs\")
;;
;; Press C-c ? in the helm buffer to see information about how to query recoll

;; Then you can use the sources in helm like this: (helm :sources '(helm-source-recoll-docs helm-source-recoll-progs))

;;; Installation:
;;  =============
;;
;; Add code to your init (~/.emacs) file to create some sources (see above),
;; and then add a require statement for the library: (require 'helm-recoll)

"]) (helm-rb . [(20131123 839) ((helm (1 0)) (helm-ag-r (20131123))) "Search Ruby's method by ag and display helm" tar ";;; Commentary:
;; See readme.md
"]) (helm-rails . [(20130424 819) ((helm (1 5 1)) (inflections (1 1))) "Helm extension for Rails projects." single ";;; Commentary:
;;
;; Helm Rails extension provides snappy navigation through rails
;; projects. It is possible to traverse through
;; resource and files related to the current file.
;;
"]) (helm-pydoc . [(20131204 756) ((helm (1 0))) "pydoc with helm interface" tar ";;; Commentary:

"]) (helm-projectile . [(20131209 505) ((helm (1 4 0)) (projectile (0 10 0))) "Helm integration for Projectile" single ";;; Commentary:
;;
;; This library provides easy project management and navigation.  The
;; concept of a project is pretty basic - just a folder containing
;; special file.  Currently git, mercurial and bazaar repos are
;; considered projects by default.  If you want to mark a folder
;; manually as a project just create an empty .projectile file in
;; it.  See the README for more details.
;;
"]) (helm-project-persist . [(20130601 1328) ((helm (1 5 2)) (project-persist (0 1 4))) "Helm integration for project-persist package" single ";;; Commentary:

;; helm-project-persist provides capabilities to show and open
;; registered project from project-persist.

"]) (helm-package . [(20140108 2223) ((helm (1 0)) (cl-lib (0 3))) "Listing ELPA packages with helm interface" single ";;; Commentary:

;; Show available packages and installed packages with helm interface

"]) (helm-orgcard . [(20130608 430) ((helm (1 5 2))) "browse the orgcard by helm" single ";;; Commentary:

;; Put the helm-orgcard.el to your
;; load-path.
;; Add to .emacs:
;; (require 'helm-orgcard)
;;
;; Original version is anything-orgcard, and port to helm.
;; https://gist.github.com/kiwanami/1345100
;; 


"]) (helm-open-github . [(20140107 1905) ((helm (1 0)) (gh (1 0))) "Utilities of Opening Github Page" single ";;; Commentary:

;; Open github URL utilities. This package is inspired by URL below.
;;   - http://shibayu36.hatenablog.com/entry/2013/01/18/211428

"]) (helm-migemo . [(20130820 440) ((helm (1 5 3)) (migemo (1 9))) "Migemo plug-in for helm" single ";;; Commentary:
;;
;; Migemo extension of `helm'. Use `helm-migemo' instead of
;; `helm'. If `helm-migemo' is invoked with prefix argument,
;; `helm' is migemo-ized. This means that pattern matching of
;; `helm' candidates is done by migemo-expanded `helm-pattern'.

"]) (helm-ls-hg . [(20131121 52) nil "List hg files in hg project." single nil]) (helm-ls-git . [(20140104 657) nil "list git files." single nil]) (helm-j-cheatsheet . [(20131228 441) ((helm (1 5 3))) "Quick J reference for Emacs" single ";;; Commentary:
;;
;; The J cheat sheet for Emacs:
;; * look up a command by English name (use C-g when done)
;; * look up a command at http://www.jsoftware.com/help/dictionary/ (use C-m)
;; * insert a command by English name (use C-e)

"]) (helm-helm-commands . [(20130902 1048) ((helm (1 5 4))) "List all helm commands with helm" single ";;; Commentary: 
;;
;; Bitcoin donations gratefully accepted: 16iXhMdmTBcmrJAcDyv1H371mjXZNfDg7z
;;
;; This provides a single command `helm-helm-commands' which will present a helm buffer 
;; containing a list of helm commands and short descriptions. You can press C-z on an item
;; to see a longer description of the command, and RET to execute the command.
;;
;; Note: you can achieve the same thing with the `helm-M-x' command which comes with helm,
;; but that requires a few more keystrokes and doesn't show descriptions by default.
;;
;;;;


;;; Installation:
;;
;; Put helm-helm-commands.el in a directory in your load-path, e.g. ~/.emacs.d/
;; You can add a directory to your load-path with the following line in ~/.emacs
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;; where ~/elisp is the directory you want to add 
;; (you don't need to do this for ~/.emacs.d - it's added by default).
;;
;; Add the following to your ~/.emacs startup file.
;;
;; (require 'helm-helm-commands)

"]) (helm-hatena-bookmark . [(20131128 557) ((helm (1 5 6))) "Hatena::Bookmark helm.el interface" single ";;; Commentary:
;; `helm-hatena-bookmark' is `helm' interface of your Hatena::Bookmark.
;; `helm-c-source-hatena-bookmark' is a source for your Hatena::Bookmark.
;; `helm-hatena-bookmark-get-dump' is function to get dump your Hatena::Bookmark.

;;; Install
;; Put this file into load-path'ed directory, and byte compile it if
;; desired.  And put the following expression into your ~/.emacs.
;;
;; (require 'helm-hatena-bookmark)
;; (setq helm-hatena-bookmark-full-frame t)
;;
;; And, you should execute `helm-hatena-bookmark-get-dump to reflesh dump file.

"]) (helm-gtags . [(20131226 711) ((helm (1 5 6))) "GNU GLOBAL helm interface" single ";;; Commentary:

;; `helm-gtags.el' is a `helm' interface of GNU Global.
;; `helm-gtags.el' is not compatible `anything-gtags.el', but `helm-gtags.el'
;; is designed for fast search.

;;
;; To use this package, add these lines to your init.el or .emacs file:
;;
;;     ;; Enable helm-gtags-mode
;;     (add-hook 'c-mode-hook 'helm-gtags-mode)
;;     (add-hook 'c++-mode-hook 'helm-gtags-mode)
;;     (add-hook 'asm-mode-hook 'helm-gtags-mode)
;;
;;     ;; Set key bindings
;;     (eval-after-load \"helm-gtags\"
;;       '(progn
;;          (define-key helm-gtags-mode-map (kbd \"M-t\") 'helm-gtags-find-tag)
;;          (define-key helm-gtags-mode-map (kbd \"M-r\") 'helm-gtags-find-rtag)
;;          (define-key helm-gtags-mode-map (kbd \"M-s\") 'helm-gtags-find-symbol)
;;          (define-key helm-gtags-mode-map (kbd \"M-g M-p\") 'helm-gtags-parse-file)
;;          (define-key helm-gtags-mode-map (kbd \"C-c <\") 'helm-gtags-previous-history)
;;          (define-key helm-gtags-mode-map (kbd \"C-c >\") 'helm-gtags-next-history)
;;          (define-key helm-gtags-mode-map (kbd \"M-,\") 'helm-gtags-pop-stack)))
;;

"]) (helm-go-package . [(20130929 804) ((helm (1 0)) (go-mode (9)) (deferred (0 3 2))) "helm sources for Go programming language's package" single ";;; Commentary:

;; Add the following to your Emacs init file:
;;
;; (autoload 'helm-go-package \"helm-go-package\") ;; Not necessary if using ELPA package
;; (eval-after-load 'go-mode
;;   '(substitute-key-definition 'go-import-add 'helm-go-package go-mode-map))

;; That's all.

"]) (helm-github-stars . [(20131123 817) ((helm (1 5 5))) "Helm integration for your starred repositories on github" single ";;; Commentary:

;; helm-github-stars provides capabilities to show and open
;; starred repository from github.
;;
;; Usage:
;;  Copy helm-github-stars.el in your load-path and put this in your ~/.emacs.d/init.el:
;;  (require 'helm-github-stars)
;;  ;; Setup your github username:
;;  (setq helm-github-stars-username \"USERNAME\")
;;
;;  Type M-x helm-github-stars to show starred repositories.
;;
;; At the first execution of ~helm-github-stars~, list of repositories is
;; fetched from github and saved into a cache file.
;; Default cache location: ~$HOME/.emacs.d/hgs-cache~.
;; To refresh cache and open helm interface run ~helm-github-stars-fetch~.
;;
;; You can customize cache file path:
;; (setq helm-github-stars-cache-file \"/cache/path\")

"]) (helm-git-grep . [(20131118 437) ((helm (1 0))) "helm for git grep, an incremental git-grep(1)" single ";;; Commentary:

;; Add the following to your Emacs init file:
;;
;; (require 'helm-git-grep) ;; Not necessary if using ELPA package
;; (global-set-key (kbd \"C-c g\") 'helm-git-grep)

;; For more information, See the following URL:
;; https://github.com/yasuyk/helm-git-grep

;; Original version is anything-git-grep, and port to helm.
;; https://github.com/mechairoi/anything-git-grep

"]) (helm-git . [(20120630 1403) nil "Helm extension for Git." single ";;; Commentary:
;;
;; Helm Git extension makes opening files from current Git repository
;; fast and easy. It uses Git binary (using magit) to get list of
;; project files so it's prety fast even for large projects with
;; thousands of files. It also takes into account .gitignore file so
;; that you only get real project files. Magit should also make it
;; usable on wide variety of OS.
;;
"]) (helm-gist . [(20120819 1735) ((helm (20120811)) (gist (1 0 1))) "helm-sources and some utilities for gist." single ";;; Commentary:
;;
;; It is necessary to Some Helm and gist.el Configurations.
;;

;;; Installation:
;;
;; Put the gist.el to your
;; load-path.
;; Add to .emacs:
;; (require 'helm-gist)
;;

"]) (helm-flymake . [(20130716 2244) ((helm (1 0))) "helm interface for flymake" single ";;; Commentary:
;;
;; `helm' interface for flymake.
;; When `flymake-mode' is t, M-x `helm-flymake' lists warning and error
;; messages in *helm flymake* buffer.
;; C-u M-x `helm-flymake' insert the line number of current cursor position
;; into minibuffer.
;;

;;; Installation:
;;
;; Add followings on your .emacs.
;;
;;   (require 'helm-config)
;;   (require 'helm-flymake)
;;

"]) (helm-flycheck . [(20131226 427) ((dash (2 4 0)) (flycheck (0 15)) (helm (1 5 7))) "Show flycheck errors with helm" single ";;; Commentary:

;; Installation:

;; Add the following to your Emacs init file:
;;
;;  (require 'helm-flycheck) ;; Not necessary if using ELPA package
;;  (eval-after-load 'flycheck
;;    '(define-key flycheck-mode-map (kbd \"C-c ! h\") 'helm-flycheck))

;; That's all.

"]) (helm-emmet . [(20131013 2329) ((helm (1 0)) (emmet-mode (1 0 2))) "helm sources for emmet-mode's snippets" single ";;; Commentary:

;; Provides helm sources for emmet-mode

"]) (helm-dired-recent-dirs . [(20131228 614) ((helm (1 0))) "Show recent dirs with helm.el support." single nil]) (helm-dictionary . [(20131212 410) ((helm (1 5 5))) "Helm source for looking up dictionaries" single ";;; Commentary:

;; This helm source can be used to look up words in local (offline)
;; dictionaries.  It also provides short-cuts for various online
;; dictionaries, which is useful in situations where the local
;; dictionary doesn't have an entry for a word.
;;
;; Dictionaries are available for a variety of language pairs.  See
;; the project page for an incomplete list:
;;
;;     https://github.com/emacs-helm/helm-dictionary

"]) (helm-descbinds . [(20131102 901) ((helm (1 5))) "Yet Another `describe-bindings' with `helm'." single ";;; Commentary:
;; This package is a replacement of `describe-bindings'.

"]) (helm-dash . [(20140114 1710) ((esqlite (0 0 0)) (helm (0 0 0))) "Helm extension to search dash docsets" single ";;; Commentary:
;;
;; Clone the functionality of dash using helm foundation.  Browse
;; documentation via dash docsets.
;;
;; More info in the project site https://github.com/areina/helm-dash
;;
"]) (helm-css-scss . [(20131110 1830) ((helm (1 0)) (emacs (24))) "CSS/SCSS selector with helm interface" single ";;; Commentary:

;; Example config

;; ----------------------------------------------------
;; (require 'helm-config)

;; (add-to-list 'load-path \"~/.emacs.d/elisp/helm-css-scss\")
;; (require 'helm-css-scss)

;; ;; Allow comment inserting depth at each end of a brace
;; (setq helm-css-scss-insert-close-comment-depth 2)

;; ;; nil is horizontally. t is vertically
;; (setq helm-css-scss-split-window-vertically nil)

;; ;; Set local keybind map for css-mode / scss-mode
;; (dolist ($hook '(css-mode-hook scss-mode-hook))
;;   (add-hook
;;    $hook
;;    (lambda ()
;;      (local-set-key (kbd \"s-i\") ;; [command + i]
;;                     'helm-css-scss)
;;      (local-set-key (kbd \"s-b\") ;; [command + b]
;;                     'helm-css-scss-back-to-last-point)
;;      (local-set-key (kbd \"s-c\") ;; [command + c]
;;                     'helm-css-scss-insert-close-comment)
;;      (local-set-key (kbd \"s-n\") ;; [command + n]
;;                     'helm-css-scss-move-and-echo-next-selector)
;;      (local-set-key (kbd \"s-p\") ;; [command + p]
;;                     'helm-css-scss-move-and-echo-previous-selector)
;;            )))
;; ----------------------------------------------------

;; This program has two main functions

;; (helm-css-scss)
;;   Easily jumping between CSS/SCSS selectors powerd by helm.el

;; (helm-css-scss-insert-close-comment &optional $depth)
;;   Insert inline comment like \" //__ comment\" at the next of
;;   a close brace \"}\". If it's aleardy there, update it.
;;   You can also specify a nest $depth of selector.
;;

"]) (helm-company . [(20140114 2046) ((helm (1 0)) (company (0 6 12))) "Helm interface for company-mode" single ";;; Commentary:

;; Add the following to your Emacs init file:
;;
;; (autoload 'helm-company \"helm-company\") ;; Not necessary if using ELPA package
;; (eval-after-load 'company
;;   '(progn
;;      (define-key company-mode-map (kbd \"C-:\") 'helm-company)
;;     '(define-key company-active-map (kbd \"C-:\") 'helm-company)))

"]) (helm-cmd-t . [(20131030 1241) nil "cmd-t style completion" tar ";;; Commentary:

;; This package provides a helm source for repository (git, hg, etc) based
;; file selection.  The emphasis is on fast file-name completion.  The concept
;; of a \"respository\" is configurable through `helm-cmd-t-repo-types'.
;;
;; Each repository is cached for fast access (see
;; `helm-cmd-t-cache-threshhold'), and in the future, options will be
;; available to interact with the repository (i.e. grep, etc).
;;
;; `helm-cmd-t' is the simple predefined command that opens a file in the
;; current repository, however, it's highly recommended that you add a helm
;; source like recentf that keeps track of recent files you've worked with.
;; This way, you don't have to worry about your respository cache being out of
;; sync.  See \"helm-C-x-b.el\" for an example of a custom drop-in
;; replacement for `switch-to-buffer' or \"C-x b\".
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

"]) (helm-c-yasnippet . [(20140114 2255) ((helm (1 5 8)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single ";;; Commentary:

;; Actions: Insert snippet, Open snippet file, Open snippet file other window
;; C-z: execute-persistent-action

"]) (helm-c-moccur . [(20130215 2117) nil "helm source for color-moccur.el" single ";;; Commentary:
;;
;; Tested on Emacs 24

"]) (helm-bm . [(20131224 705) ((bm (1 0)) (cl-lib (0 3)) (helm (1 5 7)) (s (1 8 0))) "helm sources for bm.el" single ";;; Commentary:

;; Installation:

;; Add the following to your Emacs init file:
;;
;; (require 'helm-bm) ;; Not necessary if using ELPA package
;; (global-set-key (kbd \"C-c b\") 'helm-bm)

;; That's all.

"]) (helm-bibtexkey . [(20140111 1319) ((helm (1 5 8))) "Bibtexkey source for helm" tar ";;; Commentary:

;; Please install pybtex which is python bibtex parser.
;; For example, `sudo easy_install pybtex`.

;;; Installation:

;; (add-to-list 'load-path \"/path/to/this/filedirectory\")
;; (require 'helm-bibtexkey)
;; (setq helm-bibtexkey-filelist '(\"/path/to/bibtexfile1\" \"/path/to/bibtexfile2\"))

"]) (helm-backup . [(20131227 409) ((helm (1 5 5)) (s (1 8 0))) "Backup each file change using git" single ";;; Commentary:

;; To store change every time you save a file add :
;; (add-hook 'after-save-hook 'helm-backup-versioning)
;; or from Emacs you can do :
;; M-x customize-variable RET after-save-hook RET [INS] helm-backup-versioning

;; To retrieve file backup, from buffer call `helm-backup' :
;; M-x helm-backup
;; for convenience you can define key binding as follow :
;; (global-set-key (kbd \"C-c b\") 'helm-backup)

"]) (helm-anything . [(20131217 1832) ((helm (20130406)) (anything (20120101))) "Bridge between anything and helm" single ";;; Commentary: 
;; 
;; Bridge between anything and helm.
;;
;; M-x `helm-anything-resume' replaces M-x `anything-resume' and M-x
;; `helm-resume'.
;;
;; `helm-anything/funcall', `helm-anything/set' and
;; `helm-anything/get' handles helm or anything functions and
;; variables.
;;
;; `helm-anything/define-key' binds key to `helm-map' and `anything-map'.
;;
;;; Installation:
;;
;; Put helm-anything.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'helm-anything)
;; ;; Replace helm-resume and anything-resume with helm-anything-resume
;; (helm-anything-set-keys)
;;
;; No need more.
;;
"]) (helm-ag-r . [(20131123 731) ((helm (1 0))) "Search something by ag and display by helm" single ";;; Commentary:
;; Usage
;; set below configuration to your .emacs
;; (add-to-list 'load-path \"path/to/this-package-directory\")
;; (require 'helm-ag-r)
;; You can change ag's option by pushing C-o from below variable on minibuffer
;; See ag --help about available options
;; (setq helm-ag-r-option-list
;;       '(\"-S -U --hidden\"
;;         \"-S -U -l\"))
;; To use helm-ag-r-google-contacts-list command, specify your google
;; mail address to helm-ag-r-google-contacts-user variable.(If you
;; specified gmail-address to user-mail-address, then you don't need
;; below configuration.)
;; (setq helm-ag-r-google-contacts-user \"\")
;; And if you are Japanese, to use Japanese language set below configuration.
;; this variable set $LANG environment variable by default.
;; (setq helm-ag-r-google-contacts-lang \"ja_JP.UTF-8\")
;;
;; Commands
;; helm-ag-r-current-file -- search from current file
;; helm-ag-r-from-git-repo -- search from git repository
;; helm-ag-r-shell-history -- search shell history
;; helm-ag-r-git-logs -- search git logs
;; helm-ag-r-google-contacts-list -- show your google-contacts

"]) (helm-ag . [(20131125 1834) ((helm (1 5 6))) "the silver search with helm interface" single ";;; Commentary:

"]) (helm-ack . [(20131102 155) ((helm (1 0))) "Ack command with helm interface" single ";;; Commentary:

"]) (helm-R . [(20120819 1714) ((helm (20120517)) (ess (20120509))) "helm-sources and some utilities for GNU R." single ";;; Commentary:
;;
;; Put the helm-R.el, helm.el and ESS to your
;; load-path.
;; Add to .emacs:
;; (require 'helm-R)
;;

"]) (helm . [(20140114 2320) nil "Helm is an Emacs incremental and narrowing framework" tar nil]) (header2 . [(20140113 1618) nil "Support for creation and update of file headers." single ";;; Commentary:
;;
;; Support for creation and update of file headers.
;;
;; Some of this code and commentary were originally written by Lynn
;; Slater as file `header.el'.  Drew Adams updated it and maintains it
;; as `header2.el'.  The original is here:
;; `http://www.emacswiki.org/cgi-bin/wiki/download/OriginalHeaderEl'.
;;
;; Commands (interactive functions) defined here:
;;
;;   `make-header', `make-revision', `make-divider',
;;   `make-box-comment', `update-file-header'.
;;
;; Other functions defined here:
;;
;;   `auto-make-header', `auto-update-file-header',
;;   `delete-and-forget-line', `header-AFS', `header-author',
;;   `header-blank', `header-code', `header-commentary',
;;   `header-compatibility', `header-copyright',
;;   `header-creation-date', `header-date-string',
;;   `header-description', `header-doc-url',`header-end-line',
;;   `header-eof', `header-file-name', `header-free-software',
;;   `header-history', `header-keywords', `header-lib-requires',
;;   `header-maintainer', `header-mode-line',
;;   `header-modification-author', `header-modification-date',
;;   `header-multiline', `header-pkg-requires',
;;   `header-prefix-string', `header-rcs-id', `header-rcs-log',
;;   `header-sccs', `header-shell', `header-status', `header-title',
;;   `header-toc', `header-update-count', `header-url',
;;   `header-version', `headerable-file-p', `make-box-comment',
;;   `make-divider', `make-revision', `nonempty-comment-end',
;;   `nonempty-comment-start', `register-file-header-action',
;;   `section-comment-start', `true-mode-name', `uniquify-list',
;;   `update-file-name', `update-last-modified-date',
;;   `update-last-modifier', `update-lib-requires',
;;   `update-write-count'.
;;
;; User options (variables) defined here:
;;
;;   `header-copyright-notice', `header-date-format',
;;   `header-history-label', `header-max', `make-header-hook'.
;;
;; Other variables defined here:
;;
;;   `file-header-update-alist', `header-auto-update-enabled',
;;   `header-multiline', `header-prefix-string', `return-to'.
;;
;;
;; To have Emacs update file headers automatically whenever you save a
;; file, put this in your init file (~/.emacs):
;;
;;   (autoload 'auto-update-file-header \"header2\")
;;   (add-hook 'write-file-hooks 'auto-update-file-header)
;;
;; To have Emacs add a file header whenever you create a new file in
;; some mode, put this in your init file (~/.emacs):
;;
;;   (autoload 'auto-make-header \"header2\")
;;   (add-hook 'emacs-lisp-mode-hook 'auto-make-header)
;;   (add-hook 'c-mode-common-hook   'auto-make-header)
;;   ...
;;
;;
;;
;; From the original header.el text by Lynn Slater:
;;
;;     This file is particularly useful with the file-declarations
;;     package also by Lynn Slater.  Read the first 20% of this file
;;     to learn how to customize.
;;
;;     From: eddie.mit.edu!think!ames!indetech.com!lrs (Lynn Slater)
;;     To: info-gnu-emacs@prep.ai.mit.edu
;;     Subject: Automatic header creation and maintenance
;;     Date: Wed, 1 Nov 89 09:33 PST
;;
;;     Enclosed is code to automatically create and maintain file
;;     headers.  This code is cleaner and mush more easily customized
;;     than any of my previous header postings.
;;
;;     New in this release are customizations that allow headers to be
;;     created and maintained from the command line.  This is good for
;;     projects with some vi die-hards or when headers are being added
;;     in mass for the first time.
;;
;;     Example:
;;        cd $EMACS/lisp
;;        headers -make *.el
;;
;;     I have found file headers to be very valuable in project
;;     development.  I always know who has been where and how many
;;     times they were there.  Most often, I also know what they did.
;;     The update count and last modified date are very useful in
;;     determining the proper version of a file to use.  I have often
;;     thought that it would be easier to integrate patches from
;;     individuals to gnu tools such as gcc and g++ if I knew for
;;     certain what version of a particular file they were working
;;     from.  If all had headers, I would see the update count and
;;     date in the \"diff -c\" output and would be able to find or
;;     recreate the file to patch accordingly.
;;
;;     In this message are three files:
;;       header.el - Emacs header functions and instructions
;;       headers.1  - Man page for command line headers useage
;;       headers    - Shell script for command-line headers.
;;
;; Text by Lynn Slater, updated as needed:
;;
;;     Mode-specific headers:
;;     ---------------------
;;      Not all headers need look alike.  Suppose that you have a unix script mode
;;      and want it to have a shell specifier line that all other headers do not
;;      have.  To do this, Place the following line in a hook called when the
;;      mode is invoked or in the code that establishes the mode:
;;
;;         (add-hook 'make-header-hook 'header-shell nil t)

;;      The header building blocks are sensitive to the different comment
;;      characters in different modes.

;;     Mode specific update actions:
;;     ----------------------------
;;      Suppose something needs to be automatically maintained only in certain
;;      modes.  An example is the .TH macro in man pages.  You can create mode-
;;      specific update actions by placing code like the following in the
;;      mode creation function of the mode hook.
;;
;;        (register-file-header-action
;;          \"^\\.TH[ \\t]+[^\\\" \\t]+[ \\t]+[^\\\" \\t]+[ \\t]+\\\"\\\\([^\\\"]*\\\\)\\\"\"
;;         'update-last-modified-date-macro)
;;
;;     Define individual header elements.  These are the building blocks
;;     used to construct a site specific header.  You may add your own
;;     functions either in this file or in your `.emacs' file.  The
;;     variable `make-header-hook' specifies the functions that will
;;     actually be called.
;;
;; Note on change-control systems:
;;
;;  If you use `header2.el' in a change-control system, such as RCS,
;;  you might need to leave it checked out.  This is because any
;;  change-control keywords in the file will be expanded during
;;  check-in.  Normally, you will want those keywords to be inserted
;;  in file headers unexpanded.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (header-button . [(20130110 851) nil "clickable buttons in header lines" single ";;; Commentary:

;;    Starting with 24.4 (24.3.50.1 as of 20121212) this library is
;;    no longer required; the changes have been merged into Emacs.

;; This package extends `button' by adding support for adding buttons to
;; the header line.  Since the header line is very limited compared to a
;; buffer most of the functionality provided by `button' is not available
;; for buttons in the header line.

;; While `button' provides the function `insert-button' (as well as
;; others) to insert a button into a buffer at point, something similar
;; can't be done here, due to the lack of point in header lines.

;; Instead use `header-button-format' like this:
;;
;; (setq header-line-format
;;       (concat \"Here's a button: \"
;;               (header-button-format \"Click me!\" :action 'my-action)))

;; Like with `button' you can create your own derived button types:
;;
;; (define-button-type 'my-header
;;   :supertype 'header
;;   :action 'my-action)
;;
;; (setq header-line-format
;;       (concat (header-button-format \"Click me!\" :action 'my-action) \" \"
;;               (header-button-format \"No me!\" :type 'my-header)))

;; The function associated with `:action' is called with the button plist
;; as only argument.  Do no use `plist-get' to extract a value from it.
;; Instead use `header-button-get' which will also extract values stored
;; in it's type.
;;
;; (defun my-action (button)
;;   (message \"This button labeled `%s' belongs to category `%s'\"
;;            (header-button-label button)
;;            (header-button-get button 'category)))

"]) (haxe-mode . [(20131004 142) nil "An Emacs major mode for Haxe" single ";;; Commentary:

;; ------------------------------------------------------------------------
;; Copyright (C) 2006-2007 Jens Peter Secher

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;; ------------------------------------------------------------------------

;; This is haxe-mode, an Emacs major mode for the Haxe programming
;; language (http://haxe.org).

;; haxe-mode is built on top of the excellent cc-mode, inspired by the
;; guide http://cc-mode.sourceforge.net/derived-mode-ex.el.

;; haxe-mode is NOT part of GNU Emacs.

"]) (haste . [(20131203 1340) ((json (1 2))) "Emacs client for hastebin (http://hastebin.com/about.md)" single nil]) (haskell-mode . [(20131222 350) nil "A Haskell editing mode" tar nil]) (hardhat . [(20131125 1143) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'hardhat)
;;
;;     (global-hardhat-mode 1)
;;
;;     ;; now you are protected from editing:
;;     ;;
;;     ;;     .git/index
;;     ;;     ~/.emacs.d/elpa/hardhat-0.1.0/hardhat.el
;;     ;;     ~/.emacs~
;;     ;;
;;     ;; and many others
;;
;; Explanation
;;
;; A recent unwholesome trend is for package managers to install files
;; in locations such as ~/.cabal/, ~/.rvm/, or ~/.emacs.d/elpa/.  It
;; is rarely meant for such files to be edited; doing so can cause
;; data loss in some circumstances.
;;
;; In addition, many user-writable files created in the course of
;; ordinary work should never be altered by a text editor, eg the
;; database stored in a .git directory.
;;
;; Hardhat.el provides an extra layer of protection in your work.  If
;; you visit a file which looks unsafe to edit, Emacs will make the
;; buffer read-only -- even when the underlying file is writable.
;;
;; The read-only protection can be turned off for a buffer by the
;; usual methods, or by toggling off buffer-local hardhat-mode via
;; the lighter menu or
;;
;;     M-x hardhat-mode RET
;;
;; If a buffer is not visiting a file, `hardhat-mode' has no effect.
;; If the visited file is not writable by the user, `hardhat-mode'
;; has no effect.
;;
;; To use hardhat, place the hardhat.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'hardhat)
;;     (global-hardhat-mode 1)
;;
;; To inquire as to why hardhat has set or unset protection in
;; a buffer, the following interactive command is provided
;;
;;     `hardhat-status'
;;
;; but not bound to any key.
;;
;; See Also
;;
;;     M-x customize-group RET hardhat RET
;;
;; Notes
;;
;;     `hardhat-mode' takes no action until the user attempts an
;;     interactive command in a buffer.  This is (out of an abundance
;;     of caution) for compatibility: an Emacs Lisp library may freely
;;     open and write to a file protected by `hardhat-mode', so long as
;;     it is done programatically.
;;
;;     For any of the options settable in customize, rules making
;;     buffers \"editable\" override rules making buffers \"protected\".
;;
;;     A Boolean file-local variable `hardhat-protect' is provided.
;;     When `hardhat-protect' is set to either t or nil, no other
;;     rules are consulted.
;;
;;     Regular-expression matches are case-insensitive.  A case-
;;     sensitive test can be implemented by adding custom function
;;     to eg `hardhat-buffer-protected-functions'.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     Uses if present: ignoramus.el
;;
;; Prior art
;;
;;     do-not-edit.el
;;     http://user42.tuxfamily.org/do-not-edit/index.html
;;     Kevin Ryde <user42@zip.com.au>
;;
;; Bugs
;;
;;     More exceptions are certainly needed in `hardhat-fullpath-editable-regexps'
;;
;;     Because Emacs can wedge if `file-truename' is called on a
;;     remote file (eg when using TRAMP), some filename tests used in
;;     hardhat are not precisely equivalent between local and remote
;;     files.  You can change this behavior by setting
;;     `hardhat-use-unsafe-remote-truename' via customize.  A better
;;     solution is to set `find-file-visit-truename' globally.
;;
;; TODO
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (hardcore-mode . [(20111204 2216) nil "Disable arrow keys + optionally backspace and return" single ";;; Commentary:

;; Entering hardcore-mode will disable arrow keys, backspace and return.

;; * Use C-f/b/p/n instead of right/left/up/down
;; * Use C-h instead of backspace
;; * Use C-m or C-j instead of return

;; To use C-h instead of backspace, you might need to redefine C-h:
;;
;;     ;; Use shell-like backspace C-h, rebind help to F1
;;     (define-key key-translation-map [?\\C-h] [?\\C-?])
;;     (global-set-key (kbd \"<f1>\") 'help-command)

;; If hardcore-mode is too hardcore for you, you can add these before
;; you require the mode:
;;
;;     (setq too-hardcore-backspace t)
;;     (setq too-hardcore-return t)
;;     (require 'hardcore-mode)
;;     (global-hardcore-mode)
;;
;; These are the settings I am using at the time. Still not hardcore enough. ^^

;; Code:

(defcustom too-hardcore-backspace nil
  \"On non-nil value, don't disable backspace in hardcore mode.\")

(defcustom too-hardcore-return nil
  \"On non-nil value, don't disable return in hardcore mode.\")

(defvar hardcore-mode-map nil
  \"Keymap for hardcore emacs minor mode.\")

(if hardcore-mode-map
    nil
  (setq hardcore-mode-map (make-sparse-keymap))
  (define-key hardcore-mode-map
    (kbd \"<up>\") (lambda ()
                   (interactive)
                   (message \"Arrow key navigation is disabled. Use C-p instead.\")))
  (define-key hardcore-mode-map
    (kbd \"<down>\") (lambda ()
                     (interactive)
                     (message \"Arrow key navigation is disabled. Use C-n instead.\")))
  (define-key hardcore-mode-map
    (kbd \"<left>\") (lambda ()
                     (interactive)
                     (message \"Arrow key navigation is disabled. Use C-b instead.\")))
  (define-key hardcore-mode-map
    (kbd \"<right>\") (lambda ()
                      (interactive)
                      (message \"Arrow key navigation is disabled. Use C-f instead.\")))
  (unless too-hardcore-backspace
    (define-key hardcore-mode-map
      (kbd \"<backspace>\") (lambda ()
                            (interactive)
                            (message \"Backspace is disabled. Use C-h instead.\"))))
  (unless too-hardcore-return
    (define-key hardcore-mode-map
      (kbd \"<return>\") (lambda ()
                         (interactive)
                         (message \"Return is disabled. Use C-m or C-j instead.\")))))

(define-minor-mode hardcore-mode
  \"Hardcore emacs minor mode.\"
  nil \" hc\" hardcore-mode-map)

(define-globalized-minor-mode global-hardcore-mode
  hardcore-mode hardcore-mode)

(provide 'hardcore-mode)
;; hardcore-mode.el ends here
;;; hardcore-mode.el ends here
"]) (handlebars-sgml-mode . [(20130623 1633) nil "Add Handlebars contextual indenting support to sgml-mode" single nil]) (handlebars-mode . [(20131122 1406) nil "A major mode for editing Handlebars files." single ";;; Commentary:

;; 1) Copy this file somewhere in your Emacs `load-path'.  To see what
;;    your `load-path' is, run inside emacs: C-h v load-path<RET>
;;
;; 2) Add the following to your .emacs file:
;;
;;    (require 'handlebars-mode)

;; The indentation still has minor bugs due to the fact that
;; templates do not require valid HTML.

;; It would be nice to be able to highlight attributes of HTML tags,
;; however this is difficult due to the presence of CTemplate symbols
;; embedded within attributes.

(eval-when-compile
  (require 'font-lock))


(defgroup handlebars nil
  \"\"
  :group 'languages)

(defface handlebars-mode-section-face
  '((t (:inherit font-lock-keyword-face)))
  \"\"
  :group 'handlebars)

(defface handlebars-mode-comment-face
  '((t (:inherit font-lock-comment-face)))
  \"\"
  :group 'handlebars)

(defface handlebars-mode-include-face
  '((t (:inherit font-lock-function-name-face)))
  \"\"
  :group 'handlebars)

(defface handlebars-mode-builtins-face
  '((t (:inherit font-lock-variable-name-face)))
  \"\"
  :group 'handlebars)

(defface handlebars-mode-variable-face
  '((t (:inherit font-lock-constant-face)))
  \"\"
  :group 'handlebars)



(defvar handlebars-mode-version \"1.3\"
  \"Version of `handlebars-mode.el'.\")

;; TODO: this keystrokes should be altered to avoid conflict with mustache-mode
(defvar handlebars-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map \"\\C-m\" 'reindent-then-newline-and-indent)
    (define-key map \"\\C-ct\" 'handlebars-insert-tag)
    (define-key map \"\\C-cv\" 'handlebars-insert-variable)
    (define-key map \"\\C-cs\" 'handlebars-insert-section)
    map)
  \"Keymap for handlebars-mode major mode\")

(defvar handlebars-mode-syntax-table
  (let ((st (make-syntax-table)))
    (modify-syntax-entry ?<  \"(>  \" st)
    (modify-syntax-entry ?>  \")<  \" st)
    (modify-syntax-entry ?\\\" \".   \" st)
    (modify-syntax-entry ?\\\\ \".   \" st)
    (modify-syntax-entry ?'  \"w   \" st)
    st)
  \"Syntax table in use in handlebars-mode buffers.\")

(defvar handlebars-basic-offset 2
  \"The basic indentation offset.\")

;; Constant regular expressions to identify template elements.
(defconst handlebars-mode-handlebars-token \"\\\\([a-zA-Z_.][a-zA-Z0-9_:=\\?!.-]*\\s+\\\\)*[a-zA-Z_.][a-zA-Z0-9_:=\\?!.-]*\")
(defconst handlebars-mode-section (concat \"\\\\({{[#^/]\\s*\"
                                   handlebars-mode-handlebars-token
                                   \"\\s*}}\\\\)\"))
(defconst handlebars-mode-open-section (concat \"\\\\({{#\\s*\"
                                        handlebars-mode-handlebars-token
                                        \"\\s*}}\\\\)\"))
(defconst handlebars-mode-close-section (concat \"{{/\\\\(\\s*\"
                                         handlebars-mode-handlebars-token
                                         \"\\s*\\\\)}}\"))
;; TODO(tonyg) Figure out a way to support multiline comments.
(defconst handlebars-mode-comment \"\\\\({{!.*?}}\\\\)\")
(defconst handlebars-mode-include (concat \"\\\\({{[><]\\s*\"
                                   handlebars-mode-handlebars-token
                                   \"\\s*}}\\\\)\"))
(defconst handlebars-mode-variable (concat \"\\\\({{\\s*\"
                                    handlebars-mode-handlebars-token
                                    \"\\s*}}\\\\)\"))
(defconst handlebars-mode-variable (concat \"\\\\({{{?\\s*\"
                                    handlebars-mode-handlebars-token
                                    \"\\s*}}}?\\\\)\"))
(defconst handlebars-mode-else (concat \"\\\\({{\\s*else\\s*}}\\\\)\"))
(defconst handlebars-mode-variable-path (concat \"\\\\({{\\s*./\\s*\"
                                    handlebars-mode-handlebars-token
                                    \"\\s*}}\\\\)\"))
(defconst handlebars-mode-variable-path-parent (concat \"\\\\({{\\s*../\\s*\"
                                    handlebars-mode-handlebars-token
                                    \"\\s*}}\\\\)\"))
(defconst handlebars-mode-builtins
  (concat
   \"\\\\({{\\\\<\\s*\"
   (regexp-opt
    '(\"BI_NEWLINE\" \"BI_SPACE\")
    t)
   \"\\s*\\\\>}}\\\\)\"))
(defconst handlebars-mode-close-section-at-start (concat \"^[ \\t]*?\"
                                                  handlebars-mode-close-section))

;; Constant regular expressions to identify html tags.
;; Taken from HTML 4.01 / XHTML 1.0 Reference found at:
;; http://www.w3schools.com/tags/default.asp.
(defconst handlebars-mode-html-constant \"\\\\(&#?[a-z0-9]\\\\{2,5\\\\};\\\\)\")
(defconst handlebars-mode-pair-tag
  (concat
   \"\\\\<\"
   (regexp-opt
    '(\"a\" \"abbr\" \"acronym\" \"address\" \"applet\" \"area\" \"b\" \"bdo\"
      \"big\" \"blockquote\" \"body\" \"button\" \"caption\" \"center\" \"cite\"
      \"code\" \"col\" \"colgroup\" \"dd\" \"del\" \"dfn\" \"dif\" \"div\" \"dl\"
      \"dt\" \"em\" \"fieldset\" \"font\" \"form\" \"frame\" \"frameset\" \"h1\"
      \"header\" \"nav\" \"footer\" \"section\"
      \"h2\" \"h3\" \"h4\" \"h5\" \"h6\" \"head\" \"html\" \"i\" \"iframe\" \"ins\"
      \"kbd\" \"label\" \"legend\" \"li\" \"link\" \"map\" \"menu\" \"noframes\"
      \"noscript\" \"object\" \"ol\" \"optgroup\" \"option\" \"p\" \"pre\" \"q\"
      \"s\" \"samp\" \"script\" \"select\" \"small\" \"span\" \"strike\"
      \"strong\" \"style\" \"sub\" \"sup\" \"table\" \"tbody\" \"td\" \"textarea\"
      \"tfoot\" \"th\" \"thead\" \"title\" \"tr\" \"tt\" \"u\" \"ul\" \"var\" \"aside\")
    t)
   \"\\\\>\"))
(defconst handlebars-mode-standalone-tag
  (concat
   \"\\\\<\"
   (regexp-opt
    '(\"base\" \"br\" \"hr\" \"img\" \"input\" \"meta\" \"param\")
    t)
   \"\\\\>\"))
(defconst handlebars-mode-open-tag (concat \"<\\\\(\"
                                    handlebars-mode-pair-tag
                                    \"\\\\)\"))
(defconst handlebars-mode-close-tag (concat \"</\\\\(\"
                                     handlebars-mode-pair-tag
                                     \"\\\\)>\"))
(defconst handlebars-mode-close-tag-at-start (concat \"^[ \\t]*?\"
                                              handlebars-mode-close-tag))

(defconst handlebars-mode-blank-line \"^[ \\t]*?$\")
(defconst handlebars-mode-else-line \"^[ \\t]*?{{[ \\t]*?else[ \\t]*?}}\")
(defconst handlebars-mode-dangling-open (concat \"\\\\(\"
                                         handlebars-mode-open-section
                                         \"\\\\)\\\\|\\\\(\"
                                         handlebars-mode-open-tag
                                         \"\\\\)[^/]*$\"))

(defun handlebars-insert-tag (tag)
  \"Inserts an HTML tag.\"
  (interactive \"sTag: \")
  (handlebars-indent)
  (insert (concat \"<\" tag \">\"))
  (insert \"\\n\\n\")
  (insert (concat \"</\" tag \">\"))
  (handlebars-indent)
  (forward-line -1)
  (handlebars-indent))

(defun handlebars-insert-variable (variable)
  \"Inserts a tpl variable.\"
  (interactive \"sVariable: \")
  (insert (concat \"{{\" variable \"}}\")))

(defun handlebars-insert-section (section)
  \"Inserts a tpl section.\"
  (interactive \"sSection: \")
  (handlebars-indent)
  (insert (concat \"{{#\" section \"}}\\n\"))
  (insert \"\\n\")
  (insert (concat \"{{/\" section \"}}\"))
  (handlebars-indent)
  (forward-line -1)
  (handlebars-indent))

(defun handlebars-indent ()
  \"Indent current line\"
  ;; Set the point to beginning of line.
  (beginning-of-line)
  ;; If we are at the beginning of the file, indent to 0.
  (if (bobp)
      (indent-line-to 0)
    (let ((tag-stack 1) (close-tag \"\") (cur-indent 0) (old-pnt (point-marker))
          (close-at-start) (open-token) (dangling-open))
      (progn
        ;; Determine if this is a template line or an html line.
        (if (looking-at \"^[ \\t]*?{{\")
            (setq close-at-start handlebars-mode-close-section-at-start
                  open-token \"{{#\")
          (setq close-at-start handlebars-mode-close-tag-at-start
                open-token \"<\"))

        ;; If there is a closing tag at the start of the line, search back
        ;; for its opener and indent to that level.
        (if (looking-at close-at-start)
            (progn
              (save-excursion
                (setq close-tag (match-string 1))
                ;; Keep searching for a match for the close tag until
                ;; the tag-stack is 0.
                (while (and (not (bobp))
                            (> tag-stack 0)
                            (re-search-backward (concat (replace-regexp-in-string \"{{#\" \"{{#?\" open-token)
                                                        \"\\\\(/?\\\\)\"
                                                        close-tag) nil t))
                  (if (string-equal (match-string 1) \"/\")
                      ;; We found another close tag, so increment tag-stack.
                      (setq tag-stack (+ tag-stack 1))
                    ;; We found an open tag, so decrement tag-stack.
                    (setq tag-stack (- tag-stack 1)))
                  (setq cur-indent (current-indentation))))
              (if (> tag-stack 0)
                  (save-excursion
                    (forward-line -1)
                    (setq cur-indent (current-indentation)))))
          ;; This was not a closing tag, so we check if the previous line
          ;; was an opening tag.
          (save-excursion
            ;; Keep moving back until we find a line that is not blank
            (while (progn
                     (forward-line -1)
                     (and (not (bobp)) (looking-at handlebars-mode-blank-line))))
            (setq cur-indent (current-indentation))
            (if (or (re-search-forward handlebars-mode-dangling-open old-pnt t) (looking-at handlebars-mode-else-line))
                (setq cur-indent (+ cur-indent handlebars-basic-offset)))))

        ;; Reduce the indentation by one level if it is an else tag.
        (if (looking-at handlebars-mode-else-line)
            (setq cur-indent (- cur-indent handlebars-basic-offset)))

        ;; Finally, we execute the actual indentation.
        (if (> cur-indent 0)
            (indent-line-to cur-indent)
          (indent-line-to 0))))))

(defconst handlebars-mode-font-lock-keywords
  `((,handlebars-mode-section (1 'handlebars-mode-section-face))
    (,handlebars-mode-else (1 'handlebars-mode-section-face))
    (,handlebars-mode-comment (1 'handlebars-mode-comment-face))
    (,handlebars-mode-include (1 'handlebars-mode-include-face))
    (,handlebars-mode-builtins (1 'handlebars-mode-builtins-face))
    (,handlebars-mode-variable (1 font-lock-constant-face))
    (,handlebars-mode-variable-path (1 font-lock-constant-face))
    (,handlebars-mode-variable-path-parent (1 font-lock-constant-face))
    (,(concat \"</?\\\\(\" handlebars-mode-pair-tag \"\\\\)\") (1 font-lock-function-name-face))
    (,(concat \"<\\\\(\" handlebars-mode-standalone-tag \"\\\\)\") (1 font-lock-function-name-face))
    (,handlebars-mode-html-constant (1 font-lock-variable-name-face))))

;;;###autoload
(define-derived-mode handlebars-mode fundamental-mode \"Handlebars\"
  (set (make-local-variable 'indent-line-function) 'handlebars-indent)
  (set (make-local-variable 'indent-tabs-mode) nil)
  (set (make-local-variable 'font-lock-defaults) '(handlebars-mode-font-lock-keywords)))

;;;###autoload
(add-to-list 'auto-mode-alist '(\"\\\\.handlebars$\" . handlebars-mode))
;;;###autoload
(add-to-list 'auto-mode-alist '(\"\\\\.hbs$\" . handlebars-mode))

(provide 'handlebars-mode)

;;; handlebars-mode.el ends here
"]) (hamlet-mode . [(20131207 2324) ((cl-lib (0 3)) (dash (2 3 0)) (s (1 7 0))) "Hamlet editing mode" single ";;; Commentary:

;; hamlet-mode is an Emacs major mode for editing files written in Hamlet, a
;; Haskell compile-time HTML templating engine. Currently it only provides
;; syntax highlighting.

;; Functions and variables with // in their name are private and may change or
;; go away at any time.

"]) (haml-mode . [(20131015 306) ((ruby-mode (1 0))) "Major mode for editing Haml files" single ";;; Commentary:

;; Because Haml's indentation schema is similar
;; to that of YAML and Python, many indentation-related
;; functions are similar to those in yaml-mode and python-mode.

;; To install, save this on your load path and add the following to
;; your .emacs file:
;;
;; (require 'haml-mode)

"]) (ham-mode . [(20131209 656) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown." single ";;; Commentary:
;;
;; ### Seamlessly edit an html file using markdown. ###
;; 
;; **H**TML **a**s **M**arkdown.
;; 
;; This package defines a major-mode, `ham-mode', which allows you to
;; edit HTML files exactly as if they were Markdown files. Activate it
;; while visiting an HTML file. The buffer will be converted to Markdown,
;; but the file will still be kept in HTML format behind the scenes. Each
;; time you save the Markdown buffer, the file will be updated with the
;; HTML.
;; 
;; **Why?** This is mainly designed to be used with web interfaces which
;; take HTML text (such as some email clients) but whose editors pale in
;; comparison to Emacs (obviously).
;; 
;; This major mode will allow you edit your email (or whatever else
;; you're writing) with the full power of `markdown-mode'. In fact, you
;; will usually be able to write richer structures then client's web
;; interface would normally allow you to (lists within lists, for
;; instance). Just check out <C-h> C-f markdown-mode RET< to> see the full
;; range of commands available for editing.
;; 
;; Instructions
;; ------
;; 
;; To use this package, simply:
;; 
;; 1. Install it from Melpa (M-x `package-install' RET ham-mode) and the
;; `ham-mode' command will be autoloaded.
;; 2. Activate it inside any HTML files you'd like to edit as Markdown.
;; You can manually invoke M-x `ham-mode', or add it to `auto-mode-alist'
;; so that it can load automatically.  
;; For instance, the following snippet will activate `ham-mode' in any
;; `.htm' file containing the word *email*.
;; 
;;         (add-to-list 'auto-mode-alist '(\".*email.*\\\\.html?\\\\'\" . ham-mode))
;; 
;; 

"]) (hackernews . [(20131018 2207) ((json (1 2))) "Access the hackernews aggregator from Emacs" tar nil]) (gvpr-mode . [(20131208 918) nil "A major mode offering basic syntax coloring for gvpr scripts." single ";;; Commentary:
;; `gvpr` is the \"graph pattern recognizer\", a graph processing and
;; transformation tool that is part of the Graphviz open-source graph
;; visualization suite (<http://www.graphviz.org/>).
;;
;; `gvpr` is an `awk`-like processor for graphs defined in Graphviz's
;; DOT language.  `gvpr` can apply a user-specified *action* to every
;; graph, node, or edge that meets the conditions of the corresponding
;; *predicate*.
;;
;; `gvpr` defines a C-like language for this.
;;
;; This file defines a very basic emacs mode for syntax coloring
;; of `gvpr` scripts.
;;
;; To use it simply load` or `require` this file.
;; You can then enable this mode by executing `M-x gvpr-mode`.
;; The `.gvpr` file extension is associated with this mode
;; by default.
;;

"]) (guru-mode . [(20140103 1545) nil "Become an Emacs guru" single ";;; Commentary:
;;
;; Guru mode teaches to use Emacs properly.
;;
"]) (guide-key . [(20131214 1140) ((popwin (0 3 0))) "Guide the following key bindings automatically and dynamically" single ";;; Commentary:

;; Overview:
;;
;; guide-key.el displays the available key bindings automatically and dynamically.
;; guide-key aims to be an alternative of one-key.el.
;;
;; Here are some features of this library.
;; - guide-key automatically pops up the keys following your favorite
;;   prefixes. Moreover, even if you change key bindings, guide-key follows the
;;   change dynamically.
;; - guide-key can highlight particular commands. This makes it easy to find a
;;   command you are looking for, and to learn its key binding.
;; - guide-key doesn't overwrite existing commands and key bindings, so there
;;   is no interference with `describe-key' and `describe-bindings'.
;;
;;
;; Installation:
;;
;; I added guide-key to MELPA. You can install guide-key with package.el.
;; Because guide-key depends on popwin.el, popwin.el is also installed.
;;
;; If you don't have package.el, please download popwin.el and guide-key.el
;; directly from https://github.com/m2ym/popwin-el and
;; https://github.com/kbkbkbkb1/guide-key, and then put them in your
;; `load-path'.
;;
;;
;; Basic usage:
;;
;; You just add your favorite prefix keys to `guide-key/guide-key-sequence'
;; as below.
;;
;;   (require 'guide-key)
;;   (setq guide-key/guide-key-sequence '(\"C-x r\" \"C-x 4\"))
;;   (guide-key-mode 1) ; Enable guide-key-mode
;;
;; When you press these prefix keys, key bindings are automatically
;; popped up after a short delay (1 second by default).
;;
;; guide-key can highlight commands which match a specified regular expression.
;; Key bindings following \"C-x r\" are rectangle family and register family.
;; If you want to highlight only rectangle family commands, put this setting
;; in your init.el.
;;
;;   (setq guide-key/highlight-command-regexp \"rectangle\")
;;
;; This feature makes it easy to find commands and learn their key bindings. If
;; you want to highlight both rectangle family and register family, set an
;; adequate regular expression like this.
;;
;;   (setq guide-key/highlight-command-regexp \"rectangle\\\\|register\")
;;
;; Moreover, prefix commands are automatically highlighted.
;;
;; Depending on your level of emacs experience, you may want a shorter or
;; longer delay between pressing a key and the appearance of the guide
;; buffer.  This can be controlled by setting `guide-key/idle-delay':
;;
;;   (setq guide-key/idle-delay 0.1)
;;
;; The guide buffer is displayed only when you pause between keystrokes
;; for longer than this delay, so it will keep out of your way when you
;; are typing key sequences that you already know well.
;;
;; I've confirmed that guide-key works well in these environments.
;; - Emacs 24.2, Ubuntu 12.04 or Windows 7 64bit
;; - Emacs 23.3, Ubuntu 12.04 or Windows 7 64bit
;; - Emacs 22.3, Windows 7 64bit
;; - Emacs 24.3.1, OS X 10.9
;; If popwin works, I think guide-key will work as well. You can use
;; guide-key with Emacs working in terminal.
;;
;;
;; Advanced usage:
;;
;; It is bothering to add many prefixes to `guide-key/guide-key-sequence'.
;; `guide-key/recursive-key-sequence-flag' releases you from this problem.
;; If `guide-key/recursive-key-sequence-flag' is non-nil, guide-key checks a
;; input key sequence recursively. That is, if \"C-x 8 ^\" is an input key
;; sequence, guide-key checks whether `guide-key/guide-key-sequence' includes
;; \"C-x 8\" and \"C-x\".
;;
;; For example, if you configure as below,
;;
;;   (setq guide-key/guide-key-sequence '(\"C-x\"))
;;   (setq guide-key/recursive-key-sequence-flag t)
;;
;; the guide buffer is popped up when you input \"C-x r\", \"C-x 8\" and
;; any other prefixes following \"C-x\".
;;
;;
;; You can add extra settings in a particular mode. Please use
;; `guide-key/add-local-guide-key-sequence',
;; `guide-key/add-local-highlight-command-regexp' and the hook of
;; that mode.
;;
;;
;; This code is a example of org-mode.
;;
;;   (defun guide-key/my-hook-function-for-org-mode ()
;;     (guide-key/add-local-guide-key-sequence \"C-c\")
;;     (guide-key/add-local-guide-key-sequence \"C-c C-x\")
;;     (guide-key/add-local-highlight-command-regexp \"org-\"))
;;   (add-hook 'org-mode-hook 'guide-key/my-hook-function-for-org-mode)
;;
;; In respect of `guide-key/guide-key-sequence', you can add mode specific key
;; sequences without `guide-key/add-local-guide-key-sequence'. For example,
;; configure as below.
;;
;;   (setq guide-key/guide-key-sequence
;;         '(\"C-x r\" \"C-x 4\"
;;           (org-mode \"C-c C-x\")
;;           (outline-minor-mode \"C-c @\")))
;;
;; In this case, if the current major mode is `org-mode', guide key bindings
;; following \"C-c C-x\".  If `outline-minor-mode' is enabled, guide key bindings
;; following \"C-c @\".
;;
;;
;; `guide-key' can work with key-chord.el.  If you want to guide key bindings
;; following key chord, you need to execute
;; `guide-key/key-chord-hack-on'.  Then, add your favorite key chord to
;; `guide-key/guide-key-sequence' as below.
;;
;;   (key-chord-define global-map \"@4\" 'ctl-x-4-prefix)
;;
;;   (guide-key/key-chord-hack-on)
;;   (setq guide-key/guide-key-sequence '(\"<key-chord> @ 4\" \"<key-chord> 4 @\"))
;;
;; If =guide-key/recursive-key-sequence-flag= is non-nil, more simple.
;;
;;   (guide-key/key-chord-hack-on)
;;   (setq guide-key/recursive-key-sequence-flag t)
;;   (setq guide-key/guide-key-sequence '(\"<key-chord>\"))
;;
;; In this case, key bindings are popped up when you type any of key chords.
;;
;; This hack *may be dangerous* because it advices primitive functions;
;; `this-command-keys' and `this-command-keys-vector'.
;;
;;
;; Here are some functions and variables which control guide-key.
;; - `guide-key-mode':
;;   guide-key-mode is implemented as a minor mode.
;;   Excuting M-x guide-key-mode toggles whether guide-key is enabled or
;;   not.  Because guide-key-mode is a global minor mode, guide-key-mode is
;;   enabled in all buffers or disabled in all buffers.
;; - `guide-key/popup-window-position':
;;   This variable controls where a guide-key buffer is popped up. A value of
;;   this variable is one of `right', `bottom', `left', `top'. The default
;;   value is `right'.
;; - `guide-key/polling-time':
;;   This variable controls a polling time. The default value is 0.1 (in seconds).
;; - `guide-key/idle-delay':
;;   This variable controls the delay between starting a key sequence and
;;   popping up the guide buffer. The default value is 1.0 (in seconds),
;;   which means that guide-key will keep out of your way unless you hesitate
;;   in the middle of a key sequence .  Set this to 0.0 to revert to the old
;;   default behavior.
;; - `guide-key/text-scale-amount':
;;   This variable controls the size of text in guide buffer. The default
;;   value is 0 (it means default size in Emacs). If you want to enlarge
;;   text, set positive number. Otherwise, set negative number.
;;
;; Enjoy!

"]) (gs-mode . [(20131229 2316) nil "Major mode for editing GrADS script files" single ";;; Commentary:
;;
;; Based on wpdl-mode-el, a major mode for editing WPDL files
;; by Scott Andrew Borton <scott@pp.htv.fi>,
;; which is an example used in a tutorial about Emacs
;; mode creation. The tutorial can be found here:
;; http://two-wugs.net/emacs/mode-tutorial.html

"]) (gruvbox-theme . [(20131229 1458) nil "A retro-groove colour theme for Emacs" single ";;; Commentary:

;; A port of the Gruvbox colorscheme for Vim, built on top of the new
;; built-in theme support in Emacs 24.

"]) (gruber-darker-theme . [(20131126 1805) nil "Gruber Darker color theme for Emacs 24." single ";;; Commentary:
;;
;; Gruber Darker color theme for Emacs by Jason Blevins. A darker
;; variant of the Gruber Dark theme for BBEdit by John Gruber. Adapted
;; for deftheme and extended by Alexey Kutepov a.k.a. rexim.


(deftheme gruber-darker
  \"Gruber Darker color theme for Emacs 24\")

;; Please, install rainbow-mode.
;; Colors with +x are lighter. Colors with -x are darker.
(let ((gruber-darker-fg        \"#e4e4ef\")
      (gruber-darker-fg+1      \"#f4f4ff\")
      (gruber-darker-fg+2      \"#f5f5f5\")
      (gruber-darker-white     \"#ffffff\")
      (gruber-darker-black     \"#000000\")
      (gruber-darker-bg-1      \"#101010\")
      (gruber-darker-bg        \"#181818\")
      (gruber-darker-bg+1      \"#282828\")
      (gruber-darker-bg+2      \"#453d41\")
      (gruber-darker-bg+3      \"#484848\")
      (gruber-darker-bg+4      \"#52494e\")
      (gruber-darker-red-2     \"#501515\")
      (gruber-darker-red-1     \"#c73c3f\")
      (gruber-darker-red       \"#f43841\")
      (gruber-darker-red+1     \"#ff4f58\")
      (gruber-darker-green     \"#73c936\")
      (gruber-darker-yellow    \"#ffdd33\")
      (gruber-darker-brown     \"#cc8c3c\")
      (gruber-darker-quartz    \"#95a99f\")
      (gruber-darker-niagara-1 \"#5f627f\")
      (gruber-darker-niagara   \"#96a6c8\")
      (gruber-darker-wisteria  \"#9e95c7\")
      (gruber-darker-blue-2    \"#202050\")
      )
  (custom-theme-set-variables
   'gruber-darker
   '(frame-brackground-mode (quote dark)))

  (custom-theme-set-faces
   'gruber-darker

   ;; AUCTeX
   `(font-latex-bold-face ((t (:foreground ,gruber-darker-quartz :bold t))))
   `(font-latex-italic-face ((t (:foreground ,gruber-darker-quartz :italic t))))
   `(font-latex-math-face ((t (:foreground ,gruber-darker-green))))
   `(font-latex-sectioning-5-face ((t ,(list :foreground gruber-darker-niagara
                                             :bold t))))
   `(font-latex-slide-title-face ((t (:foreground ,gruber-darker-niagara))))
   `(font-latex-string-face ((t (:foreground ,gruber-darker-green))))
   `(font-latex-warning-face ((t (:foreground ,gruber-darker-red))))

   ;; Basic Coloring (or Uncategorized)
   `(border ((t ,(list :background gruber-darker-bg-1
                       :foreground gruber-darker-bg+2))))
   `(cursor ((t (:background ,gruber-darker-yellow))))
   `(default ((t ,(list :foreground gruber-darker-fg
                        :background gruber-darker-bg))))
   `(fringe ((t ,(list :background gruber-darker-bg-1
                       :foreground gruber-darker-bg+2))))
   `(link ((t (:foreground ,gruber-darker-niagara :underline t))))
   `(link-visited ((t (:foreground ,gruber-darker-wisteria :underline t))))
   `(match ((t (:background ,gruber-darker-bg+4))))
   `(minibuffer-prompt ((t (:foreground ,gruber-darker-niagara))))
   `(region ((t (:background ,gruber-darker-bg+3 :foreground nil))))
   `(secondary-selection ((t ,(list :background gruber-darker-bg+3
                                    :foreground nil))))
   `(trailing-whitespace ((t ,(list :foreground gruber-darker-black
                                    :background gruber-darker-red))))
   `(tooltip ((t ,(list :background gruber-darker-bg+4
                        :foreground gruber-darker-white))))

   ;; Calendar
   `(holiday-face ((t (:foreground ,gruber-darker-red))))

   ;; Compilation
   `(compilation-info ((t (:foreground ,gruber-darker-green :inherit nil))))
   `(compilation-warning ((t ,(list :foreground gruber-darker-brown
                                    :bold t
                                    :inherit nil))))
   `(compilation-error ((t (:foreground ,gruber-darker-red+1))))
   `(compilation-mode-line-fail ((t ,(list :foreground gruber-darker-red
                                           :weight 'bold
                                           :inherit nil))))
   `(compilation-mode-line-exit ((t ,(list :foreground gruber-darker-green
                                           :weight 'bold
                                           :inherit nil))))

   ;; Custom
   `(custom-state ((t (:foreground ,gruber-darker-green))))

   ;; Diff
   `(diff-removed ((t ,(list :foreground gruber-darker-red+1
                             :background nil))))
   `(diff-added ((t ,(list :foreground gruber-darker-green
                           :background nil))))

   ;; Dired
   `(dired-directory ((t (:foreground ,gruber-darker-niagara :weight bold))))
   `(dired-ignored ((t (:foreground ,gruber-darker-quartz :inherit nil))))

   ;; Ebrowse
   `(ebrowse-root-class ((t (:foreground ,gruber-darker-niagara :weight bold))))
   `(ebrowse-progress ((t (:background ,gruber-darker-niagara))))

   ;; Egg
   `(egg-branch ((t (:foreground ,gruber-darker-yellow))))
   `(egg-branch-mono ((t (:foreground ,gruber-darker-yellow))))
   `(egg-diff-add ((t (:foreground ,gruber-darker-green))))
   `(egg-diff-del ((t (:foreground ,gruber-darker-red))))
   `(egg-diff-file-header ((t (:foreground ,gruber-darker-wisteria))))
   `(egg-help-header-1 ((t (:foreground ,gruber-darker-yellow))))
   `(egg-help-header-2 ((t (:foreground ,gruber-darker-niagara))))
   `(egg-log-HEAD-name ((t (:box (:color ,gruber-darker-fg)))))
   `(egg-reflog-mono ((t (:foreground ,gruber-darker-niagara-1))))
   `(egg-section-title ((t (:foreground ,gruber-darker-yellow))))
   `(egg-text-base ((t (:foreground ,gruber-darker-fg))))
   `(egg-term ((t (:foreground ,gruber-darker-yellow))))

   ;; EShell
   `(eshell-ls-backup ((t (:foreground ,gruber-darker-quartz))))
   `(eshell-ls-directory ((t (:foreground ,gruber-darker-niagara))))
   `(eshell-ls-executable ((t (:foreground ,gruber-darker-green))))
   `(eshell-ls-symlink ((t (:foreground ,gruber-darker-yellow))))

   ;; Font Lock
   `(font-lock-builtin-face ((t (:foreground ,gruber-darker-yellow))))
   `(font-lock-comment-face ((t (:foreground ,gruber-darker-brown))))
   `(font-lock-comment-delimiter-face ((t (:foreground ,gruber-darker-brown))))
   `(font-lock-constant-face ((t (:foreground ,gruber-darker-quartz))))
   `(font-lock-doc-face ((t (:foreground ,gruber-darker-green))))
   `(font-lock-doc-string-face ((t (:foreground ,gruber-darker-green))))
   `(font-lock-function-name-face ((t (:foreground ,gruber-darker-niagara))))
   `(font-lock-keyword-face ((t (:foreground ,gruber-darker-yellow :bold t))))
   `(font-lock-preprocessor-face ((t (:foreground ,gruber-darker-quartz))))
   `(font-lock-reference-face ((t (:foreground ,gruber-darker-quartz))))
   `(font-lock-string-face ((t (:foreground ,gruber-darker-green))))
   `(font-lock-type-face ((t (:foreground ,gruber-darker-quartz))))
   `(font-lock-variable-name-face ((t (:foreground ,gruber-darker-fg+1))))
   `(font-lock-warning-face ((t (:foreground ,gruber-darker-red))))

   ;; Flymake
   `(flymake-errline ((t (:background ,gruber-darker-red-2))))
   `(flymake-warnline ((t (:background ,gruber-darker-blue-2))))

   ;; Flyspell
   `(flyspell-incorrect ((t (:foreground ,gruber-darker-red))))
   `(flyspell-duplicate ((t (:foreground ,gruber-darker-yellow))))

   ;; Helm
   `(helm-candidate-number ((t ,(list :background gruber-darker-bg+2
                                      :foreground gruber-darker-yellow
                                      :bold t))))
   `(helm-ff-directory ((t ,(list :foreground gruber-darker-niagara
                                  :background gruber-darker-bg
                                  :bold t))))
   `(helm-ff-executable ((t (:foreground ,gruber-darker-green))))
   `(helm-ff-file ((t (:foreground ,gruber-darker-fg :inherit nil))))
   `(helm-ff-invalid-symlink ((t ,(list :foreground gruber-darker-bg
                                        :background gruber-darker-red))))
   `(helm-ff-symlink ((t (:foreground ,gruber-darker-yellow :bold t))))
   `(helm-selection-line ((t (:background ,gruber-darker-bg+1))))
   `(helm-selection ((t (:background ,gruber-darker-bg+1 :underline nil))))
   `(helm-source-header ((t ,(list :foreground gruber-darker-yellow
                                   :background gruber-darker-bg
                                   :box (list :line-width -1
                                              :style 'released-button)))))

   ;; Ido
   `(ido-first-match ((t (:foreground ,gruber-darker-yellow :bold nil))))
   `(ido-only-match ((t (:foreground ,gruber-darker-brown :weight bold))))
   `(ido-subdir ((t (:foreground ,gruber-darker-niagara :weight bold))))

   ;; Info
   `(info-xref ((t (:foreground ,gruber-darker-niagara))))
   `(info-visited ((t (:foreground ,gruber-darker-wisteria))))

   ;; Jabber
   `(jabber-chat-prompt-foreign ((t ,(list :foreground gruber-darker-quartz
                                           :bold nil))))
   `(jabber-chat-prompt-local ((t (:foreground ,gruber-darker-yellow))))
   `(jabber-chat-prompt-system ((t (:foreground ,gruber-darker-green))))
   `(jabber-rare-time-face ((t (:foreground ,gruber-darker-green))))
   `(jabber-roster-user-online ((t (:foreground ,gruber-darker-green))))

   ;; Line Highlighting
   `(highlight ((t (:background ,gruber-darker-bg+1 :foreground nil))))
   `(highlight-current-line-face ((t ,(list :background gruber-darker-bg+1
                                            :foreground nil))))

   ;; Linum
   `(linum ((t `(list :foreground gruber-darker-quartz
                      :background gruber-darker-bg))))

   ;; Magit
   `(magit-log-sha1 ((t (:foreground ,gruber-darker-red+1))))
   `(magit-log-author ((t (:foreground ,gruber-darker-brown))))
   `(magit-log-head-label-remote ((t ,(list :foreground gruber-darker-green
                                            :background gruber-darker-bg+1))))
   `(magit-log-head-label-local ((t ,(list :foreground gruber-darker-niagara
                                           :background gruber-darker-bg+1))))
   `(magit-log-head-label-tags ((t ,(list :foreground gruber-darker-yellow
                                          :background gruber-darker-bg+1))))
   `(magit-log-head-label-head ((t ,(list :foreground gruber-darker-fg
                                          :background gruber-darker-bg+1))))
   `(magit-item-highlight ((t (:background ,gruber-darker-bg+1))))
   `(magit-diff-hunk-header ((t (:background ,gruber-darker-bg+2))))
   `(magit-diff-file-header ((t (:background ,gruber-darker-bg+4))))

   ;; Message
   `(message-header-name ((t (:foreground ,gruber-darker-green))))

   ;; Mode Line
   `(mode-line ((t ,(list :background gruber-darker-bg+1
                          :foreground gruber-darker-white))))
   `(mode-line-buffer-id ((t ,(list :background gruber-darker-bg+1
                                    :foreground gruber-darker-white))))
   `(mode-line-inactive ((t ,(list :background gruber-darker-bg+1
                                   :foreground gruber-darker-quartz))))

   ;; Org Mode
   `(org-done ((t (:foreground ,gruber-darker-green))))
   `(org-todo ((t (:foreground ,gruber-darker-red-1))))

   ;; Search
   `(isearch ((t ,(list :foreground gruber-darker-black
                        :background gruber-darker-fg+2))))
   `(isearch-fail ((t ,(list :foreground gruber-darker-black
                             :background gruber-darker-red))))
   `(isearch-lazy-highlight-face ((t ,(list
                                       :foreground gruber-darker-fg+1
                                       :background gruber-darker-niagara-1))))

   ;; Sh
   `(sh-quoted-exec ((t (:foreground ,gruber-darker-red+1))))

   ;; Show Paren
   `(show-paren-match-face ((t (:background ,gruber-darker-bg+4))))
   `(show-paren-mismatch-face ((t (:background ,gruber-darker-red-1))))

   ;; Slime
   `(slime-repl-inputed-output-face ((t (:foreground ,gruber-darker-red))))

   ;; Tuareg
   `(tuareg-font-lock-governing-face ((t (:foreground ,gruber-darker-yellow))))

   ;; Speedbar
   `(speedbar-directory-face ((t ,(list :foreground gruber-darker-niagara
                                        :weight 'bold))))
   `(speedbar-file-face ((t (:foreground ,gruber-darker-fg))))
   `(speedbar-highlight-face ((t (:background ,gruber-darker-bg+1))))
   `(speedbar-selected-face ((t (:foreground ,gruber-darker-red))))
   `(speedbar-tag-face ((t (:foreground ,gruber-darker-yellow))))
   ))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'gruber-darker)

;; Local Variables:
;; no-byte-compile: t
;; indent-tabs-mode: nil
;; eval: (when (fboundp 'rainbow-mode) (rainbow-mode +1))
;; End:

;;; gruber-darker-theme.el ends here.
"]) (groovy-mode . [(20131129 409) nil "Groovy mode derived mode" tar ";;; Commentary:
;;
;;  This mode was initially developed using the Java and Awk modes that are part of CC Mode (the 5.31 source
;;  was used) and C# Mode from Dylan R. E. Moonfire <contact@mfgames.com> (the 0.5.0 source was used).  This
;;  code may contain some code fragments from those sources that was cut-and-pasted then edited.  All other
;;  code was newly entered by the author.  Obviously changes have been made since then.
;;
;;  NB  This derived mode requires CC Mode 5.31 or later for the virtual semicolon code to work.
;;
;;  There appears to be a problem in CC Mode 5.31 such that csharp-mode and groovy-mode crash XEmacs 21.4 if
;;  the files are byte compiled.

"]) (grizzl . [(20130810 202) ((cl-lib (0 1))) "Fuzzy Search Library & Completing Read" tar nil]) (grin . [(20110805 2358) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single nil]) (grep-a-lot . [(20131006 647) nil "manages multiple search results buffers for grep.el" single ";;; Commentary:

;; This package manages multiple search results buffers:
;; - the search results of grep, lgrep, rgrep, and find-grep are sent
;;   to separate buffers instead of overwriting the contents of a single
;;   buffer (buffers are named *grep*<N> where N is a number)
;; - several navigation functions are provided to allow the user to treat
;;   the search results buffers as a stack and/or ring, and to easily reset
;;   the state of each search buffer after navigating through the results
;;
;; Installation:
;;
;; 1. Put this file in a directory that is a member of load-path, and
;;    byte-compile it (e.g. with `M-x byte-compile-file') for better
;;    performance.
;; 2. Add the following to your ~/.emacs:
;;    (require 'grep-a-lot)
;;    (grep-a-lot-setup-keys)
;; 3. If you're using igrep.el you may want to add:
;;    (grep-a-lot-advise igrep)
;;
;; Currently, there are no customization options.
;;    
;; Default Key Bindings:
;;
;; Ring navigation:
;; M-g ]         Go to next search results buffer, restore its current search context
;; M-g [         Ditto, but selects previous buffer.
;;               Navigation is cyclic.
;;
;; Stack navigation:
;; M-g -         Pop to previous search results buffer (kills top search results buffer)
;; M-g _         Clear the search results stack (kills all grep-a-lot buffers!)
;;
;; Other:
;; M-g =         Restore buffer and position where current search started
;;

"]) (grep+ . [(20131226 1851) nil "Extensions to standard library `grep.el'." single ";;; Commentary:
;;
;;  Extensions to standard library `grep.el':
;;
;;    1. Additional keys are bound here.
;;    2. Mouse-over is active on the entire hit line, not just on the
;;       file-name part.
;;    3. `grep' command provides a default search string in all cases,
;;       and that default value is better.
;;    4. Commands are provided to remove commented lines from `grep'
;;       output and toggle their automatic removal.
;;
;;  Put this in your initialization file (`~/.emacs'):
;;
;;    (require 'grep+)
;;
;;  Face suggestions (what I use):
;;
;;    `compilation-info-face':   Blue3' foreground,        no inherit
;;    `compilation-line-number': DarkGoldenrod foreground, no inherit
;;    `match':                   SkyBlue background,       no inherit
;;
;;
;;  New user options defined here:
;;
;;    `grepp-default-comment-line-regexp', `grepp-default-regexp-fn'.
;;
;;  New commands defined here:
;;
;;    `choose-grep-buffer', `grepp-choose-grep-buffer',
;;    `grepp-new-grep-buffer', `grepp-remove-comments',
;;    `grepp-toggle-comments', `new-grep-buffer',
;;    `remove-grep-comments', `toggle-grep-comments'.
;;
;;  New non-interactive functions defined here:
;;
;;    `grepp-buffers', `grepp-default-regexp-fn'.
;;
;;
;;  ***** NOTE: The following variables defined in `grep.el'
;;              have been REDEFINED HERE:
;;
;;  `grep-mode-font-lock-keywords', `grep-regexp-alist'
;;    - Mouse-over the whole line.
;;
;;
;;
;;  ***** NOTE: The following minor mode defined in `grep.el'
;;              has been REDEFINED HERE:
;;
;;  `grep-mode' - No change.  Redefined here so it uses modified value
;;                of `grep-regexp-alist'.
;;
;;
;;  ***** NOTE: The following functions defined in `grep.el'
;;              have been REDEFINED HERE:
;;
;;  `grep', `grep-default-command' - Use `grepp-default-regexp-fn'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (grass-mode . [(20140105 1149) ((cl-lib (0 2))) "Provides Emacs modes for interacting with the GRASS GIS program" single ";;; Commentary:

;; Check the customization options in the grass-mode group to make sure
;; Emacs can find your Grass exectuables and help files.

"]) (grapnel . [(20131001 834) nil "HTTP request lib with flexible callback dispatch" single ";;; Commentary:

;; grapnel is an HTTP request library that uses a curl subprocess and
;; offers flexible callback dispatch.  Not only can you pass in an
;; alist of request outcomes to callback functions (see below) but you
;; can also override the dispatch function itself if the default one
;; doesn't suit your needs.  Further, grapnel will build the query
;; string, request data (i.e., POST body), and headers from alists
;; that are passed in.

;; An example:
;; (grapnel-retrieve-url
;;  \"www.google.com\"
;;  '((success . (lambda (res hdrs) (message \"%s\" res)))
;;    (failure . (lambda (res hdrs) (message \"Fail: %s\" res)))
;;    (error   . (lambda (res err)  (message \"Err: %s\" err))))
;;  \"GET\"
;;  '((q . \"ASIN B001EN71CW\")))

;; History

;; 0.5.1 - Initial release.

;; 0.5.2 - Fix some quoting issues on Windows

;; 0.5.3 - Handle HTTP 100 responses, fix a hanging curl request

"]) (graphviz-dot-mode . [(20120821 1441) nil "Mode for the dot-language used by graphviz (att)." single ";;; Commentary:
;; Use this mode for editing files in the dot-language (www.graphviz.org and
;; http://www.research.att.com/sw/tools/graphviz/).
;;
;; To use graphviz-dot-mode, add 
;; (load-file \"PATH_TO_FILE/graphviz-dot-mode.el\") 
;; to your ~/.emacs(.el) or ~/.xemacs/init.el
;;
;; The graphviz-dot-mode will do font locking, indentation, preview of graphs
;; and eases compilation/error location. There is support for both GNU Emacs
;; and XEmacs.
;;
;; Font locking is automatic, indentation uses the same commands as
;; other modes, tab, M-j and C-M-q.  Insertion of comments uses the
;; same commands as other modes, M-; .  You can compile a file using
;; M-x compile or C-c c, after that M-x next-error will also work.
;; There is support for viewing an generated image with C-c p.

"]) (graphene . [(20131203 1152) ((auto-complete (20131121)) (flycheck (20131129)) (smartparens (20131123)) (web-mode (20131125)) (smex (20130707)) (sr-speedbar (20130309)) (project-persist (20131030)) (exec-path-from-shell (20131002)) (scss-mode (20121203)) (markdown-mode (20131005)) (feature-mode (20130714))) "Friendly Emacs defaults." tar nil]) (grandshell-theme . [(20140112 922) nil "Dark color theme for Emacs > 24 with intensive colors." tar nil]) (gplusify . [(20121211 522) nil "Add Google Plus markup to a piece of code" single ";;; Commentary:

;; Google+ does not have any markup for program code, which is highly
;; annoying. This simple command will add some markup to share code
;; more easily on Google+, based on fontification.

;; Sadly, it will break if the code itself includes Google+ markup. As
;; there is no escape mechanism included in Google+, there's not much
;; we can do there.

"]) (goto-last-change . [(20121115 1014) nil "Move point through buffer-undo-list positions" single ";;; Commentary:

;; After installing goto-last-change.el in a `load-path' directory and
;; compiling it with `M-x byte-compile-file', load it with
;; 	(require 'goto-last-change)
;; or autoload it with
;; 	(autoload 'goto-last-change \"goto-last-change\"
;; 	  \"Set point to the position of the last change.\" t)
;; 
;; You may also want to bind a key to `M-x goto-last-change', e.g.
;; 	(global-set-key \"\\C-x\\C-\\\\\" 'goto-last-change)

;; goto-last-change.el was written in response to to the following:
;; 
;; From: Dan Jacobson <jidanni@jidanni.org>
;; Newsgroups: gnu.emacs.bug
;; Subject: function to go to spot of last change
;; Date: Sun, 15 Jun 2003 00:15:08 +0000 (UTC)
;; Sender: news <news@main.gmane.org>
;; Message-ID: <mailman.7910.1055637181.21513.bug-gnu-emacs@gnu.org>
;; NNTP-Posting-Host: monty-python.gnu.org
;; 
;; 
;; Why of course, a function to get the user to the spot of last changes
;; in the current buffer(s?), that's what emacs must lack.
;; 
;; How many times have you found yourself mosying [<-not in spell
;; checker!?] thru a file when you wonder, where the heck was I just
;; editing?  Well, the best you can do is hit undo, ^F, and undo again,
;; to get back.  Hence the \"burning need\" for the additional function,
;; which you might name the-jacobson-memorial-function, due to its brilliance.
;; -- 
;; http://jidanni.org/ Taiwan(04)25854780

"]) (goto-chg . [(20131228 1459) nil "goto last change" single ";;; Commentary:
;;
;; Goto Last Change
;;
;; Goto the point of the most recent edit in the buffer.
;; When repeated, goto the second most recent edit, etc.
;; Negative argument, C-u -, for reverse direction.
;; Works by looking into buffer-undo-list to find points of edit.
;;
;; You would probably like to bind this command to a key.
;; For example in your ~/.emacs:
;;
;;   (require 'goto-chg)
;;
;;   (global-set-key [(control ?.)] 'goto-last-change)
;;   (global-set-key [(control ?,)] 'goto-last-change-reverse)
;;
;; Works with emacs-19.29, 19.31, 20.3, 20.7, 21.1, 21.4, 22.1 and 23.1
;; Works with XEmacs-20.4 and 21.4 (but see todo about `last-command' below)
;;
;;--------------------------------------------------------------------
;; History
;;
;; Ver 1.6 2013-12-12 David Andersson
;;    Add keywords; Cleanup comments
;; Ver 1.5 2013-12-11 David Andersson
;;    Autoload and document `goto-last-change-reverse'
;; Ver 1.4 2008-09-20 David Andersson
;;    Improved property change description; Update comments.
;; Ver 1.3 2007-03-14 David Andersson
;;    Added `goto-last-change-reverse'
;; Ver 1.2 2003-04-06 David Andersson
;;    Don't let repeating error depthen glc-probe-depth.
;; Ver 1.1 2003-04-06 David Andersson
;;    Zero arg describe changes. Negative arg go back.
;;    Autoload. Remove message using nil in stead of an empty string.
;; Ver 1.0 2002-05-18 David Andersson
;;    Initial version
;;
;;--------------------------------------------------------------------
;;
;;todo: Rename \"goto-chg.el\" -> \"gotochange.el\" or \"goto-chgs\" ?
;;todo: Rename function goto-last-change -> goto-last-edit ?
;;todo: Rename adjective \"-last-\" -> \"-latest-\" or \"-most-recent-\" ?
;;todo: There are some, maybe useful, funcs  for region undo 
;;       in simple.el in emacs 20. Take a look.
;;todo: Add functionality to visit changed point in text order, not only in
;;        chronological order. (Naa, highlight-changes-mode does that).
;;todo: Inverse indication that a change has been saved or not
;;todo: Highlight the range of text involved in the last change?
;;todo: See session-jump-to-last-change in session.el?
;;todo: Unhide invisible text (e.g. outline mode) like isearch do.
;;todo: XEmacs sets last-command to `t' after an error, so you cannot reverse
;;        after \"No furter change info\". Should we bother?
;;todo: Try distinguish \"No further change info\" (end of truncated undo list)
;;        and \"No further changes\" (end of a complete undo list).
;;
;;--------------------------------------------------------------------

"]) (gore-mode . [(20131027 2227) nil "Simple mode for gore, a command-line evaluator for golang." single ";;; Commentary:
;;
;; This is a simple comint-based mode for gore (command-line evaluator
;; for golang code) which you can install from here:
;;   http://github.com/sriram-srinivasan/gore

"]) (google-weather . [(20110930 155) nil "Fetch Google Weather forecasts." tar ";;; Commentary:
;; This module allows you to fetch Google Weather forecast from the
;; Internet.
;;
"]) (google-translate . [(20131124 1319) nil "Emacs interface to Google Translate" single ";;; Commentary:

;; Invoking the function `google-translate-query-translate' queries the source
;; and target languages and text to translate, and shows a buffer with
;; available translations of the text.  Invoking the function
;; `google-translate-at-point' translates the word at point or the active
;; region.

;; Installation:

;; Assuming that the file `google-translate.el' is somewhere on the
;; load path, add the following lines to your .emacs file:
;;
;;   (require 'google-translate)
;;   (global-set-key \"\\C-ct\" 'google-translate-at-point)
;;   (global-set-key \"\\C-cT\" 'google-translate-query-translate)
;;
;; Change the key bindings to your liking.


;; Customization:

;; You can customize the following variables:
;;
;; - `google-translate-enable-ido-completion'
;;
;; - `google-translate-default-source-language'
;;
;; - `google-translate-default-target-language'

;; If `google-translate-enable-ido-completion' is non-NIL, the input
;; will be read with ido-style completion.

;; If the variable `google-translate-default-source-language' is set
;; to a non-NIL value, the source language won't be queried and that
;; value will be used instead.  Analogously, if you set the variable
;; `google-translate-default-target-language' to some non-NIL value,
;; that value will be used without querying.

;; You can always override this behavior by supplying a `C-u' prefix
;; argument to the function `google-translate-query-translate'.

;; Here is an example.  Suppose that your native language is Russian
;; and you frequently need to translate from various languages to
;; Russian.  Then it is reasonable
;;
;; - to set the variable `google-translate-default-target-language'
;;   to \"ru\", and
;;
;; - to leave `google-translate-default-source-language' set to its
;;   default value, NIL.
;;
;; In this case, the function `google-translate-query-translate' is
;; only going to query the source language and text to translate.
;; If you need to translate to some language other than Russian, you
;; can override the default for the target language by supplying a
;; `C-u' prefix argument, in which case you will be queried for both
;; the source and target languages, as well as text to translate.

;; If you frequently translate from some fixed language, it is also
;; reasonable to set `google-translate-default-source-language' to
;; an appropriate value.
;;
;; If you have both the default source and target languages specified,
;; you may like to bind functions `google-translate-at-point-reverse'
;; and `google-translate-query-translate-reverse' to some keys, e.g.:
;;
;;   (global-set-key (kbd \"C-c r\") 'google-translate-at-point-reverse)
;;   (global-set-key (kbd \"C-c R\") 'google-translate-query-translate-reverse)
;;
;; This will allow you to quickly translate in the reverse direction.
;; When the default source (resp. target) language is not set, the
;; target (resp. source) language of the reverse translation will be
;; queried interactively.

;; The admitted values of `google-translate-default-source-language'
;; and `google-translate-default-target-language' are the codes of the
;; languages supported by Google Translate (like \"ru\" for Russian
;; above).  See `google-translate-supported-languages' for the list of
;; the supported languages, or customize the defaults using the
;; customization mechanism of Emacs.  Setting a default language to
;; NIL means that language will always be queried.  Moreover, the
;; variable `google-translate-default-source-language' can be set to a
;; special value \"auto\" that is interpreted as the instruction for
;; Google Translate to detect the source language.  This option is
;; also available when you are queried for the source language: simply
;; leave this parameter blank by pressing RET.  (If you have enabled
;; the ido-style completion, \"Detect language\" is going to be the
;; first option, which you can select simply by hitting RET.)
;;
;; The variable `google-translate-show-phonetic' controls whether the
;; phonetic spelling of the original text and its translation is
;; displayed if available.  If you want to see the phonetics, set this
;; variable to T.
;;
;; There are also three faces you can customize:
;;
;; - `google-translate-text-face', used to display the original text
;;   (defaults to `default')
;;
;; - `google-translate-phonetic-face', used to display the phonetics
;;   (defaults to `shadow')
;;
;; - `google-translate-translation-face', used to display the highest
;;   ranking translation (defaults to `default' with the `weight'
;;   attribute set to `bold')
;;
;; For example, to show the translation in a larger font change the
;; `height' attribute of the face `google-translate-translation-face'
;; like so:
;;
;;   (set-face-attribute 'google-translate-translation-face nil :height 1.4)


"]) (google-this . [(20131031 315) nil "A set of functions and bindings to google under point." single ";;; Commentary:

;; google-this is a package that provides a set of functions and
;; keybindings for launching google searches from within emacs.

;; The main function is `google-this' (bound to C-c / g). It does a
;; google search using the currently selected region, or the
;; expression under point. All functions are bound under \"C-c /\"
;; prefix, in order to comply with emacs' standards. If that's a
;; problem see `google-this-keybind'. To view all keybindings type \"C-c
;; / C-h\".
;;
;; If you don't like this keybind, just reassign the
;; `google-this-mode-submap' variable.
;; My personal preference is \"C-x g\":
;;
;;        (global-set-key (kbd \"C-x g\") 'google-this-mode-submap)
;;
;; Or, if you don't want google-this to overwrite the default (\"C-c /\")
;; key insert the following line BEFORE everything else (even before
;; the `require' command):
;;
;;        (setq google-this-keybind (kbd \"C-x g\"))
;;

;; To start a blank search, do `google-search' (C-c / RET). If you
;; want more control of what \"under point\" means for the `google-this'
;; command, there are the `google-word', `google-symbol',
;; `google-line' and `google-region' functions, bound as w, s, l and space,
;; respectively. They all do a search for what's under point.

;; If the `google-wrap-in-quotes' variable is t, than searches are
;; enclosed by double quotes (default is NOT). If a prefix argument is
;; given to any of the functions, invert the effect of
;; `google-wrap-in-quotes'.

;; There is also a `google-error' (C-c / e) function. It checks the
;; current error in the compilation buffer, tries to do some parsing
;; (to remove file name, line number, etc), and googles it. It's still
;; experimental, and has only really been tested with gcc error
;; reports.

;; Finally there's also a google-cpp-reference function (C-c / r).

;;; Instructions:

;; INSTALLATION

;;  Make sure \"google-this.el\" is in your load path, then place
;;      this code in your .emacs file:
;;		(require 'google-this)
;;              (google-this-mode 1)

;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;

"]) (google-maps . [(20130412 230) nil "Access Google Maps from Emacs" tar ";;; Commentary:
;; None
"]) (google-contacts . [(20130430 820) ((oauth2 (0 7))) "Support for Google Contacts in Emacs" tar ";;; Commentary:
;;
;; This allows you to access your Google Contacts from Emacs.
;;

"]) (google-c-style . [(20130412 1415) nil "Google's C/C++ style for c-mode" single ";;; Commentary:

;; Provides the google C/C++ coding style. You may wish to add
;; `google-set-c-style' to your `c-mode-common-hook' after requiring this
;; file. For example:
;;
;;    (add-hook 'c-mode-common-hook 'google-set-c-style)
;;
;; If you want the RETURN key to go to the next line and space over
;; to the right place, add this to your .emacs right after the load-file:
;;
;;    (add-hook 'c-mode-common-hook 'google-make-newline-indent)

"]) (golden-ratio . [(20130921 144) nil "Automatic resizing of Emacs windows to the golden ratio" single nil]) (god-mode . [(20140108 239) nil "God-like command entering minor mode" single ";;; Commentary:

;; See README.md.

"]) (go-snippets . [(20130821 844) ((yasnippet (0 8 0))) "Yasnippets for go" tar nil]) (go-play . [(20120914 1248) nil "Paste to play.golang.org" single nil]) (go-mode . [(20140106 811) nil "Major mode for the Go programming language" tar nil]) (go-errcheck . [(20140107 1046) nil "errcheck integration for go-mode" single nil]) (go-eldoc . [(20131216 511) ((go-mode (0))) "eldoc for go-mode" single ";;; Commentary:

;; To use this package, add these lines to your .emacs file:
;;
;;     (require 'go-eldoc)
;;     (add-hook 'go-mode-hook 'go-eldoc-setup)
;;

"]) (go-direx . [(20130808 624) ((direx (0 1 -3))) "Tree style source code viewer for Go language" single ";;; Commentary:

;; go-direx.el provides tree style source code viewer for Go langue
;; using direx.
;;
;; To use this package, add these lines to your .emacs.d/init.el:
;;     (require 'go-direx)
;;
;; I recommend you use go-direx with popwin.el. You can control popup
;; buffer easily.
;;

"]) (go-autocomplete . [(20140102 1333) ((auto-complete (1 4 0))) "auto-complete-mode backend for go-mode" single ";;; Commentary:

;; Ensure that go-autocomplete in your load-path and add to your ~/.emacs
;; following line:
;;
;; (require 'go-autocomplete)

;; Also you could setup any combination (for example M-TAB)
;; for invoking auto-complete:
;;
;; (require 'auto-complete-config)
;; (define-key ac-mode-map (kbd \"M-TAB\") 'auto-complete)

"]) (gnus-summary-ext . [(20131222 2021) ((macro-utils (1 0))) "Extra limit and process mark commands for the gnus summary buffer" single ";;; Commentary: 
;;
;; Bitcoin donations gratefully accepted: 16mhw12vvtzCwQyvvLAqCSBvf8i41CfKhK
;;
;; This library provides extra limit commands for filtering the gnus summary buffer,
;; some commands for performing actions on MIME parts in articles,
;; and some general functions for evaluating elisp code in all articles that have the
;; process mark. See the documentation of the individual commands & functions for more
;; details.
;;;;

"]) (gnus-spotlight . [(20130901 1435) nil "Search mail with Spotlight" single ";;; Commentary:

;; This file defines the command to search mails and persistent
;; articles with Mac OS X Tiger's Spotlight and to browse its results with Gnus.
;;
;; This code is derived from gnus-namazu.el.

"]) (gnus-alias . [(20130824 1206) nil "an alternative to gnus-posting-styles" single ";;; Commentary:
;;
;;  gnus-alias provides a simple mechanism to switch Identities when
;;  using message-mode.  An Identity is one or more of the following
;;  elements:
;;
;;  o From - sets the From header (i.e. the sender)
;;  o Organization - sets the Organization header (a common, optional header)
;;  o Extra headers - a list of arbitrary header to set (e.g. X-Archive: no)
;;  o Body - adds text to the body of the message (just above the signature)
;;  o Signature - adds a signature to the message
;;
;;  All of this is also provided by the standard `gnus-posting-styles'
;;  (which see).  Whereas Posting Styles let you set these up
;;  initially, though, gnus-alias lets you change them on the fly
;;  easily, too (in this regard gnus-alias is much like gnus-pers,
;;  upon which it is based; see 'Credits' below).  With a simple
;;  command (`gnus-alias-select-identity') you can select & replace
;;  one Identity with another.
;;
;;  There are other significant differences between gnus-alias and
;;  Posting Styles, too.  gnus-alias has a much simpler interface/API
;;  for selecting an initial Identity automatically.  Posting Styles is
;;  much more flexible (especially in that you can build up an
;;  \"Identity\" piece by piece), but with that flexibility can come
;;  some complexity.
;;
;;  Other advantages to using gnus-alias:
;;
;;  o the ability to switch Identities in a message buffer
;;  o can access original message to help determine Identity of the
;;    followup/reply message
;;  o can act on a forwarded message as if it were a message being
;;    replied to
;;  o can start a new message with a given Identity pre-selected
;;
;;  It is possible to use both Posting Styles and gnus-alias, with
;;  `gnus-posting-styles' setup occuring before gnus-alias selects an
;;  Identity.  That much co-ordination is beyond my attention span,
;;  though; I just use this package.
;;
;;  There may also be some overlap between this package and
;;  `message-alternative-emails' (which see), though I'm not exactly
;;  sure what that really does.

;;; Installation:
;;
;;  Put this file on your Emacs-Lisp load path, then add one of the
;;  following to your ~/.emacs startup file.  You can load gnus-alias
;;  every time you start Emacs:
;;
;;     (require 'gnus-alias)
;;     (gnus-alias-init)
;;
;;  or you can load the package via autoload:
;;
;;     (autoload 'gnus-alias-determine-identity \"gnus-alias\" \"\" t)
;;     (add-hook 'message-setup-hook 'gnus-alias-determine-identity)
;;
;;  To add a directory to your load-path, use something like the following:
;;
;;      (add-to-list 'load-path (expand-file-name \"/some/load/path\"))

"]) (gnuplot-mode . [(20131203 2159) nil "Major mode for editing gnuplot scripts" single ";;; Commentary:

;; Defines a major mode for editing gnuplot scripts.  I wanted to keep
;; it simpler than other modes -- just syntax hilighting, indentation,
;; and a command to plot the file.

;; Some of this code is adapted from a more full-featured version by
;; Bruce Ravel (available here http://xafs.org/BruceRavel/GnuplotMode;
;; CC license).

;; Thanks to everyone, including Christopher Gilbreth and Ralph M\303\266ritz,
;; for sending suggestions, improvements, and fixes.

;;; Installation:

;; Use package.el. You'll need to add MELPA to your archives:

;; (require 'package)
;; (add-to-list 'package-archives
;;              '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)

;; Alternatively, you can just save this file and do the standard
;; (add-to-list 'load-path \"/path/to/gnuplot-mode.el\")

;;; Configuration:

;; If you installed this via `package.el', you should take advantage
;; of autoloading.  You can customize features using `defvar' and
;; `eval-after-load', as illustrated below:
;;
;; ;; specify the gnuplot executable (if other than \"gnuplot\")
;; (defvar gnuplot-program \"/sw/bin/gnuplot\")
;;
;; ;; set gnuplot arguments (if other than \"-persist\")
;; (defvar gnuplot-flags \"-persist -pointsize 2\")
;;
;; ;; if you want, add a mode hook.  e.g., the following turns on
;; ;; spell-checking for strings and comments and automatically cleans
;; ;; up whitespace on save.
;; (eval-after-load 'gnuplot-mode
;;   '(add-hook 'gnuplot-mode-hook
;;              (lambda ()
;;                (flyspell-prog-mode)
;;                (add-hook 'before-save-hook
;;                          'whitespace-cleanup nil t))))

;; If you installed this file manually, you probably don't want to
;; muck around with autoload commands.  Instead, add something like
;; the following to your .emacs:

;; (require 'gnuplot-mode)
;;
;; ;; specify the gnuplot executable (if other than \"gnuplot\")
;; (setq gnuplot-program \"/sw/bin/gnuplot\")
;;
;; ;; set gnuplot arguments (if other than \"-persist\")
;; (setq gnuplot-flags \"-persist -pointsize 2\")
;;
;; ;; if you want, add a mode hook.  e.g., the following turns on
;; ;; spell-checking for strings and comments and automatically cleans
;; ;; up whitespace on save.
;; (add-hook 'gnuplot-mode-hook
;;           (lambda ()
;;             (flyspell-prog-mode)
;;             (add-hook 'before-save-hook
;;                       'whitespace-cleanup nil t)))

"]) (gnuplot . [(20130206 1701) nil "drive gnuplot from within emacs" tar ";;; Commentary:

;;
;; This is a major mode for composing gnuplot scripts and displaying
;; their results using gnuplot.  It supports features of recent
;; Gnuplot versions (4.4 and up), but should also work fine with older
;; versions.
;;
;; This version of gnuplot-mode has been tested mostly on GNU Emacs 23
;; and 24, but should also work with older GNU Emacs versions back to
;; Emacs 21, and XEmacs 21.
;; 
;; This mode offers several tools to help you compose your scripts,
;; including font-lock syntax colorization, a syntax table appropriate
;; to gnuplot, key bindings, pull-down menus, indentation, keyword
;; completions and variable customization using the Custom package.
;; Once the script is composed, there are several function for sending
;; some or all of the script to gnuplot.  The interaction with the
;; gnuplot process is within a comint buffer.  Plots can optionally be
;; displayed within Emacs.
;;
;;    C-c C-l       send current line to gnuplot
;;    C-c C-v       send current line to gnuplot and move forward 1 line
;;    C-c C-r       send current region to gnuplot
;;    C-c C-b       send entire buffer to gnuplot
;;    C-c C-f       send a file to gnuplot
;;    C-c C-i       insert filename at point
;;    C-c C-n       negate set option on current line
;;    C-c C-c       comment region
;;    C-c C-o       set arguments for command at point
;;   S-mouse-2      set arguments for command under mouse cursor
;;    C-c C-d       read the gnuplot info file
;;    C-c C-e       show-gnuplot-buffer
;;    C-c C-k       kill gnuplot process
;;    C-c C-u       submit a bug report about gnuplot-mode
;;    C-c C-z       customize gnuplot-mode
;; M-tab or M-ret   complete keyword before point
;;      ret         newline and indent
;;      tab         indent current line
;;    C-c M-i       toggle inline plot display in comint buffer
;;
;; With the exception of the commands for sending commands to Gnuplot,
;; most of the above commands also work in the Gnuplot comint buffer,
;; in addition to the following:
;;     M-C-p        plot the most recent script buffer line-by-line
;;     M-C-f        save the current script buffer and load that file
;;    C-c C-e       pop back to most recent script buffer
;;
;; These two functions are useful for starting up gnuplot-mode:
;;
;; M-x gnuplot-mode
;;         start gnuplot-mode in the current buffer
;;
;; M-x gnuplot-make-buffer
;;         open a new buffer (which is not visiting a file) and start
;;         gnuplot-mode in that buffer
;;
;; Gnuplot-mode now includes context-sensitive support for keyword
;; completion and, optionally, eldoc-mode help text.  See the
;; commentary in gnuplot-context.el for more information.  If you
;; don't find it useful, it can be turned off by customizing
;; `gnuplot-context-sensitive-mode'.
;;
;;
;; ---------------------------------------------------------------------
;;
;; Other lisp files used by gnuplot.el
;;
;; gnuplot-gui.el (written by Bruce):
;;   Defines the GUI interface for setting setting arguments to
;;   gnuplot options.  This uses the widget package extensively.
;;
;; gnuplot-context.el (written by Jonathan, j.j.oddie@gmail.com)
;;   Context-sensitive completion, help lookup and eldoc
;;   strings for gnuplot buffers. Should be byte-compiled before
;;   using. 
;;
;; ---------------------------------------------------------------------
;;
;; This mode was inspired by the original gnu-plot-mode by Gershon
;; Elber, which is distributed with gnuplot itself and which dates
;; back to the early 90's.  Although this mode encompasses the
;; functionality of the original, the two share no code and the
;; current implementation takes advantage of many features of modern
;; versions of emacs and adheres (or so I intend) to the major mode
;; conventions described in the emacs-lisp reference for version 19
;; and later.
;;
;; ---------------------------------------------------------------------
;;
;;                         Installation
;;                         ============
;;
;; A recent version of this file can be found at
;;   http://github.com/bruceravel/gnuplot-mode/
;;
;; To autoload gnuplot-mode on any file with gp extension, put this in
;; your .emacs file
;;   (autoload 'gnuplot-mode \"gnuplot\" \"gnuplot major mode\" t)
;;   (autoload 'gnuplot-make-buffer \"gnuplot\" \"open a buffer in gnuplot-mode\" t)
;;
;; Something like
;;   (setq auto-mode-alist (append '((\"\\\\.gp$\" . gnuplot-mode))
;;			           auto-mode-alist))
;; is useful for having files ending in .gp start up in gnuplot-mode.
;;
;; Something like
;;   (global-set-key [(f9)] 'gnuplot-make-buffer)
;; may be useful.  This binds f9 to the function that opens a scratch
;; buffer (i.e. one that is not visiting a file) in gnuplot-mode.
;; This is handy for your quick 'n' dirty plotting chores.
;;
;; To use the `gnuplot-info-lookup-symbol' function, the file
;; gnuplot.info MUST be installed somewhere that info can find it.
;; This means you must either:
;;   1.  Copy gnuplot.info to the normal info directory or
;;   2.  Make sure info can find gnuplot.info by putting this in your
;;       .emacs file:
;;         (setenv \"INFOPATH\"
;;	      (concat (getenv \"INFOPATH\") \":\"
;;                    (expand-file-name \"/path/to/file\")))
;;       where \"/path/to/file\" is the location of gnuplot.info
;;
;; This mode has been tested extensively with GNU Emacs 23 and 24, and
;; in a limited manner with GNU Emacs 22 and XEmacs 21.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

"]) (gntp . [(20140108 133) nil "Growl Notification Protocol for Emacs" single ";;; Commentary:
;; This package implements the Growl Notification Protocol GNTP
;; described at http://www.growlforwindows.com/gfw/help/gntp.aspx
;; It is incomplete as it only lets you send but not receive
;; notifications.

"]) (gnomenm . [(20130312 416) nil "Emacs interface to Gnome nmcli command" single ";;; Commentary:

;; nmcli is a pain to use so here's a simple Emacs interface.

"]) (gnome-calendar . [(20140112 359) nil "Integration with the GNOME Shell calendar" single ";;; Commentary: 
;;; GNOME Shell calendar integration

"]) (gmail-message-mode . [(20131213 1156) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single ";;; Commentary:
;;
;; gmail-message-mode
;; ==========
;; 
;; **gmail-message-mode** is an emacs major-mode for editing gmail
;; messages using markdown syntax, it is meant for use with browser
;; plugins which allow you to edit text fields with external applications
;; (in this case, emacs). See [Plugins][] below for a list for each
;; browser.
;; 
;; **The problem:** Lately, gmail messages have been demanding html. That
;;   made it very hard to edit them outside your browser, because you had
;;   to edit html source code (for instance, linebreaks were ignored and
;;   you had to type `<br>' instead).
;;   
;; **gmail-message-mode to the rescue:** Simply activate this mode in
;;   gmail messages (See [Activation][]); the buffer is converted to
;;   markdown and you may edit at will, but the file is still saved as
;;   html behind the scenes so GMail won't know a thing! *See
;;   [ham-mode][1] to understand how this works.*
;;   
;; Activation
;; ----------
;; Make sure you install it:
;; 
;;     M-x package-install RET gmail-message-mode
;;     
;; And that's it!  
;; *(if you install manually, note that it depends on [ham-mode][1])*
;; 
;; This package will (using `auto-mode-alist') configure emacs to
;; activate `gmail-message-mode' whenever you're editing a file that
;; seems to be a gmail message. However, given the wide range of possible
;; plugins, it's hard to catch them all. You may have to add entries
;; manually to `auto-mode-alist', to make sure `gmail-message-mode' is
;; activated.
;; 
;; ## Plugins ##
;; 
;; 1. **Firefox** - [It's all text][] combined with [Old Compose][] (see [this thread][] on why you need the second).
;; 2. **Google-Chrome** - [Several][]
;; 3. **Conkeror** - [Spawn Helper (built-in)][]
;; 
;; 
;; [Activation]: #activation
;; 
;; [Plugins]: #plugins
;; 
;; [It's all text]: https://addons.mozilla.org/en-US/firefox/addon/its-all-text/
;; 
;; [Several]: http://superuser.com/questions/261689/its-all-text-for-chrome
;; 
;; [Spawn Helper (built-in)]: http://conkeror.org/ConkerorSpawnHelper
;; 
;; [this thread]: http://github.com/docwhat/itsalltext
;; 
;; [Old Compose]: http://oldcompose.com/
;; 
;; [1]: https://github.com/Bruce-Connor/ham-mode

"]) (glsl-mode . [(20130815 1435) nil "major mode for Open GLSL shader files" single ";;; Commentary:

;; Major mode for editing OpenGLSL grammar files, usually files ending with
;; `.vert', `.frag', `.glsl', `.geom'.  Is is based on c-mode plus some
;; features and pre-specified fontifications.
;;
;; Modifications from the 1.0 version of glsl-mode (jimhourihan):
;;  * Removed original optimized regexps for font-lock-keywords and
;;    replaced with keyword lists for easier maintenance
;;  * Added customization group and faces
;;  * Preprocessor faces
;;  * Updated to GLSL 4.3
;;  * Separate deprecated symbols
;;  * Made _ part of a word
;;  * man page lookup at opengl.org

;; This package provides the following features:
;;  * Syntax coloring (via font-lock) for grammar symbols and
;;    builtin functions and variables for up to GLSL version 4.3
;;  * Indentation for the current line (TAB) and selected region (C-M-\\).
;;  * Switching between file.vert and file.frag
;;    with S-lefttab (via ff-find-other-file)
;;  * interactive function glsl-find-man-page prompts for glsl built
;;    in function, formats opengl.org url and passes to w3m

;;; Installation:

;; This file requires Emacs-20.3 or higher and package cc-mode.

;; If glsl-mode is not part of your distribution, put this file into your
;; load-path and the following into your ~/.emacs:
;;   (autoload 'glsl-mode \"glsl-mode\" nil t)
;;   (add-to-list 'auto-mode-alist '(\"\\\\.glsl\\\\'\" . glsl-mode))
;;   (add-to-list 'auto-mode-alist '(\"\\\\.vert\\\\'\" . glsl-mode))
;;   (add-to-list 'auto-mode-alist '(\"\\\\.frag\\\\'\" . glsl-mode))
;;   (add-to-list 'auto-mode-alist '(\"\\\\.geom\\\\'\" . glsl-mode))

"]) (gitty . [(20121014 742) nil "vc-mode extension for fast git interaction" single ";;; Commentary:

;; gitty is a very small extension to `vc-mode' to make common git
;; commands easier to access than in the normal environment. The idea
;; is that you do most interaction with git using the command line or
;; magit, but some often-used commands are accessible easily.

;; C-x v b is the main new command. It prompts for an existing branch
;; with tab completion enabled and checks that out. If the entered
;; branch does not exist, it prompts if it should be created. This
;; makes switching between branches for quick feature branches much
;; easier than with `vc-mode'.

;; gitty also provides quick keys to stash save and stash pop in
;; the current repository, and to see the current `status'.

;; For more information, see the docstring for the command `gitty-mode`.

;; Note, though, that gitty does override some `vc-mode' keybindings
;; that are less useful for git.

"]) (gitignore-mode . [(20131222 833) nil "Major mode for editing .gitignore files" single ";;; Commentary:

;; A major mode for editing .gitignore files.

"]) (github-browse-file . [(20130515 1247) nil "View the file you're editing on GitHub" single ";;; Commentary:

;; Call `github-browse-file' (for the git blob) or `github-browse-file-blame'
;; (for the git blame) to view current file on GitHub. With a prefix argument
;; (C-u), you can force them to use the \"master\" branch.

"]) (gitconfig-mode . [(20131221 230) nil "Major mode for editing .gitconfig files" single ";;; Commentary:

;; A major mode for editing .gitconfig files.

"]) (gitconfig . [(20130718 235) nil "Emacs lisp interface to work with git-config variables" single ";;; Commentary:
;;
;;   Manual Installation:
;;
;;    (add-to-list 'load-path \"~/path/to/gitconfig.el/\")
;;    (require 'gitconfig)
;;
;;   Interesting variables are:
;;
;;       `gitconfig-git-command'
;;
;;            The shell command for <git>
;;
;;       `gitconfig-buffer-name'
;;
;;            Name of the <git> output buffer.
;;
;;   Interactive functions are:
;;
;;        M-x gitconfig-execute-command
;;
;;            Run <git config> with custom ARGUMENTS and display it in `gitconfig-buffer-name'
;;
;;   Non-Interactive functions are:
;;
;;        `gitconfig-current-inside-git-repository-p'
;;
;;            Return t if `default-directory' is a git repository
;;
;;        `gitconfig-path-to-git-repository'
;;
;;            Return the absolute path of the current git repository
;;
;;        `gitconfig-get-variables'
;;
;;            Get all variables for the given LOCATION
;;            and return it as a hash table
;;
;;        `gitconfig-set-variable'
;;
;;            Set a specific LOCATION variable with a given NAME and VALUE
;;
;;        `gitconfig-get-variable'
;;
;;            Return a specific LOCATION variable for the given NAME
;;
;;        `gitconfig-delete-variable'
;;
;;            Delete a specific LOCATION variable for the given NAME
;;
;;        `gitconfig-get-local-variables'
;;
;;            Return all <git config --local --list> variables as hash table
;;
;;        `gitconfig-get-global-variables'
;;
;;            Return all <git config --global --list> variables as hash table
;;
;;        `gitconfig-get-system-variables'
;;
;;            Return all <git config --system --list> variables as hash table
;;
;;        `gitconfig-get-local-variable'
;;
;;            Return a specific <git config --local --list> variable by the given NAME
;;
;;        `gitconfig-get-global-variable'
;;
;;            Return a specific <git config --global --list> variable by the given NAME
;;
;;        `gitconfig-get-system-variable'
;;
;;            Return a specific <git config --system --list> variable by the given NAME
;;

"]) (gitattributes-mode . [(20131221 220) nil "Major mode for editing .gitattributes files" single ";;; Commentary:

;; A major mode for editing .gitattributes files.  See
;; the gitattributes(5) manpage for more information.
;; `eldoc-mode' is supported for known attributes.

"]) (git-rebase-mode . [(20140110 833) nil "Major mode for editing git rebase files" single ";;; Commentary:

;; Allows the editing of a git rebase file (which you might get when
;; using 'git rebase -i' or hitting 'E' in Magit). Assumes editing is
;; happening in a server.

"]) (git-messenger . [(20140113 2336) ((popup (0 5 0))) "Port of gitmessenger.vim" single ";;; Commentary:

;; This package provides a function called git-messenger:popup-message
;; that when called will pop-up the last git commit message for the
;; current line. This uses the git-blame tool internally.
;;
;; Example usage:
;;   (require 'git-messenger)
;;   (global-set-key (kbd \"C-x v p\") 'git-messenger:popup-message)
;;

"]) (git-gutter-fringe . [(20131117 635) ((git-gutter (0 42)) (fringe-helper (0 1 1))) "Fringe version of git-gutter.el" single ";;; Commentary:

;; Show git diff information in fringe. You can use this package
;; only GUI Emacs, not working no window emacs.

;; To use this package, add following code to your init.el or .emacs
;;
;; (require 'git-gutter-fringe)
;; (global-git-gutter-mode t)
;;
;; ; If you want to show git diff information at right fringe
;; (setq git-gutter-fr:side 'right-fringe)
;;

"]) (git-gutter-fringe+ . [(20130902 229) ((git-gutter+ (0 1)) (fringe-helper (20130519 1641))) "Fringe version of git-gutter+.el" single ";;; Commentary:

"]) (git-gutter . [(20131002 256) nil "Port of Sublime Text plugin GitGutter" single ";;; Commentary:
;;
;; Port of GitGutter which is a plugin of Sublime Text

"]) (git-gutter+ . [(20130918 435) ((git-commit-mode (1 0))) "Manage Git hunks straight from the buffer" single ";;; Commentary:
;;
;; View, stage and revert Git changes straight from the buffer.

"]) (git-dwim . [(20130130 2150) nil "Context-aware git commands such as branch handling" single ";;; Commentary:
;;
;; This file provides context-aware git commands.
;; Currently only `git-branch-next-action'.
;; 
;; `git-branch-next-action' does typical branch handling.
;;    * If current branch is master: switch to other or new branch.
;;    * If current branch is not master: switch to other branch or merge this branch to master.
;;    * If merge is failed: continue merging (You have to resolve conflict merker)

"]) (git-commit-training-wheels-mode . [(20131121 544) ((git-commit-mode (0 14 0))) "Helps you craft well formed commit messages with git-commit-mode" single ";;; Commentary:

;; Helps you craft well formed commit messages with git-commit-mode
;; Directives for what makes a well formed commit come from
;; tpope: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

;; Based in part on https://github.com/re5et/magit-commit-training-wheels

;; Usage:
;;
;;   (require 'git-commit-training-wheels-mode) ;; Not necessary if using ELPA package
;;   (add-hook 'git-commit-mode-hook 'git-commit-training-wheels-mode)

"]) (git-commit-mode . [(20140110 833) nil "Major mode for editing git commit messages" single ";;; Commentary:

;; A major mode for editing Git commit messages.

;;;; Formatting

;; Highlight the formatting of git commit messages and indicate errors according
;; to the guidelines for commit messages (see
;; http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).
;;
;; Highlight the first line (aka \"summary\") specially if it exceeds 50
;; characters (configurable using `git-commit-summary-max-length').
;;
;; Enable `auto-fill-mode' and set the `fill-column' to 72 according to the
;; aforementioned guidelines (configurable using `git-commit-fill-column').

;;;; Headers

;; Provide commands to insert standard headers into commit messages.
;;
;; - C-c C-s inserts Signed-off-by (`git-commit-signoff').
;; - C-C C-a inserts Acked-by (`git-commit-ack').
;; - C-c C-t inserts Tested-by (`git-commit-test').
;; - C-c C-r inserts Reviewed-by (`git-commit-review').
;; - C-c C-o inserts Cc (`git-commit-cc').
;; - C-c C-p inserts Reported-by (`git-commit-reported').

;;;; Committing

;; C-c C-c finishes a commit.
;;
;; Check a buffer for stylistic errors before committing, and ask for
;; confirmation before committing with style errors.

"]) (git-blame . [(20110509 926) nil "Minor mode for incremental blame for Git" single ";;; Commentary:
;;
;; Here is an Emacs implementation of incremental git-blame.  When you
;; turn it on while viewing a file, the editor buffer will be updated by
;; setting the background of individual lines to a color that reflects
;; which commit it comes from.  And when you move around the buffer, a
;; one-line summary will be shown in the echo area.

;;; Installation:
;;
;; To use this package, put it somewhere in `load-path' (or add
;; directory with git-blame.el to `load-path'), and add the following
;; line to your .emacs:
;;
;;    (require 'git-blame)
;;
;; If you do not want to load this package before it is necessary, you
;; can make use of the `autoload' feature, e.g. by adding to your .emacs
;; the following lines
;;
;;    (autoload 'git-blame-mode \"git-blame\"
;;              \"Minor mode for incremental blame for Git.\" t)
;;
;; Then first use of `M-x git-blame-mode' would load the package.

;;; Compatibility:
;;
;; It requires GNU Emacs 21 or later and Git 1.5.0 and up
;;
;; If you'are using Emacs 20, try changing this:
;;
;;            (overlay-put ovl 'face (list :background
;;                                         (cdr (assq 'color (cddddr info)))))
;;
;; to
;;
;;            (overlay-put ovl 'face (cons 'background-color
;;                                         (cdr (assq 'color (cddddr info)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (git-auto-commit-mode . [(20131007 1423) nil "Emacs Minor mode to automatically commit and push" single ";;; Commentary:

;; git-auto-commit-mode is an Emacs minor mode that tries to commit
;; changes to a file after every save.

;; When `gac-automatically-push-p' is non-nil, it also tries to push
;; to the current upstream.

"]) (git-annex . [(20131119 1445) nil "Mode for easy editing of git-annex'd files" single ";;; Commentary:

;; Typing C-x C-q in an annexed file buffer causes Emacs to run \"git annex
;; edit\".  When the buffer is killed Emacs will run \"git annex add && git
;; commit -m Updated\".
;;
;; Dired has been extended to not show Annex symlinks, but instead to color
;; annexed files green (and preserve the \"l\" in the file modes).  You have the
;; following commands available in dired-mode on all marked files (or the
;; current file):
;;
;;     @ a    Add file to Git annex
;;     @ e    Edit an annexed file

(eval-when-compile
  (require 'dired nil t)	      ; for variable dired-mode-map
  (require 'dired-aux nil t)	      ; for function dired-relist-file
  (require 'cl))

(defgroup git-annex nil
  \"Mode for easy editing of git-annex'd files\"
  :group 'files)

(defcustom git-annex-commit t
  \"If not nil, git-annex command will commit by default.

otherwise you will have to commit by hand.\")

(defsubst git-annex (&rest args)
  (apply #'call-process \"git\" nil nil nil \"annex\" args))

(defun git-annex-add-file ()
  (git-annex \"add\" (file-relative-name buffer-file-name default-directory))
  (when git-annex-commit
    (call-process \"git\" nil nil nil \"commit\" \"-m\" \"Updated\")))

(defadvice toggle-read-only (before git-annex-edit-file activate)
  (when (string=
		 (vc-backend buffer-file-name)
		 \"Git\"
		 )
	  (when (and buffer-file-name buffer-read-only
				 (file-symlink-p buffer-file-name))
		(let ((target (nth 0 (file-attributes buffer-file-name))))
		  (assert (stringp target))
		  (when (string-match \"\\\\.git/annex/\" target)
			(call-process \"git\" nil nil nil \"annex\" \"edit\"
						  (file-relative-name buffer-file-name default-directory))
			(let ((here (point-marker)))
			  (unwind-protect
				  (revert-buffer nil t t)
				(goto-char here)))
			(add-hook 'kill-buffer-hook 'git-annex-add-file nil t)
			(setq buffer-read-only t))))
	(when (and buffer-file-name (not buffer-read-only)
			   (not (file-symlink-p buffer-file-name)))
	  (let ((cur (current-buffer))
			(name buffer-file-name)
			(result))
		(with-temp-buffer
		  (call-process \"git\" nil t nil \"diff-files\" \"--diff-filter=T\" \"-G^[./]*\\\\.git/annex/objects/\" \"--name-only\" \"--\" (file-relative-name name default-directory))
		  (setq result (buffer-string)))
		(unless (string= result \"\")
		  (git-annex-add-file)
		  (let ((here (point-marker)))
			(unwind-protect
				(revert-buffer nil t t)
			  (goto-char here)))
		(setq buffer-read-only nil)))))
  )

(defface git-annex-dired-annexed-available
  '((((class color) (background dark))
     (:foreground \"dark green\"))
    (((class color) (background light))
     (:foreground \"dark green\")))
  \"Face used to highlight git-annex'd files.\"
  :group 'git-annex)

(defface git-annex-dired-annexed-unavailable
  '((((class color) (background dark))
     (:foreground \"firebrick\"))
    (((class color) (background light))
     (:foreground \"firebrick\")))
  \"Face used to highlight git-annex'd files.\"
  :group 'git-annex)

(defvar git-annex-dired-annexed-available 'git-annex-dired-annexed-available
  \"Face name used to highlight available git-annex'd files.\")
(defvar git-annex-dired-annexed-unavailable 'git-annex-dired-annexed-unavailable
  \"Face name used to highlight unavailable git-annex'd files.\")
(defvar git-annex-dired-annexed-invisible
  '(face git-annex-dired-annexed-available invisible t)
  \"Face name used to hide a git-annex'd file's annex path.\")

(defun git-annex-lookup-file (limit)
  (and (re-search-forward \" -> \\\\(.*\\\\.git/annex/.+\\\\)\" limit t)
       (file-exists-p
        (expand-file-name (match-string 1) (dired-current-directory)))))

(eval-after-load \"dired\"
  '(progn
     (add-to-list 'dired-font-lock-keywords
                  (list \" -> .*\\\\.git/annex/\"
                        '(\"\\\\(.+\\\\)\\\\( -> .+\\\\)\" (dired-move-to-filename) nil
                          (1 git-annex-dired-annexed-unavailable)
                          (2 git-annex-dired-annexed-invisible))))
     (add-to-list 'dired-font-lock-keywords
                  (list 'git-annex-lookup-file
                        '(\"\\\\(.+\\\\)\\\\( -> .+\\\\)\" (dired-move-to-filename) nil
                          (1 git-annex-dired-annexed-available)
                          (2 git-annex-dired-annexed-invisible))))))

(defvar git-annex-dired-map
  (let ((map (make-keymap)))
    (define-key map \"a\" 'git-annex-dired-add-files)
    (define-key map \"d\" 'git-annex-dired-drop-files)
    (define-key map \"e\" 'git-annex-dired-edit-files)
    (define-key map \"g\" 'git-annex-dired-get-files)
    map)
  \"Git-annex keymap for `dired-mode' buffers.\")

(add-hook 'dired-mode-hook
          (lambda () (define-key dired-mode-map \"@\" git-annex-dired-map)))

(defun git-annex-dired--apply (command file-list)
  (let ((here (point)))
    (unwind-protect
        (mapc #'(lambda (file)
                  (git-annex command file)
                  (dired-relist-file (expand-file-name file)))
              file-list)
      (goto-char here))))

(defmacro git-annex-dired-do-to-files (cmd msg &optional commit-after)
  `(defun ,(intern (concat \"git-annex-dired-\" cmd \"-files\"))
     (file-list &optional arg)
     (interactive
      (let ((files (dired-get-marked-files t current-prefix-arg)))
        (list files current-prefix-arg)))
     (git-annex-dired--apply ,cmd file-list)
     (let ((msg (format ,msg (length file-list))))
       ,(if commit-after
            `(when git-annex-commit (call-process \"git\" nil nil nil \"commit\" \"-m\" msg)))
       (message msg))))

(git-annex-dired-do-to-files \"add\" \"Annex: updated %d file(s)\" t)
(git-annex-dired-do-to-files \"drop\" \"Annex: dropped %d file(s)\")
(git-annex-dired-do-to-files \"edit\" \"Annex: unlocked %d file(s) for editing\")
(git-annex-dired-do-to-files \"get\" \"Annex: got %d file(s)\")

(provide 'git-annex)

;;; git-annex.el ends here
"]) (git . [(20130915 32) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single nil]) (gist . [(20131109 2155) ((eieio (1 3)) (gh (0 7 2)) (tabulated-list (0))) "Emacs integration for gist.github.com" single ";;; Commentary:

;; An Emacs interface for managing gists (http://gist.github.com).

"]) (gherkin-mode . [(20140107 804) nil "An emacs major mode for editing gherkin files." single ";;; Commentary:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; A mode for editing gherkin files.
;;
;; For more about gherkin, see https://github.com/alandipert/gherkin
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

"]) (ghci-completion . [(20130310 836) ((emacs (24 1))) "Completion for GHCi commands in inferior-haskell buffers" single ";;; Commentary:

;; Purpose:
;;
;; To support completion for GHCi commands (like :load, :module, :set
;; etc.) in inferior-haskell buffers.
;;
;; Installation:
;;
;; To turn on GHCi commands completion in inferior-haskell buffers,
;; add this to .emacs:
;;
;;     (add-hook 'inferior-haskell-mode-hook 'turn-on-ghci-completion)
;;
;; Otherwise, call `turn-on-ghci-completion'.
;;
;; You may also want to set `ghci-completion-ghc-pkg-additional-args'
;; to the list of additional argument to supply to `ghc-pkg'.  For
;; example, this variable can be used to specify which database (user
;; or global) or which package config file to use.
;;
;; Limitations:
;;
;; * This package is developed for Emacs 24 and it probably only works
;;   with Emacs 24.  In particular, we rely on lexical bindings, which
;;   have been introduced in Emacs 24, and on `pcomplete', which is
;;   effectively broken in 23.2.
;;
;; * Only the following commands are supported: :add, :browse[!], :cd,
;;   :edit, :load, :module, :set, :unset, :show.  It would be nice to
;;   have shell completion for :!, for example.
;;
;; * The starred versions of the commands :add, :browse[!], :load, and
;;   :module are not supported, partly because I don't use them, and
;;   partly because, for example, :module offers completion only on
;;   the exposed modules in registered packages in both the global and
;;   user databases, and for these :module *<mod> is meaningless.
;;
;; * :set and :unset support only a subset of all GHC flags: language
;;   extensions, warnings, and debugging options.  Adding completion
;;   for other flags is trivial.  It would be nice, however, to be
;;   able to generate the list of all GHC flags programmatically.

"]) (ghc . [(20140112 2021) nil "Sub mode for Haskell mode" tar nil]) (gh . [(20131223 2140) ((eieio (1 3)) (pcache (0 2 4)) (logito (0 1))) "A GitHub library for Emacs" tar nil]) (ggtags . [(20131221 36) ((emacs (24))) "emacs frontend to GNU Global source code tagging system" single ";;; Commentary:

;; A package to integrate GNU Global source code tagging system
;; (http://www.gnu.org/software/global) with Emacs.
;;
;; Usage:
;;
;; Type `M-x ggtags-mode' to enable the minor mode, or as usual enable
;; it in your desired major mode hooks. When the mode is on the symbol
;; at point is underlined if it is a valid (definition) tag.
;;
;; `M-.' finds definition or references according to the context at
;; point, i.e. if point is at a definition tag find references and
;; vice versa. `M-]' finds references.
;;
;; If multiple matches are found, navigation mode is entered, the
;; mode-line lighter changed, and a navigation menu-bar entry
;; presented. In this mode, `M-n' and `M-p' moves to next and previous
;; match, `M-}' and `M-{' to next and previous file respectively.
;; `M-o' toggles between full and abbreviated displays of file names
;; in the auxiliary popup window. When you locate the right match,
;; press RET to finish which hides the auxiliary window and exits
;; navigation mode. You can continue the search using `M-,'. To abort
;; the search press `M-*'.
;;
;; Normally after a few searches a dozen buffers are created visiting
;; files tracked by GNU Global. `C-c M-k' helps clean them up.
;;
;; Check the menu-bar entry `Ggtags' for other useful commands.

"]) (ggo-mode . [(20130524 443) nil "Gengetopt major mode" single ";;; Commentary:
;;
;; A major mode for editing gengetopt files.
;;
;; Modify `ggo-skeleton' to suit your format.
;;
;; Should work with Emacs version 21 and later.  Works with
;; gengetopt 2.22.4.  May or may not work with previous versions.


"]) (genrnc . [(20130711 2251) ((deferred (0 3 1)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar ";;; Commentary:
;; 
;; This extension generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD.

"]) (geiser . [(20140109 2120) nil "GNU Emacs and Scheme talk to each other" tar nil]) (gedit-mode . [(20140109 928) ((tabbar (0)) (shell-pop (0)) (move-text (0)) (whole-line-or-region (0))) "Emulate the look & feel of GEdit in Emacs" single ";;; Commentary:

;;; INTRODUCTION
;;

;; What's this?
;;
;; It is a minor mode for Emacs. It aims to tame Emacs' archaic
;; default keybindings and make them more accessible to novice users.
;; Although titled \"GEdit\" mode, users of every graphical application
;; ever written should find most of these keybindings familiar. GEdit
;; was simply chosen as the namesake since that is what I was
;; primarily using before I discovered Emacs.

;; Why don't you just use GEdit if you like it so much?
;;
;; Listen buddy, I don't like your attitude!
;;
;; Seriously though, once I had a taste of Elisp, I was totally hooked
;; on Emacs. I actually tried to reimplement some basic Emacs features
;; as Python plugins inside GEdit, but gave up when I discovered that
;; a 10-line whitespace-stripping elisp snippet required 100 lines of
;; Python code to implement in GEdit.
;;
;; So, if you are a vetern Emacs ninja, this mode may be of little
;; interest to you. But if you are just starting out and you find the
;; default keybindings intimidating, then I encourage you to give this
;; a try.

;;; USAGE
;;
;; gedit-mode is now hosted on MELPA! Type `M-x package-install
;; gedit-mode`, then add the following code to your init file:
;;
;;     (require 'gedit-mode)
;;     (global-gedit-mode)
;;
;; For the complete experience, you'll want sr-speedbar, shell-pop,
;; and tabbar packages. I've listed those as requirements above,
;; although the code I've written here is smart enough not to explode
;; if they're missing. I also personally recommend visual-regexp and
;; ace-jump-mode, although those have nothing to do with GEdit ;-)

;;; TODO
;;
;; At this point, I believe that I have defined a highly accurate
;; reproduction of all of GEdit's default keybindings, at least
;; according to GEdit's official documentation. If there is anything
;; missing here, it is likely undocumented, but please do let me know
;; about it.
;;
;; I still need:
;;
;; * to think up some sensible new bindings for all the stuff that
;;   I've clobbered here.
;;
;; * to clean up some of the sr-speedbar and shell-pop config code,
;;   particularly allowing those settings to be reverted when
;;   gedit-mode is disabled.

;;; For more information
;;
;; https://help.gnome.org/users/gedit/stable/gedit-shortcut-keys.html.en

(require 'whole-line-or-region)

(defconst gedit-untitled-prefix \"Untitled Document \"
  \"Name new buffers by appending an integer to this value.\")

(defvar gedit-untitled-count 1
  \"This value is used to count how many untitled buffers you have open.\")

(defvar gedit-orig-input-decode-map (copy-keymap input-decode-map)
  \"This holds a backup copy of the input-decode-map, which we twiddle with.\")

(defvar gedit-input-decode-map
  (let ((map (copy-keymap input-decode-map)))
    ;; De-prefix-ize C-x and C-c. This doesn't unbind the prefix maps
    ;; from those keys at all; it just tricks emacs into preventing
    ;; the user from being able to type C-x and C-c, replacing those
    ;; keystrokes with an entirely different keycode, which we then
    ;; bind new functionality to. For example, when you physically
    ;; type ctrl + x, emacs gets a different keycode than what was
    ;; really produced). It works for our purposes, but the
    ;; disadvantage is that <F1>b will display the C-x and C-c prefix
    ;; maps as though they are still active and reachable, which they
    ;; aren't. I would love to be shown a better way to do this, but I
    ;; haven't found it thus far.
    (define-key map [?\\C-x] [C-x])
    (define-key map [?\\C-c] [C-c])
    ;; So I can force these to do whatever I want, even inside isearch.
    (define-key map [?\\C-g] [C-g])
    (define-key map [?\\C-\\S-g] [C-S-g])
    ;; Decouple ASCII codes from real keys. This lets us rebind C-i
    ;; and C-m without interfering with the bindings for TAB and RET
    ;; keys. This breaks horribly in a terminal (which can't tell the
    ;; difference between C-i vs TAB), so you only get GEdit-style C-i
    ;; and C-m keys while using graphical systems.
    (when (display-graphic-p)
      (define-key map [?\\C-i] [C-i])
      (define-key map [?\\C-m] [C-m])
      (define-key map [?\\C-\\S-m] [C-S-m]))
    map)
  \"Custom input-decode-map to mimick GEdit more closely.\")

(defvar gedit-mode-map
  (let ((map (make-sparse-keymap)))
    ;; This section is the faithful recreation of GEdit keybindings.
    (define-key map [remap newline] 'newline-and-indent)
    (define-key map (kbd \"C-+\") 'text-scale-increase)
    (define-key map (kbd \"C--\") 'text-scale-decrease)
    (define-key map (kbd \"C-=\") 'text-scale-increase)
    (define-key map (kbd \"C-S-k\") 'isearch-exit)
    (define-key map (kbd \"C-S-l\") 'gedit-save-all-buffers)
    (define-key map (kbd \"C-S-s\") 'write-file)
    (define-key map (kbd \"C-S-w\") 'gedit-kill-all-buffers)
    (define-key map (kbd \"C-a\") 'mark-whole-buffer)
    (define-key map (kbd \"C-d\") 'kill-whole-line)
    (define-key map (kbd \"C-f\") 'isearch-forward)
    (define-key map (kbd \"C-h\") 'query-replace)
    (define-key map (kbd \"C-n\") 'gedit-new-file)
    (define-key map (kbd \"C-o\") 'gedit-find-file)
    (define-key map (kbd \"C-p\") 'print-buffer)
    (define-key map (kbd \"C-q\") 'save-buffers-kill-emacs)
    (define-key map (kbd \"C-s\") 'save-buffer)
    (define-key map (kbd \"C-v\") 'cua-paste)
    (define-key map (kbd \"C-w\") 'gedit-kill-this-buffer-dwim)
    (define-key map (kbd \"C-z\") 'undo)
    (define-key map [C-M-kp-next] 'next-buffer)
    (define-key map [C-M-kp-prior] 'previous-buffer)
    (define-key map [C-M-next] 'next-buffer)
    (define-key map [C-M-prior] 'previous-buffer)
    (define-key map [C-S-g] 'isearch-repeat-backward)
    (define-key map [C-S-m] 'whole-line-or-region-comment-dwim-2)
    (define-key map [C-c] 'gedit-copy-dwim)
    (define-key map [C-f9] 'shell-pop)
    (define-key map [C-g] 'isearch-repeat-forward)
    (define-key map [C-i] 'goto-line)
    (define-key map [C-m] 'whole-line-or-region-comment-dwim-2)
    (define-key map [C-x] 'gedit-cut-dwim)
    (define-key map [M-f12] 'delete-trailing-whitespace)
    (define-key map [S-f7] 'ispell)
    (define-key map [f8] 'compile)
    (define-key map [f9] 'sr-speedbar-toggle)
    (define-key map [home] 'gedit-back-to-indentation-or-home)
    (define-key map [kp-home] 'gedit-back-to-indentation-or-home)

    ;; These keybindings aren't actually present in GEdit, but in my
    ;; opinion complement GEdit's defaults nicely.
    (define-key map (kbd \"C-<tab>\") 'next-buffer)
    (define-key map (kbd \"C-S-<iso-lefttab>\") 'previous-buffer)
    (define-key map (kbd \"C-S-<tab>\") 'previous-buffer)
    (define-key map (kbd \"C-S-n\") 'make-frame-command)
    (define-key map (kbd \"C-b\") 'buffer-menu)
    (define-key map (kbd \"C-t\") 'shell-pop)
    (define-key map (kbd \"M-d\") 'just-one-space)
    (define-key map (kbd \"M-f\") 'rgrep)
    (define-key map (kbd \"M-i\") 'imenu)
    (define-key map (kbd \"M-o\") 'occur)
    (define-key map (kbd \"M-s\") 'gedit-save-all-buffers)
    (define-key map (kbd \"M-w\") 'gedit-kill-all-buffers)
    map)
  \"Keymap for GEdit minor mode.\")

(when (require 'visual-regexp nil :noerror)
  (substitute-key-definition 'query-replace 'vr/query-replace gedit-mode-map))

(when (require 'move-text nil :noerror)
  (define-key gedit-mode-map [M-down] 'move-text-down)
  (define-key gedit-mode-map [M-up] 'move-text-up))

(when (require 'tabbar nil :noerror)
  (substitute-key-definition 'next-buffer 'tabbar-forward-tab gedit-mode-map)
  (substitute-key-definition 'previous-buffer 'tabbar-backward-tab gedit-mode-map)
  (setq tabbar-buffer-groups-function 'gedit-tabbar-buffer-groups
        tabbar-buffer-list-function 'gedit-tabbar-buffer-list)
  (defadvice tabbar-buffer-tab-label (after fixup_tab_label_space activate)
    \"Add spaces around tab names for better readability.\"
    (setq ad-return-value (concat \" \" ad-return-value \" \")))
  (set-face-attribute 'tabbar-separator nil
                      :height 1
                      :inherit 'mode-line
                      :box nil)
  (set-face-attribute 'tabbar-default nil
                      :inherit 'mode-line
                      :box nil)
  (set-face-attribute 'tabbar-button nil
                      :inherit 'mode-line
                      :box nil)
  (set-face-attribute 'tabbar-selected nil
                      :inherit 'mode-line-buffer-id
                      :box nil)
  (set-face-attribute 'tabbar-unselected nil
                      :inherit 'mode-line-inactive
                      :box nil)
  (add-hook 'global-gedit-mode-hook
            (lambda () (tabbar-mode (if global-gedit-mode 1 -1)))))

(when (require 'sr-speedbar nil :noerror)
  (setq speedbar-show-unknown-files t
        speedbar-use-images nil
        sr-speedbar-auto-refresh nil
        sr-speedbar-right-side nil))

(when (require 'shell-pop nil :noerror)
  (shell-pop-set-internal-mode \"term\")
  (shell-pop-set-internal-mode-shell \"/bin/bash\")
  (shell-pop-set-window-height 20) ;; in percent
  (shell-pop-set-window-position \"top\")
  (ansi-color-for-comint-mode-on)

  (setq comint-scroll-to-bottom-on-input t
        explicit-shell-file-name \"/bin/bash\"
        term-input-ignoredups t
        term-scroll-show-maximum-output t))

(when (require 'ace-jump-mode nil :noerror)
  (define-key gedit-mode-map (kbd \"C-j\") 'ace-jump-mode))

;; The cl.el controversy is older than I am. I tried to avoid using
;; it, however I was disgusted to learn how many modules reimplement
;; its functions. I've decided that code reuse is a worthier goal than
;; some kind of misguided vision of technical \"purity\".
(require 'cl)

(defun gedit-tabbar-buffer-list ()
  \"Hide the speedbar, because it's not helpful to tab to.\"
  (remove-if
   (lambda (buffer) (string= \"*SPEEDBAR*\" (buffer-name buffer)))
   (tabbar-buffer-list)))

(defun gedit-tabbar-buffer-groups ()
  \"Group Emacs special buffers separately than file-related buffers.\"
  (list (cond ((buffer-file-name (current-buffer)) \"files\")
              ((gedit-buffer-untitled-p (current-buffer)) \"files\")
              (t \"emacs\"))))

(defun gedit-back-to-indentation-or-home ()
  \"Toggle point between beginning of line, or first non-whitespace character.\"
  (interactive \"^\")    ;; Set mark if shift key used.
  (if (looking-at \"^\") ;; Regex
      (back-to-indentation)
    (move-beginning-of-line nil)))

(defun gedit-cut-dwim (prefix)
  \"Cut rectangle, line, or region as appropriate.\"
  (interactive \"*p\")
  (if cua--rectangle
      (cua-cut-rectangle -1)
    (whole-line-or-region-kill-region prefix)))

(defun gedit-copy-dwim (prefix)
  \"Copy rectangle, line, or region as appropriate.\"
  (interactive \"*p\")
  (if cua--rectangle
      (cua-copy-rectangle -1)
    (whole-line-or-region-copy-region-as-kill prefix)))

(defun gedit-save-that-buffer (buffer)
  \"Save the specified buffer.\"
  (with-current-buffer buffer (save-buffer)))

(defun gedit-save-all-buffers ()
  \"Cycle through all buffers and save them.\"
  (interactive)
  (let ((to-save (remove-if-not 'buffer-file-name
                                (remove-if-not 'buffer-modified-p
                                               (buffer-list)))))
    (mapc 'gedit-save-that-buffer to-save)
    (message (concat \"Wrote \" (mapconcat 'buffer-name to-save \", \")))))

(defun gedit-new-file ()
  \"Create a new empty buffer, untitled but numbered for uniqueness.\"
  (interactive)
  (incf gedit-untitled-count)
  (switch-to-buffer
   (get-buffer-create
    (concat gedit-untitled-prefix
            (number-to-string gedit-untitled-count))))
  (text-mode))

(defun gedit-find-file ()
  \"Prompt for root if opening a file for which I lack write permissions.\"
  (interactive)
  (let ((file (read-file-name \"Find file: \")))
    (find-file (concat (if (file-writable-p file) \"\"
                         \"/sudo:root@localhost:\") file))))

(defun gedit-kill-this-buffer-dwim ()
  \"Close this file and end any emacsclient sessions associated with it.\"
  (interactive)
  (if server-buffer-clients
      (server-edit)
    (kill-this-buffer)))

(defun gedit-buffer-untitled-p (buffer)
  \"Is this buffer untitled?\"
  (or (string-prefix-p gedit-untitled-prefix (buffer-name buffer))
      (string= \"*scratch*\" (buffer-name buffer))))

(defun gedit-kill-certain-buffers (predicate)
  \"Kill all buffers matching predicate, except ones with unsaved changes.\"
  (mapc 'kill-buffer
        (remove-if 'buffer-modified-p
                   (remove-if-not predicate (buffer-list)))))

(defun gedit-kill-untitled-buffers ()
  \"Close untitled (but unmodified) buffers.\"
  (gedit-kill-certain-buffers 'gedit-buffer-untitled-p)
  (setq gedit-untitled-count 0))

(defun gedit-kill-all-buffers ()
  \"Close all the files.\"
  (interactive)
  (gedit-kill-certain-buffers 'buffer-file-name)
  (gedit-kill-untitled-buffers)
  (gedit-new-file))

(defun gedit-speedbar-refresh ()
  \"Show new files in the speedbar.\"
  (when (display-graphic-p)
    (with-current-buffer (get-buffer-create \"*SPEEDBAR*\")
      (speedbar-refresh))))

(defgroup gedit nil
  \"Minor mode for using GEdit-alike keybindings in Emacs.\"
  :prefix \"gedit-\"
  :group 'convenience
  :link '(url-link \"http://github.com/robru/gedit-mode\"))

;;;###autoload
(define-minor-mode gedit-mode
  \"Bring GEdit-like keybindings to Emacs.\"
  :lighter \" GEdit\"
  :version \"0.1\"
  :global t
  :keymap gedit-mode-map

  (setq input-decode-map
        (if gedit-mode
            gedit-input-decode-map
          gedit-orig-input-decode-map))
  (cua-mode gedit-mode))

;;;###autoload
(define-globalized-minor-mode global-gedit-mode gedit-mode gedit-mode)

(require 'server)
(unless (server-running-p)
  (server-start))

(add-hook 'global-gedit-mode-hook
          (lambda ()
            \"Set mode state only when enabling or disabling globally.\"

            (gedit-kill-untitled-buffers)

            (when global-gedit-mode
              (add-hook 'find-file-hook 'gedit-kill-untitled-buffers))

            (unless global-gedit-mode
              (remove-hook 'find-file-hook 'gedit-kill-untitled-buffers))

            (switch-to-buffer
             (get-buffer-create
              (if global-gedit-mode
                  (concat gedit-untitled-prefix \"1\")
                \"*scratch*\")))))

(provide 'gedit-mode)

;;; gedit-mode.el ends here
"]) (geben . [(20100330 343) nil "DBGp protocol frontend, a script debugger" tar ";;; Commentary:
;;
;; GEBEN is a software package that interfaces Emacs to DBGp protocol
;; with which you can debug running scripts interactive. At this present
;; DBGp protocol are supported in several script languages with help of
;; custom extensions.
;;
;;; Usage
;;
;; 1. Insert autoload hooks into your .Emacs file.
;;    -> (autoload 'geben \"geben\" \"DBGp protocol frontend, a script debugger\" t)
;; 2. Start GEBEN. By default, M-x geben will start it.
;;    GEBEN starts to listening to DBGp protocol session connection.
;; 3. Run debuggee script.
;;    When the connection is established, GEBEN loads the entry script
;;    file in geben-mode.
;; 4. Start debugging. To see geben-mode key bindings, type ?.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
;;; Requirements:
;;
;; [Server side]
;; - PHP with Xdebug 2.0.3
;;    http://xdebug.org/
;; - Perl, Python, Ruby, Tcl with Komodo Debugger Extension
;;    http://aspn.activestate.com/ASPN/Downloads/Komodo/RemoteDebugging
;;
;; [Client side]
;; - Emacs 22.1 and later
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
"]) (gather . [(20130422 1550) nil "Gather string in buffer." single ";;; Commentary:

;; gather.el provides search regexp and kill text.  This is not replacing
;; nor modifying Emacs `kill-ring' mechanism.  You MUST know about elisp
;; regular-expression.
;; Have similar concept of `occur'.  If I think `occur' have line oriented
;; feature, gather.el have list oriented feature.  You can handle the list,
;; as long as you can handle Emacs-Lisp list object.

"]) (gap-mode . [(20131212 2130) nil "Major mode for editing files in the GAP programing language." tar ";;; Commentary:

;; Provides fontification, indentation, and local variable
;; functionality, for GAP code.  It also provides help and completion
;; by asking an inferior GAP process.
;;
;; Evaluating (customize-group 'gap) is an easy way to see what
;; options are available.

"]) (gandalf-theme . [(20130809 247) nil "Gandalf color theme" single ";;; Commentary:

;; This theme is a port of the overtone/emacs-live theme of the same
;; name (https://github.com/overtone/emacs-live) by Sam Aaron. The
;; original theme was designed for use with the color-theme package.
;; This theme adopts the new built-in theme support deftheme.

"]) (fyure . [(20130216 514) nil "An interface to fix Japanese hyoki-yure" tar ";;; Commentary:

;; Place `fyure.el' and `fyure.py' into a directory in `load-path',
;; and add the following code into your .emacs file.
;;
;; (autoload 'fyure:start-fixing \"fyure\" \"An interface to fix Japanese hyoki-yure.\" t)
;;
;; Then, type \"M-x fyure:start-fixing\" in a document you want to fix.

"]) (fwb-cmds . [(20131209 1600) nil "misc frame, window and buffer commands" single ";;; Commentary:

;; Commands defined here operate on frames, windows and buffers and
;; make it easier and faster to access certain functionality that
;; is already available using the builtin commands.

;;  ***** NOTE: The following EMACS PRIMITIVES have been REDEFINED HERE:
;;  `delete-window' If there is only one window in frame, then
;;                  delete whole frame using `delete-frame'.
;;
;;  ***** NOTE: The symbols defined here do not have a proper package
;;              prefix.

;; Inspired by Drew Adams' `frame-cmds.el', `misc-cmds.el' and
;; `find-func+.el'.

"]) (fuzzy-match . [(20131226 1850) nil "fuzzy matching" single ";;; Commentary:
;;
;; Purpose:
;;
;; Fuzzy-match is a package of functions to provide non-exact comparison
;; between strings.  Since I am no expert on such things, and certain criteria
;; for non-exact comparison had to be dropped for reasons of efficiency (e.g.,
;; transposition), and the non-exact nature of non-exact comparison, this
;; package may or may not provide what you want.
;;
;; Caveat:
;;
;; This is fuzzy software.  Use it at your own risk.
;;
;; The fuzzy-matcher deals with comparing strings.  For a programmer wishing to
;; use the fuzzy-match library, the front-end functions are likely to be
;; `FM-matchiness' (and corresponding `FM-closeness'), `FM-all-fuzzy-matches'
;; (and corresponding `FM-all-close-matches'), and `FM-fuzzy-sort'.  These can
;; be thought to mirror `string-match', `all-completions' and `sort'.
;;
;; The function `FM-matchiness' returns an integer which is the number of
;; matching characters from STRING1 in STRING2.  What denotes \"the number of
;; matching characters\" is arbitrary.
;;
;; The fuzziness between two strings, STRING1 and STRING2, is calculated by
;; finding the position in STRING2 of a prefix of STRING1.  The first character
;; of STRING1 is found in STRING2.  If we find it, we continue matching
;; successive characters from STRING1 at successive STRING2 positions.  When we
;; have found the longest prefix of STRING1 in STRING2, we decide whether it is
;; a match.  It is considered a match if the length of the prefix is greater or
;; equal to the offset of the beginning of the prefix of STRING1 in STRING2.
;; This means that \"food\" will match \"barfoo\" because \"foo\" (the prefix)
;; matches \"foo\" in \"barfoo\" with an offset and length of 3.  However, \"food\"
;; will not be considered to match \"barfu\", since the length is 1 while the
;; offset is 3.  The fuzz value of the match is the length of the prefix.  If
;; we find a match, we take the prefix off STRING1 and the string upto the end
;; of the match in STRING2.  If we do not find a match, we take off the first
;; character in STRING1.  Then we try and find the next prefix.
;;
;; So, to walk through an example:
;;
;; (FM-matchiness \"pigface\" \"pigsfly\"):
;;
;; STRING1              STRING2         MATCH LENGTH    OFFSET          FUZZ
;; pigface              pigsfly         3               0               3
;; face                 sfly            1               1               1
;; ace                  ly              0               0               0
;; ce                   ly              0               0               0
;; c                    ly              0               0               0
;;
;;      => 4
;;
;; (FM-matchiness \"begining-of-l\" \"beginning-of-l\"):
;;
;; STRING1              STRING2         MATCH LENGTH    OFFSET          FUZZ
;; begining-of-l        beginning-of-l  5               0               5
;; ing-of-l             ning-of-l       8               1               8
;;
;;      => 13
;;
;; Another function of interest is `FM-all-fuzzy-matches'.  This returns a list
;; of those strings that have the highest fuzzy match with a given string.
;; Those strings are sorted so that there is a preference for strings with the
;; same number of characters, and sharing the longest prefix with the given
;; string:
;;
;; (FM-all-fuzzy-matches \"abc\" '(\"xxabcxx\" \"xabcxxx\" \"xabx\"))
;;      => (\"xabcxxx\" \"xxabcxx\")
;;
;; (FM-all-fuzzy-matches \"point-mx\" (all-completions \"point\" obarray))
;;      => (\"point-max\" \"point-max-marker\")
;;
;; (FM-all-fuzzy-matches \"begining-of-l\" (all-completions \"begin\" obarray))
;;      => (\"beginning-of-line\")
;;
;; Corresponding to `FM-matchiness' and `FM-all-fuzzy-matches' are
;; `FM-closeness' and `FM-all-close-matches'.  They differ from the former
;; functions in that they take into account the difference in length between
;; the target string and candidate string:
;;
;; (FM-closeness \"begining-of-l\" \"beginning-of-l\")
;;      => 12
;;
;; Note from above that the matchiness is 13 and the difference in length of
;; the two strings is 1.
;;
;; (FM-all-close-matches \"point-mx\" (all-completions \"point\" obarray))
;;      => (\"point-max\")
;;
;; Note from above that although the matchiness is equal between the target
;; \"point-mx\" and the candidates \"point-max\" and \"point-max-marker\", the former
;; candidate has less of a difference in length from the target.
;;
;; Other functions that may be of use to package writers using this package are
;; `FM-map-fuzzy-matches' (and corresponding `FM-map-close-matches') and
;; `FM-max-matchiness' (and corresponding `FM-max-closeness').  The mapping
;; functions map matchiness or closeness to a list, while the max functions
;; return the maximum matchiness or closeness from a list.
;;
;; Also provided are some interface functions for user packages.  These
;; functions are `FM-offer-corrections' and `FM-list-candidates'.  To
;; demonstrate the usefulness of this package, `lisp-spell-symbol' (analogous
;; to `lisp-complete-symbol') is provided.  Without an arg, the command uses
;; `FM-all-close-matches' to find spelling corrections:
;;
;; (goto-char (point-mx M-x lisp-spell-symbol RET
;;      -| Replaced point-mx with point-max
;; (goto-char (point-max
;;
;; With a double prefix arg, the command uses `FM-all-fuzzy-matches' to find
;; spelling corrections:
;;
;; (goto-char (point-mx C-u C-u M-x lisp-spell-symbol RET
;;      -| Possible candidates are:
;;      -| point-max                       point-max-marker
;;
;; Any number of prefix args means that the user is prompted when replacing
;; with the single correction candidate.
;;
;; Installation:
;;
;; Put this file where your Emacs can find it and byte compile it.
;;
;; To use, put in your package that uses these functions:
;;
;; (require 'fuzzy-match)
;;
;; To use the interactive package, put the following in your ~/.emacs file:
;;
;; (autoload 'lisp-spell-symbol \"fuzzy-match\"
;;   \"Perform spell checking on Lisp symbol preceding point.\" t)
;; (define-key esc-map \"#\" 'lisp-spell-symbol)
;;
;; This will define the key M-# (ESC #) to call `lisp-spell-symbol'.
;; For Emacs-19 users you can also add an entry to the \"ispell\" menu-bar:
;;
;; (define-key-after ispell-menu-map [ispell-symbol]
;;   '(\"Check Symbol\" . lisp-spell-symbol) 'ispell-word))
;;
;;
;;  If you like `fuzzy-match.el', you might also be interested in
;;  Icicles, which lets you use the same fuzzy matching for minibuffer
;;  input completion: http://www.emacswiki.org/cgi-bin/wiki/Icicles.
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (fuzzy-format . [(20130824 1200) nil "select indent-tabs-mode and format code automatically." single ";;; Commentary:
;; This minor mode, fuzzy format mode, provides check indent format (tabs or spaces) of current buffer.
;; And it set indent-tabs-mode and format code automatically.
;; This minor mode take a neutral stance in the war of tabs indent and spaces indent...

;;; Install
;; Put this file into load-path'ed directory, and byte compile it if
;; desired.          And put the following expression into your ~/.emacs.
;;
;; (require 'fuzzy-format)
;; (setq fuzzy-format-default-indent-tabs-mode nil)
;; (global-fuzzy-format-mode t)
;;

;;; Change Log
;; 0.1.1: Fix advice bug
;; 0.1.0: display error line (it's fuzzy).
;; 0.0.9: Fix bug.
;; 0.0.8: new function fuzzy-format-check-pair.
;; 0.0.7: fuzzy-format-set-indent-mode bug fix.
;; 0.0.6: fuzzy-format-auto-format bug fix.
;; 0.0.5: new valiable fuzzy-format-default-indent-tabs-mode.
;; 0.0.4: change from fuzzy-format-no-check-modes to fuzzy-format-check-modes.
;; 0.0.3: set mode-line-buffer-identification. refactor.
;; 0.0.2: use defcustom, defgroup.
;; 0.0.1: fuzzy-format.el 0.0.1 released.

"]) (fuzzy . [(20131025 2343) nil "Fuzzy Matching" single ";;; Commentary:

;; 

"]) (furl . [(20110112 1707) nil "Friendly URL retrieval" single ";;; Commentary:

;; furl.el is a friendlier layer on top of url.el. It makes the most common use
;; cases (sending parameters and receiving a string response) easier, at the
;; expense of making less common use cases (non-default error handling, reading
;; response headers) somewhat more complex.

;; One simplification furl.el makes is not using cbargs parameters for
;; asynchronous functions. These are omitted because `lexical-let' from cl.el
;; can accomplish the same purpose when necessary.

"]) (fullscreen-mode . [(20130524 956) nil "fullscreen window support for Emacs" single ";;; Commentary:

;; Global minor mode that provides
;; `fullscreen-mode-fullscreen-toggle',
;; which toggles the frame between fullscreen and windowed.
;; `fullscreen-mode-fullscreen-toggle' is bound to F11.

"]) (fullframe . [(20140107 818) nil "Generalized automatic execution in a single frame" single ";;; Commentary:
;; Generalized automatic execution in a single frame
;;
;; This is a library that package developers can use to provide user
;; friendly single window per frame execution of buffer exposing
;; commands, as well as to use in personal Emacs configurations to attain
;; the same goal for packages that don't use =fullframe= or the likes of
;; it themself.
;;
;;  Example: Setup =magit-status= to open in one window in the current
;;  frame when called
;; Example:
;; - Open magit-status in a single window in fullscreen
;;   (require 'fullframe)
;;   (fullframe magit-status magit-mode-quit-window :magit-fullscreen nil)
;;
"]) (full-ack . [(20130423 1304) nil "a front-end for ack" tar ";;; Commentary:
;;
;; ack is a tool like grep, aimed at programmers with large trees of
;; heterogeneous source code.
;; It is available at <http://betterthangrep.com/>.
;;
;; Add the following to your .emacs:
;;
;; (add-to-list 'load-path \"/path/to/full-ack\")
;; (autoload 'ack-same \"full-ack\" nil t)
;; (autoload 'ack \"full-ack\" nil t)
;; (autoload 'ack-find-same-file \"full-ack\" nil t)
;; (autoload 'ack-find-file \"full-ack\" nil t)
;;
;; Run `ack' to search for all files and `ack-same' to search for files of the
;; same type as the current buffer.
;;
;; `next-error' and `previous-error' can be used to jump to the matches.
;;
;; `ack-find-file' and `ack-find-same-file' use ack to list the files in the
;; current project.  It's a convenient, though slow, way of finding files.
;;
"]) (fuel . [(20131212 824) ((cl-lib (0 2)) (emacs (24 2))) "Major mode for the Factor programming language." tar nil]) (fsharp-mode . [(20131108 1322) ((auto-complete (1 4)) (popup (0 5)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0))) "F# mode for Emacs" tar nil]) (fringe-helper . [(20130519 741) nil "helper functions for fringe bitmaps" tar ";;; Commentary:
;;
;; fringe-helper contains helper functions for fringe bitmaps.
;;
;; `fringe-helper-define' allows you to to define fringe bitmaps using a visual
;; string replesentation.  For example:
;;
;; (fringe-helper-define 'test-bitmap '(top repeat)
;;   \"XX......\"
;;   \"..XX....\"
;;   \"....XX..\"
;;   \"......XX\")
;;
;; You can also generate arguments for `define-fringe-bitmap' yourself, by
;; using `fringe-helper-convert'.
;;
;; fringe-helper also provides a few stock bitmaps.  They are loaded on demand
;; by `fringe-lib-load' and adapt to the current fringe size to a certain
;; extend.
;;
;; `fringe-helper-insert' inserts a fringe bitmap at point and
;; `fringe-helper-insert-region' inserts a fringe bitmap along a region.
;; `fringe-helper-remove' removes both kinds.
;;
;;
;; Here's an example for enhancing `flymake-mode' with fringe bitmaps:
;;
;; (require 'fringe-helper)
;; (require 'flymake)
;;
;; (defvar flymake-fringe-overlays nil)
;; (make-variable-buffer-local 'flymake-fringe-overlays)
;;
;; (defadvice flymake-make-overlay (after add-to-fringe first
;;                                  (beg end tooltip-text face mouse-face)
;;                                  activate compile)
;;   (push (fringe-helper-insert-region
;;          beg end
;;          (fringe-lib-load (if (eq face 'flymake-errline)
;;                               fringe-lib-exclamation-mark
;;                             fringe-lib-question-mark))
;;          'left-fringe 'font-lock-warning-face)
;;         flymake-fringe-overlays))
;;
;; (defadvice flymake-delete-own-overlays (after remove-from-fringe activate
;;                                         compile)
;;   (mapc 'fringe-helper-remove flymake-fringe-overlays)
;;   (setq flymake-fringe-overlays nil))
;;
;;
"]) (fringe-current-line . [(20140110 2011) nil "show current line on the fringe." single ";;; Commentary:
;;
;; fringe-current-line is a package to indicate current line on the fringe.
;; You can use by the following steps.
;;
;; 1. Place this file on your load-path.
;;
;; 2. Add the following code into your init file:
;;
;;   (require 'fringe-current-line)
;;
;; 3. Activate the mode.
;;
;; * To enable it only in certain buffer, run `M-x fringe-current-line-mode'.
;;   Run again and you can disable it.
;;
;; * To enable it globally, add the following into your init file:
;;
;;     (global-fringe-current-line-mode 1)
;;
;;   You can toggle it by running `M-x global-fringe-current-line-mode'.
;;
;;
;; ## Limitation
;;
;; The indicator is not shown if the cursor is at the end of the buffer and the last line is empty.
;;
"]) (free-keys . [(20131222 740) ((cl-lib (0 3))) "Show free keybindings for modkeys or prefixes" single ";;; Commentary:

;; Show free keybindings for modkeys or prefixes. Based on code
;; located here: https://gist.github.com/bjorne/3796607
;;
;; For complete description see https://github.com/Fuco1/free-keys

"]) (framesize . [(20131017 1432) ((key-chord (0 5 20080915))) "change the size of frames in Emacs" single ";;; Commentary:

;; Simple functions for changing font-size on a whole frame in Emacs.

"]) (framemove . [(20130328 1133) nil "directional frame selection routines" single nil]) (frame-tag . [(20120527 136) nil "Minor mode that assigns a unique number to each frame for easy switching" single ";;; Commentary:

;;; Usage

;; frame-tag mode allows you to switch between frames quickly. Frames are orderd by their positions
;; The top left frame is assigned the number 1. The second frame is assigned 2 and so on.
;; To switch to the frames, press M-1 to switch to frame 1.
;; It assigns a maximum of 9 frames to switch from.

;;; Installation

;; (add-to-list 'load-path \"/path/to/frame-tag\")
;; (require 'frame-numbering)
;; (frame-tag-mode 1)

"]) (frame-restore . [(20130922 735) ((dash (1 2)) (f (0 11)) (emacs (24 1))) "Restore Emacs frame" single ";;; Commentary:

;; Save and restore parameters of Emacs frames.

;; Just call `frame-restore' in your `init.el':
;;
;;    (frame-restore-mode)
;;
;; Note that since r113242 the built-in Desktop Save mode will restore frames.
;; If you are using a Emacs snapshot build later than this revision, you are
;; *strongly* advised to use Desktop Save mode instead:
;;
;;    (desktop-save-mode)
;;
;; Frame Restore mode will display a bold warning if enabled in an Emacs build
;; whose Desktop Save mode can restore frames.

"]) (frame-fns . [(20131226 1849) nil "Non-interactive frame and window functions." single ";;; Commentary:
;;
;;    Non-interactive frame and window functions.
;;
;;  Main new functions defined here:
;;
;;    `1-window-frames-on', `distance', `flash-ding',
;;    `frame-geom-spec-cons', `frame-geom-value-cons',
;;    `frame-geom-spec-numeric', `frame-geom-value-numeric',
;;    `frames-on', `get-a-frame', `get-frame-name',
;;    `multi-window-frames-on', `read-frame', `window-coords'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (frame-cmds . [(20131226 1849) nil "Frame and window commands (interactive functions)." single ";;; Commentary:
;;
;;    Frame and window commands (interactive functions).
;;
;;
;;  Summary:
;;
;;    Load this library from your init file (~/.emacs or _emacs).
;;    Add the suggested key bindings (below) to  your init file.
;;    Use `M-up|down|left|right' to move frames around incrementally.
;;    Use `C-S-v', `M-S-v', `C-S-next', `C-S-prior' to move frames to screen edges.
;;    Use `C-M-up|down|left|right' to resize frames incrementally.
;;    Use `C-M-z' or `C-x C-z' to iconify/hide all frames.
;;    Use `C-M-z' in a lone frame to restore all frames.
;;    Use `C-mouse-1' in the minibuffer to restore all frames.
;;    Use `C-mouse-1' in Dired to mark/unmark a file.
;;    Use `C-mouse-3' on the mode line to remove window from frame.
;;    Use `tile-frames-horizontally', `-vertically' to tile frames.
;;    Use `C-x o' to select `other-window' or `other-frame'.
;;
;;  Commands to incrementally resize frames are `enlarge-frame' and
;;  `enlarge-frame-horizontally'.  Sarir Khamsi
;;  [sarir.khamsi@raytheon.com] originally wrote `enlarge-frame',
;;  which he called `sk-grow-frame'.
;;
;;  Note on saving changes made with the commands defined here:
;;
;;    Some of the commands defined here change frame properties.
;;    You can save any changes you have made, by using Customize.
;;    To visit a Customize buffer of all unsaved changes you have
;;    made, use command `customize-customized'.
;;
;;    Frame parameter changes, such as background color, can be saved
;;    for future use by all frames or all frames of a certain
;;    kind.  For that, you must change the frame parameters of the
;;    correponding frame-alist variable.
;;
;;    There is no single variable for saving changes to parameters of
;;    the current frame.  Instead, there are several different
;;    frame-alist variables, which you can use to define different
;;    kinds of frames.  These include: `default-frame-alist',
;;    `initial-frame-alist', and `special-display-frame-alist'.  The
;;    complete list of such frame alist variables is available using
;;    function `frame-alist-var-names', defined here.
;;
;;    Example: Suppose you change the background color of a frame and
;;    want to make that the default background color for new frames in
;;    the future.  You will need to update the value of variable
;;    `default-frame-alist' to use the `background-color' parameter
;;    setting of the changed frame.
;;
;;    You can easily copy one or all parameter values from any given
;;    frame to any frame alist (such as `default-frame-alist'), by
;;    using the commands `set-frame-alist-parameter-from-frame' and
;;    `set-all-frame-alist-parameters-from-frame'.  Those commands are
;;    defined here.
;;
;;  NOTE: If you also use library `fit-frame.el', and you are on MS
;;  Windows, then load that library before `frame-cmds.el'.  The
;;  commands `maximize-frame' and `restore-frame' defined here are
;;  more general and non-Windows-specific than the commands of the
;;  same name defined in `fit-frame.el'.
;;
;;
;;  User options defined here:
;;
;;    `available-screen-pixel-bounds', `enlarge-font-tries',
;;    `frame-config-register', `frame-parameters-to-exclude',
;;    `move-frame-wrap-within-display-flag'
;;    `rename-frame-when-iconify-flag', `show-hide-show-function',
;;    `window-mgr-title-bar-pixel-height'.
;;
;;  Commands defined here:
;;
;;    `delete-1-window-frames-on', `delete/iconify-window',
;;    `delete/iconify-windows-on', `delete-other-frames',
;;    `delete-windows-for', `enlarge-font', `enlarge-frame',
;;    `enlarge-frame-horizontally', `hide-everything', `hide-frame',
;;    `iconify-everything', `iconify/map-frame', `iconify/show-frame',
;;    `jump-to-frame-config-register', `maximize-frame',
;;    `maximize-frame-horizontally', `maximize-frame-vertically',
;;    `mouse-iconify/map-frame', `mouse-iconify/show-frame',
;;    `mouse-remove-window', `mouse-show-hide-mark-unmark',
;;    `move-frame-down', `move-frame-left', `move-frame-right',
;;    `move-frame-to-screen-bottom', `move-frame-to-screen-left',
;;    `move-frame-to-screen-right', `move-frame-to-screen-top',
;;    `move-frame-to-screen-top-left', `move-frame-up',
;;    `other-window-or-frame', `remove-window', `remove-windows-on',
;;    `rename-frame', `rename-non-minibuffer-frame', `restore-frame',
;;    `restore-frame-horizontally', `restore-frame-vertically',
;;    `save-frame-config',
;;    `set-all-frame-alist-parameters-from-frame',
;;    `set-frame-alist-parameter-from-frame', `show-*Help*-buffer',
;;    `show-a-frame-on', `show-buffer-menu', `show-frame',
;;    `show-hide', `shrink-frame', `shrink-frame-horizontally',
;;    `tell-customize-var-has-changed', `tile-frames',
;;    `tile-frames-horizontally', `tile-frames-vertically',
;;    `toggle-max-frame', `toggle-max-frame-horizontally',
;;    `toggle-max-frame-vertically'.
;;
;;  Non-interactive functions defined here:
;;
;;    `assq-delete-all' (Emacs 20), `available-screen-pixel-bounds',
;;    `available-screen-pixel-height', `available-screen-pixel-width',
;;    `butlast' (Emacs 20), `effective-screen-pixel-bounds',
;;    `enlarged-font-name', `frame-alist-var-names',
;;    `frame-cmds-set-difference', `frame-iconified-p',
;;    `frame-parameter-names', `nbutlast' (Emacs 20),
;;    `new-frame-position', `read-args-for-tile-frames',
;;    `read-buffer-for-delete-windows', `smart-tool-bar-pixel-height'.
;;
;;  Error symbols defined here:
;;
;;    `font-too-small', `font-size'.
;;
;;
;;
;;  ***** NOTE: The following EMACS PRIMITIVES have been REDEFINED HERE:
;;
;;  `delete-window' - If only one window in frame, `delete-frame'.
;;  `delete-windows-on' -
;;     1) Reads buffer differently.  Only buffers showing windows are candidates.
;;     2) Calls `delete-window', so this also deletes frames where
;;        window showing the BUFFER is the only window.
;;        (That's true also for vanilla Emacs 23+, but not before.)
;;
;;
;;  Suggested key bindings:
;;
;;   (global-set-key [(meta up)]                    'move-frame-up)
;;   (global-set-key [(meta down)]                  'move-frame-down)
;;   (global-set-key [(meta left)]                  'move-frame-left)
;;   (global-set-key [(meta right)]                 'move-frame-right)
;;   (global-set-key [(meta shift ?v)]              'move-frame-to-screen-top)      ; like `M-v'
;;   (global-set-key [(control shift ?v)]           'move-frame-to-screen-bottom)   ; like `C-v'
;;   (global-set-key [(control shift prior)]        'move-frame-to-screen-left)     ; like `C-prior'
;;   (global-set-key [(control shift next)]         'move-frame-to-screen-right)    ; like `C-next'
;;   (global-set-key [(control shift home)]         'move-frame-to-screen-top-left)
;;   (global-set-key [(control meta down)]          'enlarge-frame)
;;   (global-set-key [(control meta right)]         'enlarge-frame-horizontally)
;;   (global-set-key [(control meta up)]            'shrink-frame)
;;   (global-set-key [(control meta left)]          'shrink-frame-horizontally)
;;   (global-set-key [(control ?x) (control ?z)]    'iconify-everything)
;;   (global-set-key [vertical-line S-down-mouse-1] 'iconify-everything)
;;   (global-set-key [(control ?z)]                 'iconify/show-frame)
;;   (global-set-key [mode-line mouse-3]            'mouse-iconify/show-frame)
;;   (global-set-key [mode-line C-mouse-3]          'mouse-remove-window)
;;   (global-set-key [(control meta ?z)]            'show-hide)
;;   (global-set-key [vertical-line C-down-mouse-1] 'show-hide)
;;   (global-set-key [C-down-mouse-1]               'mouse-show-hide-mark-unmark)
;;   (substitute-key-definition 'delete-window      'remove-window global-map)
;;   (define-key ctl-x-map \"o\"                      'other-window-or-frame)
;;   (define-key ctl-x-4-map \"1\"                    'delete-other-frames)
;;   (define-key ctl-x-5-map \"h\"                    'show-*Help*-buffer)
;;   (substitute-key-definition 'delete-window      'delete-windows-for global-map)
;;   (define-key global-map \"\\C-xt.\"                'save-frame-config)
;;   (define-key ctl-x-map \"o\"                      'other-window-or-frame)
;;
;;   (defalias 'doremi-prefix (make-sparse-keymap))
;;   (defvar doremi-map (symbol-function 'doremi-prefix) \"Keymap for Do Re Mi commands.\")
;;   (define-key global-map \"\\C-xt\" 'doremi-prefix)
;;   (define-key doremi-map \".\" 'save-frame-config)
;;
;;  Customize the menu.  Uncomment this to try it out.
;;
;;   (defvar menu-bar-frames-menu (make-sparse-keymap \"Frames\"))
;;   (define-key global-map [menu-bar frames]
;;     (cons \"Frames\" menu-bar-frames-menu)))
;;   (define-key menu-bar-frames-menu [set-all-params-from-frame]
;;     '(menu-item \"Set All Frame Parameters from Frame\" set-all-frame-alist-parameters-from-frame
;;       :help \"Set frame parameters of a frame to their current values in frame\"))
;;   (define-key menu-bar-frames-menu [set-params-from-frame]
;;     '(menu-item \"Set Frame Parameter from Frame...\" set-frame-alist-parameter-from-frame
;;       :help \"Set parameter of a frame alist to its current value in frame\"))
;;   (define-key menu-bar-frames-menu [separator-frame-1] '(\"--\"))
;;   (define-key menu-bar-frames-menu [tile-frames-vertically]
;;     '(menu-item \"Tile Frames Vertically...\" tile-frames-vertically
;;       :help \"Tile all visible frames vertically\"))
;;   (define-key menu-bar-frames-menu [tile-frames-horizontally]
;;     '(menu-item \"Tile Frames Horizontally...\" tile-frames-horizontally
;;       :help \"Tile all visible frames horizontally\"))
;;   (define-key menu-bar-frames-menu [separator-frame-2] '(\"--\"))
;;   (define-key menu-bar-frames-menu [toggle-max-frame-vertically]
;;     '(menu-item \"Toggle Max Frame Vertically\" toggle-max-frame-vertically
;;       :help \"Maximize or restore the selected frame vertically\"
;;       :enable (frame-parameter nil 'restore-height)))
;;   (define-key menu-bar-frames-menu [toggle-max-frame-horizontally]
;;     '(menu-item \"Toggle Max Frame Horizontally\" toggle-max-frame-horizontally
;;       :help \"Maximize or restore the selected frame horizontally\"
;;       :enable (frame-parameter nil 'restore-width)))
;;   (define-key menu-bar-frames-menu [toggle-max-frame]
;;     '(menu-item \"Toggle Max Frame\" toggle-max-frame
;;       :help \"Maximize or restore the selected frame (in both directions)\"
;;       :enable (or (frame-parameter nil 'restore-width) (frame-parameter nil 'restore-height))))
;;   (define-key menu-bar-frames-menu [maximize-frame-vertically]
;;     '(menu-item \"Maximize Frame Vertically\" maximize-frame-vertically
;;       :help \"Maximize the selected frame vertically\"))
;;   (define-key menu-bar-frames-menu [maximize-frame-horizontally]
;;     '(menu-item \"Maximize Frame Horizontally\" maximize-frame-horizontally
;;       :help \"Maximize the selected frame horizontally\"))
;;   (define-key menu-bar-frames-menu [maximize-frame]
;;     '(menu-item \"Maximize Frame\" maximize-frame
;;       :help \"Maximize the selected frame (in both directions)\"))
;;   (define-key menu-bar-frames-menu [separator-frame-3] '(\"--\"))
;;   (define-key menu-bar-frames-menu [iconify-everything]
;;     '(menu-item \"Iconify All Frames\" iconify-everything
;;       :help \"Iconify all frames of session at once\"))
;;   (define-key menu-bar-frames-menu [show-hide]
;;     '(menu-item \"Hide Frames / Show Buffers\" show-hide
;;       :help \"Show, if only one frame visible; else hide.\")))
;;
;;   (defvar menu-bar-doremi-menu (make-sparse-keymap \"Do Re Mi\"))
;;   (define-key global-map [menu-bar doremi]
;;     (cons \"Do Re Mi\" menu-bar-doremi-menu))
;;   (define-key menu-bar-doremi-menu [doremi-font+]
;;     '(\"Save Frame Configuration\" . save-frame-config))
;;
;;  See also these files for other frame commands:
;;
;;     `autofit-frame.el' - Automatically fit each frame to its
;;                          selected window.  Uses `fit-frame.el'.
;;
;;     `fit-frame.el'     - 1) Fit a frame to its selected window.
;;                          2) Incrementally resize a frame.
;;
;;     `doremi-frm.el'    - Incrementally adjust frame properties
;;                          using arrow keys and/or mouse wheel.
;;
;;     `thumb-frm.el'     - Shrink frames to a thumbnail size and
;;                          restore them again.
;;
;;     `zoom-frm.el'      - Zoom a frame or buffer, so that its text
;;                          appears larger or smaller.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (foreign-regexp . [(20130618 321) nil "search and replace by foreign regexp." tar ";;; Commentary:
;;
;; CAUTION
;; =======
;; THIS LIBRARY IS VERY EXPERIMENTAL!!!
;;
;;
;; Overview
;; ========
;; This library is an extension of `shell-command'.
;;
;; What this library does are:
;;
;;   1. Search for a regexp(*1) from text in current buffer by
;;      external command(*2).
;;      
;;         (*1) You can write regexp with syntax of external
;;              command.
;;
;;         (*2) External commands written in Perl (v5.8 or later
;;              is required), Ruby (v1.9 or later is required), and
;;              JavaScript(node.js) are pre-defined in this file.
;;              To use regexp syntax of your choice, you can
;;              write your own external command.
;;
;;   2. Let us browse search results from an external command via
;;      Emacs user interface like `occur' and `isearch'.
;;
;;      Also let us apply results of the replacement operation by an
;;      external command via `query-replace' interface.
;;
;;
;; REQUIREMENTS
;; ============
;; By shell scripts defined in this file as default external commands,
;; perl (>= 5.8), ruby (>= 1.9) or node.js is required.
;;
;; Also features `cl', `menu-bar' and `re-builder' are required.
;;
;; For better multilingual support, Emacs (>= 21) may be required.
;;
;;
;; INSTALLING
;; ==========
;; To install this library, save this file to a directory in your
;; `load-path' (you can view the current `load-path' using \"C-h v
;; load-path <RET>\" within Emacs), then add the following lines to
;; your .emacs start up file:
;;
;;    (require 'foreign-regexp)
;;
;;    (custom-set-variables
;;     '(foreign-regexp/regexp-type 'perl) ;; Choose by your preference.
;;     '(reb-re-syntax 'foreign-regexp)) ;; Tell re-builder to use foreign regexp.
;;
;;
;; TERMINOLOGY
;; ===========
;; Technical terms appear in this document are as follows.
;;
;; FOREIGN REGEXP:
;;     A regular expression in syntax which is foreign to Emacs.
;;     Typically, it is not so much backslashy.
;;     By default, Regular expressions in syntax of `Perl', `Ruby' and
;;     `JavaScript' can be used as FOREIGN REGEXP with this library.
;;
;; EXTERNAL COMMAND:
;;     An external program that gives Emacs the ability to handle
;;     FOREIGN REGEXP.
;;     Commands written in `Perl', `Ruby' and `JavaScript' are pre-defined in
;;     this library.
;;
;;
;; USAGE EXAMPLE
;; =============
;;
;; [Example-1] Query Replace in manner of Perl.
;;
;;   STEP-1: Set regexp-type to Perl.
;;
;;        `M-x foreign-regexp/regexp-type/set <RET> perl <RET>'
;;
;;        NOTE: Once you choose REGEXP-TYPE, Emacs will remember it
;;              until exit. You can also set and save REGEXP-TYPE for
;;              next Emacs session by setting value via customize.
;;              See \"COMMANDS(1)\" section in this document.
;;
;;   STEP-2: Run query replace 
;;
;;        `M-s M-% (\\d+)---(\\d+) <RET> ${1}456${2} <RET>'
;;
;;        This command replaces text in buffer:
;;
;;           123---789
;;
;;        with text:
;;
;;           123456789
;;
;;        Variables in replacement string are interpolated by Perl.
;;
;;
;; [Example-2] Query Replace in manner of Ruby.
;;
;;   STEP-1: Set regexp-type to Ruby.
;;
;;        `M-x foreign-regexp/regexp-type/set <RET> ruby <RET>'
;;
;;   STEP-2: Run query replace 
;;
;;        `M-s M-% (\\d+)---(\\d+) <RET> #{$1}456#{$2} <RET>'
;;
;;        This command replaces text in buffer:
;;
;;           123---789
;;
;;        with text:
;;
;;           123456789
;;
;;        Variables in replacement string are interpolated by ruby
;;        as if it ware in the string inside of a block of \"gsub\"
;;        method.
;;
;;
;; [Example-3] Query Replace in manner of JavaScript.
;;
;;   STEP-1: Set regexp-type to JavaScript.
;;
;;        `M-x foreign-regexp/regexp-type/set <RET> javascript <RET>'
;;
;;   STEP-2: Run query replace 
;;
;;        `M-s M-% (\\d+)---(\\d+) <RET> $1456$2 <RET>'
;;
;;        This command replaces text in buffer:
;;
;;           123---789
;;
;;        with text:
;;
;;           123456789
;;
;;        Variables in replacement string are interpolated
;;        as if they are in String.replace method.
;;
;;
;; COMMANDS(1): SETTING REGEXP-TYPE
;; ================================
;;
;;  `M-x foreign-regexp/regexp-type/set <RET> REGEXP-TYPE <RET>'
;;
;;      Set type of regexp syntax to REGEXP-TYPE.
;;      By default, three regexp-types `perl', `ruby' and
;;      `javascript' are provided.
;;
;;      You can also set REGEXP-TYPE via customization interface:
;;
;;      `M-x customize-apropos <RET> foreign-regexp/regexp-type <RET>'.
;;
;;
;; COMMANDS(2): SEARCH AND REPLACEMENT
;; ===================================
;;
;; NOTE: While editing a regular expression on the minibuffer prompt
;;       of `foreign-regexp' commands below, you can switch to another
;;       `foreign-regexp' command without losing current editing state.
;;
;; `M-s M-o REGEXP <RET>'
;; `M-x foreign-regexp/occur <RET> REGEXP <RET>'
;;
;;      Show all lines in the current buffer containing a match
;;      for foreign regexp REGEXP.
;;
;; `M-s M-% REGEXP <RET> REPLACEMENT <RET>'
;; `M-x foreign-regexp/query-replace <RET> REGEXP <RET> REPLACEMENT <RET>'
;;
;;      Replace some matches for foreign regexp REGEXP with REPLACEMENT.
;;      Note that notation of REPLACEMENT is different for
;;      each REGEXP-TYPE.
;;
;; `M-s M-s'
;; `M-x foreign-regexp/isearch-forward <RET>'
;;
;;      Begin incremental search for a foreign regexp.
;;
;; `M-s M-r'
;; `M-x foreign-regexp/isearch-backward <RET> REGEXP;
;;
;;      Begin reverse incremental search for a foreign regexp.
;;
;; `M-s M-f REGEXP <RET>'
;; `M-x foreign-regexp/non-incremental/search-forward <RET> REGEXP <RET>'
;;
;;      Search for an foreign regexp REGEXP.
;;
;; `M-s M-F REGEXP <RET>'
;; `M-x foreign-regexp/non-incremental/search-backward <RET> REGEXP <RET>'
;;
;;      Search for an foreign regexp REGEXP backward.
;;
;; `M-s M-g'
;; `M-x nonincremental-repeat-search-forward'
;;
;;      Search forward for the previous search string or regexp.
;;
;; `M-s M-G'
;; `M-x nonincremental-repeat-search-backward'
;;
;;      Search backward for the previous search string or regexp.
;;
;;
;; COMMANDS(3): WORKING WITH SEARCH OPTIONS
;; ========================================
;; NOTE: The status of each search option will be displayed by an
;;       indicator which is put on the minibuffer prompt of each
;;       `foreign-regexp' command, or put on the mode-line of a
;;       buffer `*RE-Builder*'. The indicator will be displayed
;;       like these: `[isxe]' for Perl, `[imxe]' for Ruby and
;;       `[ie]' for JavaScript.
;;       
;; `M-s M-i'
;; `M-x foreign-regexp/toggle-case-fold <RET>'
;;
;;      Toggle search option `case-fold-search'.
;;
;; `M-s M-m'
;; `M-x foreign-regexp/toggle-dot-match <RET>'
;;
;;      Toggle search option `foreign-regexp/dot-match-a-newline-p'.
;;
;; `M-s M-x'
;; `M-x foreign-regexp/toggle-ext-regexp <RET>'
;;
;;      Toggle search option `foreign-regexp/use-extended-regexp-p'.
;;
;; `M-s M-e'
;; `M-x foreign-regexp/toggle-eval-replacement <RET>'
;;
;;      Toggle search option `foreign-regexp/toggle-eval-replacement'.
;;
;;      When this search option is on, the replacement string for
;;      a command `foreign-regexp/query-replace' will be evaluated
;;      as expression. For example, these commands:
;;
;;        For `Perl':
;;          `M-s M-% ^ <RET> no strict 'vars';sprintf('%05d: ', ++$LINE) <RET>'
;;
;;        For `Ruby':
;;          `M-s M-% ^ <RET> $LINE||=0;sprintf('%05d: ', $LINE+=1) <RET>'
;;
;;        For `JavaScript':
;;          `M-s M-% ^ <RET> function (m) {if(typeof(i)=='undefined'){i=0};return ('0000'+(++i)).substr(-5)+': '} <RET>'
;;          (Replacement will be evaluated as a function in
;;           `String.replace' method.)
;;
;;      put line number to beginning of each lines.
;;  
;;
;; COMMANDS(4): CONSTRUCTING REGEXP
;; ================================
;;
;; `M-x reb-change-syntax <RET> foreign-regexp <RET>'
;;
;;      Set the syntax used by the `re-builder' to foreign regexp.
;;
;; `M-s M-l'
;; `M-x re-builder <RET>'
;;
;;      Start an interactive construction of a regexp with
;;      `re-builder'.
;;      (See also documents of `re-builder')
;;
;;      NOTE-1: To apply the regexp, which was constructed with
;;              `re-builder', to the `foreign-regexp' commands,
;;              call commands below in `*RE-Builder*' buffer:
;;
;;             `M-s M-o'
;;             `M-x foreign-regexp/re-builder/occur-on-target-buffer'
;;
;;                  Run `foreign-regexp/occur' in `reb-target-buffer'
;;                  with a foreign regexp in the buffer `*RE-Builder*'.
;;
;;             `M-s M-%'
;;             `M-x foreign-regexp/re-builder/query-replace-on-target-buffer'
;;
;;                  Run `foreign-regexp/query-replace' in `reb-target-buffer'
;;                  with a foreign regexp in the buffer `*RE-Builder*'.
;;
;;             `M-s M-s'
;;             `M-x foreign-regexp/re-builder/isearch-forward-on-target-buffer'
;;
;;                  Run `foreign-regexp/isearch-forward' in `reb-target-buffer'
;;                  with a foreign regexp in the buffer `*RE-Builder*'.
;;
;;             `M-s M-r'
;;             `M-x foreign-regexp/re-builder/isearch-backward-on-target-buffer'
;;
;;                  Run `foreign-regexp/isearch-backward' in `reb-target-buffer'
;;                  with a foreign regexp in the buffer `*RE-Builder*'.
;;
;;             `M-s M-f'
;;             `M-x foreign-regexp/re-builder/non-incremental-search-forward-on-target-buffer'
;;
;;                  Run `foreign-regexp/non-incremental/search-forward' in `reb-target-buffer'
;;                  with a foreign regexp in the buffer `*RE-Builder*'.
;;
;;             `M-s M-F'
;;             `M-x foreign-regexp/re-builder/non-incremental-search-backward-on-target-buffer'
;;
;;                  Run `foreign-regexp/non-incremental/search-backward' in `reb-target-buffer'
;;                  with a foreign regexp in the buffer `*RE-Builder*'.
;;
;;
;;      NOTE-2: You can switch search options of the
;;              `reb-target-buffer' with commands below:
;;
;;              `M-s M-i'
;;              `M-x foreign-regexp/re-builder/toggle-case-fold-on-target-buffer'
;;
;;                  Toggle search option `case-fold-search' of `reb-target-buffer'.
;;
;;              `M-s M-m'
;;              `M-x foreign-regexp/re-builder/toggle-dot-match-on-target-buffer'
;;
;;                  Toggle search option `foreign-regexp/dot-match-a-newline-p'
;;                  of `reb-target-buffer'.
;;
;;              `M-s M-x'
;;              `M-x foreign-regexp/re-builder/toggle-ext-regexp-on-target-buffer'
;;
;;                  Toggle search option `foreign-regexp/dot-match-a-newline-p'
;;                  of `foreign-regexp/use-extended-regexp-p'.
;;
;; `M-\\'
;; `M-x foreign-regexp/quote-meta-in-region <RET>'
;;
;;      Escape characters in region, that would have special meaning
;;      in foreign regexp.
;;
;;
;; COMMANDS(5): ALIGNMENT USING FOREIGN REGEXP
;; ===========================================
;;
;; `C-M-|'
;; `M-x align'
;;
;;      Align region according to pre-defined rules.
;;
;;      Foreign regexp can be used in a rule by putting an
;;      `regexp-type' attribute on the rule.
;;
;;      Example)
;;
;;        (add-to-list
;;         'align-rules-list
;;         '(perl-and-ruby-hash-form
;;
;;           ;; This rule will be applied when `regexp-type'
;;           ;; is `perl' or `ruby'.
;;           (regexp-type . '(perl ruby))
;;
;;           (regexp . \"([ \\\\t]*)=>[ \\\\t]*[^# \\\\t\\\\n]\") ;; Foreign Regexp
;;           (group  . 1)
;;           (repeat . t)
;;           (modes  . '(perl-mode cperl-mode ruby-mode))))
;;
;;      See also `align-rules-list' and help document of an advice
;;      of `align-region' for more information about alignment rules.
;;
;;
;; `M-s M-a REGEXP <RET>'
;; `M-x foreign-regexp/align <RET> REGEXP <RET>'
;;
;;      Align the current region using a partial foreign regexp
;;      read from the minibuffer.
;;
;;      The foreign regexp read from the minibuffer will be
;;      supposed to be placed after whitespaces.
;;
;;      See also `align-regexp'.
;;
;; `C-u M-s M-a REGEXP <RET> GROUP <RET> SPACING <RET> REPEAT <RET>'
;; `C-u M-x foreign-regexp/align <RET> REGEXP <RET> GROUP <RET> SPACING <RET> REPEAT <RET>'
;;
;;      Align the current region using a full foreign regexp
;;      read from the minibuffer.
;;
;;      Example)
;;
;;        < Use regexp of Perl in this example. >
;;
;;        When texts in region is:
;;
;;             (one 1)
;;             (ten 10)
;;             (hundred 100)
;;             (thousand 1000)
;;
;;        Run command on the region with options:
;;
;;             REGEXP: ([ \\t]+)\\d
;;                          |
;;                          +--- GROUP: 1
;;                               Alignment will be applied to each
;;                               lines by inserting whitespaces to
;;                               the place where the sub-expression
;;                               specified by GROUP is matched to.
;;             SPACING: 1
;;             REPEAT:  y
;;
;;        Result is:
;;
;;             (one      1)
;;             (ten      10)
;;             (hundred  100)
;;             (thousand 1000)
;;                      |
;;                      +---- Aligned using SPACING spaces.
;;
;;      See also `align-regexp'.
;;
;;
;; FOR HACKERS
;; ===========
;; You can use regexp syntax of your choice of language, if you
;; write four external commands below with the language:
;; 
;;   `foreign-regexp/replace/external-command'
;;   `foreign-regexp/quote-meta/external-command'
;;
;; and install these commands with the function
;; `foreign-regexp/regexp-type/define'.
;;
;; See help documents of these variables and function
;; for more information.
;;
;;
;; KNOWN PROBLEMS
;; ==============
;; - Codes aside, this document should be rewritten.
;;   My English sucks :-(
;; - On M$-Windows system, virus scanners makes
;;   foreign regexp commands extremely slow.
;;
;;
;; WISH LIST
;; =========
;; - Better documents.
;; - Better error messages.
;; - History for `re-builder'.
;; - `grep' with foreign regexp?
;; - `tags-search', `tags-query-replace', `dried-do-search' and
;;   `dired-do-query-replace-regexp' with foreign regexp?
;; - `multi-isearch-buffers-regexp', `multi-occur',
;;   `multi-occur-in-matching-buffers', `how-many', `flush-lines',
;;   and `keep-lines' with foreign regexp?
;; - Write Tests.

"]) (font-utils . [(20131106 706) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Utility functions for working with fonts" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'font-utils)
;;
;;     (font-utils-exists-p \"Courier\")
;;
;; Explanation
;;
;; Font-utils is a collection of functions for working with fonts.
;; This library has no user-level interface; it is only useful
;; for programming in Emacs Lisp.
;;
;; The following functions are provided, most of which deal with
;; font names rather than font objects:
;;
;;     `font-utils-exists-p'
;;     `font-utils-first-existing-font'
;;     `font-utils-is-qualified-variant'
;;     `font-utils-lenient-name-equal'
;;     `font-utils-list-names'
;;     `font-utils-name-from-xlfd'
;;     `font-utils-normalize-name'
;;     `font-utils-parse-name'
;;     `font-utils-read-name'
;;
;; The most generally useful of these is `font-utils-exists-p', which
;; tests whether a font matching the given name is currently available
;; for use.
;;
;; To use font-utils, place the font-utils.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'font-utils)
;;
;; See Also
;;
;;     M-x customize-group RET font-utils RET
;;
;; Notes
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.3 and lower : no
;;
;;     Uses if present: persistent-soft.el (Recommended)
;;
;; Bugs
;;
;;     Checking for font availability is slow on most systems.
;;     Workaround: where supported, font information will be cached
;;     to disk.  See customize for more.
;;
;;     font-utils-exists-p only supports two styles of font
;;     name.  This page
;;
;;         http://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts
;;
;;     describes four styles of font name.
;;
;; TODO
;;
;;     Possibly return a font object instead of font-info vector
;;     from font-utils-exists-p.
;;
;;     Test whether (find-font (font-spec :name \"Name\")) is faster
;;     than font-info.
;;
;;     font-utils-create-fuzzy-matches is not exhaustive enough
;;     to catch many typos.
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (font-lock-menus . [(20131226 1847) nil "Font-lock menus: enhanced `font-menus.el'" single ";;; Commentary:
;;
;; Font-lock menus.  `font-menus.el', enhanced, & fixed for Emacs 24+.
;;
;; This is library `font-menus.el', by Francis J. Wright, modified so
;; that it continues to work with GNU Emacs 24 and later (as well as
;; older versions), and with minor enhancements.
;;
;; Enhancements:
;;
;; * Added group `font-lock-menus', and renamed everything to use
;;   package prefix `flm-'.
;;
;; * User option `flm-font-lock-menu-wrap': non-nil means wrap around
;;   when changing levels, instead of just raising an error.  This has
;;   no effect when the commands are called from a menu, but you can
;;   bind commands `flm-font-lock-fontify-more' and
;;   `flm-font-lock-fontify-less' to keys.
;;
;;   If the non-nil value is `off' (the default value) then font-lock
;;   mode is turned off (absolute minimum font-locking) when cycling
;;   wraps around.  Any other non-nil value means cycle only among
;;   font-lock states.  If the value is `off' then you can cycle
;;   on/off even if there is only one font-lock level.
;;
;; TO DO:
;;
;; * Be able to associate *names* with numerical levels, in a given mode.
;; * Be able to easily customize sets of keywords (probably hard to do).
;;
;; -------------------------------------------------------------------
;;
;; Here is the original Commentary, by F.J. Wright:
;;
;; This package is intended for use with GNU Emacs 20 and adds
;; submenus to the Edit menu to control font lock mode and provide
;; font display.
;;
;;; Installation:
;;
;; Put this file somewhere where Emacs can find it (i.e. in one of the
;; directories in your `load-path' such as `site-lisp'), optionally
;; byte-compile it, and put this in your .emacs:
;;
;;  (require 'font-lock-menus)
;;
;;; Font Display:
;;
;; Extracted from font-lock.el for GNU Emacs 20.3 and
;; `font-lock-menu.el' for GNU Emacs 19, both by Simon Marshal
;; <simon@gnu.ai.mit.edu> and revised to use easymenu and run as a
;; stand-alone package by Francis J. Wright.  (It would be better put
;; back into font-lock.el!)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (font-lock+ . [(20131226 1846) nil "Enhancements to standard library `font-lock.el'." single ";;; Commentary:
;;
;;    Enhancements to standard library `font-lock.el'.
;;
;;  This library tells font lock to ignore any text that has the text
;;  property `font-lock-ignore'.  This means, in particular, that font
;;  lock will not erase or otherwise interfere with highlighting that
;;  you apply using library `highlight.el'.
;;
;;  Load this library after standard library `font-lock.el' (which
;;  should be preloaded).  Put this in your Emacs init file (~/.emacs):
;;
;;    (require 'font-lock+)
;;
;;
;;  CAVEAT: Be aware that using this library will **slow down**
;;          font-locking.  In particular, unfontifying a large buffer
;;          (e.g. turning off `font-lock-mode') will take noticeably
;;          longer.  Give it a try, and see if the slowdown annoys
;;          you.  It doesn't annoy me, but people are different, and
;;          your use of Emacs might be very different from mine.
;;
;;
;;  Non-interactive functions defined here:
;;
;;    `put-text-property-unless-ignore'.
;;
;;
;;  ***** NOTE: The following functions defined in `font-lock.el'
;;              have been REDEFINED HERE:
;;
;;    `font-lock-append-text-property', `font-lock-apply-highlight',
;;    `font-lock-apply-syntactic-highlight',
;;    `font-lock-default-unfontify-region',
;;    `font-lock-fillin-text-property',
;;    `font-lock-fontify-anchored-keywords',
;;    `font-lock-fontify-keywords-region',
;;    `font-lock-fontify-syntactically-region',
;;    `font-lock-prepend-text-property'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (fold-this . [(20131113 247) nil "Just fold this region please" single ";;; Commentary:

;; Just fold the active region, please.
;;
;; ## How it works
;;
;; The command `fold-this` visually replaces the current region with `...`.
;; If you move point into the ellipsis and press enter or `C-g` it is unfolded.
;;
;; You can unfold everything with `fold-this-unfold-all`.
;;
;; You can fold all instances of the text in the region with `fold-this-all`.
;;
;; ## Setup
;;
;; I won't presume to know which keys you want these functions bound to,
;; so you'll have to set that up for yourself. Here's some example code,
;; which incidentally is what I use:
;;
;;     (global-set-key (kbd \"C-c C-f\") 'fold-this-all)
;;     (global-set-key (kbd \"C-c C-F\") 'fold-this)
;;     (global-set-key (kbd \"C-c M-f\") 'fold-this-unfold-all)

"]) (fold-dwim-org . [(20131203 551) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single ";;; Commentary: 
;; 
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (fold-dwim . [(20120926 336) nil "No description available." single nil]) (fm . [(20130126 1618) nil "follow mode for compilation/output buffers" single ";;; Commentary:

;; As you move through the lines of an output buffer (such as from
;; `grep' or `occur'), another window highlights the corresponding
;; line of the source buffer.

;; This is inspired by the table of contents code from reftex.el.
;; http://www.strw.leidenuniv.nl/~dominik/Tools/

;;; Installation
;; To use the mode, do M-x fm-start in the output buffer.  Or just add
;; it to the mode hooks, e.g.:
;; (add-hook 'occur-mode-hook 'fm-start)
;; (add-hook 'compilation-mode-hook 'fm-start)
;; 

"]) (flyspell-lazy . [(20131106 706) nil "Improve flyspell responsiveness using idle timers" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'flyspell-lazy)
;;
;;     (flyspell-lazy-mode 1)
;;
;;     (flyspell-mode 1)      ; or (flyspell-prog-mode)
;;
;; Explanation
;;
;; Emacs' built-in `flyspell-mode' has performance issues on some
;; platforms.  Specifically, keyboard responsiveness may be
;; significantly degraded on OS X.  See this bug:
;;
;;     http://debbugs.gnu.org/cgi/bugreport.cgi?bug=2056
;;
;; This package reduces the amount of work done by flyspell.  Instead
;; of checking *instantly* as you type, spelling will be checked when
;; Emacs has been idle for a short time.  (Vanilla `flyspell-mode'
;; does not use idle timers but a subtle combination of hooks and
;; `sit-for'.)
;;
;; This package also forces `flyspell-mode' off completely for certain
;; buffers.
;;
;; To use this library, add the following to your ~/.emacs
;;
;;     (require 'flyspell-lazy)
;;     (flyspell-lazy-mode 1)
;;
;; Then use `flyspell-mode' as you normally would.  This package does
;; not load flyspell for you.
;;
;; `flyspell-lazy-mode' will invoke spellcheck less frequently than
;; vanilla `flyspell-mode', though this can be changed somewhat via
;; `customize'.
;;
;; See Also
;;
;;     M-x customize-group RET flyspell-lazy RET
;;     M-x customize-group RET flyspell RET
;;     M-x customize-group RET ispell RET
;;
;; Notes
;;
;;     If you are using \"aspell\" instead of \"ispell\" on the backend,
;;     the following setting may improve performance:
;;
;;         (add-to-list 'ispell-extra-args \"--sug-mode=ultra\")
;;
;;     If you see the cursor flicker over the region during spellcheck,
;;     make sure that `flyspell-large-region' is set to 1 (this library
;;     tries to do that for you), and try adding the following to your
;;     ~/.emacs
;;
;;         (defadvice flyspell-small-region (around flyspell-small-region-no-sit-for activate)
;;           (flyspell-lazy--with-mocked-function 'sit-for t
;;             ad-do-it))
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     No external dependencies
;;
;; Bugs
;;
;;     The longer the delay before checking, the more inaccurate the
;;     coordinates in `flyspell-changes'.  These are static integers;
;;     they don't move with updates in the buffer.  To mitigate this
;;     effect, a second idle timer checks all visible text (at a much
;;     longer interval).
;;
;;     Flyspell-lazy-matches-last-text is not reliable - in debug mode
;;     it can be seen that it sometimes toggles between two states at
;;     every press of spacebar.  This may be related to generating the
;;     additional span around the point.
;;
;;     Flyspell-lazy-refine-changes is sometimes mistakenly scrubbing
;;     all pending spans.  Check the case where one char is deleted
;;     inside a word.
;;
;; TODO
;;
;;     Let flyspell-issue-message-flag and flyspell-issue-welcome-flag
;;     to nil wherever needed to improve performance.
;;
;;     Consider using while-no-input macro.
;;
;;     Figure out if flyspell-lazy affects suggestions -- must an
;;     update be forced on the word before running suggestions?
;;
;;     Force re-check of text after removing comments renders the
;;     text code again under flyspell-prog-mode.
;;
;;     Optionally add aspell extra args noted in doc.
;;
;;     Make flyspell-lazy-single-ispell actually work.  Currently, see
;;     a new \"starting ispell\" message for every buffer opened, in
;;     spite of flyspell-lazy-single-ispell setting.  This comes from
;;     flyspell-mode calling flyspell-mode-on.
;;
;;     What would be the ramifications of using a single ispell
;;     process?  Only loss of per-buffer dictionaries?
;;
;;     Enforce using a single ispell process on regions larger than
;;     flyspell-large-region.
;;
;;     Strip symbols from text - see flyspell-lazy-strip-symbols.
;;
;;     Heuristic to detect regular expressions and avoid checking
;;     them as strings.
;;
;;     Use buffer-undo-list instead of flyspell-changes, then can
;;     also remove flyspell's after-change hook.
;;
;;     Use the hints set in prog-mode to avoid checks in the per-word
;;     and refine stages.
;;
;;     Hints for commented-out code to avoid checking.
;;
;;; License
;;
;;    Simplified BSD License
;;
;;    Redistribution and use in source and binary forms, with or
;;    without modification, are permitted provided that the following
;;    conditions are met:
;;
;;       1. Redistributions of source code must retain the above
;;          copyright notice, this list of conditions and the following
;;          disclaimer.
;;
;;       2. Redistributions in binary form must reproduce the above
;;          copyright notice, this list of conditions and the following
;;          disclaimer in the documentation and/or other materials
;;          provided with the distribution.
;;
;;    This software is provided by Roland Walker \"AS IS\" and any express
;;    or implied warranties, including, but not limited to, the implied
;;    warranties of merchantability and fitness for a particular
;;    purpose are disclaimed.  In no event shall Roland Walker or
;;    contributors be liable for any direct, indirect, incidental,
;;    special, exemplary, or consequential damages (including, but not
;;    limited to, procurement of substitute goods or services; loss of
;;    use, data, or profits; or business interruption) however caused
;;    and on any theory of liability, whether in contract, strict
;;    liability, or tort (including negligence or otherwise) arising in
;;    any way out of the use of this software, even if advised of the
;;    possibility of such damage.
;;
;;    The views and conclusions contained in the software and
;;    documentation are those of the authors and should not be
;;    interpreted as representing official policies, either expressed
;;    or implied, of Roland Walker.
;;
"]) (flymake-yaml . [(20130423 848) ((flymake-easy (0 1))) "A flymake handler for YAML" single ";;; Commentary:
;;
;; Based in part on http://d.hatena.ne.jp/kitokitoki/20120306/p1
;;
;; Usage:
;;
;;   (require 'flymake-yaml) ;; Not necessary if using ELPA package
;;   (add-hook 'yaml-mode-hook 'flymake-yaml-load)
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-shell . [(20121104 1100) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single ";;; Commentary:

;; Usage:

;;   (require 'flymake-shell)
;;   (add-hook 'sh-set-shell-hook 'flymake-shell-load)
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-sass . [(20121218 12) ((flymake-easy (0 1))) "Flymake handler for sass and scss files" single ";;; Commentary:
;;
;; Usage:
;;   (require 'flymake-sass)
;;   (add-hook 'sass-mode-hook 'flymake-sass-load)
;;   (add-hook 'scss-mode-hook 'flymake-sass-load)
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-rust . [(20131020 345) ((flymake-easy (0 1))) "A flymake handler for rust-mode files" single ";;; Commentary:
;; Usage:
;;   (require 'flymake-rust)
;;   (add-hook 'rust-mode-hook 'flymake-rust-load)
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-ruby . [(20121104 1059) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single ";;; Commentary:
;; Usage:
;;   (require 'flymake-ruby)
;;   (add-hook 'ruby-mode-hook 'flymake-ruby-load)
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-racket . [(20131209 2157) ((flymake-easy (0 1))) "A flymake handler for scheme-mode files" single ";;; Commentary:
;; Usage:
;; (require 'flymake-racket)
;; (add-hook 'scheme-mode-hook 'flymake-racket-load)
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-python-pyflakes . [(20131127 6) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single ";;; Commentary:

;; Usage:

;;   (require 'flymake-python-pyflakes)
;;   (add-hook 'python-mode-hook 'flymake-python-pyflakes-load)
;;
;; To use \"flake8\" instead of \"pyflakes\", add this line:

;;   (setq flymake-python-pyflakes-executable \"flake8\")
;;
;; You can pass extra arguments to the checker program by customizing
;; the variable `flymake-python-pyflakes-extra-arguments', or setting it
;; directly, e.g.

;;   (setq flymake-python-pyflakes-extra-arguments '(\"--ignore=W806\"))
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-puppet . [(20130731 2203) ((flymake-easy (0 9))) "An Emacs flymake handler for syntax-checking puppet using puppet-lint" single nil]) (flymake-phpcs . [(20140111 1932) ((flymake-easy (0 9))) "making flymake work with PHP CodeSniffer" single ";;; Commentary:

;; Please check the GitHub
;; (https://github.com/senda-akiha/flymake-phpcs/)
;; for more information.

"]) (flymake-php . [(20121104 1102) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single ";;; Commentary:
;; Usage:
;;   (require 'flymake-php)
;;   (add-hook 'php-mode-hook 'flymake-php-load)
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-perlcritic . [(20120328 114) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar ";;; Commentary:
;;
;; flymake-perlcritic.el adds support to flymake.el for running Perl::Critic
;; (http://search.cpan.org/perldoc?Perl::Critic) to perform static
;; analysis of your Perl code in addition to syntax checking.
;;
"]) (flymake-lua . [(20130329 310) nil "Flymake for Lua" single nil]) (flymake-json . [(20130423 2357) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single ";;; Commentary:
;;
;; This package requires the \"jsonlint\" program, which can be installed using npm:
;;
;;    npm install jsonlint -g
;;
;; Usage:
;;
;;   (require 'flymake-json)
;;
;; Then, if you're using `json-mode':
;;
;;   (add-hook 'json-mode 'flymake-json-load)
;;
;; or, if you use `js-mode' for json:
;;
;;   (add-hook 'js-mode-hook 'flymake-json-maybe-load)
;;
;; otherwise:
;;
;;   (add-hook 'find-file-hook 'flymake-json-maybe-load)
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-jslint . [(20130613 202) ((flymake-easy (0 1))) "A flymake handler for javascript using jslint" single ";;; Commentary:
;;
;; References:
;;   http://www.emacswiki.org/cgi-bin/wiki/FlymakeJavaScript
;;   http://d.hatena.ne.jp/kazu-yamamoto/mobile?date=20071029
;;
;; Works with either \"jslint\" from jslint.com, or \"jsl\" from
;; javascriptlint.com. The default is \"jsl\", if that executable is
;; found at load-time. Otherwise, \"jslint\" is the default. If you want
;; to use the non-default checker, you can customize the values of
;; `flymake-jslint-command' and `flymake-jslint-args' accordingly.
;;
;; Usage:
;;   (require 'flymake-jslint)
;;   (add-hook 'js-mode-hook 'flymake-jslint-load)
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-jshint . [(20130610 257) ((flymake-easy (0 1))) "making flymake work with JSHint" single ";;; Commentary:

;; To use JSHint with Emacs, you will need JSHint installed and available on
;; your path.  You should be able to do

;; $ jshint

;; without problem.  To do this, you can install node.js, npm and
;; jshint by doing the following:

;; $ apt-get install nodejs # or your distro / OS equivalent
;; $ sudo npm install -g jshint

;; You will probably want to configure the warnings that JSHint
;; produces.  The full list is at http://www.jshint.com/options/ but
;; for reference I use:

;; { \"browser\": true, //browser constants, such as alert
;;   \"curly\": true, // require {} on one-line if
;;   \"undef\": true, // non-globals must be declared before use
;;   \"newcap\": true, // constructors must start with capital letter
;;   \"jquery\": true, // jQuery constants
;;   \"nomen\": false, // permit leading/trailing underscores, these do actually mean private in jQuery plugins
;;   \"nonew\": true, // don't permit object creation for side-effects only
;;   \"strict\": true // require \"use strict\";
;; }

;; Save this in a file called whatever.json and then set
;; jshint-configuration-path to point to it.

;;; Usage

;; Add to your Emacs config:

;; (require 'flymake-jshint)
;; (add-hook 'js-mode-hook 'flymake-jshint-load)

;; making sure that flymake-jshint.el is on your load-path.  If not,
;; also add to your config:

;; (add-to-list 'load-path \"~/.emacs.d/path/to/flymake-jshint.el\")

;;; Debugging

;; If JSHint isn't working for any reason, execute

;; M-x set-variable flymake-log-level <RET> 3

;; and you will see what is going wrong listed in the *Messages*
;; buffer.

;;; Alternatives

;; * https://github.com/lunaryorn/flycheck supports JSHint
;; * https://github.com/illusori/emacs-flymake is a fork of flymake
;;   that also supports JSHint (but does not support JSHint
;;   configuration)
;; * https://github.com/purcell/flymake-jslint will probably also
;;   work with JSHint

;;; Changelog

;; v2.0 -- Updated usage instructions following the port to flymake-easy
;; v1.3 -- Refactored to use flymake-easy

"]) (flymake-hlint . [(20130309 145) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single ";;; Commentary:
;; Usage:
;;   (require 'flymake-hlint)
;;   (add-hook 'haskell-mode-hook 'flymake-hlint-load)
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-haskell-multi . [(20130620 422) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar nil]) (flymake-haml . [(20130324 351) ((flymake-easy (0 1))) "A flymake handler for haml files" single ";;; Commentary:
;;
;; Usage:
;;   (require 'flymake-haml)
;;   (add-hook 'haml-mode-hook 'flymake-haml-load)
;;
;; `sass-mode' is a derived mode of 'haml-mode', so
;; `flymake-haml-load' is a no-op unless the current major mode is
;; `haml-mode'.
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flymake-go . [(20130314 741) ((flymake (0 4 13))) "A flymake handler for go-mode files" single nil]) (flymake-gjshint . [(20130327 532) nil "A flymake handler for javascript using both jshint and gjslint" single ";;; Commentary:

;; Usage:

;; Add to your Emacs config:

;;   (require 'flymake-gjshint)
;;   (add-hook 'js-mode-hook 'flymake-gjshint:load)
;;
;;
;; If you want to disable flymake-gjshint in a certain directory
;; (e.g. test code directory), set flymake-gjshint to nil in `.dir-locals.el'.
;;
;; Here\342\200\231s an example of a `.dir-locals.el' file:
;; -----------------------------------
;; ((nil . ((flymake-gjshint . nil))))
;; -----------------------------------
;;
;; Command:
;;
;; The following command is defined:
;;
;; * `flymake-gjshint:fixjsstyle'
;;   Fix many of the glslint errors in current buffer by fixjsstyle.
;;

"]) (flymake-elixir . [(20130810 717) nil "A flymake handler for elixir-mode .ex files." single ";;; Commentary:
;;
;; Usage:
;;   (require 'flymake-elixir)
;;   (add-hook 'elixir-mode-hook 'flymake-elixir-load)
;;
;; Based on flymake-ruby, from Steve Purcell
;;
;; Uses flymake-easy, from Steve Purcell

"]) (flymake-easy . [(20130907 131) nil "Helpers for easily building flymake checkers" single ";;; Commentary:

;; This library provides the `flymake-easy-load' helper function for
;; setting up flymake checkers. Just call that function with the
;; appropriate arguments in a major mode hook function. See
;; `flymake-ruby' for an example:
;; https://github.com/purcell/flymake-ruby

"]) (flymake-cursor . [(20130822 1032) nil "displays flymake error msg in minibuffer after delay" single nil]) (flymake-css . [(20121104 1104) ((flymake-easy (0 1))) "Flymake support for css using csslint" single ";;; Commentary:
;;
;; Usage:
;;   (require 'flymake-css)
;;   (add-hook 'css-mode-hook 'flymake-css-load)
;;
;; Beware that csslint is quite slow, so there can be a significant lag
;; between editing and the highlighting of resulting errors.
;;
;; Like the author's many other flymake-*.el extensions, this code is
;; designed to configure flymake in a buffer-local fashion, which
;; avoids the dual pitfalls of 1) inflating the global list of
;; `flymake-err-line-patterns' and 2) being required to specify the
;; matching filename extensions (e.g. \"*.css\") redundantly.
;;
;; Based mainly on the author's flymake-jslint.el, and using the
;; error regex from Arne J\303\270rgensen's similar flymake-csslint.el.
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

(require 'flymake-easy)

"]) (flymake-cppcheck . [(20140114 418) ((flymake-easy (0 9))) "Flymake work with Cppcheck for C/C++" single ";;; Commentary:

;; Please check the GitHub
;; (https://github.com/senda-akiha/flymake-cppcheck/)
;; for more information.

"]) (flymake-coffee . [(20130828 258) ((flymake-easy (0 1))) "A flymake handler for coffee script" single ";;; Commentary:
;;
;; Based in part on http://d.hatena.ne.jp/antipop/20110508/1304838383
;;
;; Usage:
;;   (require 'flymake-coffee)
;;   (add-hook 'coffee-mode-hook 'flymake-coffee-load)
;;
;; Executes \"coffeelint\" if available, otherwise \"coffee\".
;;
;; Uses flymake-easy, from https://github.com/purcell/flymake-easy

"]) (flycheck-tip . [(20140101 1243) ((flycheck (0 13)) (dash (1 2)) (emacs (24 1)) (popup (0 5 0))) "show flycheck's error by popup-tip" single ";;; Commentary:
;; see readme.md

"]) (flycheck-mercury . [(20140114 1201) ((flycheck (0 15)) (s (1 9 0)) (dash (2 4 0))) "Mercury support in Flycheck" single ";;; Commentary:

;; Add a Mercury checker to Flycheck using the Melbourne Mercury Compiler.

"]) (flycheck-ledger . [(20131218 324) ((flycheck (0 15))) "Flycheck integration for ledger files" single ";;; Commentary:

;; This flychecker uses the output of \"ledger balance\" on the current file to
;; find errors such as unbalanced transactions and syntax errors.

;;;; Setup

;; (eval-after-load 'flycheck '(require 'flycheck-ledger))

"]) (flycheck-hdevtools . [(20131130 1105) ((flycheck (0 15))) "A flycheck checker for Haskell using hdevtools" single ";;; Commentary:

;; Adds a Flycheck syntax checker for Haskell based on hdevtools.

;;;; Setup

;; (eval-after-load 'flycheck '(require 'flycheck-hdevtools))

"]) (flycheck-haskell . [(20140114 454) ((flycheck (0 16)) (haskell-mode (13 7)) (dash (2 4 0)) (f (0 11 0))) "Flycheck: Haskell configuration" tar ";;; Commentary:

;; Configure Haskell syntax checking by Flycheck.

;;;; Cabal support

;; Try to find Cabal project files for Haskell buffers, and configure the
;; Haskell syntax checkers in Flycheck according to the contents of the Cabal
;; file:
;;
;; - Add all source directories to the GHC search path

;;;; Cabal sandboxes

;; Try to find a Cabal sandbox configuration for this project, and configure the
;; Haskell syntax checkers in Flycheck to use the package database from the
;; Sandbox.

;;;; Setup

;; (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup)

"]) (flycheck-d-unittest . [(20140107 218) ((flycheck (0 14)) (dash (1 4 0))) "Add D unittest support to flycheck" single ";;; Commentary:

;; This library adds D unittest support to flycheck.
;;
;; Requirements:
;;   * DMD 2.063 or later
;;   * flycheck.el (https://github.com/flycheck/flycheck)
;;   * dash.el (https://github.com/magnars/dash.el)
;;
;; To use this package, add the following line to your .emacs file:
;;     (require 'flycheck-d-unittest)
;;     (setup-flycheck-d-unittest)
;; It detects any compile errors, warnings and deprecated features during unittest.
;;
;; Note: flycheck-d-unittest runs DMD with -unittest and -main option for unittesting.
;; Please enclose main function in version(!unittest) block as follows:
;;
;; ---
;; import std.stdio;
;;
;; version(unittest) {}
;; else
;; void main()
;; {
;;     writeln(\"Hello!\");
;; }
;;
;; unittest
;; {
;;     assert(1+2 == 3);
;; }
;; ---

"]) (flycheck-color-mode-line . [(20131125 2138) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single ";;; Commentary:
 
;; Colorize the mode line according to the Flycheck status.
;;
;; This package provides the `flycheck-color-mode-line-mode' minor mode which
;; changes the color of the mode line according to the status of Flycheck syntax
;; checking.
;;
;; To enable this mode in Flycheck, add it to `flycheck-mode-hook':
;;
;; (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)
;;
;; Thanks go to:
;; - Thomas J\303\244rvstrand (tjarvstrand) for the initial code from the excellent
;;   EDTS package
;; - Sebastian Wiesner (lunaryorn) for flycheck and his awesome support.
 
"]) (flycheck-cask . [(20140114 455) ((flycheck (0 14)) (dash (2 4 0)) (f (0 11 0))) "Cask support in Flycheck" single ";;; Commentary:

;; Add Cask support for Flycheck.

;; Configure Flycheck to initialize packages from Cask in Cask projects.

;;;; Setup

;; (add-hook 'flycheck-mode-hook #'flycheck-cask-setup)

"]) (flycheck . [(20140114 528) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (pkg-info (0 4)) (cl-lib (0 3)) (emacs (24 1))) "On-the-fly syntax checking (Flymake done right)" tar ";;; Commentary:

;; Modern on-the-fly syntax checking for GNU Emacs (aka \"flymake done right\")

;; Provide `flycheck-mode' which enables on-the-fly syntax checking for a large
;; number of different modes and languages (see `flycheck-checkers' for a
;; complete list).
;;
;; Support for new modes and languages can be added by defining a new syntax
;; checker (see `flycheck-define-checker').

"]) (flx-ido . [(20131030 1243) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single ";;; Commentary:

;; This package provides a more powerful alternative to `ido-mode''s
;; built-in flex matching.

;;; Acknowledgments

;; Scott Frazer's blog entry http://scottfrazersblog.blogspot.com.au/2009/12/emacs-better-ido-flex-matching.html
;; provided a lot of inspiration.
;;
;; ido-hacks was helpful for ido optimization and fontification ideas

;;; Installation:

;; Add the following code to your init file:
;;
;;     (require 'flx-ido)
;;     (ido-mode 1)
;;     (ido-everywhere 1)
;;     (flx-ido-mode 1)
;;     ;; disable ido faces to see flx highlights.
;;     (setq ido-use-faces nil)

"]) (flx . [(20130728 820) ((cl-lib (0 3))) "fuzzy matching with good sorting" single ";;; Commentary:

;; Implementation notes
;; --------------------
;;
;; Use defsubst instead of defun
;;
;; * Using bitmaps to check for matches worked out to be SLOWER than just
;;   scanning the string and using `flx-get-matches'.
;;
;; * Consing causes GC, which can often slowdown Emacs more than the benefits
;;   of an optimization.

;;; Acknowledgments

;; Scott Frazer's blog entry http://scottfrazersblog.blogspot.com.au/2009/12/emacs-better-ido-flex-matching.html
;; provided a lot of inspiration.
;; ido-hacks was helpful for ido optimization

"]) (floobits . [(20140106 1546) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar ";;; Commentary:
;;
;;    Real-time collaborative editing.
;;
;;  This plugin requires Python 2.6 or 2.7 and a Floobits account.
;;
;;  Usage
;;  -----
;;  All commands are documented in `apropos-command <RET> floobits'
;;
;;  `floobits-join-workspace <RET> https://floobits.com/owner/workspace/ <RET>'
;;  Join an existing floobits workspace.
;;
;;  `floobits-share-dir <RET> DIR <RET>'
;;  Create a workspace and populate it with the contents of the directory, DIR (or make it).
;;
;;  `floobits-leave-workspace <RET>'
;;  Leave the current workspace.
;;
;;  `floobits-summon <RET>'
;;  Summon everyone in the workspace to your cursor position.
;;
;;  `floobits-follow-mode-toggle <RET>'
;;  Toggle following of recent changes.
;;
;;  `floobits-clear-highlights <RET>'
;;  Clears all mirrored highlights.
;;

"]) (fliptext . [(20131114 218) nil "Input method for flipping characters upside down" single ";;; Commentary:

;; Provides an input method for flipping characters upside down by
;; selecting an appropriate character that looks upside down.
;; E.g. hello world -> p1\311\271o\312\215 o11\307\235\311\245.

;; Copy the file in your load path and load it with
;;   (require 'fliptext).
;; Activate it with C-u C-\\ fliptext RET.
;; Deactivate with C-\\.

;; I didn't use `quail-define-package', because i couldn't figure out,
;; how to `backward-char' after conversion.

;; This file used uni-input.el as example, in particular
;; `fliptext-input-activate' is based on it.

;; This file is *NOT* part of GNU Emacs.

"]) (flex-isearch . [(20130508 1503) nil "Flex matching (like ido) in isearch." single ";;; Commentary:

;; This was inspired by and based on Tomohiro Matsuyama's fuzzy.el.

;; This file defines a minor mode that allows flex matching in
;; isearch-mode.  The flex matching is very similar to the flex
;; matching in ido mode (see `ido-enable-flex-matching').  Given an
;; isearch string, it is transformed to a regexp that matches the
;; original and also similar strings (basically, strings that contain
;; the original characters in the same order, but possibly with other
;; characters in between).  You can redefine
;; `flex-isearch-compile-regexp' to change this behavior.

;; When `flex-isearch-mode' is enabled, the `flex-isearch-auto'
;; variable controls when the flex matching is activated.  See its
;; docstring for details.  Also, `isearch-forward' and
;; `isearch-backward' are advised so that double prefix args (C-u C-u
;; C-s) will use flex search.

;; Le Wang has improved this by providing a better
;; `flex-isearch-compile-regexp' and the advice on
;; `isearch-toggle-regexp'.

"]) (flex-autopair . [(20120809 518) nil "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." single ";;; Commentary:

;; ########   Compatibility   ########################################
;;
;; Works with Emacs-23.2.1, 23.1.1

;; ########   Quick start   ########################################
;;
;; Add to your ~/.emacs
;;
;; (require 'flex-autopair)
;; (flex-autopair-mode 1)

"]) (flatland-theme . [(20131204 858) nil "A simple theme for Emacs based on the Flatland theme for Sublime Text" single ";;; Commentary:

;; A port of the popular Sublime Text Flatland theme for Emacs 24

"]) (flash-region . [(20130923 1117) nil "Flash a region" single ";;; Commentary:

;; This package provides one function, `flash-region' that will
;; highlight a region with the supplied face for a specified amount
;; of time.  By default, the `highlight' face is used and the
;; timeout is set to 0.5

"]) (fixmee . [(20131106 706) ((button-lock (1 0 0)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) "Quickly navigate to FIXME notices in code" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'fixmee)
;;
;;     (global-fixmee-mode 1)
;;
;;     right-click on the word \"fixme\" in a comment
;;
;;     ;; for `next-error' support
;;     M-x fixmee-view-listing RET
;;
;; Explanation
;;
;; Fixmee-mode tracks \"fixme\" notices in code comments, highlights
;; them, ranks them by urgency, and lets you navigate to them quickly.
;;
;; A distinguishing feature of this library is that it tracks the
;; urgency of each notice, allowing the user to jump directly to
;; the most important problems.
;;
;; Urgency of \"fixme\" notices is indicated by repetitions of the final
;; character.  For example, one might write \"FIXMEEEEEEEEE\" for an
;; important issue.  The `fixmee-goto-nextmost-urgent' command will
;; navigate to the longest notice first.
;;
;; To use fixmee-mode, add the following to your ~/.emacs
;;
;;     (require 'fixmee)
;;     (global-fixmee-mode 1)
;;
;; Then, open some buffers and right-click on the word \"fixme\" in a
;; comment
;;
;; or press
;;
;;     C-c f
;;
;; or
;;
;;     M-x fixmee RET
;;
;; or
;;
;;    roll the mouse wheel when hovering over the text \"fixm\"
;;    in the modeline.
;;
;; or
;;
;;    execute `fixmee-view-listing' to navigate using
;;    `next-error' conventions.
;;
;; Key Bindings
;;
;; The default key bindings are
;;
;;     C-c f   `fixmee-goto-nextmost-urgent'
;;     C-c F   `fixmee-goto-prevmost-urgent'
;;     C-c v   `fixmee-view-listing'
;;     M-n     `fixmee-goto-next-by-position'      ; only when the point is
;;     M-p     `fixmee-goto-previous-by-position'  ; inside a \"fixme\" notice
;;
;; To constrain the nextmost/prevmost-urgent commands to the current
;; buffer only, use a universal prefix argument, eg
;;
;;     C-u C-c f
;;
;; When the smartrep package is installed, the \"C-c\" prefix need not
;; be used for consecutive fixmee-mode keyboard commands.  Instead,
;; just keep pressing \"f\" (or whichever key you set in customize).
;;
;; There is also a context menu and mouse-wheel bindings on the
;; minor-mode lighter in the modeline:
;;
;;             mouse-1  context menu
;;       wheel-down/up  next/prev by urgency
;;     M-wheel-down/up  next/prev by position
;;
;; Patterns
;;
;; The following fixme patterns are supported by default:
;;
;;     @@@
;;     XXX             ; only this one is case-sensitive
;;     todo
;;     fixme
;;
;; See Also
;;
;;     M-x customize-group RET fixmee RET
;;     M-x customize-group RET nav-flash RET
;;
;; Notes
;;
;;     Currently, only open buffers are searched, not files or
;;     projects.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     Requires: button-lock.el
;;               tabulated-list.el (included with Emacs 24.x)
;;
;;     Uses if present: smartrep.el, nav-flash.el, back-button.el,
;;                      string-utils.el
;;
;; Bugs
;;
;;     fixmee--listview-mode-map (the major-mode menu) does not work
;;     well as a context menu.
;;         - menu from major mode of selected window appears even when
;;           right-clicking in this window
;;         - mouse-event wrappers keep keyboard shortcuts from appearing
;;           in menu-bar
;;         - better to have a separate context menu attached to the
;;           entries, using a keymap text property
;;
;;     When comment-start is defined, only the first notice on a line
;;     is lit up by button-lock, though fixmee-mode is aware of multiple
;;     notices on a line.  This is worked around for the moment by
;;     stripping these cases from fixmee-notice-list.  Better would be
;;     to add comment-sensitivity logic to button-lock, and remove the
;;     comment-matching section of the regexp passed to button-lock.
;;
;;     Fixmee-maybe-turn-on gets called multiple times when a file
;;     is loaded.
;;
;;     Fixmee-buffer-include-functions may not contain the function
;;     'frame-bufs-associated-p, because a new buffer is not yet
;;     associated with the frame at the time the global mode check
;;     calls fixmee-maybe-turn-on.
;;
;;     Bug in tabulated-list: position of point is not maintained
;;     when sort headers are clicked while a different window is
;;     selected.
;;
;; TODO
;;
;;     Push mark for navigation which happens from the listview
;;
;;     There is no need for fixmee--listview-mode to be an interactive
;;     command.
;;
;;     Consider allowing all navigation commands to update the listview
;;     buffer (currently only next-error commands do so)
;;
;;     Display fully fontified context lines in listview buffer - some
;;     lines have fontification, seemingly at random.  Disabling
;;     whitespace trimming and excluded properties had no effect.
;;
;;     Multi-line context in listview buffer - tabulated-list accepts
;;     newlines, but data then runs out of the column on the next
;;     line.  Would need to pad to match column position.
;;
;;     Better feedback messages for end-of-list and start-of-list.
;;
;;     Bookmark integration? (implicit bookmarking on notices).
;;
;;     Wrap/cycle options on navigation-by-position.
;;
;;     How to get last-command when user does M-x? (smex is not helping
;;     here).  (nth 0 command-history) ?
;;
;;     Navigation can land on line near vertical edge of window -
;;     should respect user settings and scroll in as needed for
;;     context.
;;
;;     Project support.
;;
;;     Some kind of extra comment indicating a notice is to be ignored?
;;     Lead with a backwhack?
;;
;;; License
;;
;;    Simplified BSD License
;;
;;    Redistribution and use in source and binary forms, with or
;;    without modification, are permitted provided that the following
;;    conditions are met:
;;
;;       1. Redistributions of source code must retain the above
;;          copyright notice, this list of conditions and the following
;;          disclaimer.
;;
;;       2. Redistributions in binary form must reproduce the above
;;          copyright notice, this list of conditions and the following
;;          disclaimer in the documentation and/or other materials
;;          provided with the distribution.
;;
;;    This software is provided by Roland Walker \"AS IS\" and any express
;;    or implied warranties, including, but not limited to, the implied
;;    warranties of merchantability and fitness for a particular
;;    purpose are disclaimed.  In no event shall Roland Walker or
;;    contributors be liable for any direct, indirect, incidental,
;;    special, exemplary, or consequential damages (including, but not
;;    limited to, procurement of substitute goods or services; loss of
;;    use, data, or profits; or business interruption) however caused
;;    and on any theory of liability, whether in contract, strict
;;    liability, or tort (including negligence or otherwise) arising in
;;    any way out of the use of this software, even if advised of the
;;    possibility of such damage.
;;
;;    The views and conclusions contained in the software and
;;    documentation are those of the authors and should not be
;;    interpreted as representing official policies, either expressed
;;    or implied, of Roland Walker.
;;
"]) (fit-frame . [(20131226 1844) nil "Resize a frame.  In particular, fit a frame to its buffers." single ";;; Commentary:
;;
;;    Resize a frame.  In particular, fit a frame to its buffers.
;;
;;  Commands and user options (variables) are provided here to resize
;;  (shrink-wrap) a frame to fit its displayed buffers, its selected
;;  buffer, or the `fill-column' width.
;;
;;  The command to fit a frame is `fit-frame'.  The main user options
;;  for this command are `fit-frame-inhibit-fitting-flag' and
;;  `fit-frame-max-*[-percent]'.  You can use a prefix argument to
;;  control the behavior of command `fit-frame'.
;;
;;  To take full advantage of the functionality provided here, load
;;  the companion library `autofit-frame.el', to modify primitives
;;  `display-buffer' and `switch-to-buffer' so they automatically fit
;;  all frames that have a single window.  Library `autofit-frame.el'
;;  loads library `fit-frame.el'.
;;
;;  Put this in your initialization file (`~/.emacs'):
;;
;;    (require 'fit-frame)
;;    (add-hook 'after-make-frame-functions 'fit-frame)
;;
;;  The second line here causes newly created frames to be fitted to
;;  their buffer.  Even if you load library `autofit-frame.el', you
;;  will still need to do this, because `display-buffer' and
;;  `switch-to-buffer' are not called when a new frame is created.
;;
;;  Command `fit-frame' does *not* take the following into account,
;;  when determining the proper frame size:
;;
;;   - font sizes, other than the default frame font
;;   - characters that have special widths
;;
;;  NOTE: If you also use library `frame-cmds.el', and you are on MS
;;  Windows, then load that library after `fit-frame.el'.  This is
;;  because the commands `maximize-frame' and `restore-frame' defined
;;  there are more general and non-Windows-specific.
;;
;;  Suggested key bindings:
;;
;;   (global-set-key [(control ?x) (control ?_)] 'fit-frame)
;;   (global-set-key [vertical-line down-mouse-1]
;;                   'fit-frame-or-mouse-drag-vertical-line)
;;
;;  Customize the menu-bar.  Uncomment this to try it out.
;;
;;   (defvar menu-bar-frames-menu (make-sparse-keymap \"Frames\"))
;;   (define-key global-map [menu-bar frames]
;;     (cons \"Frames\" menu-bar-frames-menu)))
;;   (define-key menu-bar-frames-menu [fit-frame]
;;     '(\"Fit This Frame\" . fit-frame))
;;
;;
;;  Commands defined here:
;;
;;    `fit-frame', `fit-frame-or-mouse-drag-vertical-line',
;;    `fit-frame-maximize-frame', `fit-frame-minimize-frame',
;;    `fit-frame-restore-frame', `fit-frame-to-image',
;;    `maximize-frame', `minimize-frame', `restore-frame',
;;
;;  User options (variables) defined here:
;;
;;    `fit-frame-crop-end-blank-flag', `fit-frame-empty-height',
;;    `fit-frame-empty-special-display-height',
;;    `fit-frame-empty-special-display-width',
;;    `fit-frame-empty-width', `fit-frame-fill-column-margin',
;;    `fit-frame-inhibit-fitting-flag', `fit-frame-max-height',
;;    `fit-frame-max-height-percent', `fit-frame-max-width',
;;    `fit-frame-max-width-percent', `fit-frame-min-height',
;;    `fit-frame-min-width', `fit-frame-skip-header-lines-alist'.
;;
;;  Non-interactive functions defined here:
;;
;;    `fit-frame-fringe-width', `fit-frame-max-frame-size',
;;    `fit-frame-max-height', `fit-frame-max-width',
;;    `fit-frame-max-window-size', `fit-frame-same-column-windows',
;;    `fit-frame-same-row-windows', `fit-frame-thumbnail-factor'.
;;
;;
;;  See also these files for other frame commands:
;;
;;     `autofit-frame.el' - See above.
;;
;;     `frame-cmds.el' - Various frame and window commands, including
;;                       commands to incrementally resize frames and
;;                       better, non-Windows-specific commands to
;;                       maximize and restore frames.
;;
;;     `doremi-frm.el' - Incrementally adjust frame properties
;;                       using arrow keys and/or mouse wheel.
;;
;;  This file was formerly called `shrink-fit.el', then
;;  `resize-frame.el', and command `fit-frame' was formerly called
;;  `shrink-frame-to-fit', then `resize-frame'.
;;
;;  TO DO:
;;
;;  Emacs needs a command similar to `fit-frame' for windows, that is,
;;  a command that will fit the existing windows of a frame to their
;;  buffers, as well as possible.  That could be then be used in
;;  combination with `fit-frame'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (fiplr . [(20140105 356) ((grizzl (0 1 0)) (cl-lib (0 1))) "Fuzzy Search for Files in Projects" tar nil]) (findr . [(20130824 1207) nil "Breadth-first file-finding facility for (X)Emacs" single ";;; Commentary:

;; This code contains a command, called `findr', which allows you to
;; search for a file breadth-first.  This works on UNIX, Windows, and
;; over the network, using efs and ange-ftp. It's pretty quick, and (at
;; times) is a better and easier alternative to other mechanisms of
;; finding nested files, when you've forgotten where they are.

;; You pass `findr' a regexp, which must match the file you're looking
;; for, and a directory, and then it just does its thing:

;; M-x findr <ENTER> ^my-lib.p[lm]$ <ENTER> c:/ <ENTER>

;; If called interactively, findr will prompt the user for opening the
;; found file(s).  Regardless, it will continue to search, until
;; either the search is complete or the user quits the search.
;; Regardless of the exit (natural or user-invoked), a findr will
;; return a list of found matches.

;; Two other entrypoints let you to act on regexps within the files:
;; `findr-search' to search
;; `findr-query-replace' to replace


;;; Installation:

;; (autoload 'findr \"findr\" \"Find file name.\" t)
;; (define-key global-map [(meta control S)] 'findr)

;; (autoload 'findr-search \"findr\" \"Find text in files.\" t)
;; (define-key global-map [(meta control s)] 'findr-search)

;; (autoload 'findr-query-replace \"findr\" \"Replace text in files.\" t)
;; (define-key global-map [(meta control r)] 'findr-query-replace)


;; Change Log:

;; 0.1: Added prompt to open file, if uses so chooses, following
;;      request and code example from Thomas Plass.
;; 0.2: Made `findr' not stop after the first match, based on the
;;      request by Thomas Plass.
;;      Also, fixed a minor bug where findr was finding additional
;;      files that were not correct matches, based on
;;      `file-relative-name' misuse (I had to add the 2nd arg to it).
;; 0.3: Added a `sit-for' for redisplay reasons.
;;      Modifications as suggested by RMS: e.g. docstring.
;; 0.4  Added `findr-query-replace', courtesy of Dan Nelsen.
;; 0.5  Fixed spelling and minor bug in `findr-query-replace' when
;;      non-byte-compiled.
;; 0.6  http://groups.google.com/groups?selm=cxjhfml4b2c.fsf_-_%40acs5.bu.edu :
;; From: David Bakhash (cadet@bu.edu)
;; Subject: Re: latest version of findr.el (5)
;; Date: 1999/07/31
;; Courtesy of Dan Nelsen, this version has search-and-replace capabilities.
;; it's still a bit experimental, so I wouldn't expect too much of it.  But it
;; hasn't been tested yet for friendly behavior.
;;
;; The function `findr-query-replace' wasn't working unless you byte-compile the
;; file.  But, since findr is really designed for speed, that's not a bad thing
;; (i.e. it forces you to byte-compile it).  It's as simple as:
;;
;; M-x byte-compile-file <ENTER> /path/to/findr.el <ENTER>
;;
;; anyhow, I think it should work now.
;;
;; dave
;;
;; 0.7: Added `findr-search', broke `findr' by Patrick Anderson
;; 0.8: fixed 0.7 breakage by Patrick Anderson
;; 0.9: Added customize variables, added file/directory filter regexp
;;      minibuffer history by attila.lendvai@gmail.com
;; 0.9.1: Updated date at the top of the file, added .svn filter
;; 0.9.2: Added support for skipping symlinks by attila.lendvai@gmail.com
;; 0.9.3: Smarter minibuffer handling by attila.lendvai@gmail.com
;; 0.9.4: Better handle symlinks by levente.meszaros@gmail.com
;; 0.9.5: Collect resolved files in the result by attila.lendvai@gmail.com
;; 0.9.6: Use a seen hashtable to deal with circles through symlinks by attila.lendvai@gmail.com
;; 0.9.7: Fix wrong calls to message by Michael Heerdegen
;; 0.9.8: Fix 'symbol-calue' typo in non-exposed code path by Michael Heerdegen
;; 0.9.9: Call message less frequent by attila.lendvai@gmail.com
;; 0.9.10: match findr-skip-directory-regexp agaisnt the whole path by attila.lendvai@gmail.com
;; 0.9.11: Fix header line to use ELPA-compliant triple dash by Steve Purcell

(require 'cl)

(provide 'findr)

(defgroup findr nil
  \"findr configuration.\"
  :prefix \"findr-\"
  :group 'findr)

;; To build the expression below:
;;(let ((result nil))
;;  (dolist (el (list \".backups\" \"_darcs\" \".git\" \"CVS\" \".svn\"))
;;    (setf result (if result
;;                     (concatenate 'string result \"\\\\|\")
;;                     \"\"))
;;    (setf result (concatenate 'string result \"^\" (regexp-quote el) \"$\")))
;;  result)

(defcustom findr-skip-directory-regexp \"\\\\/.backups$\\\\|/_darcs$\\\\|/\\\\.git$\\\\|/CVS$\\\\|/\\\\.svn$\"
  \"A regexp filter to skip directory paths.\"
  :type 'string
  :group 'findr)

(defcustom findr-skip-file-regexp \"^[#\\\\.]\"
  \"A regexp that all file names will be matched against (including directories) and matching files are skipped.\"
  :type 'string
  :group 'findr)

(defvar findr-search-regexp-history nil)
(defvar findr-search-replacement-history nil)
(defvar findr-file-name-regexp-history nil)
(defvar findr-directory-history nil)

(defun findr-propertize-string (string properties)
  (add-text-properties 0 (length string) properties string)
  string)

(defmacro findr-with-infrequent-message (&rest body)
  (let ((last-message-at (gensym \"last-message-at\")))
    `(let ((,last-message-at 0))
       (labels ((message* (message &rest args)
                  (when (> (- (time-to-seconds) ,last-message-at) 0.5)
                    (setq ,last-message-at (time-to-seconds))
                    (apply 'message message args))))
         ,@body))))

(defun findr-propertize-prompt (string)
  (findr-propertize-string string '(read-only t intangible t)))

(defun* findr-read-from-minibuffer (prompt history &key initial-content
                                           store-empty-answer-in-history)
  (let ((minibuffer-message-timeout 0)
        (history-position (position initial-content (symbol-value history)
                                    :test 'string=)))
    (let ((result (read-from-minibuffer
                   (findr-propertize-prompt prompt)
                   initial-content nil nil (if (and (not (consp history))
                                                    history-position)
                                               (cons history (1+ history-position))
                                               history))))
      (when (and store-empty-answer-in-history
                 (zerop (length result)))
        (setf (symbol-value history)
              (delete-if (lambda (el)
                           (zerop (length el)))
                         (symbol-value history)))
        (push result (symbol-value history)))
      result)))

(defun* findr-read-from-minibuffer-defaulting (prompt history &key store-empty-answer-in-history)
  (let* ((default (if (consp history)
                      (elt (symbol-value (car history)) (cdr history))
                      (first (symbol-value history))))
         (result (findr-read-from-minibuffer
                  (format prompt (or default \"\"))
                  history
                  :store-empty-answer-in-history store-empty-answer-in-history)))
    (if (= (length result) 0)
        default
        result)))

(defun findr-read-search-regexp (&optional prompt)
  (findr-read-from-minibuffer-defaulting
   \"Search through files for (regexp, default: \\\"%s\\\"): \"
   'findr-search-regexp-history))

(defun findr-read-file-regexp (&optional prompt)
  (findr-read-from-minibuffer
   \"Look in these files (regexp): \"
   'findr-file-name-regexp-history
   :initial-content (first findr-file-name-regexp-history)
   :store-empty-answer-in-history t))

(defun findr-read-starting-directory (&optional prompt)
  (setq prompt (or prompt \"Start in directory: \"))
  (if (and (fboundp 'ido-read-directory-name)
           ido-mode)
      (ido-read-directory-name prompt)
      (apply 'read-directory-name
             (append
              (list prompt default-directory default-directory t nil)
              (when (featurep 'xemacs)
                (list 'findr-directory-history))))))

;;;; breadth-first file finder...

(defun* findr (name dir &key (prompt-p (interactive-p)) (skip-symlinks nil) (resolve-symlinks t))
  \"Search directory DIR breadth-first for files matching regexp NAME.
If PROMPT-P is non-nil, or if called interactively, Prompts for visiting
search result\\(s\\).\"
  (findr-with-infrequent-message
    (let ((*dirs* (findr-make-queue))
          (seen-directories (make-hash-table :test 'equal))
          *found-files*)
      (labels ((findr-1 (dir)
                 (message* \"Collecting in dir %s\" dir)
                 (let ((files (directory-files dir t \"\\\\w\")))
                   (loop
                     for file in files
                     for fname = (file-relative-name file dir)
                     when (and (file-directory-p file)
                               (not (string-match findr-skip-directory-regexp file))
                               (not (gethash (file-truename file) seen-directories))
                               (or (not skip-symlinks)
                                   (not (file-symlink-p file))))
                     do (progn
                          (print file)
                          (setf (gethash (file-truename file) seen-directories) t)
                          (findr-enqueue file *dirs*))
                     when (and (string-match name fname)
                               (not (string-match findr-skip-file-regexp fname))
                               (or (not skip-symlinks)
                                   (not (file-symlink-p file))))
                     do
                     ;; Don't return directory names when
                     ;; building list for `tags-query-replace' or `tags-search'
                     ;;(when (and (file-regular-p file)
                     ;;           (not prompt-p))
                     ;;  (push file *found-files*))

                     ;; _never_ return directory names
                     (when (file-regular-p file)
                       (push (if resolve-symlinks
                                 (file-truename file)
                                 file)
                             *found-files*))
                     (message* \"Collecting file %s\" file)
                     (when (and prompt-p
                                (y-or-n-p (format \"Find file %s? \" file)))
                       (find-file file)
                       (sit-for 0)	; redisplay hack
                       )))))
        (unwind-protect
             (progn
               (findr-enqueue dir *dirs*)
               (while (findr-queue-contents *dirs*)
                 (findr-1 (findr-dequeue *dirs*)))
               (message \"Searching... done.\"))
          (return-from findr (nreverse *found-files*)))))))

(defun findr-query-replace (from to name dir)
  \"Do `query-replace-regexp' of FROM with TO, on each file found by findr.
If you exit (\\\\[keyboard-quit] or ESC), you can resume the query replace
with the command \\\\[tags-loop-continue].\"
  (interactive (let ((search-for (findr-read-search-regexp \"Search through files for (regexp): \")))
                 (list search-for
                       (findr-read-from-minibuffer-defaulting
                        (format \"Query replace '%s' with %s: \"
                                search-for \"(default: \\\"%s\\\")\")
                        'findr-search-replacement-history)
                       (findr-read-file-regexp)
                       (findr-read-starting-directory))))
  (tags-query-replace from to nil '(findr name dir)))

(defun findr-search (regexp files dir)
  \"Search through all files listed in tags table for match for REGEXP.
Stops when a match is found.
To continue searching for next match, use command \\\\[tags-loop-continue].\"
  (interactive (list (findr-read-search-regexp)
                     (findr-read-file-regexp)
                     (findr-read-starting-directory)))
  (tags-search regexp '(findr files dir)))


(defun findr-find-files (files dir)
  \"Same as `findr' except file names are put in a compilation buffer.\"
  (interactive (list (findr-read-file-regexp)
                     (findr-read-starting-directory)))
  ;; TODO: open a scratch buffer or store in the clipboard
  (mapcar (lambda (file)
            (message \"%s\" file))
          (findr files dir)))

;;;; Queues

(defun findr-make-queue ()
  \"Build a new queue, with no elements.\"
  (let ((q (cons nil nil)))
    (setf (car q) q)
    q))

(defun findr-enqueue (item q)
  \"Insert item at the end of the queue.\"
  (setf (car q)
        (setf (rest (car q))
              (cons item nil)))
  q)

(defun findr-dequeue (q)
  \"Remove an item from the front of the queue.\"
  (prog1 (pop (cdr q))
    (when (null (cdr q))
      (setf (car q) q))))

(defsubst findr-queue-contents (q)
  (cdr q))

;;; findr.el ends here
"]) (finder+ . [(20131226 1844) nil "Extensions to standard library finder.el" single ";;; Commentary:
;;
;;  Extensions to standard library finder.el
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (find-things-fast . [(20120920 1804) nil "Find things fast, leveraging the power of git" single ";;; Commentary:

;; This file provides methods that quickly get you to your destination inside
;; your current project, leveraging the power of git if you are using it to
;; store your code.

;; A project is defined as a directory which meets one of these conditions in
;; the following order:
;;
;; - The presence of a `.dir-locals.el' file (emacs23 style) or a
;;   `.emacs-project' file (`project-local-variables' style).
;; - The git repository that the current buffer is in.
;; - The mercurial repository the current buffer is in.
;; - The project root defined in `project-root.el', a library not included with
;;   GNU Emacs.
;; - The current default-directory if none of the above is found.

;; When we're in a git repository, we use git-ls-files and git-grep to speed up
;; our searching. Otherwise, we fallback on find statements. As a special
;; optimization, we prune \".svn\" and \".hg\" directories whenever we find.

;; ftf provides three main user functions:
;;
;; - `ftf-find-file' which does a filename search. It has been tested on large
;;   projects; it takes slightly less than a second from command invocation to
;;   prompt on the Chromium source tree 9,183 files as of the time of
;;   this writing).
;;
;;   It uses git-ls-files for speed when available (such as the Chromium tree),
;;   and falls back on a find statement at the project root/default-directory
;;   when git is unavailable.
;;
;; - `ftf-grepsource' which greps all the files for the escaped pattern passed
;;   in at the prompt.
;;
;;   It uses git-grep for speed when available (such as the Chromium tree),
;;   and falls back on a find|xargs grep statement when not.
;;
;; - The `with-ftf-project-root' macro, which locally changes
;;   `default-directory' to what find-things-fast thinks is the project
;;   root. Two trivial example functions, `ftf-gdb' and `ftf-compile' are
;;   provided which show it off.

;; By default, it looks only for files whose names match `ftf-filetypes'. The
;; defaults were chosen specifically for C++/Chromium development, but people
;; will probably want to override this so we provide a helper function you can
;; use in your mode hook, `ftf-add-filetypes'. Example:
;;
;; (add-hook 'emacs-lisp-mode-hook
;;           (lambda (ftf-add-filetypes '(\"*.el\" \"*.elisp\"))))

;; If `ido-mode' is enabled, the menu will use `ido-completing-read'
;; instead of `completing-read'.

;; This file was based on the `find-file-in-project.el' by Phil Hagelberg and
;; Doug Alcorn which can be found on the EmacsWiki. Obviously, the scope has
;; greatly expanded.

;; Recommended binding:
;; (global-set-key (kbd [f1]) 'ftf-find-file)
;; (global-set-key (kbd [f2]) 'ftf-grepsource)
;; (global-set-key (kbd [f4]) 'ftf-gdb)
;; (global-set-key (kbd [f5]) 'ftf-compile)

"]) (find-file-in-repository . [(20130221 511) nil "Quickly find files in a git, mercurial or other repository" single ";;; Commentary:

;; This libaray provides a drop-in replacement for find-file (ie. the
;; \"C-x f\" command), that auto-completes all files in the current git,
;; mercurial, or other type of repository. When outside of a
;; repository, find-file-in-repository conveniently drops back to
;; using find-file, (or ido-find-file), which makes it a suitable
;; replacement for the \"C-x f\" keybinding.
;;
;; It is similar to, but faster and more robust than the find-file-in-project
;; package. It relies on git/mercurial/etc to provide fast cached file name
;; completions, which means that repository features such as
;; .gitignore/.hgignore/etc are fully supported out of the box.
;;
;; This library currently has support for:
;;     git, mercurial, darcs, bazaar, monotone, svn
;;
;; Contributions for support of other repository types are welcome.
;; Please send a pull request to
;; https://github.com/hoffstaetter/find-file-in-repository and I will
;; be happy to include your modifications.
;;
;; Recommended keybinding:
;;    (global-set-key (kbd \"C-x f\") 'find-file-in-repository)

"]) (find-file-in-project . [(20120716 1655) nil "Find files in a project quickly." single ";;; Commentary:

;; This library provides a couple methods for quickly finding any file
;; in a given project.  It depends on GNU find.

;; A project is found by searching up the directory tree until a file
;; is found that matches `ffip-project-file'.  (\".git\" by default.)
;; You can set `ffip-project-root-function' to provide an alternate
;; function to search for the project root.  By default, it looks only
;; for files whose names match `ffip-patterns',

;; If you have so many files that it becomes unwieldy, you can set
;; `ffip-find-options' to a string which will be passed to the `find'
;; invocation in order to exclude irrelevant subdirectories.  For
;; instance, in a Ruby on Rails project, you may be interested in all
;; .rb files that don't exist in the \"vendor\" directory.  In that case
;; you could set `ffip-find-options' to \"-not -regex \\\".*vendor.*\\\"\".

;; All these variables may be overridden on a per-directory basis in
;; your .dir-locals.el.  See (info \"(Emacs) Directory Variables\") for
;; details.

;; Recommended binding: (global-set-key (kbd \"C-x f\") 'find-file-in-project)

"]) (fill-column-indicator . [(20130807 619) nil "Graphically indicate the fill column" tar ";;; Commentary:

;; Many modern editors and IDEs can graphically indicate the location of the
;; fill column by drawing a thin line (in design parlance, a `rule') down the
;; length of the editing window.  Fill-column-indicator implements this
;; facility in Emacs.

;; PLEASE NOTE: There is a small incompatibility between this package and the
;; current stable Emacs relase (v24.3).  A bug in Emacs's internal display
;; routine that was introduced shortly before that release can cause vertical
;; motion commands to skip blank lines when fci-mode is active.  This has
;; been fixed in Emacs trunk.  See github.com/alpaker/Fill-Column-Indicator/issues/31
;; for further discussion.

;; Installation and Usage
;; ======================

;; Put this file in your load path and put:
;;
;;   (require 'fill-column-indicator)
;;
;; in your init file.

;; To toggle graphical indication of the fill column in a buffer, use the
;; command `fci-mode'.
 
;; Configuration
;; =============

;; By default, fci-mode draws its vertical indicator at the fill column.  If
;; you'd like it to be drawn at another column, set `fci-rule-column' to the
;; column number.  (A case in which this might be useful is when you want to
;; fill comments at, for example, column 70, but want a vertical rule at
;; column 80 or 100 to indicate the maximum line length for code.)  The
;; default behavior (showing the indicator at the fill column) is specified
;; by setting fci-rule-column to nil.  Note that this variable becomes buffer
;; local when set.

;; On graphical displays the fill-column rule is drawn using a bitmap
;; image.  Its color is controlled by the variable `fci-rule-color', whose
;; value can be any valid color name.  The rule's width in pixels is
;; determined by the variable `fci-rule-width'; the default value is 1.

;; The rule can be drawn as a solid or dashed line, controlled by the
;; variable `fci-rule-use-dashes'; the default is nil.  The dash appearance is
;; controlled by `fci-dash-pattern', which is the ratio of dash length to
;; line height; the default is 0.75. (The value should be a number between 0
;; and 1; values outside that interval are coerced to the nearest endpoint.)

;; The image formats fci-mode can use are XPM and PBM.  If Emacs has been
;; compiled with the appropriate library it uses XPM images by default; if
;; not it uses PBM images, which are natively supported.  You can specify a
;; particular choice of format by setting `fci-rule-image-format' explicitly
;; to xpm or pbm.

;; On character terminals the rule is drawn using the character specified by
;; `fci-rule-character'; the default is `|' (ascii 124).  If
;; `fci-rule-character-color' is nil, then it is drawn using fci-rule-color
;; (or the closest approximation thereto that the terminal is capable of); if
;; it is a color name, then that color is used instead.

;; If you'd like the rule to be drawn using fci-rule-character even on
;; graphical displays, set `fci-always-use-textual-rule' to a non-nil value.

;; These variables (as well as those described in the next section) can be
;; given buffer-local bindings.

;; Other Options
;; =============

;; When `truncate-lines' is nil, the effect of drawing a fill-column rule is
;; very odd looking. Indeed, it makes little sense to use a rule to indicate
;; the position of the fill column in that case (the positions at which the
;; fill column falls in the visual display space won't, in general, be
;; collinear).  For this reason, fci-mode sets truncate-lines to t in buffers
;; in which it is enabled and restores it to its previous value when
;; disabled.  You can turn this feature off by setting
;; `fci-handle-truncate-lines' to nil.

;; If `line-move-visual' is t, then vertical navigation can behave oddly in
;; several edge cases while fci-mode is enabled (this is due to a bug in
;; Emacs's C code).  Accordingly, fci-mode sets line-move-visual to nil in
;; buffers in which it is enabled and restores it to its previous value when
;; disabled.  This can be suppressed by setting `fci-handle-line-move-visual'
;; to nil.  (But you shouldn't want to do this.  There's no reason to use
;; line-move-visual if truncate-lines is t, and it doesn't make sense to use
;; something like fci-mode when truncate-lines is nil.)

;; Fci-mode needs free use of two characters (specifically, it needs the use
;; of two characters whose display table entries it can change
;; arbitrarily).  Its defualt is to use the first two characters of the
;; Private Use Area of the Unicode BMP, viz. U+E000 and U+E001.  If you need
;; to use those characters for some other purpose, set `fci-eol-char' and
;; `fci-blank-char' to different values.

;; Troubleshooting
;; ===============

;; o Fci-mode is intended to be used with monospaced fonts.  If you're using
;;   a monospaced font and the fill-column rule is missing or misaligned on a
;;   few lines but otherwise appears normal, then most likely (a) there are
;;   non-ascii characters on those lines that are being displayed using a
;;   non-monospaced font, or (b) your font-lock settings use bold or italics
;;   and those font variants aren't monospaced.

;; o Fci-mode in not currently compatible with Emacs's
;;   `show-trailing-whitespace' feature (given the way the latter is
;;   implemented, such compatibility is going to be hard to achieve).  A
;;   workaround is to configure `whitespace-mode' to replicate the
;;   functionality of show-trailing-whitespace.  This can be done with the
;;   following setting:
;;
;;     (setq whitespace-style '(face trailing))
;;
;;  With this, whitespace-mode produces the same basic effect as a non-nil
;;  value of show-trailing-whitespace, and compatibility with fci-mode is not
;;  a problem.

;; Known Issues
;; ============

;; o The indicator extends only to end of the buffer contents (as opposed to
;;   running the full length of the editing window).

;; o When portions of a buffer are invisible, such as when outline-mode is
;;   used to hide certain lines, the fill-column rule is hidden as well.

;; o Fci-mode should work smoothly when simultaneously displaying the same
;;   buffer on both a graphical display and on a character terminal.  It does
;;   not currently support simultaneous display of the same buffer on window
;;   frames with different default font sizes. (It would be feasible to
;;   support this use case, but thus far there seems to be no demand for
;;   it.)

;; o An issue specific to the Mac OS X (NextStep) port, versions 23.0-23.2:
;;   Emacs won't, in these particular versions, draw a cursor on top of an
;;   image.  Thus on graphical displays the cursor will disappear when
;;   positioned directly on top of the fill-column rule.  The best way to
;;   deal with this is to upgrade to v23.3 or v24 (or downgrade to v22).  If
;;   that isn't practical, a fix is available via the mini-package
;;   fci-osx-23-fix.el, which can be downloaded from:
;;
;;     github.com/alpaker/Fill-Column-Indicator
;;
;;  Directions for its use are given in the file header.

;; Todo
;; ====

;; o Accommodate non-nil values of `hl-line-sticky-flag' and similar cases.

;; o Accommodate linum-mode more robustly.

;; o Compatibility with non-nil `show-trailing-whitespace.'

;; Acknowledgements
;; ================

;; Thanks to Ami Fischman, Christopher Genovese, Michael Hoffman, Jos\303\251
;; Alfredo Romero L., R. Lange, Joe Lisee, Jos\303\251 Lombera, Frank Meffert,
;; Mitchell Peabody, sheijk, and an anonymous BT subscriber for bug reports
;; and suggestions.  Special thanks to lomew, David R\303\266thlisberger, and P\303\244r
;; Wieslander for code contributions.

"]) (filesets+ . [(20131226 1842) nil "Extensions to `filesets.el'." single ";;; Commentary:
;;
;;  Extensions to `filesets.el'.
;;
;;  This library provides some fixes to standard library
;;  `filesets.el'.  The reference version of that library is 1.8.4,
;;  but I believe the same fixes are appropriate for other versions
;;  (e.g. 2.2, named `filesets2.el', which is the latest version by
;;  the original author, at
;;  http://members.a1.net/t.link/CompEmacsFilesets.html).
;;
;;  Put this in your initialization file (`~/.emacs'):
;;
;;    (require 'filesets+)
;;    (filesets-init) ; Enable filesets
;;
;;  You should also customize the following two options, to put the
;;  `Filesets' menu on the `File' menu just before item `Open
;;  File...':
;;
;;   `filesets-menu-path'   - value should be (\"file\")
;;   `filesets-menu-before' - value should be \"Open File...\"
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (files+ . [(20131226 1841) nil "Enhancements of standard library `files.el'." single ";;; Commentary:
;;
;;    Enhancements of standard library `files.el'.
;;
;;  Commands defined here:
;;
;;    `dired-describe-listed-directory',
;;    `dired-mouse-describe-listed-directory',
;;
;;
;;  ***** NOTE: The following macro defined in `files.el' has been
;;              COPIED HERE:
;;
;;    `minibuffer-with-setup-hook' (Emacs 22 & 23.1 only).
;;
;;  ***** NOTE: The following functions defined in `files.el' have been
;;              REDEFINED HERE:
;;
;;    `display-buffer-other-frame' - Use `read-buffer'.
;;                                   Do not select the buffer.
;;                                   (Emacs 20-23 only)
;;    `find-file-read-args' - In Dired, use file at cursor as default
;;                            (Emacs 22 & 23.1 only).
;;    `insert-directory' - Add file count in Dired for each dir.
;;    `switch-to-buffer-other-frame'  - Use `read-buffer'.
;;                                      Return the buffer switched to.
;;                                      (Emacs 20-23 only)
;;    `switch-to-buffer-other-window' -
;;       Use `read-buffer'.
;;       Raise frame of selected window (for non-nil `pop-up-frames').
;;       (Emacs 20-23 only)
;;
;;  Load this library after loading the standard library `files.el'.
;;  However, if you use MS Windows, MS-DOS, or MacOS, then you will
;;  likely want to use library `ls-lisp+.el' together with
;;  `files+.el', to use an Emacs Lisp-only definition of
;;  `insert-directory'.
;;
;;  In that case, do *NOT* load `files+.el' directly.  Instead, just
;;  load `ls-lisp+.el' - it will load `ls-lisp.el' and `files+.el'.
;;  That is, do only this in your init file:
;;
;;   (require 'ls-lisp+)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (figlet . [(20120601 1315) nil "Annoy people with big, ascii art text" single ";;; Commentary:

;; To use this feature simple eval (require 'figlet) type M-x figlet
;; and you will be asked for a string. If you use a prefix (C-u M-x
;; figlet) then you will be asked for a font.

;; Have a look at `figlet-comment', `figlet-figletify-region' and
;; `figlet-figletify-region-comment'.

;; Warning, leaving large ascii art text in your teams codebase might
;; cause an outbreak of physical violence.

(defvar figlet-fonts '())
(defvar figlet-default-font \"small\"
  \"Default font to use when none is supplied.\")
(defvar figlet-fonts-dir-candidates
  '(\"/usr/share/figlet\"
    \"/usr/local/share/figlet\")
  \"List of directories which are to be searched for fonts.\")
(defvar figlet-options '()
  \"List of options for the figlet call.\")

(defun figlet-get-font-list ()
  \"Get a list of potential figlet fonts by testing each directory
in `figlet-fonts-dir-candidates'\"
  (if (null figlet-fonts)
      (setq figlet-fonts
            (catch 'found
              (mapc (lambda (d)
                      (let ((default-directory d)
                            (fonts (directory-files d nil \"^[^.].+\\.flf$\")))
                        (when (length fonts)
                          (throw 'found fonts))))
                    figlet-fonts-dir-candidates)))
      figlet-fonts))

;;;###autoload
(defun figlet (string)
  \"Pass a string through figlet and insert the output at
point. Use a prefix arg to be promted for a font.\"
  (interactive \"sTo be fug: \")
  (let* ((fonts (figlet-get-font-list))
         (font (if current-prefix-arg
                   (if fonts
                       (completing-read \"Font: \" fonts nil t)
                       (read-from-minibuffer \"Font: \" figlet-default-font))
                   figlet-default-font)))
    (insert
     (with-temp-buffer
       (call-process \"figlet\" nil t t
                     (mapconcat 'identity figlet-options \" \")
                     \"-f\" font string)
       (goto-char (point-min))
       (re-search-forward \"^.\" nil t)
       (delete-region (point-min) (point-at-bol))
       (re-search-forward \"^[[:blank:]]*$\" nil t)
       (delete-region (point) (point-max))
       (delete-trailing-whitespace)
       (buffer-substring (point-min) (point-max))))))

;;;###autoload
(defun figlet-comment (string)
  \"Insert a figlet string just as `figlet' would but comment the
result (using `comment-region')\"
  (interactive \"sTo be fug: \")
  (let ((start (point)))
    (save-excursion
      (figlet string)
      (comment-region start (point)))))

;;;###autoload
(defun figlet-figletify-region (start end)
  \"Convert the region into a figlet string.\"
  (interactive \"r\")
  (let ((str (buffer-substring start end)))
    (delete-region start end)
    (figlet str)))

;;;###autoload
(defun figlet-figletify-region-comment (start end)
  \"Convert the region into a figlet string as with
`figlet-figletify-region' but comment it out too.\"
  (interactive \"r\")
  (let ((str (buffer-substring start end)))
    (delete-region start end)
    (figlet-comment str)))

;;;###autoload
(defun figlet-preview-fonts (&optional text)
  \"View an example of each font in a new buffer.\"
  (interactive)
  (switch-to-buffer (get-buffer-create \"*Figlet Font Examples*\"))
  (delete-region (point-min) (point-max))
  (mapconcat (lambda (x)
               (let ((figlet-default-font x))
                 (insert (concat x \":\\n\"))
                 (figlet (or text (replace-regexp-in-string \"\\.flf$\" \"\" x)))))
             (figlet-get-font-list)
             \"\\n\"))

(provide 'figlet)

;;; figlet.el ends here
"]) (fic-mode . [(20130824 1158) nil "Show FIXME/TODO/BUG/KLUDGE in special face only in comments and strings" single nil]) (fetch . [(20131130 2330) nil "Fetch and unpack resources" single ";;; Commentary:

;; This package is a port of the Nettuts+ Fetch plugin for Sublime Text
;; (http://net.tutsplus.com/articles/news/introducing-nettuts-fetch/)
;;
;; This package allows you to quickly download and unpack external resources and
;; libraries to include in your project.
;;
;; To add entries to the lookup tables, append the fetch-package-alist like so:
;;
;; (add-to-list 'fetch-package-alist
;;              '(\"name\" . \"url\") t)
;;
;; After the list is populated, you can fetch the resources using
;; M-x fetch-resource
;;
;; The temporary download directory can be adjusted by setting the
;; fetch-download-location variable.

(require 'url)

"]) (feature-mode . [(20130714 1319) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar nil]) (fastnav . [(20120211 657) nil "Fast navigation and editing routines." single ";;; Commentary:
;; Inspired by zap-to-char, this library defines different routines operating on
;; the next/previous N'th occurrence of a character.  When invoking one of these
;; commands, the user is interactively queried for a character while the
;; potential target positions are highlighted.
;;
;; For example, META-s (jump-to-char-forward) highlights the next occurrences of
;; each character and prompts for one.  Once the user picks a char, the point is
;; moved to that position.  Subsequent invocations of META-s before picking a
;; character increases N, that is, the second, third, etc. occurrences are
;; highlighted and targeted.
;;
;; The fastnav-sprint-forward/backward commands apply iterative
;; jumping until return/C-G is hit, making it possible to reach any
;; point of the text with just a few keystrokes.
;;
;; To use it, simply put this file under ~/.emacs.d/, add (require 'fastnav) to
;; your emacs initialization file and define some key bindings, for example:
;;
;; (global-set-key \"\\M-z\" 'fastnav-zap-up-to-char-forward)
;; (global-set-key \"\\M-Z\" 'fastnav-zap-up-to-char-backward)
;; (global-set-key \"\\M-s\" 'fastnav-jump-to-char-forward)
;; (global-set-key \"\\M-S\" 'fastnav-jump-to-char-backward)
;; (global-set-key \"\\M-r\" 'fastnav-replace-char-forward)
;; (global-set-key \"\\M-R\" 'fastnav-replace-char-backward)
;; (global-set-key \"\\M-i\" 'fastnav-insert-at-char-forward)
;; (global-set-key \"\\M-I\" 'fastnav-insert-at-char-backward)
;; (global-set-key \"\\M-j\" 'fastnav-execute-at-char-forward)
;; (global-set-key \"\\M-J\" 'fastnav-execute-at-char-backward)
;; (global-set-key \"\\M-k\" 'fastnav-delete-char-forward)
;; (global-set-key \"\\M-K\" 'fastnav-delete-char-backward)
;; (global-set-key \"\\M-m\" 'fastnav-mark-to-char-forward)
;; (global-set-key \"\\M-M\" 'fastnav-mark-to-char-backward)
;;
;; (global-set-key \"\\M-p\" 'fastnav-sprint-forward)
;; (global-set-key \"\\M-P\" 'fastnav-sprint-backward)
;;
;; This library can be originally found at:
;;   http://www.emacswiki.org/emacs/FastNav
;; Package.el compatible version can be found at
;;   https://github.com/gleber/fastnav.el
;; it has been uploaded to ELPA and Marmalade

;;; Changes Log:
;;   2010-02-05: Fix for org mode, all commands were broken.
;;               Fix for electric characters in certain modes.
;;   2010-02-11: Yet another minor fix for switching to next/previous char.
;;   2010-05-28: Added sprint commands.
;;   2010-08-06: Make fastnav compatible with package.el
;;   2011-08-10: Add fastnav- prefix to autoload-ed functions
;;

"]) (fasm-mode . [(20131029 611) nil "Fasm major mode" single nil]) (fasd . [(20130831 1003) ((grizzl (0))) "Emacs integration for the command-line productivity booster `fasd'" single ";;; Commentary:

;; Hooks into to `find-file-hook' to add all visited files and directories to `fasd'.
;; Adds the function `fasd-find-file' to prompt and fuzzy complete available candidates

;;; Requirements:

;; `fasd' command line tool, see: https://github.com/clvv/fasd
;; `grizzl' for fuzzy completion

"]) (fakir . [(20140112 1537) ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19))) "fakeing bits of Emacs" single ";;; Commentary:
;;
;; This is a collection of tools to make testing Emacs core functions
;; easier.

"]) (fakespace . [(20120817 1706) nil "fake namespaces with defpackage" single ";;; Commentary:

;; Provides fake namespaces through a very rudimentary `defpackage',
;; familiar to Common Lisp users. The developer declares which symbols
;; are to be exported outside the package. All other symbols are
;; hidden away (by `end-package') where no other package can trample
;; on them.

;; See example.el for an example of using this package.

;; It works by comparing the symbol table before any declarations to
;; the symbol table afterward, then uninterning any symbols that were
;; created and not exported. This will work even on byte-compiled
;; files. In fact, everything is determined at compile-time, so there
;; is practically no load-time penalty from using these fake
;; namespaces.

;; Generally you will not want to actively use these fake namespaces
;; during development because there is no `in-package' function. You
;; will always been in the main namespace unable to access your
;; private functions. Later, when you're finishing up and want to test
;; out your namespace, make sure your code is unloaded from Emacs
;; (i.e. none of your symbols is in the symbol table) before applying
;; your namespace. The same applies to compilation: the package must
;; not be loaded before compilation or the `defpackage' will not hide
;; any symbols.

;; Unfortunately, due to the downright ugly implementation of obarrays
;; in Emacs, it's currently not possible to implement
;; `in-package'. Uninterned symbols cannot be added back to the global
;; obarray (or any other obarray). Symbols are invisibly chained as
;; linked lists in the obarray so it's not possible to put a symbol
;; into two obarrays at the same time -- the chains would
;; conflict. Not only is the required functionality not provided
;; (intentionally), trying to hack it in would break everything.

"]) (factlog . [(20130209 1740) ((deferred (0 3 1))) "File activity logger" single ";;; Commentary:

;; You need Python program factlog [1] to use this package.
;; factlog can be installed easily by \"pip install factlog\".
;; If you are using factlog.el from Git repository, you don't
;; need to install factlog separately.

;; To use factlog.el, simply add the following in your configuration:
;;
;;   (require 'factlog)
;;   (factlog-mode)

;; You need helm.el or anything.el to access recently opened file list.
;;
;; * List recently opened files:
;;   `helm-factlog-list' / `anything-factlog-list'
;; * List recently opened notes and choose them by title:
;;   `helm-factlog-list-notes' / `anything-factlog-list-notes'

;; [1] https://github.com/tkf/factlog

"]) (faces+ . [(20131226 1840) nil "Extensions to `faces.el'." single ";;; Commentary:
;;
;;    Extensions to `faces.el'.
;;
;;
;;  New functions defined here:
;;
;;    `face-background-20+', `face-foreground-20+'.
;;
;;
;;
;;  ***** NOTE: The following functions defined in `faces.el' have
;;              been REDEFINED HERE:
;;
;;  `make-face' - Uses `completing-read' in the interactive spec,
;;                with, as default, `symbol-nearest-point'.
;;
;;  `read-face-name' - `highlight' is the default (Emacs < 21 only).
;;
;;
;;  This file should be loaded after loading the standard GNU file
;;  `faces.el'.  So, in your `~/.emacs' file, do this:
;;  (eval-after-load \"faces\" '(require 'faces+))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (facemenu+ . [(20140105 2226) nil "Extensions to `facemenu.el'." single ";;; Commentary:
;;
;;    Extensions to `facemenu.el'.
;;
;;  This library enhances the \"Text Properties\" menu.  It adds menu
;;  items to the menu, and provides two different versions of the
;;  menu: one for the menu-bar Edit menu (`facemenu-menu') and one for
;;  the mouse popup menu (`facemenu-mouse-menu').  In standard library
;;  `facemenu.el', these two menus are the same.
;;
;;  Items are added to each of these menus to examine, copy, and
;;  change foreground and background colors in various ways.
;;
;;  In the `C-mouse-2' popup version of the menu
;;  (`facemenu-mouse-menu'), menu items use the character under the
;;  mouse pointer, instead of the character after the text cursor
;;  (point).  For example, in the mouse menu, \"Describe Properties\"
;;  describes the text properties under the mouse pointer.  This makes
;;  the mouse menu generally more convenient than the menubar menu -
;;  just point and click.
;;
;;  Menu items \"Do Re Mi - *\" make use of commands `doremi-face-fg+'
;;  `doremi-face-bg+', and `doremi-undo-last-face-change', which are
;;  defined in library `doremi-frm.el'.  They let you change the face
;;  color incrementally, using the arrow keys or the mouse wheel, and
;;  undo such changes.
;;
;;  Menu items \"Palette - *\" make use of library `palette.el' (which
;;  is available only for Emacs 22 and later).  They let you use a
;;  color palette to change the color.  You can restore the face color
;;  before as it was before palette editing, by using command
;;  `facemenup-face-bg-restore' or `facemenup-face-fg-restore'.
;;
;;  If option `facemenup-palette-update-while-editing-flag' is nil,
;;  then quitting the palette using `q' cancels any color change you
;;  made there, and exiting the palette using `x' effects the color
;;  change.  If the option is non-nil (the default), then each time
;;  you change the palette color the face color changes as well.  This
;;  lets you see the effect immediately, without exiting the palette,
;;  but you cannot then use `q' in the palette to cancel the edit.
;;  But you can still restore the color as it was before the edit.
;;
;;  Both Do Re Mi and the color palette let you change colors by
;;  changing color components, whether RGB (red, green, blue) or HSV
;;  (hue, saturation, value).
;;
;;  In addition, standard commands `facemenu-set-face' (`M-o o') and
;;  `list-faces-display' have been enhanced to let you pick a face to
;;  apply from the *Faces* display.  The face sample text is an action
;;  button that does this.  The face name is a link to the face
;;  description, which also has a link to customize the face.  If the
;;  region is active when you call either of these functions, then
;;  clicking a face's sample text applies the face to the region;
;;  otherwise, it applies the face to newly entered text.  To use this
;;  feature with `facemenu-set-face', use a numeric prefix argument,
;;  such as `C-8'.
;;
;;  The reason for this enhancement to `facemenu-set-face' and
;;  `list-faces-display' is to let you see what face you are choosing:
;;  its appearance, not just its name.  If you use Icicles, then you
;;  do not need this enhancement, because face names are displayed in
;;  *Completions* with their own faces.
;;
;;  Similarly, standard command `list-colors-display' has been
;;  enhanced to open the color palette on a color when you click it.
;;  (Using the palette to edit the color does not change the original
;;  color's definition.)  The palette is useful in this context mainly
;;  to show you the color in context.  In addition, the tooltip is
;;  improved, showing more precise HSV values and decimal RGB.
;;
;;  Standard command `facemenu-add-face' has also been enhanced here,
;;  so that it prevents the highlighting that you add from being
;;  erased by font lock.  To take advantage of this, you must use
;;  Emacs version 22 or later, and you must also load library
;;  `font-lock+.el'.
;;
;;  If you load library `highlight.el' before you load `facemenu+.el',
;;  then the commands in that library are also added to the Text
;;  Properties menu, as a Highlight submenu.
;;
;;  Commands defined here:
;;
;;    `facemenu-mouse-menu', `facemenup-change-bg-of-face-at-mouse+',
;;    `facemenup-change-bg-of-face-at-point+',
;;    `facemenup-change-fg-of-face-at-mouse+',
;;    `facemenup-change-fg-of-face-at-point+',
;;    `facemenup-customize-face-at-mouse',
;;    `facemenup-customize-face-at-point',
;;    `facemenup-describe-text-properties-at-mouse',
;;    `facemenup-face-bg-restore', `facemenup-face-fg-restore',
;;    `facemenup-palette-face-bg-at-mouse',
;;    `facemenup-palette-face-bg-at-point',
;;    `facemenup-palette-face-fg-at-mouse',
;;    `facemenup-palette-face-fg-at-point',
;;    `facemenup-paste-to-face-bg-at-mouse',
;;    `facemenup-paste-to-face-bg-at-point',
;;    `facemenup-paste-to-face-fg-at-mouse',
;;    `facemenup-paste-to-face-fg-at-point',
;;    `facemenu-rgb-format-for-display',
;;    `facemenup-set-face-attribute',
;;    `facemenup-set-face-attribute-at-mouse',
;;    `facemenup-set-face-attribute-at-point',
;;    `facemenup-set-face-bg-RGB-at-mouse',
;;    `facemenup-set-face-bg-RGB-at-point',
;;    `facemenup-set-face-bg-RGB-hex-at-mouse',
;;    `facemenup-set-face-bg-RGB-hex-at-point',
;;    `facemenup-set-face-fg-RGB-at-mouse',
;;    `facemenup-set-face-fg-RGB-at-point',
;;    `facemenup-set-face-fg-RGB-hex-at-mouse',
;;    `facemenup-set-face-fg-RGB-hex-at-point',
;;    `palette-for-background-at-point',
;;    `palette-for-foreground-at-point'.
;;
;;  User options defined here:
;;
;;    `facemenup-palette-update-while-editing-flag'.
;;
;;  Non-interactive functions defined here:
;;
;;    `facemenup-copy-tree' (Emacs 20-21), `facemenup-face-bg',
;;    `facemenup-face-fg', `facemenup-nonempty-region-p',
;;    `facemenup-set-face-attribute-at--1',
;;    `facemenup-set-face-from-list'.
;;
;;  Internal variables defined here:
;;
;;    `facemenu-mouse-menu', `facemenup-err-mouse',
;;    `facemenup-err-point', `facemenup-highlight-menu',
;;    `facemenup-last-face-bg', `facemenup-last-face-changed',
;;    `facemenup-last-face-fg'.
;;
;;  Button types defined here:
;;
;;    `help-facemenu-edit-color', `help-facemenu-set-face'.
;;
;;
;;  ***** NOTE: The following functions defined in `facemenu.el'
;;              have been REDEFINED HERE:
;;
;;    `facemenu-add-face' (Emacs 22+), `facemenu-read-color',
;;    `facemenu-set-face' (Emacs 22+), `list-colors-print' (Emacs
;;    22+).
;;
;;
;;  ***** NOTE: The following function defined in `faces.el'
;;              has been REDEFINED HERE (Emacs 22+):
;;
;;    `list-faces-display'.
;;
;;  Add this to your init file (~/.emacs):
;;
;;    (require 'facemenu+)
;;
;;
;;  Suggestions, if you use Emacs 22 or later:
;;
;;  1. Load library `font-lock+.el' also, to prevent font lock from
;;     erasing the highlighting you add using `facemenu+.el'.
;;
;;  2. (This is unrelated to `facemenu+.el'.)  Customize option
;;     `facemenu-listed-faces' to t, so that any faces you use are
;;     automatically added to the face menu.  That way, to use one
;;     again, you need not choose `Other...' in the menu each time.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (face-remap+ . [(20131226 1839) nil "Extensions to standard library `face-remap.el'." single ";;; Commentary:
;;
;;
;;  Commands `text-scale-decrease', `text-scale-increase', and
;;  `text-scale-adjust' (bound to `C-x C--', `C-x C-+', `C-x C-=', and
;;  `C-x C-0') let you resize the text in the current buffer by
;;  changing its scale factor.  When you shrink or enlarge the
;;  apparent text size this way, however, the window takes no notice
;;  of it.  In particular, although shrinking text can result in extra
;;  horizontal space at the right, window commands do not see this
;;  space as extra.
;;
;;  With this library, user option `text-scale-resize-window' lets you
;;  automatically resize the selected window (horizontally,
;;  vertically, or both) when text is resized, so that the way the
;;  window fits the buffer text remains relatively constant.
;;  Shrinking the text in one window shrinks that window, giving more
;;  space to adjacent windows.
;;
;;  If you also use library `fit-frame.el', then one-window frames
;;  also respond to text resizing by scaling.  If not, then the
;;  text-scale commands have no effect on frame size for one-window
;;  frames.
;;
;;  See also:
;;
;;  * Library `zoom-frm.el', which provides commands `zoom-in' and
;;    `zoom-out', which let you zoom the text in a buffer (as in text
;;    scaling) or the text in an frame.  In the latter case, the
;;    default font of the frame is enlarged or shrunk dynamically.
;;
;;  * Library `doremi-frm.el', which provides commands
;;    `doremi-buffer-font-size+' and `doremi-frame-font-size+', which
;;    provide another way to zoom incrementally.
;;
;;  To use library `face-remap+.el', put it in your `load-path' and
;;  put this sexp in your init file (~/.emacs):
;;
;;   (require 'face-remap+)
;;
;;
;;  Options (user variables) defined here:
;;
;;    `text-scale-resize-window'.
;;
;;
;;  ***** NOTE: The following standard functions defined in `face-remap.el'
;;              have been REDEFINED HERE:
;;
;;    `text-scale-increase' -- Possibly resize the window or frame.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (f . [(20131225 721) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single nil]) (ez-query-replace . [(20130925 1014) ((dash (1 2 0))) "A helpful query-replace." single ";;; Commentary:

;; ez-query-replace is a simple wrapper around `query-replace' that adds a
;; default search term, and allows you to conveniently replay old
;; replacements.

"]) (eyedropper . [(20131226 1838) ((hexrgb (0))) "Pick foreground and background colors at cursor or pointer." single ";;; Commentary:
;;
;;  Use the commands defined here to examine or save the background or
;;  foreground color at the text cursor or the mouse pointer.
;;
;;  After using commands `eyedrop-pick-background-*' or
;;  `eyedrop-pick-foreground-*', the picked color is saved in variable
;;  `eyedrop-picked-background' or `eyedrop-picked-foreground',
;;  respectively.
;;
;;  If you have Emacs 22 or later, all of the functionality provided
;;  here, and much more, is provided in library `palette.el'.  Use
;;  library `eyedropper' instead of `palette.el' if either of these
;;  applies:
;;
;;  * You do not want to use the color palette itself.  You want only
;;    the functionality provided by `eyedropper.el'.
;;
;;  * Your Emacs version is older than Emacs 22 (`palette.el' requires
;;    22 or later).
;;
;;  If you load `palette.el', there is no reason to also load
;;  `eyedropper.el'.  However, if for some reason you do load both
;;  `palette.el' and `eyedropper.el' then load `palette.el' second, so
;;  that its definitions will override those provided in
;;  `eyedropper.el', providing additional functionality for the color
;;  palette.
;;
;;  To use this library:
;;
;;    Add this to your initialization file (~/.emacs or ~/_emacs):
;;
;;      (require 'eyedropper) ; Load this library.
;;
;;    You will also need my library `hexrgb.el'; it is loaded
;;    automatically by `eyedropper.el'.  Get it here:
;;    http://www.emacswiki.org/cgi-bin/wiki/hexrgb.el.
;;
;;  Commands defined here:
;;
;;    `background-color', `eyedrop-background-at-mouse',
;;    `eyedrop-background-at-point', `eyedrop-foreground-at-mouse',
;;    `eyedrop-foreground-at-point', `eyedropper-background',
;;    `eyedropper-foreground', `eyedrop-pick-background-at-mouse',
;;    `eyedrop-pick-background-at-point',
;;    `eyedrop-pick-foreground-at-mouse',
;;    `eyedrop-pick-foreground-at-point', `foreground-color',
;;    `pick-background-color', `pick-foreground-color'.
;;
;;  Non-interactive functions defined here:
;;
;;    `eyedrop-color-message', `eyedrop-face-at-point', `keywordp'.
;;
;;  Internal variables defined here:
;;
;;    `eyedrop-last-picked-color', `eyedrop-picked-background',
;;    `eyedrop-picked-foreground'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (extend-dnd . [(20130328 1034) nil "R drag and Drop" tar ";;; Commentary: 
;; 
;; * Introduction
;; I would like to drag files onto a ESS buffer and write the appropriate
;; code.  Enter Extend drag and drop.
;; * Installation
;; To install, put the `extend-dnd.el' somewhere in your load path, and add
;; the following lines to your startup file, usually =~/.emacs=
;; 
;; 
;; (require 'extend-dnd)
;; (extend-dnd-activate)
;; 
;; * Status and Future
;; Currently it only supports a few modes and extensions, but it is extendable.
;; * Working with Yasnippets
;; If you want extend-dnd to expand yasnippets based on the file name,
;; make sure that `yas/wrap-around-region' is set to be ='t= or ='cua=.
;; 
;; After you define a snippet in the major mode you are working with, and put
;; the file name as `yas/selected-text'.  For example with R csv files
;; you could define
;; 
;; 
;; 
;; 
;; 
;; 
;; ${1:$(concat \"dat.\" (replace-regexp-in-string \"^[.]\" \"\" (replace-regexp-in-string \"[.]$\" \"\" (replace-regexp-in-string \"[^A-Za-z.0-9]+\" \".\" (file-name-sans-extension (file-name-nondirectory yas/text)) t t))))} <- read.csv(\"${1:`yas/selected-text`}\");
;; 
;; 
;; 
;; Then once this has been defined press `C-cC-d' to add the extension to
;; the drag and drop list. 
;; 
;; The extension will be expanded based on the `key' value.  Therefore,
;; if you want more than one possible action for a particular file, give
;; it the same key.
;; 
;; For example, if you want the possibility to write to the csv you
;; dragged in, you may wish to have the snippet:
;; 
;; 
;; 
;; 
;; 
;; 
;; write.csv(d,\"${1:`yas/selected-text`}\");
;; 
;; 
;; 
;; * Wish List/TODO
;; ** TODO Support dired mode
;; ** TODO Support inferior processes.
;; ** TODO Allow generic Yasnippet expansion by key name (like dnd_csv will automatically do drag and drop for csv files)
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
"]) (express . [(20131106 706) ((string-utils (0 3 2))) "Alternatives to `message'" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'express)
;;     (express-install-aliases)
;;
;;     (express \"important message\")
;;
;;     (with-message-logonly
;;       (do-something-noisy))
;;
;; Explanation
;;
;; Express.el provides alternatives to Emacs' built-in `message'
;; function.
;;
;; This library is generally only useful when programming in Emacs
;; Lisp.  However, some end-users may find it useful to control
;; messaging, especially for the case of quietening chatty libraries
;; in their ~/.emacs files (see below).
;;
;; The principal `express' function by default works differently from
;; `message' in almost every respect, displaying with sound and visual
;; highlight, and not writing to the log.  See the `express' docstring
;; for details.  The variant function `express*' has identical
;; functionality, but accepts CL-style arguments.
;;
;; The following functions provided by this library are drop-in
;; alternatives to `message' which may be useful in an `flet'
;; construct:
;;
;;     `express-message-nolog'
;;     `express-message-logonly'
;;     `express-message-highlight'
;;     `express-message-insert'
;;     `express-message-notify'
;;     `express-message-popup'
;;     `express-message-temp'
;;     `express-message-string'
;;
;; The following macros modify the behavior of `message' within
;; the enclosing expression:
;;
;;     `express-with-message-nolog'
;;     `express-with-message-logonly'
;;     `express-with-message-highlight'
;;     `express-with-message-insert'
;;     `express-with-message-notify'
;;     `express-with-message-popup'
;;     `express-with-message-temp'
;;     `express-with-message-string'
;;
;; For example, the following code would redirect messages from a very
;; chatty library to the log:
;;
;;     (express-with-message-nolog
;;       (require 'very-chatty-library))
;;
;; The same method may also be handy with `defadvice':
;;
;;     (defadvice very-chatty-function (around very-chatty-redirect activate)
;;       (express-with-message-nolog
;;         ad-do-it))
;;
;; Similarly, important messages may be redirected to a more visible
;; form:
;;
;;     (defadvice an-important-function (around an-important-function activate)
;;       (express-with-message-notify
;;         ad-do-it))
;;
;; To use `express', place the express.el library somewhere Emacs can find
;; it, and add the following to your ~/.emacs file:
;;
;;     (require 'express)
;;     (express-install-aliases)     ; optionally, can also be set in customize
;;
;; Running `express-install-aliases' or setting the corresponding
;; variable in customize will install convenience aliases outside
;; the \"express-\" namespace.  This is disabled by default.
;;
;; See Also
;;
;;     M-x customize-group RET express RET
;;     M-x customize-group RET notify RET
;;     M-x customize-group RET popup RET
;;
;; Notes
;;
;;     The function `express-message-noformat' is also available, but it
;;     is not quite a drop-in replacement for `message'.
;;
;;     Some of the functions require the availability of notify.el,
;;     todochiku.el or popup.el.  In all cases, the function will
;;     degrade to an ordinary message if the external library is not
;;     present.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     Uses if present: string-utils.el, notify.el, todochiku.el,
;;                      popup.el
;;
;; Bugs
;;
;;     Soft dependency on unpublished popup-volatile.
;;
;;     `message' is a subr.  Macros such as `express-with-message-logonly'
;;     will only affect calls to `message' from Lisp.
;;
;; TODO
;;
;;     Aliases are not turning on from customize setting alone.  The
;;     variable express-install-short-aliases does not seem to be
;;     set after loading `custom-file'.
;;
;;     Truncation options based on string-utils.el
;;
;;     Default icons and timeouts for notifications.
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (expand-region . [(20140104 1421) nil "Increase selected region by semantic units." tar nil]) (exec-path-from-shell . [(20131205 1210) nil "Get environment variables such as $PATH from the shell" single ";;; Commentary:

;; On OS X (and perhaps elsewhere) the $PATH environment variable and
;; `exec-path' used by a windowed Emacs instance will usually be the
;; system-wide default path, rather than that seen in a terminal
;; window.

;; This library allows the user to set Emacs' `exec-path' and $PATH
;; from the shell path, so that `shell-command', `compile' and the
;; like work as expected.

;; It also allows other environment variables to be retrieved from the
;; shell, so that Emacs will see the same values you get in a terminal.

;; Installation:

;; ELPA packages are available on Marmalade and Melpa. Alternatively, place
;; this file on a directory in your `load-path', and explicitly require it.

;; Usage:
;;
;;     (require 'exec-path-from-shell) ;; if not using the ELPA package
;;     (exec-path-from-shell-initialize)
;;
;; Customize `exec-path-from-shell-variables' to modify the list of
;; variables imported.
;;
;; If you use your Emacs config on other platforms, you can instead
;; make initialization conditional as follows:
;;
;;     (when (memq window-system '(mac ns))
;;       (exec-path-from-shell-initialize))
;;
;; Alternatively, you can use `exec-path-from-shell-copy-envs' or
;; `exec-path-from-shell-copy-env' directly, e.g.
;;
;;     (exec-path-from-shell-copy-env \"PYTHONPATH\")

"]) (evm . [(20140104 231) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single nil]) (evil-visualstar . [(20130925 1114) ((evil (0))) "Starts a * or # search from the visual selection" single ";;; Commentary:
;;
;; Install:
;; (require 'evil-visualstar)
;;
;; Usage:
;;
;; Make a visual selection with `v` or `V`, and then hit `*` to search
;; the selection forward, or # to search that selection backward.

"]) (evil-tabs . [(20131011 433) ((evil (0 0 0)) (elscreen (0 0 0))) "Integrating Vim-style tabs for Evil mode users." single ";;; Commentary:
;;
;; Integrating Vim-style tabs for Evil mode users.

"]) (evil-paredit . [(20130408 47) ((evil (0 0 0)) (paredit (1))) "Paredit support for evil keybindings" single nil]) (evil-numbers . [(20121108 1738) nil "increment/decrement numbers like in vim" single ";;; Commentary:

;; Increment / Decrement binary, octal, decimal and hex literals

;; works like C-a/C-x in vim, i.e. searches for number up to eol and then
;; increments or decrements and keep zero padding up

;; Known Bugs:
;; See http://github.com/cofi/evil-numbers/issues

;; Install:

;; (require 'evil-numbers)

;; and bind, for example:

;; (global-set-key (kbd \"C-c +\") 'evil-numbers/inc-at-pt)
;; (global-set-key (kbd \"C-c -\") 'evil-numbers/dec-at-pt)

;; or only in evil's normal state:

;; (define-key evil-normal-state-map (kbd \"C-c +\") 'evil-numbers/inc-at-pt)
;; (define-key evil-normal-state-map (kbd \"C-c -\") 'evil-numbers/dec-at-pt)

;; Usage:
;; Go and play with your numbers!

"]) (evil-nerd-commenter . [(20131225 2138) nil "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar nil]) (evil-matchit . [(20140114 225) nil "Vim matchit ported into Emacs (requires EVIL)" tar nil]) (evil-leader . [(20130921 454) ((evil (0))) "let there be <leader>" single ";;; Commentary:
;;
;; Known Bugs:
;; See http://github.com/cofi/evil-leader/issues

;; Install:
;; (require 'evil-leader)

;; Usage:
;;
;; (global-evil-leader-mode)
;;
;;    to enable `evil-leader' in every buffer where `evil' is enabled.
;;
;;    Note: You should enable `global-evil-leader-mode' before you enable
;;          `evil-mode', otherwise `evil-leader' won't be enabled in initial
;;          buffers (*scratch*, *Messages*, ...).
;;
;;    Use `evil-leader/set-key' to bind keys in the leader map.
;;    For example:
;;
;; (evil-leader/set-key \"e\" 'find-file)
;;
;;    You can also bind several keys at once:
;;
;; (evil-leader/set-key
;;   \"e\" 'find-file
;;   \"b\" 'switch-to-buffer
;;   \"k\" 'kill-buffer)
;;
;;    The key map can of course be filled in several places.
;;
;;    After you set up the key map you can access the bindings by pressing =<leader>=
;;    (default: \\) and the key(s). E.g. \\ e would call `find-file' to open a file.
;;
;;    If you wish to change so you can customize =evil-leader/leader= or call
;;    `evil-leader/set-leader', e.g. (evil-leader/set-leader \",\") to change it to
;;    \",\".
;;    The leader has to be readable by `read-kbd-macro', so using Space as a
;;    prefix key would be (evil-leader/set-leader \"<Space>\").
;;
;;    Beginning with version 0.3 evil-leader has support for mode-local bindings:
;;
;; (evil-leader/set-key-for-mode 'emacs-lisp-mode \"b\" 'byte-compile-file)
;;
;;    Again, you can bind several keys at once.
;;
;;    A mode-local binding shadows a normal mode-independent binding.

"]) (evil-indent-textobject . [(20130831 1519) ((evil (0))) "evil textobjects based on indentation" single ";;; Commentary:

;;; Adds new textobjects:
;;;
;;; ii - Inner Indentation: the surrounding textblock with the same indentation
;;; ai - Above and Indentation: ii + the line above with a different indentation
;;; aI - Above and Indentation+: ai + the line below with a different indentation
;;;
;;; With | representing the cursor:
;;;
;;; (while (not done)
;;;   (messa|ge \"All work and no play makes Jack a dull boy.\"))
;;; (1+ 41)
;;;
;;; - vii will select the line with message
;;; - vai will select the whole while loop
;;; - vaI will select the whole fragment

"]) (evil . [(20140109 605) ((undo-tree (0 6 3)) (goto-chg (1 6))) "Extensible Vi layer for Emacs." tar nil]) (eval-sexp-fu . [(20131230 1351) ((highlight (0))) "Tiny functionality enhancements for evaluating sexps." single ";;; Commentary:
;;
;; Tiny functionality enhancements for evaluating sexps.
;; This package provides:
;; - Flashing the sexps during the evaluation.
;; - `eval-last-sexp' variants (inner-list/inner-sexp).

;;; Installation:
;;
;; Put the highlight.el to your load-path.
;; Then require this package.

"]) (ethan-wspace . [(20130518 708) nil "whitespace customizations for emacs" single ";;; Commentary:
;; For more information on the design of this package, please see the
;; README that came with it.
;;
;; Editing whitespace. I don't like to forcibly clean[1] whitespace
;; because when doing diffs/checkins, it pollutes changesets. However,
;; I prefer clean whitespace -- often I've deleted whitespace by
;; accident and been unable to \"put it back\" for purposes of diffing.
;;
;; Therefore, my approach is hybrid -- maintain clean whitespace where
;; possible, and avoid disturbing messy whitespce when I come across
;; it. I add a find-file-hook to track whether the whitespace of a
;; given file was clean to begin with, and add a before-save-hook that
;; uses this information to forcibly clean whitespace only if it was
;; clean at start.
;;
;; Viewing whitespace. Originally I had a font-lock-mode hook that
;; always called show-trailing-whitespace and show-tabs, but this
;; turns out to be annoying for a lot of reasons. Emacs internal
;; buffers like *Completions* and *Shell* would get highlit. So I
;; decided that a more sophisticated approach was called for.
;;
;; 1) If a buffer does not correspond to a file, I almost certainly do
;; not care whether the whitespace is clean. I'm not going to be
;; saving it, after all.
;;
;; 2) If a buffer corresponds to a file that was originally clean, I
;; still don't really care about the whitespace, since my hook (above)
;; would ensure that it was clean going forward.
;;
;; 3) If a buffer corresponds to a file that was not originally clean,
;; I do care about seeing whitespace, because I do not want to edit it
;; by accident.
;;
;; There are a few exceptions -- if I'm looking at a patch, or hacking
;; a Makefile, whitespace is different. More about those later.
;;
;; This file adds hooks to make this stuff happen -- check whether the
;; whitespace is clean when a file is first found, and preserve that
;; cleanliness if so, and highlight that dirtiness if not. It does
;; this by setting show-trailing-whitespace when necessary.
;;
;; NOTE: take out any customizations like this:
;; '(show-trailing-whitespace t)
;; show-trailing-whitespace will be turned on by ethan-wspace.
;;
;; Also disable '(require-final-newlines t); ethan-wspace will handle
;; the final newlines.

"]) (etags-table . [(20130824 1157) nil "Set tags table(s) based on current file" single ";;; Commentary:

;; This extension sets the tags table(s) based on the current file.
;; `etags-table-alist' is a list of lists, where the car of each sublist is
;; compared to the current filename.  If it matches, all the rest of the list
;; elements are put on `tags-table-list'.  If `etags-table-search-up-depth' is
;; an integer, the file path will be searched upwards for a tags file.  If one
;; is found, it will be added to the tags table list; this is actually done
;; first so the local TAGS file is at the head of the list.
;;
;; When you switch files and do something tag-related, the tags table list is
;; automatically recomputed.

"]) (esxml . [(20130512 1547) ((kv (0 0 5))) "Library for working with xml via esxml and sxml" single ";;; Commentary:

;; This is XML/XHTML done with S-Expressions in EmacsLisp.  Simply,
;; this is the easiest way to write HTML or XML in Lisp.
;;
;; This library uses the native form of XML representation as used by
;; many libraries already included within emacs.  This representation
;; will be referred to as \"esxml\" throughout this library.  See
;; `esxml-to-xml' for a concise description of the format.
;;
;; This library is not intended to be used directly by a user, though
;; it certainly could be.  It could be used to generate static html,
;; or use a library like `elnode' to serve dynamic pages.  Or even to
;; extract a form from a site to produce an API.
;;
;; TODO: Better documentation, more conveniance.
;;
;; NOTICE: Code base will be transitioning to using pcase instead of
;; destructuring bind wherever possible.  If this leads to hard to
;; debug code, please let me know, and I will do whatever I can to
;; resolve these issues.
;;
"]) (esup . [(20130607 1350) nil "the Emacs StartUp Profiler (ESUP)" single ";;; Commentary:
;;
;; The most recent code is always at http://github.com/jschaf/esup
;;
;; esup profiles your Emacs startup time by examining all top-level
;; S-expressions (sexps).  esup starts a new Emacs process from Emacs
;; to profile each SEXP.  After the profiled Emacs is complete, it
;; will exit and your Emacs will display the results.

(require 'benchmark)
(require 'eieio)
(eval-when-compile
 (require 'cl-lib))

"]) (ess-smart-underscore . [(20131229 1851) ((ess (0))) "Ess Smart Underscore" tar ";;; Commentary:
;; 
;; * Installation
;; 
;; To use without using a package manager:
;; 
;;  - Put the library in a directory in the emacs load path, like ~/.emacs.d
;;  - Add (require 'ess-smart-underscore) in your ~/.emacs file
;; 
;; This is in emacswiki, so this package can also be installed using el-get.
;; 
;; After installing el-get, Type M-x el-get-install ess-smart-underscore.
;; * Ess-Smart Underscore Package Information
;; Smart \"_\" key: insert `ess-S-assign', unless:
;; 
;;   1. in string/comment
;;   2. after a $ (like d$one_two) (toggle with `ess-S-underscore-after-$')
;;   3. when the underscore is part of a variable definition previously defined.
;;      (toggle with `ess-S-underscore-after-defined')
;;   4. when the underscore is after a \"=\" or \"<-\" on the same line.
;;   5. inside a parenthetical statement () or [].
;;      (toggle with `ess-S-underscore-when-inside-paren')
;;   6. At the beginning of a line.
;;   7. In a variable that contains underscores already (for example foo_a)
;;      (toggle with `ess-S-underscore-when-variable-contains-underscores')
;;   8. The preceding character is not a tab/space (toggle with
;;      `ess-S-underscore-when-last-character-is-a-space'.  Not enabled
;;      by default.)
;; 
;; An exception to 
;; 
;; 
;; a <- b |
;; 
;; 
;; Pressing an underscore here would produce
;; 
;; 
;; 
;; a <- b <-
;; 
;; 
;; However when in the following situation
;; 
;; 
;; a <- b|
;; 
;; 
;; Pressing an underscore would produce
;; 
;; 
;; a <- b_
;; 
;; 
;; This behavior can be toggled by `ess-S-space-underscore-is-assignment'
;; 
;; If the underscore key is pressed a second time, the assignment
;; operator is removed and replaced by the underscore.  `ess-S-assign',
;; typically \" <- \", can be customized.  In ESS modes other than R/S,
;; an underscore is always inserted.
;; 
;; In addition the ess-smart-underscore attempts to work with noweb-mode
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (ess-R-object-popup . [(20130302 336) ((popup (20130117 1954)) (ess (20130225 1754))) "popup description of R object" single ";;; Commentary:
;; I have defined a function, ess-R-object-popup, that when
;; invoked, will return a popup with some information about
;; the object at point.  The information returned is
;; determined by which R function is called.  This is controlled
;; by an alist, called ess-R-object-popup-alist.  The default is
;; given below.  The keys are the classes of R object that will
;; use the associated function.  For example, when the function
;; is called while point is on a factor object, a table of that
;; factor will be shown in the popup.  The objects must of course
;; exist in the associated inferior R process for this to work.
;; The special key \"other\" in the alist defines which function
;; to call when the class is not mached in the alist.  By default,
;; the str function is called, which is actually a fairly useful
;; default for data.frame and function objects.
;; 
;; simply save this file in a directory in my load-path
;; and then 
;; place
;;    (require 'ess-R-object-popup)
;;    (define-key ess-mode-map \"\\C-c\\C-g\" 'ess-R-object-popup)
;;
;; in yout init file.

"]) (ess-R-data-view . [(20130509 458) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single ";;; Commentary:

;; ess-R-data-view is data viewer for GNU R. It shows dataframe and matrix
;; on table view.
;; ess-R-data-view provides two commands. The first, `ess-R-dv-ctable' 
;; shows table in other buffer. It includes  border, and header is fixed.
;; The second, `ess-R-dv-pprint' shows pretty-printed text in other buffer. 
;; It shows huge text smoothly.

"]) (ess . [(20131207 1141) nil "No description available." tar nil]) (esqlite-helm . [(20140114 618) ((esqlite (0 1 4)) (helm (20131207 845))) "Define helm source for sqlite database" single ";;; Commentary:

"]) (esqlite . [(20140114 626) ((pcsv (1 3 3))) "Manipulate sqlite file from Emacs" single ";;; Commentary:

;; esqlite.el is a implementation to handle sqlite database.
;;  (version 3 or later)

;; Following functions are provided:
;; * Read sqlite row as list of string.
;; * Async read sqlite row as list of string.
;; * sqlite process with being stationed
;; * Construct sqlite SQL.
;; * Escape SQL value to construct SQL
;; * Some of basic utilities.
;; * NULL handling (denote as :null keyword)

;; Following environments are tested:
;; * Windows7 cygwin64 (sqlite 3.8.2)
;; * Windows7 native binary (Not enough works)
;; * Debian Linux (sqlite 3.7.13)

"]) (espuds . [(20131026 1121) ((s (1 7 0)) (dash (2 2 0)) (noflet (0 0 10)) (f (0 12 1))) "Ecukes step definitions" single ";;; Commentary:

"]) (espresso-theme . [(20130228 2348) nil "Espresso Tutti Colori port for Emacs" single ";;; Commentary:
;;
;; Espresso Tutti Colori is the default theme for Espresso, by MacRabbit.
;; Source: <http://macrabbit.com/espresso>

;;; TODO: More faces? `list-faces-display'.

(deftheme espresso
  \"Espresso Tutti Colori.

Port of the default theme for Espresso on Mac OS X.\")

(let ((selection-color (if (featurep 'ns) \"ns_selection_color\" \"#C9D0D9\"))
      (highlight-color \"#EEE00A\")
      (secondary-color \"#FBE9AD\")
      (active-color \"#EEEEEE\")
      (passive-color \"#AAAAAA\")
      (subtle-color \"#EEEEEE\")
      (error-color \"#F93232\")
      (border-color \"#a5a5a5\"))
  (custom-theme-set-faces
   'espresso
   ;; Basics
   '(default ((t (:backround \"grey99\"))))
   '(blue ((t (:foreground \"blue\"))))
   '(bold ((t (:bold t))))
   '(bold-italic ((t (:italic t :bold t))))
   '(border-glyph ((t (nil))))
   '(green ((t (:foreground \"green\"))))
   '(info-node ((t (:italic t :bold t))))
   '(info-xref ((t (:bold t))))
   '(italic ((t (:italic t))))
   '(left-margin ((t (nil))))
   '(pointer ((t (nil))))
   '(red ((t (:foreground \"red\"))))
   '(right-margin ((t (nil))))
   '(underline ((t (:underline t))))
   '(yellow ((t (:foreground \"yellow\"))))

   ;; Frame
   '(fringe ((t (:background \"#f7f7f7\"))))
   `(mode-line ((t (:background \"#e8e8e8\" :foreground \"black\"
                    :box (:line-width -1 :color ,border-color)))))
   '(mode-line-highlight ((t (:box (:line-width 2 :color \"#9599B0\")))))
   `(mode-line-inactive
     ((t (:inherit mode-line :background \"#f5f5f5\" :foreground \"grey20\"
          :box (:line-width -1 :color ,border-color) :weight light))))

   ;; Parens
   `(show-paren-match ((t (:background ,passive-color))))
   `(show-paren-mismatch ((t (:foreground \"#F9F2CE\" :background ,error-color))))

   ;; Highlighting
   `(hl-line ((t (:background ,active-color))))
   `(highline-face ((t (:background ,active-color))))
   `(highlight ((t (:background ,highlight-color))))
   `(highlight-symbol-face ((t (:background ,secondary-color))))
   `(isearch ((t (:background ,highlight-color))))
   `(lazy-highlight ((t (:background ,secondary-color))))
   `(primary-selection ((t (:background ,selection-color))))
   `(region ((t (:background ,selection-color))))
   `(secondary-selection ((t (:background ,secondary-color))))
   `(shadow ((t (:foreground \"grey50\" :background ,subtle-color))))
   `(text-cursor ((t (:background \"black\" :foreground ,passive-color))))
   `(zmacs-region ((t (:background ,selection-color))))

   ;; More
   '(mumamo-background-chunk-submode ((t (:background \"#EAEBE6\"))))

   ;; Font-lock
   '(font-lock-builtin-face ((t (:foreground \"#626FC9\"))))
   '(font-lock-comment-face ((t (:foreground \"#7F7F7F\"))))
   '(font-lock-constant-face ((t (:foreground \"#7653C1\" :background \"#F3F2FF\"))))
   '(font-lock-doc-string-face ((t (:foreground \"#1A93AE\" :background \"#F4F9FE\"))))
   '(font-lock-function-name-face ((t (:foreground \"#4E279A\"))))
   '(font-lock-keyword-face ((t (:foreground \"#6700B9\"))))
   '(font-lock-preprocessor-face ((t (:foreground \"#434343\"))))
   '(font-lock-reference-face ((t (:foreground \"#4E279A\" :background \"#F3F2FF\"))))
   '(font-lock-string-face ((t (:foreground \"#BC670F\" :background \"#FDFBF5\"))))
   '(font-lock-type-face ((t (:foreground \"#699D36\"))))
   '(font-lock-variable-name-face ((t (:foreground \"#7B8C4D\"))))
   '(font-lock-warning-face ((t (:foreground \"#F93232\"))))

   ;; Diff Mode
   '(diff-file-header ((t (:bold t :inherit diff-header))))
   '(diff-header ((t (:background \"#DDDDFF\" :foreground \"grey20\"))))
   '(diff-added ((t (:background \"#DDFFDD\"))))
   '(diff-removed ((t (:background \"#FFDDDD\"))))
   '(diff-changed ((t (:background \"#FFFFDD\"))))
   '(diff-refine-change ((t (:background \"#DDDDFF\"))))

   ;; Magit
   '(magit-diff-file-header ((t (:bold t :inherit diff-header))))
   '(magit-diff-hunk-header ((t (:inherit diff-header))))
   '(magit-diff-add ((t (:inherit diff-added :foreground \"grey20\"))))
   '(magit-diff-del ((t (:inherit diff-removed :foreground \"grey20\"))))
   '(magit-diff-none ((t (:inherit diff-context :foreground \"grey20\"))))
   '(magit-item-highlight ((t (:background nil :foreground \"black\"))))

   ;; Done
   ))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'espresso)

;;; espresso-theme.el ends here
"]) (esh-help . [(20140107 222) ((dash (1 4 0))) "Add some help functions and support for Eshell" single ";;; Commentary:

;; This library adds the following help functions and support for Eshell:
;; - run-help function inspired by Zsh
;; - eldoc support
;;
;; To use this package, add these lines to your .emacs file:
;;     (require 'esh-help)
;;     (setup-esh-help-eldoc)  ;; To use eldoc in Eshell
;; And by using M-x eldoc-mode in Eshell, you can see help strings
;; for the pointed command in minibuffer.
;; And by using M-x esh-help-run-help, you can see full help string
;; for the command.

"]) (esh-buf-stack . [(20140107 218) nil "Add a buffer stack feature to Eshell" single ";;; Commentary:

;; This library adds a buffer stack feature to Eshell.
;; It is inspired by the buffer stack in Zsh.
;;
;; To use this package, add these lines to your .emacs file:
;;     (require 'esh-buf-stack)
;;     (setup-eshell-buf-stack)
;;     (add-hook 'eshell-mode-hook
;;               (lambda ()
;;                 (local-set-key
;;                  (kbd \"M-q\") 'eshell-push-command)))
;; You can push the current command to the buffer stack by using M-q,
;; and after executing another command, you can see the top of the stack poped.

"]) (escreen . [(20091203 1013) nil "emacs window session manager" single ";;; Commentary:

;; To install, put this file in your load-path, byte-compile it, and add
;; the following to your .emacs:
;;
;;   (load \"escreen\")
;;   (escreen-install)

;; If you are using Emacs 19, you may have trouble loading this program
;; because of the customs syntax officially introduced in Emacs 20.  In
;; that case, first load cust-stub.el, available from
;;
;;     http://www.splode.com/~friedman/software/emacs-lisp/
;;
;; Updates to escreen.el will also be made available on that page.

;; Inspired by:
;;   * wicos.el, written by Heikki Suopanki <suopanki@phoenix.oulu.fi>
;;   * `screen', written by Oliver Laumann, Juergen Weigert,
;;     and Michael Schroeder.

;; Todo:
;;   * make escreen-menu display list of screens for all frames
;;   * ability to lock window configurations against change or deletion
;;   * ability to renumber screens
;;   * symbolic names for screens (a la wicos.el); partly started
;;   * switching active screen from pull-down menu from menubar
;;   * switching active screen from escreen menu
;;   * persistance of screens across instances of emacs
;;     [look at johnw's work on this; depends on additional non-standard
;;     packages but perhaps those parts can be reimplemented inline.]

"]) (es-lib . [(20131029 107) ((cl-lib (0 3))) "A collection of emacs utilities" tar ";;; Commentary:
;; The project is hosted at https://github.com/sabof/es-lib

"]) (ert-runner . [(20140114 11) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 0 1))) "Opinionated Ert testing workflow" tar nil]) (ert-expectations . [(20130824 1200) nil "The simplest unit test framework in the world" single ";;; Commentary:
;;
;; `expectations', the simplest unit test framework using `ert'.
;; No test names! No extra typing!
;; This is aimed for a successor of el-expectations.
;; If you use el-expectations, you can simply replace.
;;
;; I love Jay Fields' expectations unit testing framework in Ruby. It
;; provides one syntax and can define various assertions. So I created
;; Emacs Lisp Expectations modeled after expectations in Ruby.
;; Testing policy is same as the original expectations in Ruby. Visit
;; expectations site in rubyforge.
;; http://expectations.rubyforge.org/
;;
;; With Emacs Lisp Mock (el-mock.el), Emacs Lisp Expectations supports
;; mock and stub, ie. behavior based testing.
;; You can get it from EmacsWiki
;; http://www.emacswiki.org/cgi-bin/wiki/download/el-mock.el
;;
;; The biggest advantage is this uses `ert' feature to display test result.
;; You can easily understand why a test failed.
;;
;;  `expectations'  vs    `ert'
;;  (expect 10            (ert-deftest erte-test-00001 ()
;;    (+ 4 6))              (should (equal 10
;;                                         (+ 4 6))))
;;
;; Example:
;;
;;   (expectations
;;     (desc \"success\")
;;     (expect 10
;;       (+ 4 6))
;;     (expect 5
;;       (length \"abcde\"))
;;     (desc \"fail\")
;;     (expect 11
;;       (+ 4 6))
;;     (expect 6
;;       (length \"abcde\")))
;;
;; Press C-M-x sexp then get the result in *ert*:
;;
;;   Selector: t
;;   Passed: 2
;;   Failed: 2 (2 unexpected)
;;   Total:  4/4
;;
;;   Started at:   2012-10-09 15:37:17+0900
;;   Finished.
;;   Finished at:  2012-10-09 15:37:17+0900
;;
;;   ..FF
;;
;;   F erte-test-00003
;;       (ert-test-failed
;;        ((should
;;          (equal 11
;;                 (mock-protect
;;                  (lambda nil
;;                    (+ 4 6)))))
;;         :form
;;         (equal 11 10)
;;         :value nil :explanation
;;         (different-atoms
;;          (11 \"#xb\" \"?^K\")
;;          (10 \"#xa\" \"?\\n\"))))
;;
;;   F erte-test-00004
;;       (ert-test-failed
;;        ((should
;;          (equal 6
;;                 (mock-protect
;;                  (lambda nil
;;                    (length \"abcde\")))))
;;         :form
;;         (equal 6 5)
;;         :value nil :explanation
;;         (different-atoms
;;          (6 \"#x6\" \"?^F\")
;;          (5 \"#x5\" \"?^E\"))))
;;
;;
;; If you want more complex example, see (describe-function 'expectations)
;;
;;; Installation:
;;
;; Put ert-expectations.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'ert-expectations)
;;
;; No need more.
;;
"]) (ert-async . [(20140112 314) nil "Async support for ERT" single ";;; Commentary:

"]) (erlang . [(20131025 6) nil "Erlang major mode" tar nil]) (ergoemacs-mode . [(20140113 749) nil "Emacs mode based on common modern software interface and ergonomics." tar ";;; Commentary:

;; This keybinding set puts the most frequently used Emacs keyboard
;; shortcuts into the most easy-to-type spots.
;;
;; For complete detail, see:
;; http://ergoemacs.github.io/ergoemacs-mode/

;; Todo:

;; 

;;; Acknowledgment:
;; Thanks to Shahin Azad for persian layout (fa) ishahinism at g
;; mail.com
;; Thanks to Thomas Rikl workhorse.t at googlemail.com for german layout
;; Thanks to Baptiste Fouques  bateast at bat.fr.eu.org for bepo layout
;; Thanks to Andrey Kotlarski (aka m00naticus) for a patch on 2012-12-08
;; Thanks to Nikolaj Schumacher for his implementation of extend-selection.
;; Thanks to Andreas Politz and Nikolaj Schumacher for correcting/improving implementation of toggle-letter-case.
;; Thanks to Lennart Borgman for several suggestions on code to prevent shortcuts involving shift key to start select text when CUA-mode is on.
;; Thanks to marciomazza for spotting several default bindings that
;; should have been unbound.
;; Thanks to lwarxx for bug report on diff-mode
;; Thanks to maddin for ergoemacs-global/local-set-key functions and ergoemacs-hook-modes improvements.
;; Thanks to many users who send in comments and appreciations on this.
;; Layout contributors:
;; Danish layout \342\200\234da\342\200\235.  Contributors: Michael Budde
;; UK QWERTY layout \342\200\234gb\342\200\235.  Contributor: Jorge Dias (aka theturingmachine)
;; UK Dvorak layout \342\200\234gb-dv\342\200\235.  Contributor: Phillip Wood
;; French AZERTY layout \342\200\234fr\342\200\235.  Contributor: Alexander Doe
;; Italian QWERTY layout \342\200\234it\342\200\235.  Contributor: David Capello, Francesco Biccari


"]) (erefactor . [(20130521 238) nil "Emacs-Lisp refactoring utilities" single ";;; Commentary:

;; Simple refactoring, linting utilities for Emacs-Lisp.

"]) (eredis . [(20120808 2007) nil "eredis, a Redis client in emacs lisp" single nil]) (ercn . [(20121230 1013) nil "Flexible ERC notifications" single ";;; Commentary:

;; ercn allows for flexible notification rules in ERC. You can
;; configure it to notify for certain classes of users, query buffers,
;; certain buffers, etc. It utilizes functions (and a small bit of
;; copy pasta) from erc-match to get the job done. See the
;; documentation for `ercn-notify-rules' and `ercn-suppress-rules' to
;; set it up.

;; When a notificaiton is needed, ercn calls the ercn-notify hook so
;; that any notification mechanism available for your system can be
;; utilized with a little elisp.

;; History

;; 1.0.0 - Initial release.  It probably even works.

;; 1.0.1 - save-excursion, to avoid messing with the current line

;; 1.0.2 - fix autoloads

"]) (erc-tweet . [(20130618 1301) ((erc (5 3))) "shows text of a tweet when an url is posted in erc buffers" single ";;; Commentary:
;;
;; Show inlined tweets in erc buffers.
;;
;;; Installation:
;;
;; usage:
;;
;; (require 'erc-tweet)
;; (add-to-list 'erc-modules 'tweet)
;; (erc-update-modules)
;;
;; Or `(require 'erc-tweet)` and  `M-x customize-option erc-modules RET`
;;
;; This plugin subscribes to hooks `erc-insert-modify-hook` and
;; `erc-send-modify-hook` to download and show tweets.


"]) (erc-track-score . [(20130328 515) nil "Add score support to tracked channel buffers" single ";;; Commentary:

;; Change `erc-track-showcount' value to transform it to a score.

;; (require 'erc-track-score)
;; (erc-track-mode 1)
;; (erc-track-score-mode 1)
;; (setq erc-track-showcount t)

(eval-when-compile (require 'cl))
(require 'erc)
(require 'erc-track)
(require 'erc-match)
(require 'timer)

"]) (erc-terminal-notifier . [(20140113 253) nil "OSX notifications via the terminal-notifier gem for Emacs ERC." single ";;; Commentary:

;; OSX notifications via the terminal-notifier gem for Emacs ERC.
;;

;;; Install

;; Install terminal notifier:
;;
;; $ sudo gem install terminal-notifier
;; or download a binary from here https://github.com/alloy/terminal-notifier/downloads
;;
;; Install the package:
;;
;; $ cd ~/.emacs.d/vendor
;; $ git clone git://github.com/julienXX/erc-terminal-notifier.el.git
;;
;; In your emacs config:
;;
;; (add-to-list 'load-path \"~/.emacs.d/vendor/erc-terminal-notifier.el\")
;; (require 'erc-terminal-notifier)

"]) (erc-image . [(20131125 1151) ((erc (5 3))) "Show received image urls in the ERC buffer" single ";;; Commentary:
;;
;; Show inlined images (png/jpg/gif/svg) in erc buffers.  Requires
;; Emacs 24.2
;;
;; (require 'erc-image)
;; (add-to-list 'erc-modules 'image)
;; (erc-update-modules)
;;
;; Or `(require 'erc-image)` and  `M-x customize-option erc-modules RET`
;;
;; This plugin subscribes to hooks `erc-insert-modify-hook' and
;; `erc-send-modify-hook' to download and show images.  In this early
;; version it's doing this synchronously.
;;
;; The function used to display the image is bound to the variable
;; `erc-image-display-func'. There are two possible values for that,
;; `erc-image-insert-inline' and `erc-image-insert-other-buffer'.
;;
;; Set the value of erc-image-inline-rescale to a number for max size
;; of images to be displayed (resized if bigger). set the value to
;; 'window to take window height as this value
;;
"]) (erc-hl-nicks . [(20130114 1348) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single ";;; Commentary:

;; This file was originally erc-highlight-nicknames.  It was modified
;; to optionally ignore the uniquifying characters that IRC clients
;; add to nicknames

;; History

;; 1.3.1
;;
;; - Fix a require issue

;; 1.3.0 (was uploaded as 1.2.4, accidentally)
;;
;; - Fix autoloads - erc-hl-nicks should require itself as needed
;;
;; - reset face table is now interactive
;;
;; - reworked how colors are chosen (should continue to work the same
;;   for everyone, though). See `erc-hl-nicks-color-contrast-strategy'
;;   for details.
;;
;; - Added `erc-hl-nicks-bg-color' to allow terminal users to specify
;;   their background colors
;;
;; - Added `erc-hl-nicks-alias-nick' to allow setting up several nicks
;;   to use the same color
;;
;; - Added `erc-hl-nicks-force-nick-face' to force a nick to use a
;;   specific color

;; 1.2.3 - Updated copyright date
;;
;;       - Updated some formatting
;;
;;       - added highlighting on erc-send-modify-hook

;; 1.2.2 - Added dash to the list of characters to ignore
;;
;;       - Fixed an issue where timestamps could prevent highlighting
;;         from occurring

;; 1.2.1 - Remove accidental use of 'some' which comes from cl

;; 1.2.0 - Added erc-hl-nicks-skip-nicks to give a way to prevent
;;         certain nicks from being highlighted.
;;
;;       - Added erc-hl-nicks-skip-faces to give a way to prevent
;;         highlighting over other faces.  Defaults to:
;;         (erc-notice-face erc-fool-face erc-pal-face)

;; 1.1.0 - Remove use of cl package (was using 'reduce').
;;
;;       - The hook is called with a narrowed buffer, so it makes
;;         more sense to iterate over each word, one by one.  This
;;         is more efficient and has a secondary benefit of fixing a
;;         case issue.
;;
;;       - Added an option to not highlight fools

;; 1.0.4 - Use erc-channel-users instead of erc-server-users
;;
;;       - Ignore leading characters, too.

;; 1.0.3 - Was finding but not highlighting nicks with differing
;;         cases. Fixed. Ignore leading characters, too. Doc changes.

;; 1.0.2 - Fixed a recur issue, prevented another, and fixed a
;;         spelling issue.

;; 1.0.1 - tweaked so that the re-search will pick up instances of the
;;         trimmed nick, settled on 'nick' as the variable name
;;         instead of kw, keyword, word, etc

;; 1.0.0 - initial release

"]) (erc-crypt . [(20131109 546) nil "Symmetric Encryption for ERC" single ";;; Commentary:
;;
;; Minor mode for ERC that enables the use of symmetric encryption.
;;
;; An external `openssl' binary is used for the actual encryption,
;; communication with Emacs happening via `call-process-region'.
;;
"]) (eproject . [(20130220 1109) nil "assign files to projects, programatically" tar ";;; Commentary:
;;
;; Eproject is an extension that lets you group related files together
;; as projects.  It aims to be as unobtrusive as possible -- no new
;; files are created (or required to exist) on disk, and buffers that
;; aren't a member of a project are not affected in any way.
;;
;; The main starting point for eproject is defining project types.
;; There is a macro for this, define-project-type, that accepts four
;; arguments, the type name (a symbol), a list of supertypes (for
;; inheriting properties), a form that is executed to determine
;; whether a file is a member of a project, and then a free-form
;; property list.  An example will clear things up.
;;
;; Let's create a \"perl\" project type, for Perl projects that have a
;; Makefile.PL.
;;
;; (define-project-type perl (generic)
;;   (look-for \"Makefile.PL\")
;;   :relevant-files (\"\\\\.pm$\" \"\\\\.t$\"))
;;
;; Now when you open a file and somewhere above in the directory tree
;; there is a Makefile.PL, it will be a \"perl project\".
;;
;; There are a few things you get with this.  A hook called
;; perl-project-file-visit-hook will be run, and the buffer will have
;; the \"eproject-mode\" minor-mode turned on.  You can also read and
;; set metadata via the eproject-attribute and
;; eproject-add-project-metadatum calls.
;;
;; (This is mostly helpful to Lisp programmers rather than end-users;
;; if you want tools for visiting and managing projects (and ibuffer
;; integration), load `eproject-extras'.  These extras are great
;; examples of the eproject API in action, so please take a look even
;; if you don't want those exact features.)
;;
;; Let's look at the mechanics of the define-project-type call.  The
;; first argument is the name of the project type -- it can be any
;; symbol.  The next argument is a list of other projects types that
;; this project will inherit from.  That means that if you call
;; eproject-get-project-metadatum and the current project doesn't
;; define a value, we'll look at the supertypes until we get something
;; non-nil.  Usually you will want to set this to (generic), which
;; will make your type work correctly even if you don't define any of
;; your own metadata.
;;
;; The next argument is a form that will be executed with the filename
;; that was just opened bound to FILE.  It is expected to return the
;; project root, or nil if FILE is not in a project of this type.  The
;; look-for function will look up the directory tree for a file that
;; is named the same as its argument (see the docstring for
;; `eproject--look-for-impl' for all the details).  You can write any
;; Lisp here you like; we'll see some more examples later.  (You only
;; get one form, so if you need to execute more than one, just wrap it
;; in a progn.)
;;
;; The final (&rest-style) argument is a property list of initial project
;; metadata.  You can put anything you want here, as long as it is in the
;; form of a property list (keyword, value, keyword, value, ...).
;;
;; After this form runs, eproject will be able to recognize files in
;; the type of the project you defined.  It also creates a hook named
;; <type>-project-file-visit-hook.  You can do anything you want here,
;; including access (eproject-type) and (eproject-root).
;;
;; As an example, in my perl-project-file-visit-hook, I do this:
;;
;; (lambda ()
;;   (ignore-errors
;;     (stylish-repl-eval-perl
;;      (format \"use lib '%s'\" (car (perl-project-includes)))))))
;;
;; This will add the library directory of this project to my current
;; stylish-repl session, so that I can use my project in the REPL
;; immediately.  (I do something similar for Lisp + SLIME projects)
;;
;; That's basically all there is.  eproject is designed to be minimal and
;; extensible, so I hope it meets your needs.
;;
;; Please e-mail me or find me on #emacs (jrockway) if you have
;; questions.  If you'd like to send a patch (always appreciated),
;; please diff against the latest git version, available by running:
;;
;; $ git clone git://github.com/jrockway/eproject
;;
;; Share and enjoy.

"]) (epresent . [(20131107 724) nil "Simple presentation mode for Emacs Org-mode" single ";;; Commentary:

;; This is a simple presentation mode for Emacs.  It works best in
;; Emacs 23, which has nicer font rendering.

;; To use, invoke epresent-run in an org-mode buffer.  This
;; will make a full-screen frame.  Use n/p to navigate, or q to quit.
;; (There are some other key bindings too.)  Each top-level headline
;; becomes a page in the presentation and Org-mode markup is used
;; to nicely display the buffer's contents.

"]) (epl . [(20140102 211) ((cl-lib (0 3))) "Emacs Package Library" single ";;; Commentary:

;; A package management library for Emacs, based on package.el.

;; The purpose of this library is to wrap all the quirks and hassle of
;; package.el into a sane API.

;; The following functions comprise the public interface of this library:

;;; Package directory selection

;; `epl-package-dir' gets the directory of packages.

;; `epl-default-package-dir' gets the default package directory.

;; `epl-change-package-dir' changes the directory of packages.

;;; Package system management

;; `epl-initialize' initializes the package system and activates all
;; packages.

;; `epl-reset' resets the package system.

;; `epl-refresh' refreshes all package archives.

;; `epl-add-archive' adds a new package archive.

;;; Package objects

;; Struct `epl-requirement' describes a requirement of a package with `name' and
;; `version' slots.

;; `epl-requirement-version-string' gets a requirement version as string.

;; Struct `epl-package' describes an installed or installable package with a
;; `name' and some internal `description'.

;; `epl-package-version' gets the version of a package.

;; `epl-package-version-string' gets the version of a package as string.

;; `epl-package-summary' gets the summary of a package.

;; `epl-package-requirements' gets the requirements of a package.

;; `epl-package-directory' gets the installation directory of a package.

;; `epl-package-from-buffer' creates a package object for the package contained
;; in the current buffer.

;; `epl-package-from-file' creates a package object for a package file, either
;; plain lisp or tarball.

;; `epl-package-from-descriptor-file' creates a package object for a package
;; description (i.e. *-pkg.el) file.

;;; Package database access

;; `epl-package-installed-p' determines whether a package is installed.

;; `epl-installed-packages' and `epl-available-packages' get all packages
;; installed and available for installation respectively.

;; `epl-find-installed-package' and `epl-find-available-packages' find installed
;; and available packages by name.

;; `epl-find-upgrades' finds all upgradable packages.

;;; Package operations

;; `epl-package-install' installs a package.

;; `epl-package-delete' deletes a package.

;; `epl-upgrade' upgrades packages.

"]) (epic . [(20130319 2340) ((htmlize (1 47))) "Evernote Picker" tar ";;; Commentary:

;; * What is Epic ?
;;
;;   Epic is a small elisp to access Evernote process via AppleScript.
;;   Epic has these functions:
;;
;;   - Completing read for tags and notebooks:
;;     + ``epic-read-notebook'', ``epic-read-tag'', ``epic-read-tag-list'' ::
;;       for the completion of tags and notebooks.
;;
;;   - Creation of note articles:
;;     + ``epic-create-note-from-region'', ``epic-create-note-from-file'' ::
;;       for creation of a new note in your Evernote.app.
;;
;;   - For Mew users:
;;     + ``epic-mew-forward-to-evernote'' ::
;;        Nifty mail forwarder.
;;        You need to set the vars: ``epic-evernote-mail-address'',
;;        ``epic-evernote-mail-headers''
;;     + ``epic-mew-create-note'' ::
;;        Import a mail article into the local Evernote.app.
;;
;;   - For Org-mode users:
;;     With orglue.el (https://github.com/yoshinari-nomura/orglue)
;;     + Org-mode becomes to recognize evernote:// links.
;;     + You can drag notes in Evernote.app to an org-mode buffer.
;;     + ``epic-insert-selected-note-as-org-links''
;;        for insertion of org-style links.
;;
;; * Setting Example
;;
;;   : (require 'epic)
;;   : (define-key global-map [(control ?:)] 'epic-anything)
;;   : (define-key mew-summary-mode-map \"r\" 'epic-mew-create-note)
;;   : (define-key mew-summary-mode-map \"e\" 'epic-mew-forward-to-evernote)
;;   : (setq epic-evernote-mail-address \"??????@???.evernote.com\")
;;
;; * Contact Info
;;
;;   The updated version might be available from:
;;     http://github.com/yoshinari-nomura/epic

"]) (epc . [(20130803 2228) ((concurrent (0 3 1)) (ctable (0 1 2))) "A RPC stack for the Emacs Lisp" tar ";;; Commentary:

;; This program is an asynchronous RPC stack for Emacs.  Using this
;; RPC stack, the Emacs can communicate with the peer process.
;; Because the protocol is S-expression encoding and consists of
;; asynchronous communications, the RPC response is fairly good.
;;
;; Current implementations for the EPC are followings:
;; - epcs.el : Emacs Lisp implementation
;; - RPC::EPC::Service : Perl implementation

"]) (ensime . [(20131030 1503) ((s (1 3 0)) (dash (1 0 3)) (popup (0 5 0)) (auto-complete (1 4 0)) (scala-mode2 (0 21))) "ENhanced Scala Interaction Mode for Emacs" tar nil]) (enotify . [(20130407 648) nil "A networked notification system for emacs" tar nil]) (enh-ruby-mode . [(20131129 1833) nil "Major mode for editing Ruby files" tar ";;; Commentary:

;; This is a fork of http://http://github.com/jacott/Enhanced-Ruby-Mode
;; to provide further enhancements and bug fixes.
;;
;; It has been renamed to enh-ruby-mode.el to avoid name conflicts
;; with ruby-mode that ships with emacs. All symbols that started with
;; 'ruby now start with 'enh-ruby. This also makes it possible to
;; switch back and forth for testing purposes.

;; Provides fontification, indentation, syntax checking, and navigation for Ruby code.
;;
;; If you're installing manually, you should add this to your .emacs
;; file after putting it on your load path:
;;
;;    (add-to-list 'load-path \"(path-to)/Enhanced-Ruby-Mode\") ; must be added after any path containing old ruby-mode
;;    (setq enh-ruby-program \"(path-to-ruby1.9)/bin/ruby\") ; so that still works if ruby points to ruby1.8
;;

(require 'cl) ; for cdddr, caddr

"]) (enclose . [(20121008 914) nil "Enclose cursor within punctuation pairs." tar nil]) (emr . [(20130619 316) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1))) "Emacs refactoring system." tar ";;; Commentary:

;; Add this package to your load path and add an autoload for `emr-show-refactor-menu`.
;; Bind the `emr-show-refactor-menu` command to something convenient.
;;
;; (autoload 'emr-show-refactor-menu \"emr\")
;; (define-key prog-mode-map (kbd \"M-RET\") 'emr-show-refactor-menu)
;; (eval-after-load \"emr\" '(emr-initialize))
;;
;; See README.md for more information.

"]) (emms-soundcloud . [(20131221 345) ((emms (20131016)) (json (1 2))) "EMMS source for Soundcloud audio sharing platform" single ";;; Commentary:

;; After you've configured EMMS, load this file and give a Soundcloud set URL
;; to the relevant EMMS source commands.

;; Example usage:

;;    M-x emms-play-soundcloud-set RET
;;    http://soundcloud.com/devolverdigital/sets/hotline-miami-official
;;    RET

"]) (emms-mark-ext . [(20130528 2027) ((emms (3 0))) "Extra functions for emms-mark-mode and emms-tag-edit-mode" single ";;; Commentary: 
;;
;; Bitcoin donations gratefully accepted: 1DPsbd286Xq8kch5t62DfppUbcL3e6PqnT
;;
;; This library adds commands for marking tracks in the *EMMS Playlist* buffer,
;; and for altering tags in the *EMMS-TAGS* buffer. The new commands and keybinding
;; are listed below.

"]) (emms-info-mediainfo . [(20131223 500) ((emms (0))) "Info-method for EMMS using medianfo" single ";;; Commentary:

;; To activate this method for getting info, use something like:

;; (require 'emms-info-mediainfo)
;; (add-to-list 'emms-info-functions 'emms-info-mediainfo)

"]) (emms . [(20131016 932) nil "The Emacs Multimedia System" tar ";;; Commentary:

;; This is the very core of EMMS.  It provides ways to play a track
;; using `emms-start', to go through the playlist using the commands
;; `emms-next' and `emms-previous', to stop the playback using
;; `emms-stop', and to see what's currently playing using `emms-show'.

;; But in itself, this core is useless, because it doesn't know how to
;; play any tracks --- you need players for this.  In fact, it doesn't
;; even know how to find any tracks to consider playing --- for this,
;; you need sources.

;; A sample configuration is offered in emms-setup.el, so you might
;; just want to use that file.

"]) (emmet-mode . [(20130915 1708) nil "Unofficial Emmet's support for emacs" single ";;; Commentary:
;;
;; Unfold CSS-selector-like expressions to markup. Intended to be used
;; with sgml-like languages; xml, html, xhtml, xsl, etc.
;;
;; See `emmet-mode' for more information.
;;
;; Copy emmet-mode.el to your load-path and add to your .emacs:
;;
;;    (require 'emmet-mode)
;;
;; Example setup:
;;
;;    (add-to-list 'load-path \"~/Emacs/emmet/\")
;;    (require 'emmet-mode)
;;    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
;;    (add-hook 'html-mode-hook 'emmet-mode)
;;    (add-hook 'css-mode-hook  'emmet-mode)
;;
;; Enable the minor mode with M-x emmet-mode.
;;
;; See ``Test cases'' section for a complete set of expression types.
;;
;; If you are hacking on this project, eval (emmet-test-cases) to
;; ensure that your changes have not broken anything. Feel free to add
;; new test cases if you add new features.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (emamux-ruby-test . [(20130812 939) ((emamux (0 1)) (projectile (0 9 1))) "Ruby test with emamux" single ";;; Commentary:

;; emamux-ruby-test makes you test ruby file with emamux.
;; This package is inspired by vimux-ruby-test.
;;
;; To use emamux-ruby-test, add the following code into your init.el or .emacs:
;;
;;    (require 'emamux-ruby-test)
;;    (global-emamux-ruby-test-mode)
;;
;; To use emamux-ruby-test with specific mode only, add folowing:
;;
;;    (require 'emamux-ruby-test)
;;    (add-hook 'ruby-mode-hook 'emamux-ruby-test-mode)
;;
;; emamux-ruby-test provides following commands:
;;
;; Run all tests/specs in the current project
;;   C-c r T --- emamux-ruby-test:run-all
;;
;; Run all tests/specs in the current file
;;   C-c r t --- emamux-ruby-test:run-current-test
;;
;; Load ruby console dependent of current project type
;;   C-c r c --- emamux-ruby-test:run-console
;;
;; Run focused test/spec in test framework specific tool
;;   C-c r . --- emamux-ruby-test:run-focused-test
;;
;; Run focused class/context in test framework specific tool
;;   C-c r , --- emamux-ruby-test:run-focused-goal
;;
;; Close test pane
;;   C-c r k --- emamux:close-runner-pane
;;
;; Visit test pane in copy mode
;;   C-c r j --- emamux:inspect-runner

"]) (emamux . [(20130331 753) nil "Interact with tmux" single ";;; Commentary:

;; emamux makes you interact emacs and tmux.
;; emamux is inspired by `vimux' and `tslime.vim'.
;;
;; To use emamux, add the following code into your init.el or .emacs:
;;
;;    (require 'emamux)
;;
;; Please see https://github.com/syohex/emacs-emamux/
;; for more information.

"]) (emagician-fix-spell-memory . [(20130415 1244) nil "Simple hack into ispell to fix (muscle) memory problems" single ";;; Commentary:
;;   
;;   This file is part of the emagicians starter kit, which is available
;;   here: https://github.com/jonnay/emagicians-starter-kit
;;   
;;   Note that if you are using this .el file, you probably aren't using
;;   the emagicians sarter kit, which is fine. You dont need this for
;;   that.
;; 
;; * Motivation
;; 
;;   I used to type 'necessary' wrong... ALL THE TIME. I misspelled it so
;;   often that it became part of my muscle memory.  It is one of *THOSE*
;;   words for me.  There are others, that by muscle, or brain memory,
;;   are \"burned in\" as a particular pattern.
;;  
;;   This is an attempt to break that pattern, by forcing you to re-type
;;   your misspelled words 3 times.  This should help overcome any broken
;;   muscle and brain memory.
;; 
;; * Usage
;; 
;;   - Step 1 :: Require this file
;;   - Step 2 :: Use M-$ to check the spelling of your misspelled word
;;   - Step 3 :: follow the directions of the prompt
;; 
;; * Changelog
;; 
;;   - v 0.1 :: First Version
;;   - v 0.2 :: 
;;     - Minor documentation fix. 
;;   - v 0.3 ::
;;     - Fix bug when using ispell 

"]) (emacsc . [(20131027 225) nil "helper for emacsc(1)" tar ";;; Commentary:

;; emacsc(1) is a wrapper of emacsclient(1) for use within a terminal,
;; and emacsc.el is a tiny little tweak to the server module to help
;; emacsc(1) interact with the running Emacs.

;; This package contains some scripts in the `bin' directory, so
;; install them manually into a directory in your path.  For example,
;; dired(1) opens a directory with dired, magit(1) opens a directory
;; with magit-status, ediff(1) is a diff(1) like tool to invoke
;; ediff-files, and so on.

"]) (emacs-setup . [(20120727 726) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar ";;; Commentary:

;; emacs-setup is an emacs package that is meant to help make maintaining your
;; emacs setup easier. Through the use of M-x customize, the following can be
;; setup through emacs-setup:

;; Add/remove directories to the load path.
;; Add/remove directories to the environment PATH.
;; Add/remove packages to require, including any accompanying setup elisp code.
;; Set/unset and save keybindings.

;; Installation:

;; The package can be installed with M-x package-list-packages (requires
;; package.el, which is included for emacs 24 but availble for 23). The MELPA
;; repository must be added to your packages setup first. Instructions can be found
;; at http://melpa.milkbox.net/

;; Alternatively, the source can be pulled direclty from github:
;; https://github.com/echosa/emacs-setup

;; If you install via package-list-packages, revive.el will be installed for you.
;; If you do not, you will need to manually get, install, and load revive.el.
;; You can find it at http://www.gentei.org/~yuuji/software/revive.el

;; Usage:

;; In your .emacs, load emacs-setup:

;; (load-file \"~/path/to/emacs-setup/emacs-setup.el\")

;; Once loaded, you can use M-x customize-group emacs-setup to setup your
;; environment.

;; emacs-setup is broken down into several parts, which can each be customized
;; individually:

;; emacs-setup - This is the main part of emacs-setup. You can set your base
;;               directory (your .emacs.d or equivalent), directories to ignore
;;               when recursively adding to load path, and various list of
;;               s-expressions (base, pre, post, etc.) The s-expression lists
;;               can be used to setup things that would normally be in your
;;               .emacs, but are not customizable options. For instance,
;;               (set-frame-font), (set-background-color), (transient-mark-mode),
;;               etc. I'm not going to try an support every option of emacs.
;;               Instead, simply add these configuration lines (one sexp per line)
;;               to the appropriate sexp group, depending on when they need to run.
;;               When emacs-setup-base is run, the last thing it does is run all
;;               the s-expressions in emacs-setup-base-sexp. When emacs-setup is
;;               run, it runs in this order:
;;               - emacs-setup-pre-sexp
;;               - require pacakges via emacs-setup-require
;;               - emacs-setup-post-sexp
;;               - bind keys in emacs-setup-keys

;; emacs-setup-keys - This part of emacs-setup allows you to have your keybindings
;;                    all in one place via customize. You can manually add and
;;                    remove keybindings, or you can use the functions
;;                    emacs-setup-bind-key,
;;                    emacs-seutp-unbind-key-by-key, or
;;                    emacs-setup-unbind-key-by-functions
;;                    to interactively bind or unbind keys, which are saved to
;;                    customize for you.
                   
;; emacs-setup-require - This is ths part of emacs-setup where you can tell it
;;                       which packages to load, and give setup s-expressions.
;;                       You can customize the load-path and env-path, whether or
;;                       not to loade elpa and where your package.el is (if not
;;                       using emacs 24). Customizing the variable
;;                       emacs-setup-require-list
;;                       is where you can add which packages should be load, in
;;                       the order you supply them, as well as any configuration
;;                       for each package after it is loaded.
;;                       When emacs-setup is run, if any pacakges fail to load, a
;;                       buffer called *invalid-packages* will be displayed telling
;;                       you which failed.

;; emacs-setup is written and maintained by Brian Zwahr <echosa@gmail.com>

"]) (emacs-eclim . [(20140108 1251) ((json (1 2))) "An interface to the Eclipse IDE." tar nil]) (elx . [(20131209 922) ((emacs (24 3 50))) "extract information from Emacs Lisp libraries" single ";;; Commentary:

;; This package extracts information from Emacs Lisp libraries.  It
;; extends built-in `lisp-mnt', which is only suitable for libraries
;; that closely follow the header conventions.  Unfortunately there
;; are many libraries that do not - this library tries to cope with
;; that.

;; It also defines some new extractors not available in `lisp-mnt',
;; and some generalizations of extractors available in the latter.

"]) (elscreen-mew . [(20131201 36) ((elscreen (20120413 1107))) "ElScreen Add-On for Mew" single ";;; Commentary:
;; This package is ElScreen Add-On for Mew.

;;; Installation:
;; Put `elscreen-mew.el' in the `load-path' and add
;;
;;   (require 'elscreen-mew)
;;
;; to your Mew init file.

"]) (elscreen . [(20120413 807) nil "Emacs window session manager" single ";;; Commentary:

;; This is a fork of ElScreen designed to be installed with
;; package.el.  It does not require APEL (it also probably does not
;; work with XEmacs).  In order to start using ElScreen, add
;; (elscreen-start) to your emacs configuration.  For help on how to
;; use elscreen, try \\C-z ?.

"]) (elpy . [(20131109 1120) ((auto-complete (1 4)) (find-file-in-project (3 2)) (fuzzy (0 1)) (highlight-indentation (0 5 0)) (idomenu (0 1)) (iedit (0 97)) (nose (0 1 1)) (virtualenv (1 2)) (yasnippet (0 8 0))) "Emacs Python Development Environment" tar nil]) (elpa-audit . [(20131230 1344) nil "Handy functions for inspecting and comparing package archives" single ";;; Commentary:

;; Useful functions for package archive maintainers.

"]) (elnode . [(20130416 826) ((web (0 1 4)) (creole (0 8 14)) (fakir (0 0 14)) (db (0 0 5)) (kv (0 0 15))) "The Emacs webserver." tar nil]) (elmine . [(20130330 1300) nil "Redmine API access via elisp." single ";;; Commentary:

;; `elmine` provides simple means of accessing the redmine Rest API
;; programmatically. This means that you do not have interactive
;; functions but functions that give and take list representations of
;; JSON objects of the redmine API.

"]) (elm-mode . [(20140114 2016) nil "Major mode for Elm" tar ";;; Commentary:

"]) (elixir-yasnippets . [(20130908 1930) ((yasnippet (0 8 0))) "Yasnippets for Elixir" tar nil]) (elixir-mode . [(20131126 924) nil "Major mode for editing Elixir files" tar ";;; Commentary:

;; Provides font-locking, indentation and navigation support
;; for the Elixir programming language.
;;
;;
;;  Manual Installation:
;;
;;   (add-to-list 'load-path \"~/path/to/emacs-elixir/\")
;;   (require 'elixir-mode)
;;
;;  Interesting variables are:
;;
;;      `elixir-compiler-command`
;;
;;          Path to the executable <elixirc> command
;;
;;      `elixir-iex-command`
;;
;;          Path to the executable <iex> command
;;
;;      `elixir-mode-highlight-operators`
;;
;;          Option for whether or not to highlight operators.
;;
;;      `elixir-mode-cygwin-paths`
;;
;;          Use Cygwin style paths on Windows operating systems.
;;
;;      `elixir-mode-cygwin-prefix`
;;
;;          Cygwin prefix
;;
;;  Major commands are:
;;
;;       M-x elixir-mode
;;
;;           Switches to elixir-mode.
;;
;;       M-x elixir-cos-mode
;;
;;           Applies compile-on-save minor mode.
;;
;;       M-x elixir-mode-compile-file
;;
;;           Compile and save current file.
;;
;;       M-x elixir-mode-iex
;;
;;           Launch <iex> inside Emacs.
;;           Use \"C-u\" (universal-argument) to run <iex> with some additional arguments.
;;
;;       M-x elixir-mode-eval-on-region
;;
;;           Evaluates the Elixir code on the marked region.
;;           This is bound to \"C-c ,r\" while in `elixir-mode'.
;;
;;       M-x elixir-mode-eval-on-current-line
;;
;;           Evaluates the Elixir code on the current line.
;;           This is bound to \"C-c ,c\" while in `elixir-mode'.
;;
;;       M-x elixir-mode-eval-on-current-buffer
;;
;;           Evaluates the Elixir code on the current buffer.
;;           This is bound to \"C-c ,b\" while in `elixir-mode'.
;;
;;       M-x elixir-mode-string-to-quoted-on-region
;;
;;           Get the representation of the expression on the marked region.
;;           This is bound to \"C-c ,a\" while in `elixir-mode'.
;;
;;       M-x elixir-mode-string-to-quoted-on-current-line
;;
;;           Get the representation of the expression on the current line.
;;           This is bound to \"C-c ,l\" while in `elixir-mode'.
;;
;;       M-x elixir-mode-opengithub
;;
;;           Open the GitHub page of the Elixir repository.
;;
;;       M-x elixir-mode-open-elixir-home
;;
;;           Open the Elixir website.
;;
;;       M-x elixir-mode-open-docs-master
;;
;;           Open the Elixir documentation for the master.
;;
;;       M-x elixir-mode-open-docs-stable
;;
;;           Open the Elixir documentation for the latest stable release.
;;
;;       M-x elixir-mode-run-tests
;;
;;           Run ERT tests for `elixir-mode`.
;;
;;       M-x elixir-mode-show-version
;;
;;           Print `elixir-mode` version.
;;
;;   Also check out the customization group
;;
;;       M-x customize-group RET elixir RET
;;
;;   If you use the customization group to set variables like
;;   `elixir-compiler-command' or `elixir-iex-command', make sure the path to
;;   \"elixir-mode.el\" is present in the `load-path' *before* the
;;   `custom-set-variables' is executed in your .emacs file.
;;

"]) (elixir-mix . [(20131126 4) nil "Emacs integration for Elixir's mix" single ";;; Commentary:
;;
;;   Manual Installation:
;;
;;    (add-to-list 'load-path \"~/path/to/elixir-mix.el/\")
;;    (require 'elixir-mix)
;;    (global-elixir-mix-mode)
;;
;;   Interesting variables are:
;;
;;       `elixir-mix-command`
;;
;;            Path to the executable <mix> command
;;
;;       `elixir-mix-buffer-name`
;;
;;            Name for the buffer used for mix shell output.
;;
;;   Major commands are:
;;
;;        M-x elixir-mix-new
;;
;;            Create a new Elixir application.
;;
;;        M-x elixir-mix-test
;;
;;            Run the whole Elixir application test suite.
;;
;;        M-x elixir-mix-test-this-buffer
;;
;;            Run the current buffer through <mix test> command.
;;
;;        M-x elixir-mix-test-file
;;
;;            Run a file through <mix test> command.
;;
;;        M-x elixir-mix-compile
;;
;;            Compile the whole Elixir application.
;;
;;        M-x elixir-mix-run
;;
;;            Runs the given expression in the Elixir application context.
;;
;;        M-x elixir-mix-deps-with-prompt
;;
;;            Prompt for mix deps commands.
;;
;;        M-x elixir-mix-local-with-prompt
;;
;;            Prompt for mix local commands.
;;
;;        M-x elixir-mix-local-install
;;
;;            Prompt for mix local.install <path> or <url>.
;;
;;        M-x elixir-mix-local-install-with-path
;;
;;            Runs local.install and prompt for a <path> as argument.
;;
;;        M-x elixir-mix-local-install-with-url
;;
;;            Runs local.install and prompt for a <url> as argument.
;;
;;        M-x elixir-mix-help
;;
;;            Show help output for a specific mix command.
;;
;;        M-x elixir-mix-execute
;;
;;            Run any command in the context of the application.
;;            Just run any command as you like, including arguments
;;            for the specific command.  (example: test --quick)
;;

"]) (elisp-slime-nav . [(20130612 446) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single ";;; Commentary:
;;
;; This package provides Slime's convenient \"M-.\" and \"M-,\" navigation
;; in `emacs-lisp-mode', together with an elisp equivalent of
;; `slime-describe-symbol', bound by default to `C-c C-d d`.
;;
;; When the main functions are given a prefix argument, they will
;; prompt for the symbol upon which to operate.
;;
;; Usage:
;;
;; Enable the package in elisp and ielm modes as follows:
;;
;;   (require 'elisp-slime-nav) ;; optional if installed via package.el
;;   (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
;;     (add-hook hook 'turn-on-elisp-slime-nav-mode))
;;
;; Known issues:
;;
;;   When navigating into Emacs' C source, \"M-,\" will not be bound to
;;   the same command, but \"M-*\" will typically do the trick.
;;
"]) (elisp-sandbox . [(20131116 1042) nil "Evaluate EmacsLisp expressions in a sandbox" single nil]) (elisp-depend . [(20120427 123) nil "Parse depend libraries of elisp file." single ";;; Commentary:
;;
;; Parse depend libraries of elisp file.
;;
;; This packages is parse current elisp file and get
;; depend libraries that need.
;;
;; Default, it will use function `symbol-file' to get
;; depend file with current symbol.
;; And then use `featurep' to test this file whether
;; write `provide' sentences for feature reference.
;; If `featurep' return t, generate depend information
;; as \"(require 'foo)\" format.
;; If `featurep' return nil, generate depend
;; as \"(autoload 'foo \"FooFile\")\" format.
;;
;; This packages will always return depend information as `autoload'
;; format if a feature not write `provide' information in source code.
;;
;; Below are commands you can use:
;;
;; `elisp-depend-insert-require'        insert depends code.
;; `elisp-depend-insert-comment'        insert depends comment.
;;

;;; Installation:
;;
;; Put elisp-depend.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'elisp-depend)
;;
;; NOTE:
;;
;; Default, if your Emacs is install at \"/usr/share/emacs/\",
;; You can ignore below setup.
;;
;; Otherwise you need setup your Emacs directory with
;; option `elisp-depend-directory-list', like below:
;;
;; (setq elisp-depend-directory-list '(\"YourEmacsDirectory\"))
;;

"]) (elhome . [(20131202 1108) ((initsplit (20120630))) "A framework for a \"home\" Emacs configuration" tar ";;; Commentary:

;; Everything you need to hang your emacs customizations off of,
;; install your own packages, etc., without the system becoming
;; unscalable

;; Install:
;; See README.markdown for details. You need to call (elhome-init),
;; which el-get can do for you, or you can load this file manually and
;; then call (elhome-init).

;; *** IMPORTANT NOTE ***: I would rather call this module ElHombre,
;; but can't find a good excuse.

;; This file is in the public domain

"]) (elfeed-web . [(20130908 1434) ((simple-httpd (1 4 3)) (elfeed (1 0 1)) (emacs (24 1))) "web interface to Elfeed" tar nil]) (elfeed . [(20140103 1226) ((emacs (24 1))) "an Emacs Atom/RSS feed reader" tar nil]) (elein . [(20120120 316) nil "running leiningen commands from emacs" single ";;; Commentary:
;; Provides support for running leiningen commands like swank and test.

"]) (electric-case . [(20130620 154) nil "insert camelCase, snake_case words without \"Shift\"ing" single ";;; Commentary:

;; 1. Usage

;; 1.A. Overview
;;
;; For example, to try electric-case-mode in java-mode, put following expression
;; into your init file.
;;
;;   (require 'electric-case)
;;
;;   (eval-after-load \"cc-mode\"
;;     (add-hook 'java-mode-hook 'electric-case-java-init))
;;
;; Now, when you type following expression as usual in java-mode,
;;
;;   public class test-class{
;;       public void test-method(void){
;;
;; electric-case will automatically convert it into :
;;
;;   public class TestClass{
;;       public void testMethod(void){

;; Settings for some other languages are also available by default. Try:
;;
;;   (eval-after-load \"cc-mode\"
;;     (add-hook 'c-mode-hook electric-case-c-init))
;;
;;   (eval-after-load \"ahk-mode\"
;;     (add-hook 'ahk-mode-hook electric-case-ahk-init))
;;
;;   (eval-after-load \"scala-mode\"
;;     (add-hook 'scala-mode-hook electric-case-scala-init))
;;
;; If you want to use electric-case-mode on other languages than above,
;; you may make your own setting. Read section 2.

;; 1.B. \"convert-calls\"
;;
;; electric-case do not convert other expressions than declarations, by default. To
;; enable conversion for other expressions, set \"electric-case-convert-calls\" non-nil.
;;
;;   (setq electric-case-convert-calls t)
;;
;; This sometimes produces confusing results for novice users. For example,
;;
;;   foo-bar
;;
;; is not treated as \"foo minus bar\", but converted to
;;
;;   fooBar
;;
;; To make \"-\" treated as subtraction or negation, insert whitespace around it.
;;
;;   foo - bar
;;
;; I recommend to keep \"electric-case-convert-calls\" nil, because convert-calls may be
;; too noisy. Once declared, symbols may be inserted easily using completion. This
;; script is useful when you TYPE camel-case or snake-case symbols. But in case you do
;; not need to type, not to type is much better.

;; 1.C. \"convert-nums\", \"convert-beginning\", and \"convert-end\"
;;
;; Even if \"electric-case-convert-calls\" is non-nil, numbers, and hyphens at beginning/end of
;; symbols are not converted.
;;
;;   -foo-1  =>  -foo-1
;;
;; You may change this behavior by turning some of three variables to non-nil.
;;
;;   (setq electric-case-convert-nums t)      hyphens around numbers
;;   (setq electric-case-convert-beginning t) hyphens at beginning of symbols
;;   (setq electric-case-convert-end t)       hyphens at end of symbols
;;
;; When you insert an expression \"-foo--1--bar-\",
;;
;;                   +---num
;;                   |     +--- num
;;                   V     V
;;    -  f  o  o  -  -  1  -  -  b  a  r  -
;;    ^           ^           ^           ^
;;    |           +--- end    |           +--- end
;;    +--- beginning          +--- beginning
;;
;; electric-case will convert it like:
;;
;;                      num beg end
;;
;;     -foo--1--bar-    nil nil nil
;;     -foo-1--bar      nil nil  t
;;     Foo--1-Bar-      nil  t  nil
;;     -foo1Bar-         t  nil nil
;;     Foo1Bar           t   t   t

;; 1.D. overlays
;;
;; Symbols that are going to converted are printed in gray. If this is not confortable for you,
;; evaluate following expression to disable it.
;;
;;   (setq electric-case-pending-overlay nil)
;;
;; Or you may also choose another face for overlay.
;;
;;   (setq electric-case-pending-overlay 'highlight)

;; 1.E. disable electric-case
;;
;; If you want to disable electric-case temporally, use command \"M-x electric-case-mode\"
;; or evaluate expression below :
;;
;;   (electric-case-mode -1)
;;
;; To activate again, call the same command again, or evaluate expression below :
;;
;;   (electric-case-mode 1)

;; 2. Language Configuration

;; There are two important buffer-local variables. To add settings for other languages,
;; configure them.

;; - electric-case-criteria
;;
;;   Set a function that defines which case to convert the symbol into. The function
;;   will be given 2 arguments: the beginning and the end point of the symbol that is
;;   going to be converted. The function must return one of 'camel, 'ucamel, 'snake,
;;   'usnake, or nil. When the return value is nil, conversion for the symbol is canceled.
;;
;;   Remember, that if \"electric-case-convert-calls\" is nil, symbols not in declarations are
;;   not expected to be converted. electric-case does not judge if the symbol is in a
;;   declaration. So criteria function should return nil in that case.
;;
;;   Here is an example:
;;
;;     (setq electric-case-criteria
;;           (lambda (b e n)
;;             (let ((proper (text-properties-at b)))
;;               (cond ((member 'font-lock-function-name-face proper) 'snake)
;;                     ((member 'font-lock-variable-name-face proper)
;;                      (if (member '(cpp-macro) (c-guess-basic-syntax))
;;                          'usnake 'snake))
;;                     (electric-case-convert-calls 'snake)
;;                     (t nil)))))
;;
;;   with criteria above, function declarations and variable declarations are converted
;;   into snake_case. Macro declarations are converted into UP_SNAKE_CASE. Other expressions
;;   are converted into snake_case, if \"electric-case-convert-calls\" is non-nil. Otherwise,
;;   are not converted, even if that contain \"-\". This may be one of the minimal criterias
;;   for C-language.

;; - electric-case-max-iteration
;;
;;   For example, in Java, the syntactical category of the symbol \"what-is-this\" below
;;   is not decidable.
;;
;;     what-is-this
;;
;;   But when \"symbol;\" is added, now \"what-is-this\" is a name of a class.
;;
;;     what-is-this symbol;
;;
;;   So electric-case can convert it.
;;
;;     WhatIsThis symbol;
;;
;;   In the example above, the symbol \"what-is-this\" must be checked twice. Then,
;;   \"electric-case-max-iteration\" must be 2 or greater. Otherwise, \"what-is-this\" is
;;   not checked twice, and not be converted.

"]) (eldoc-extension . [(20130824 1156) nil "Some extension for eldoc" single ";;; Commentary:
;;
;; Some extension for eldoc
;;

"]) (eldoc-eval . [(20140104 838) nil "Enable eldoc support when minibuffer is in use." single ";;; Commentary:
;;
;; This package enables eldoc support when minibuffer is in use.
;;
;; Eldoc info is shown by default in mode-line,
;; but you can have eldoc info somewhere else by setting
;; `eldoc-in-minibuffer-show-fn' to another function (e.g `tooltip-show').
;;
;; By default with this package `M-:' will use `pp-eval-expression'
;; instead of `eval-expression'; you can change that by setting
;; `eldoc-eval-preferred-function'.
;;
;; It also provides a convenient macro to enable eldoc support
;; in your own functions using minibuffer or in your defadvices,
;; that is `with-eldoc-in-minibuffer'.
;;
;; Users of own minibuffer frame will have to set
;; `eldoc-in-minibuffer-own-frame-p' to non-nil.
;;
;; You can turn On/Off eldoc support in minibuffer any time
;; with `eldoc-in-minibuffer-mode'.
;;
"]) (el-x . [(20140111 1401) nil "main entry point for el-x package" tar ";;; Commentary:

;; Because sometimes Emacs core is not enough...

"]) (el-swank-fuzzy . [(20130824 1157) nil "fuzzy symbol completion." single ";;; Commentary:
;;
;; This program is based on the swank-fuzzy.lisp.
;; Thanks the CL implementation authors for that useful software.

;; I love the SLIME/swank's FUZZY-COMPLETIONS. It provides fairly sane
;; completion results neary invariably. So I translated the original CL
;; implementation into Emacs Lisp. Thankfully, the core part of the scoring
;; algorithm in this package is almost identical that in the CL implementation.
;; (Thanks Emacs Lisp cl package!). Visit the SLIME site
;; http://common-lisp.net/project/slime/

;; This file provides a single function, `el-swank-fuzzy-completions',
;; which you can use for the SLIME/swank's FUZZY-COMPLETIONS alike completion
;; function for Emacs Lisp.

"]) (el-spy . [(20131226 1208) nil "Mocking framework for Emacs lisp. It also support spy, proxy." single ";;; Commentary:

;; ########   Compatibility   ########################################
;;
;; Works with Emacs-24.2

;; ########   Quick start   ########################################
;;
;; Add to your ~/.emacs
;;
;; (require 'el-spy)

;;; Code: section

(require 'advice)
(eval-when-compile (require 'cl))
;;for should in el-spy:make-args-keylist
(require 'ert)

(defun el-spy:setup-mock (funcsym)
  (el-spy:put-args funcsym nil)
  (when (fboundp funcsym)
    (put funcsym 'el-spy:original-func (symbol-function funcsym))))

(defun el-spy:get-original-func (symbol)
  (get symbol 'el-spy:original-func))

(defun el-spy:teardown-mock (funcsym)
  (el-spy:put-args funcsym nil)
  (let ((func (el-spy:get-original-func funcsym)))
    (if func
        (ad-safe-fset funcsym func)
      (fmakunbound funcsym))))

(defmacro with-el-spy (&rest body)
  (declare (indent 0) (debug t))
  `(progn
     ;; macrolet
     (letf (((symbol-function 'defmock) (symbol-function 'el-spy:defmock)))
       (let ((el-spy:original-func nil))
         (unwind-protect
             (progn ,@body)
           (mapc #'el-spy:teardown-mock el-spy:original-func)
           )))))

(defalias 'with-mock2 'with-el-spy)

;; user level
(defun el-spy:get-args (symbol)
  (get symbol 'el-spy:args))
(defalias 'el-spy:args-for-call 'el-spy:get-args)

(defun el-spy:put-args (symbol args)
  (put symbol 'el-spy:args args))

(defun el-spy:append-args (symbol arglist)
  (el-spy:put-args
   symbol
   (append (get symbol 'el-spy:args) arglist)))

(defun el-spy:not-called (symbol)
  (eq (length (el-spy:get-args symbol)) 0))

(defun el-spy:called-count (symbol)
  (length (el-spy:get-args symbol)))

(defvar el-spy:func-name nil)

(defmacro el-spy:defmock (symbol arglist &rest body)
  (declare (indent defun) (debug t))
  `(progn
     (unless (boundp 'el-spy:original-func)
       (error \"not in with-mock\"))
     (push ',symbol el-spy:original-func)
     (el-spy:setup-mock ',symbol)
     (ad-safe-fset
      ',symbol
      (lambda ,arglist
        (setq el-spy:func-name ',symbol)
        (el-spy:append-args ',symbol (list (mapcar 'symbol-value ',arglist)))
        ;; Even if body include interactive, it works well.
        ;; Undocumented behavior?
        ,@body)
      )))
;; user level
(defmacro defproxy (symbol arglist &rest body)
  ;; todo
  )
;; user level
(defun el-spy:make-returns-keylist (list default)
  (append
   (let ((i 0))
     (mapcar (lambda (elem) (list (incf i) elem)) list))
   `((t ,default))))

(defun el-spy:make-args-keylist (arg list default)
  (el-spy:make-returns-keylist
   (mapcar (lambda (elem) (list 'should `(equal ,arg ,elem))) list) 6)
  )
;; user level
(defmacro el-spy:returns (list default)
  `(case (el-spy:called-count el-spy:func-name)
     ,@(el-spy:make-returns-keylist list default)))
;; user level
(defmacro el-spy:args (symbol list default)
  `(case (el-spy:called-count el-spy:func-name)
     ,@(el-spy:make-args-keylist symbol list default)))

;; el-mock limitation
;; (with-mock
;;   (mock (test1) :times 0)
;;   (call-interactively 'test1);; error
;;  )
(provide 'el-spy)

;;; el-spy.el ends here
"]) (el-sprunge . [(20140106 1739) ((web-server (20140105 2246)) (htmlize (20130207 1202)) (emacs (24 3))) "Command line paste server with Emacs highlighting" tar nil]) (el-spice . [(20140113 816) ((thingatpt+ (0))) "Extra spice for emacs lisp programming" tar ";;; Commentary:
;;
;; Refer to installation instructions in the README document.
;;
"]) (el-spec . [(20121018 4) nil "ruby's rspec like syntax test frame work" single ";;; Commentary:

;; ########   Compatibility   ########################################
;;
;; Works with Emacs-23.2.1, 23.1.1

;; ########   Quick start   ########################################
;;
;; Add to your ~/.emacs
;;
;; (require 'el-spec)
;;
;; and write some test, for example
;;
;; (dont-compile
;;   (when (fboundp 'describe)
;;     (describe \"description\"
;;       (before
;;         (message \"before common\"))
;;       (after
;;         (message \"after common\\n\"))
;;       (context \"when 1\"
;;         (before
;;           (message \"before 1\"))
;;         (after
;;           (message \"after 1\"))
;;         (it \"test 1\"
;;           (message \"test 1\")))
;;       (context \"when 2\"
;;         (before
;;           (message \"before 2\"))
;;         (after
;;           (message \"after 2\"))
;;         (it \"test 2\"
;;           (message \"test 2\")))
;;       )))
;;
;; output is like this.
;;
;; before common
;; before 1
;; test 1
;; after 1
;; after common
;;
;; before common
;; before 2
;; test 2
;; after 2
;; after common

"]) (el-mock . [(20130806 1348) nil "Tiny Mock and Stub framework in Emacs Lisp" single ";;; Commentary:

;; Emacs Lisp Mock is a library for mocking and stubbing using
;; readable syntax. Most commonly Emacs Lisp Mock is used in
;; conjunction with Emacs Lisp Expectations, but it can be used in
;; other contexts.

"]) (el-autoyas . [(20120918 617) nil "Automatically create Emacs-Lisp Yasnippets" tar ";;; Commentary: 
;; 
;; * About
;; el-autoyas is a small complement to yasnippet for emacs-lisp-mode.  It
;; provides automatically created yasnippets from eldoc argument lists.
;; * Requirements
;;  - [[https://github.com/capitaomorte/yasnippet][yasnippet]]
;;  - eldoc
;; * Usage
;;  - To expand the snippet, type the function name or abbrevation and
;;    then press `TAB'
;;  - To jump to the next field press `TAB'.  If you did not change the
;;    field, either the parameter is kept, or replaced with `nil' or
;;    nothing depending on the argument list.
;;  - *NOTE* To use some of the more common functions, you may wish to
;;    delete all the emacs-lisp snippets in the snippets directory.
;; * Limitations
;;  - Currently does not support common lisp key functions
;;  - Unclear if nested snippet expansion is supported.
;; * Loading el-autoyas in ~/.emacs
;; You may use marmalade-repo and ELPA to install el-autoyas, or put it
;; into your load-path and put the following in =~/.emacs=:
;; 
;; 
;;     (require 'el-autoyas)
;; 
;; *Hook run on package load.
;; Suggestion: Add `el-autoyas-install'.
;; *Hook run on package load.
;; Suggestion: Add `el-autoyas-install'.
;; *Hook run on package load.
;; Suggestion: Add `el-autoyas-install'.
;; 
;; *** yas-backward-compatability
;; Yasnippet backward compatability functions used in el-autoyas.el
;; 
;; Value: ((yas/expand-snippet yas-expand-snippet)
;;  (yas/modified-p yas-modified-p)
;;  (yas/moving-away-p yas-moving-away-p)
;;  (yas/text yas-text)
;;  (yas/skip-and-clear-or-delete-char yas-skip-and-clear-or-delete-char)
;;  (yas/snippets-at-point yas--snippets-at-point)
;;  (yas/update-mirrors yas--update-mirrors)
;;  (yas/fallback-behavior yas-fallback-behavior)
;;  (yas/minor-mode yas-minor-mode))
;; 
;; 
;; *Hook run on package load.
;; Suggestion: Add `el-autoyas-install'.
;; 
;; *** yas-backward-compatability
;; Yasnippet backward compatability functions used in el-autoyas.el
;; 
;; Value: ((yas/expand-snippet yas-expand-snippet)
;;  (yas/modified-p yas-modified-p)
;;  (yas/moving-away-p yas-moving-away-p)
;;  (yas/text yas-text)
;;  (yas/skip-and-clear-or-delete-char yas-skip-and-clear-or-delete-char)
;;  (yas/snippets-at-point yas--snippets-at-point)
;;  (yas/update-mirrors yas--update-mirrors)
;;  (yas/fallback-behavior yas-fallback-behavior)
;;  (yas/minor-mode yas-minor-mode))
;; 
;; 
;; *Hook run on package load.
;; Suggestion: Add `el-autoyas-install'.
;; 
;; *** yas-backward-compatability
;; Yasnippet backward compatability functions used in el-autoyas.el
;; 
;; Value: ((yas/expand-snippet yas-expand-snippet)
;;  (yas/modified-p yas-modified-p)
;;  (yas/moving-away-p yas-moving-away-p)
;;  (yas/text yas-text)
;;  (yas/skip-and-clear-or-delete-char yas-skip-and-clear-or-delete-char)
;;  (yas/snippets-at-point yas--snippets-at-point)
;;  (yas/update-mirrors yas--update-mirrors)
;;  (yas/fallback-behavior yas-fallback-behavior)
;;  (yas/minor-mode yas-minor-mode))
;; 
;; 
;; *Hook run on package load.
;; Suggestion: Add `el-autoyas-install'.
;; 
;; *** yas-backward-compatability
;; Yasnippet backward compatability functions used in el-autoyas.el
;; 
;; Value: ((yas/expand-snippet yas-expand-snippet)
;;  (yas/modified-p yas-modified-p)
;;  (yas/moving-away-p yas-moving-away-p)
;;  (yas/text yas-text)
;;  (yas/skip-and-clear-or-delete-char yas-skip-and-clear-or-delete-char)
;;  (yas/snippets-at-point yas--snippets-at-point)
;;  (yas/update-mirrors yas--update-mirrors)
;;  (yas/fallback-behavior yas-fallback-behavior)
;;  (yas/minor-mode yas-minor-mode))
;; 
;; 
;; *Hook run on package load.
;; Suggestion: Add `el-autoyas-install'.
;; 
;; *** yas-backward-compatability
;; Yasnippet backward compatability functions used in el-autoyas.el
;; 
;; Value: ((yas/expand-snippet yas-expand-snippet)
;; (yas/modified-p yas-modified-p)
;; (yas/moving-away-p yas-moving-away-p)
;; (yas/text yas-text)
;; (yas/skip-and-clear-or-delete-char yas-skip-and-clear-or-delete-char)
;; (yas/snippets-at-point yas--snippets-at-point)
;; (yas/update-mirrors yas--update-mirrors)
;; (yas/fallback-behavior yas-fallback-behavior)
;; (yas/minor-mode yas-minor-mode))
;; 
;; 
;; *Hook run on package load.
;; Suggestion: Add `el-autoyas-install'.
;; 
;; *** yas-backward-compatability
;; Yasnippet backward compatability functions used in el-autoyas.el
;; 
;; Value: ((yas/expand-snippet yas-expand-snippet)
;; (yas/modified-p yas-modified-p)
;; (yas/moving-away-p yas-moving-away-p)
;; (yas/text yas-text)
;; (yas/skip-and-clear-or-delete-char yas-skip-and-clear-or-delete-char)
;; (yas/snippets-at-point yas--snippets-at-point)
;; (yas/update-mirrors yas--update-mirrors)
;; (yas/fallback-behavior yas-fallback-behavior)
;; (yas/minor-mode yas-minor-mode))
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
"]) (ein . [(20130711 104) ((websocket (0 9)) (request (0 2)) (auto-complete (1 4))) "Emacs IPython Notebook" tar nil]) (eimp . [(20091025 922) nil "Emacs Image Manipulation Package" single ";;; Commentary:
;;
;; This package allows interactive image manipulation from within
;; Emacs.  It uses the mogrify utility from ImageMagick to do the
;; actual transformations.
;;
;; Switch the minor mode on programmatically with:
;;
;;     (eimp-mode 1)
;;
;; or toggle interactively with M-x eimp-mode RET.
;;
;; Switch the minor mode on for all image-mode buffers with:
;;
;;     (autoload 'eimp-mode \"eimp\" \"Emacs Image Manipulation Package.\" t)
;;     (add-hook 'image-mode-hook 'eimp-mode)

"]) (egison-mode . [(20131118 1726) nil "Egison editing mode" single nil]) (egg . [(20130701 1725) nil "Emacs Got Git - Emacs interface to Git" tar nil]) (efire . [(20130811 1649) ((circe (1 2))) "Use campfire from Emacs" single ";;; Commentary:

;; Set or customize the variable `efire-host':
;;
;;  (setq efire-host \"yourhost.campfirenow.com\")
;;
;; And then M-x efire-join-room
;;
;; If you need to log in to a diferent server, reset `efire-host' to a different
;; value and remember to do:
;;
;; M-x efire-init
;;

"]) (editorconfig . [(20131024 119) nil "EditorConfig Emacs extension" single ";;; Commentary:

;; EditorConfig helps developers define and maintain consistent
;; coding styles between different editors and IDEs.

;; The EditorConfig project consists of a file format for defining
;; coding styles and a collection of text editor plugins that enable
;; editors to read the file format and adhere to defined styles.
;; EditorConfig files are easily readable and they work nicely with
;; version control systems.

"]) (edit-server-htmlize . [(20130329 1548) ((edit-server (1 9))) "(de)HTMLization hooks for edit-server.el" single ";;; Commentary:

;; This is intended for use with edit-server.el and the corresponding
;; \"Edit with Emacs\" extension for the Chromium/Google Chrome Web browser.
;; See https://github.com/stsquad/emacs_chrome
;;
;; This provides some simple functions for deHTMLizing and reHTMLizing
;; \"plain text\" as encoded by e.g. GMail composition boxes.

"]) (edit-server . [(20131229 441) nil "server that responds to edit requests from Chrome" single ";;; Commentary:

;; This provides an edit server to respond to requests from the Chrome
;; Emacs Chrome plugin. This is my first attempt at doing something
;; with sockets in Emacs. I based it on the following examples:
;;
;;   http://www.emacswiki.org/emacs/EmacsEchoServer
;;   http://nullprogram.com/blog/2009/05/17/
;;
;; To use it ensure the file is in your load-path and add something
;; like the following examples to your .emacs:
;;
;; To open pages for editing in new buffers in your existing Emacs
;; instance:
;;
;;   (when (require 'edit-server nil t)
;;     (setq edit-server-new-frame nil)
;;     (edit-server-start))
;;
;; To open pages for editing in new frames using a running emacs
;; started in --daemon mode:
;;
;;   (when (and (require 'edit-server nil t) (daemonp))
;;     (edit-server-start))
;;
;; Buffers are edited in `text-mode' by default; to use a different
;; major mode, change `edit-server-default-major-mode' or customize
;; `edit-server-url-major-mode-alist' to specify major modes based
;; on the remote URL:
;;
;;   (setq edit-server-url-major-mode-alist
;;         '((\"github\\\\.com\" . markdown-mode)))
;;
;; Alternatively, set the mode in `edit-server-start-hook'.  For
;; example:
;;
;; (add-hook 'edit-server-start-hook
;;          (lambda ()
;;            (when (string-match \"github.com\" (buffer-name))
;;              (markdown-mode))))


"]) (edit-list . [(20100930 743) nil "edit a single list" single ";;; Commentary:

;; So you've just added an incorrect entry to auto-mode-alist and want
;; to fix it quickly.  `M-x edit-list RET auto-mode-alist RET' to the
;; rescue.  Make your changes and hit either `C-x C-s' or `C-c C-c'
;; when done.  Or just kill the buffer if you change your mind.

"]) (edit-color-stamp . [(20130529 1033) ((es-lib (0 2)) (cl-lib (1 0))) "Edit a hex color stamp, using a QT or the internal color picker" tar ";;; Commentary:

;; The project is hosted at https://github.com/sabof/edit-color-stamp
;; The latest version, and all the relevant information can be found there.
;;
;; You should find a qt_color_picker folder in the same directory as this file.
;; If you want to use the QT color picker, go to that folder and run:

;; $ qmake qt_color_picker.pro; make

;; then move the qt_color_picker executable somewhere in your path, or point the
;; ecs-qt-picker-exec variable to it's location.

"]) (edebug-x . [(20130615 2155) nil "Extensions for Edebug" single ";;; Commentary:

;; Extension to Edebug to make it a little nicer to work with.

;; Breakpoints can now be toggled from an Elisp buffer without first
;; running Edebug with `edebug-x-modify-breakpoint-wrapper', bound to
;; `C-x SPC'. If the function isn't instrumented already then it will
;; instrument it and then set the breakpoint. Conditional breakpoints
;; can also be set by calling the previous command with a prefix
;; argument.

;; The list of current break points can be viewed with
;; `edebug-x-show-breakpoints', bound to `C-c C-x b'. From the
;; tabulated list buffer the following commands are available:

;; `edebug-x-kill-breakpoint' bound to `K': clear breakpoint
;; `edebug-x-visit-breakpoint' bound to `RET': visit breakpoint location

;; To view a list of instrumented functions execute `C-c C-x i',
;; `edebug-x-show-instrumented'. The instrumented functions buffer has
;; these commands:

;; `edebug-x-evaluate-function' bound to `E': evaluate function,
;; clearing breakpoints within it.
;; `edebug-x-find-function' bound to `RET': jump to function.

;; There is also a convenience command, `edebug-x-show-data' (bound to
;; `C-c C-x s') which will split the window into two showing both the
;; breakpoints and instrumented function buffers. Executing `Q' will
;; remove both these buffers.

"]) (edbi . [(20130809 556) ((concurrent (0 3 1)) (ctable (0 1 2)) (epc (0 1 1))) "Emacs Database Interface" tar nil]) (ecukes . [(20140114 435) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar nil]) (ecb . [(20131116 1319) nil "a code browser for Emacs" tar ";;; Commentary:
;;
;; ECB stands for \"Emacs Code Browser\".  While Emacs already has good
;; *editing* support for many modes, its *browsing* support is somewhat
;; lacking. That's where ECB comes in: it displays a number of informational
;; windows that allow for easy source code navigation and overview.
;;
;; The informational windows can contain:
;;
;; - A directory tree,
;; - a list of source files in the current directory,
;; - a list of functions/classes/methods/... in the current file, (ECB uses
;;   the Semantic Bovinator, or Imenu, or etags, for getting this list so all
;;   languages supported by any of these tools are automatically supported by
;;   ECB too)
;; - a history of recently visited files, 
;; - the Speedbar and
;; - output from compilation (the \"*compilation*\" window) and other modes like
;;   help, grep etc. or whatever a user defines to be displayed in this
;;   window.
;;
;; As an added bonus, ECB makes sure to keep these informational windows visible,
;; even when you use C-x 1 and similar commands.
;;
;; It goes without saying that you can configure the layout, ie which
;; informational windows should be displayed where. ECB comes with a number of
;; ready-made window layouts to choose from.
;;
;; Here is an ascii-screenshot of what ECB offers you:
;;
;;   ------------------------------------------------------------------
;;   |              |                                                 |
;;   | Directories  |                                                 |
;;   |              |                                                 |
;;   |--------------|                                                 |
;;   |              |                                                 |
;;   | Sources      |                                                 |
;;   |              |                                                 |
;;   |--------------|                   Edit-area                     |
;;   |              |    (can be splitted in several edit-windows)    |
;;   | Methods/Vars |                                                 |
;;   |              |                                                 |
;;   |--------------|                                                 |
;;   |              |                                                 |
;;   | History      |                                                 |
;;   |              |                                                 |
;;   ------------------------------------------------------------------
;;   |                                                                |
;;   |                 Compilation-window (optional)                  |
;;   |                                                                |
;;   ------------------------------------------------------------------
;;

;;; Installation
;;
;; To use the Emacs code browser add the ECB files to your load path and add the
;; following line to your .emacs file:
;;
;; If you want autoloading ECB after first start:
;;
;;    (require 'ecb-autoloads)
;;
;; or if you want loading the complete ECB:
;;
;;    (require 'ecb)
;;
;; Optional: You can byte-compile ECB with `ecb-byte-compile' after the
;;           ECB-package is loaded


;;; Requirements
;;
;; - Semantic, author-version between >= 1.4
;;   (http://cedet.sourceforge.net/semantic.shtml).
;; - Eieio, author-version >= 0.17
;;   (http://cedet.sourceforge.net/eieio.shtml).
;; - speedbar, author version >= 0.14beta1
;;   (http://cedet.sourceforge.net/speedbar.shtml)
;; - Optional: If Java code is edited the ECB works best when the JDEE package
;;   (http://sunsite.auc.dk/jde) is installed.


;;; Activation
;;
;; ECB is either activated and started by calling
;;    M-x ecb-activate
;; or
;;    via the menu \"Tools --> Start Code Browser (ECB)\"
;;
;; ECB can also be (de)activated/toggled by M-x ecb-minor-mode.
;;
;; After activating ECB you should call `ecb-show-help' to get a detailed
;; description of what ECB offers to you and how to use ECB.


;;; Availability
;;
;; The latest version of the ECB is available at http://ecb.sourceforge.net

;;; History
;;
;; For the ChangeLog of this file see the CVS-repository. For a complete
;; history of the ECB-package see the file NEWS.

"]) (ebib . [(20140104 322) nil "a BibTeX database manager" tar ";;; Commentary:

;; Ebib is a BibTeX database manager that runs in GNU Emacs. With Ebib, you
;; can create and manage .bib-files, all within Emacs. It supports @string
;; and @preamble definitions, multi-line field values, searching, and
;; integration with Emacs' (La)TeX mode.

;; See the Ebib manual for usage and installation instructions.

;; The latest release version of Ebib, contact information and mailing list
;; can be found at <http://ebib.sourceforge.net>. Development sources can be
;; found at <https://github.com/joostkremers/ebib>.

;; Code:

(eval-and-compile
  (if (string< (format \"%d.%d\" emacs-major-version emacs-minor-version) \"24.3\")
      (progn
        (require 'cl)
        (defalias 'cl-caddr 'caddr)
        (defalias 'cl-defstruct 'defstruct)
        (defalias 'cl-do 'do)
        (defalias 'cl-dolist 'dolist)
        (defalias 'cl-first 'first)
        (defalias 'cl-flet 'flet)
        (defalias 'cl-incf 'incf)
        (defalias 'cl-labels 'labels)
        (defalias 'cl-loop 'loop)
        (defalias 'cl-macrolet 'macrolet)
        (defalias 'cl-multiple-value-bind 'multiple-value-bind)
        (defalias 'cl-multiple-value-setq 'multiple-value-setq)
        (defalias 'cl-remove 'remove*)
        (defalias 'cl-remove-if-not 'remove-if-not)
        (defalias 'cl-second 'second)
        (defalias 'cl-third 'third)
        (defalias 'cl-values 'values)
        (unless (fboundp 'read-char-choice)
          (defun read-char-choice (prompt chars)
            \"Emacs 23 compatability function.\"
            (string-to-char (completing-read prompt chars)))))
    (require 'cl-lib)))
(require 'easymenu)
(require 'bibtex)
(require 'pp)
(require 'ebib-db)

;; make sure we can call bibtex-generate-autokey
(declare-function bibtex-generate-autokey \"bibtex\" nil)
(if (fboundp 'bibtex-set-dialect)
    (bibtex-set-dialect)) ; this initializes some stuff that is needed for bibtex-generate-autokey

;;;;;;;;;;;;;;;;;;;;;;
;; global variables ;;
;;;;;;;;;;;;;;;;;;;;;;

;; user customisation

(defgroup ebib nil \"Ebib: a BibTeX database manager\" :group 'tex)

(defgroup ebib-windows nil \"Ebib window management\" :group 'ebib)

(defcustom ebib-default-type 'article
  \"The default type for a newly created BibTeX entry.\"
  :group 'ebib
  :type 'symbol)

(defcustom ebib-preload-bib-files nil
  \"List of BibTeX files to load automatically when Ebib starts.\"
  :group 'ebib
  :type '(repeat (file :must-match t)))

(defcustom ebib-bib-search-dirs '(\"~\")
  \"List of directories to search for BibTeX files.
A file passed to the function `ebib' is searched in these
directories if it is not in the current directory. similarly, the
files in `ebib-preload-bib-files' are searched in these
directories.\"
  :group 'ebib
  :type '(repeat :tag \"Search directories for BibTeX files\" (string :tag \"Directory\")))

(defcustom ebib-create-backups t
  \"If set, create a backup file of a BibTeX file when it is first saved.\"
  :group 'ebib
   :type '(choice (const :tag \"Create backups\" t)
                 (const :tag \"Do not create backups\" nil)))

(defcustom ebib-additional-fields '(crossref
                                    url
                                    annote
                                    abstract
                                    keywords
                                    file
                                    timestamp
                                    doi)
  \"List of the additional fields.\"
  :group 'ebib
  :type '(repeat (symbol :tag \"Field\")))

(defcustom ebib-layout 'full
  \"Ebib window layout.
This option defines how Ebib displays the buffers its uses. By
default, Ebib takes over the entire frame and creates two windows
to display the index and the entry buffer. Alternatively, Ebib
can display only the index buffer in a window of the size
`ebib-index-window-size', displaying the entry buffer only when
it is needed (see `ebib-popup-entry-window' as well). A third
option uses the right part of the frame to the size of
`ebib-width' to display both the index and the entry buffer.\"
  :group 'ebib-windows
  :type '(choice (const :tag \"Use full frame\" full)
                 (const :tag \"Display only index window\" index-only)
                 (const :tag \"Custom width\" custom)))

(defcustom ebib-popup-entry-window nil
  \"If non-NIL, create a popup window to display the entry window.
By default, if `ebib-layout' is set to `index-only', Ebib will
use an existing window to display the entry buffer when needed.
If this option is set, however, Ebib will use the function
`display-buffer-pop-up-window' to show the entry buffer,
which (usually) means that a new window will be created.

Note that setting this option has no effect unless `ebib-layout'
is set to `index-only'.\"
  :group 'ebib-windows
  :type 'boolean)

(defcustom ebib-window-vertical-split nil
  \"If non-NIL, display the index buffer at the left of the frame.
If you set this option, you should probably set
`ebib-index-window-size' to a larger value.\"
  :group 'ebib-windows
  :type 'boolean)

(defcustom ebib-width 80
  \"Width of the Ebib windows.
Only takes effect if `ebib-layout' is set to CUSTOM.\"
  :group 'ebib-windows
  :type 'integer)

(defcustom ebib-index-window-size 10
  \"The size of the index buffer window.
This is either the height of the window, or, if
`ebib-window-vertical-split' is set, the width of the window.\"
  :group 'ebib-windows
  :type 'integer)

(defcustom ebib-index-mode-line '(\"%e\"
                                  mode-line-front-space
                                  mode-line-modified
                                  mode-line-buffer-identification
                                  (:eval (if (ebib-cur-entry-key) \"     Entry %l\" \"     No Entries\"))
                                  (:eval (if (ebib-db-get-filter ebib-cur-db) \" (Filtered)\" \"\")))
  \"The mode line for the index window.\"
  :group 'ebib-windows
  :type '(choice (const :tag \"Use standard mode line\" nil)
                 (sexp :tag \"Customize mode line\")))

(defcustom ebib-index-display-fields nil
  \"List of the fields to display in the index buffer.\"
  :group 'ebib
  :type '(repeat (symbol :tag \"Index Field\")))

(defcustom ebib-uniquify-keys nil
  \"Create unique keys.
If set, Ebib will not complain about duplicate keys but will
instead create a unique key by adding an identifier to it.
Identifiers are created from consecutive letters of the
alphabet, starting with `b'.\"
  :group 'ebib
  :type 'boolean)

(defcustom ebib-autogenerate-keys nil
  \"If set, Ebib generates key automatically.
Uses the function `bibtex-generate-autokey', see there for
customization options.\"
  :group 'ebib
  :type 'boolean)

(defcustom ebib-citation-commands '((any
                                     ((\"cite\" \"\\\\cite%<[%A]%>{%K}\")))
                                    (org-mode
                                     ((\"ebib\" \"[[ebib:%K][%D]]\")))
                                    (markdown-mode
                                     ((\"text\" \"@%K%< [%A]%>\")
                                      (\"paren\" \"[%(%<%A %>@%K%<, %A%>%; )]\")
                                      (\"year\" \"[-@%K%< %A%>]\"))))
  \"A list of format strings to insert a citation into a buffer.
These are used with `ebib-insert-bibtex-key' and
`ebib-push-bibtex-key'.\"
  :group 'ebib
  :type '(repeat (list :tag \"Mode\" (symbol :tag \"Mode name\")
                       (repeat (list :tag \"Citation command\"
                                     (string :tag \"Identifier\")
                                     (string :tag \"Format string\"))))))

(defcustom ebib-multiline-major-mode 'text-mode
  \"The major mode of the multiline edit buffer.\"
  :group 'ebib
  :type '(function :tag \"Mode function\"))

(defcustom ebib-sort-order nil
  \"The fields on which the BibTeX entries are to be sorted in the BibTeX file.
Sorting is done on different sort levels, and each sort level contains one
or more sort keys.\"
  :group 'ebib
  :type '(repeat (repeat :tag \"Sort level\" (symbol :tag \"Sort field\"))))

(defcustom ebib-save-xrefs-first nil
  \"If true, entries with a crossref field will be saved first in the BibTeX-file.
Setting this option has unpredictable results for the sort order
of entries, so it is not compatible with setting the Sort Order option.\"
  :group 'ebib
  :type 'boolean)

(defcustom ebib-use-timestamp nil
  \"If true, new entries will get a time stamp.
The time stamp will be stored in a field \\\"timestamp\\\" that can
be made visible with the command \\\\[ebib-toggle-hidden] in the
index buffer.\"
  :group 'ebib
  :type 'boolean)

(defcustom ebib-timestamp-format \"%a %b %e %T %Y\"
  \"Format of the time string used in the timestamp.
The format is passed unmodified to `format-time-string', see the
documentation of that function for details.\"
  :group 'ebib
  :type 'string)

(defcustom ebib-standard-url-field 'url
  \"Standard field to store URLs in.
In the index buffer, the command \\\\[ebib-browse-url] can be used to
send a URL to a browser. This option sets the field from which
this command extracts the URL.\"
  :group 'ebib
  :type 'symbol)

(defcustom ebib-url-regexp \"\\\\\\\\url{\\\\(.*\\\\)}\\\\|https?://[^ ';<>\\\"\\n\\t\\f]+\"
  \"Regular expression to extract URLs from a field.\"
  :group 'ebib
  :type 'string)

(defcustom ebib-browser-command nil
  \"Command to call the browser with.
GNU/Emacs has a function call-browser, which is used if this
option is unset.\"
  :group 'ebib
  :type '(choice (const :tag \"Use standard browser\" nil)
                 (string :tag \"Specify browser command\")))

(defcustom ebib-standard-doi-field 'doi
  \"Standard field to store a DOI (digital object identifier) in.
In the index buffer, the command ebib-browse-doi can be used to
send a suitable URL to a browser. This option sets the field from
which this command extracts the doi.\"
  :group 'ebib
  :type 'symbol)

(defcustom ebib-standard-file-field 'file
  \"Standard field to store filenames in.
In the index buffer, the command ebib-view-file can be used to
view a file externally. This option sets the field from which
this command extracts the filename.\"
  :group 'ebib
  :type 'symbol)

(defcustom ebib-file-associations '((\"pdf\" . \"xpdf\")
                                    (\"ps\" . \"gv\"))
  \"List of file associations.
Lists file extensions together with external programs to handle
files with those extensions. If the external program is left
blank, Ebib tries to handle the file internally in
Emacs (e.g. with doc-view-mode).\"
  :group 'ebib
  :type '(repeat (cons :tag \"File association\"
                       (string :tag \"Extension\")
                       (choice (const :tag \"Open in Emacs\" nil)
                               (string :tag \"Run external command\")))))

(defcustom ebib-filename-separator \"; \"
  \"Separator for filenames in `ebib-standard-file-field'.
The contents of the file field is split up using this separator,
each string is assumed to be a filename.\"
  :group 'ebib
  :type 'string)

(defcustom ebib-file-search-dirs '(\"~\")
  \"List of directories to search when viewing external files.\"
  :group 'ebib
  :type '(repeat :tag \"Search directories\" (string :tag \"Directory\")))

(defcustom ebib-print-preamble nil
  \"Preamble used for the LaTeX file for printing the database.
Each string is added to the preamble on a separate line.\"
  :group 'ebib
  :type '(repeat (string :tag \"Add to preamble\")))

(defcustom ebib-print-newpage nil
  \"If set, each entry is printed on a separate page.\"
  :group 'ebib
  :type 'boolean)

(defcustom ebib-print-multiline nil
  \"If set, multiline fields are included when printing the database.\"
  :group 'ebib
  :type 'boolean)

(defcustom ebib-latex-preamble '(\"\\\\bibliographystyle{plain}\")
  \"Preamble used for the LaTeX file for BibTeXing the database.
Each string is added to the preamble on a separate line.\"
  :group 'ebib
  :type '(repeat (string :tag \"Add to preamble\")))

(defcustom ebib-print-tempfile \"\"
  \"Temporary file for use with `ebib-print-database' and `ebib-latex-database'.\"
  :group 'ebib
  :type '(file))

(defcustom ebib-allow-identical-fields nil
  \"If set, Ebib handles multiple occurrences of a field gracefully.\"
  :group 'ebib
  :type 'boolean)

(defcustom ebib-keywords-list nil
  \"General list of keywords.\"
  :group 'ebib
  :type '(repeat (string :tag \"Keyword\")))

(defcustom ebib-keywords-file nil
  \"Single or generic file name for storing keywords.
Keywords can be stored in a single keywords file, which is used
for all BibTeX files, or in per-directory keywords files located in
the same directories as the BibTeX files.  In the latter case, the
keywords file should specify just the generic name and no path.\"
  :group 'ebib
  :type '(choice (const :tag \"Do not use keywords file\" nil)
                 (file :tag \"Use single keywords file\")
                 (string :value \"ebib-keywords.txt\" :tag \"Use per-directory keywords file\")))

(defcustom ebib-keywords-file-save-on-exit 'ask
  \"Action to take when new keywords are added during a session.
This option only makes sense if `ebib-keywords-file' is set.\"
  :group 'ebib
  :type '(choice (const :tag \"Always save on exit\" always)
                 (const :tag \"Do not save on exit\" nil)
                 (const :tag \"Ask whether to save\" ask)))

(defcustom ebib-keywords-use-only-file nil
  \"Whether or not to use only keywords from the keywords file.
If both `ebib-keywords-list' and `ebib-keywords-file' are set,
should the file take precedence or should both sets of keywords
be combined?

For BibTeX files that do not have an associated keywords file,
`ebib-keyword-list' is always used, regardless of this setting.\"
  :group 'ebib
  :type '(choice (const :tag \"Use only keywords file\" t)
                 (const :tag \"Use keywords file and list\" nil)))

(defcustom ebib-field-separator \"; \"
  \"String for separating elements in a field value.
This is primarily used for separating keywords, but can also be
used to separate elements in other fields. Note that the `file'
field has its own separator (although it has the same default
value) and the `url' field uses `ebib-url-regexp' to extract
URLs.\"
  :group 'ebib
  :type '(string :tag \"Field separator:\"))

(defcustom ebib-rc-file \"~/.ebibrc\"
  \"Customization file for Ebib.
This file is read when Ebib is started. It can be used to define
custom keys or set customization variables (though the latter is
easier through Customize).\"
  :group 'ebib
  :type '(file :tag \"Customization file:\"))

(defcustom ebib-filters-display-as-lisp nil
  \"If set, display filters as Lisp expressions.\"
  :group 'ebib
  :type 'boolean)

(defcustom ebib-filters-ignore-case t
  \"If set, ignore case in filter names.\"
  :group 'ebib
  :type 'boolean)

(defcustom ebib-filters-default-file \"~/.emacs.d/ebib-filters\"
  \"File for saving filters.\"
  :group 'ebib
  :type 'file)

(defcustom ebib-keywords-field-keep-sorted nil
  \"Keep the keywords field sorted in alphabetical order.
Also automatically remove duplicates.\"
  :group 'ebib
  :type '(choice (const :tag \"Sort keywords field\" t)
                 (const :tag \"Do not sort keywords field\" nil)))

(defcustom ebib-bibtex-extensions '(\".bib\" \".bibtex\")
  \"List of possible filename extensions of BibTeX files.
When loading a BibTeX filename without extension, Ebib tries to
find a file by adding these extensions. When creating a new file,
the first extension is added if the filename provided does not
already have an extension. If you want to create BibTeX files
without extension, add the empty string \\\"\\\" to this list or
unset the option entirely.\"
  :group 'ebib
  :type '(repeat (string :tag \"Extension\")))

(defcustom ebib-biblatex-inheritance nil
  \"Inheritance scheme for cross-referencing.
Inheritances are specified per entry type. The source is the
field name in the cross-referencing entry, the target the field
in the cross-referenced entry.

To define inheritances for all entry types, specify `all' as the
entry type. If you combine inheritances for `all' with
entry-specific inheritances, the latter override the former.\"
  :group 'ebib
  :type '(repeat (group (symbol :tag \"Entry type\")
                        (repeat :tag \"Inherited fields\"
                                (group (symbol :tag \"Source\")
                                       (symbol :tag \"Target\"))))))

(defvar ebib-unique-field-list nil
  \"Holds a list of all field names.\")

(defun ebib-set-unique-field-list (var value)
  \"Sets `ebib-unique-field-list' on the basis of `ebib-entry-types'\"
  (set-default var value)
  (setq ebib-unique-field-list nil)
  (mapc #'(lambda (entry)
            (mapc #'(lambda (field)
                      (add-to-list 'ebib-unique-field-list field t))
                  (cadr entry))
            (mapc #'(lambda (field)
                      (add-to-list 'ebib-unique-field-list field t))
                  (cl-caddr entry)))
        value))

(defcustom ebib-entry-types
  '((article                                              ;; name of entry type
     (author title journal year)                          ;; obligatory fields
     (volume number pages month note))                    ;; optional fields

    (book
     (author title publisher year)
     (editor volume number series address edition month note))

    (booklet
     (title)
     (author howpublished address month year note))

    (inbook
     (author title chapter pages publisher year)
     (editor volume series address edition month note))

    (incollection
     (author title booktitle publisher year)
     (editor volume number series type chapter pages address edition month note))

    (inproceedings
     (author title booktitle year)
     (editor pages organization publisher address month note))

    (manual
     (title)
     (author organization address edition month year note))

    (misc
     ()
     (title author howpublished month year note))

    (mastersthesis
     (author title school year)
     (address month note))

    (phdthesis
     (author title school year)
     (address month note))

    (proceedings
     (title year)
     (editor publisher organization address month note))

    (techreport
     (author title institution year)
     (type number address month note))

    (unpublished
     (author title note)
     (month year)))

  \"List of entry type definitions for Ebib\"
  :group 'ebib
  :type '(repeat (list :tag \"Entry type\" (symbol :tag \"Name\")
                       (repeat :tag \"Obligatory fields\" (symbol :tag \"Field\"))
                       (repeat :tag \"Optional fields\" (symbol :tag \"Field\"))))
  :set 'ebib-set-unique-field-list)

(defgroup ebib-faces nil \"Faces for Ebib\" :group 'ebib)

(defface ebib-crossref-face '((t (:inherit font-lock-comment-face)))
  \"Face used to indicate values inherited from crossreferenced entries.\"
  :group 'ebib-faces)

(defface ebib-marked-face (if (featurep 'xemacs)
                              '((t (:foreground \"white\" :background \"red\")))
                            '((t (:inverse-video t))))
  \"Face to indicate marked entries.\"
  :group 'ebib-faces)

(defface ebib-field-face '((t (:inherit font-lock-keyword-face)))
  \"Face for field names.\"
  :group 'ebib-faces)

;; generic for all databases

;; constants and variables that are set only once
(defconst ebib-bibtex-identifier \"[^^\\\"@\\\\&$#%',={}() \\t\\n\\f]*\" \"Regexp describing a licit BibTeX identifier.\")
(defconst ebib-key-regexp \"[^][^\\\"@\\\\&$#%',={} \\t\\n\\f]*\" \"Regexp describing a licit key.\")
(defvar ebib-initialized nil \"T if Ebib has been initialized.\")

;; buffers and highlights
(defvar ebib-buffer-alist nil \"Alist of Ebib buffers.\")
(defvar ebib-index-highlight nil \"Highlight to mark the current entry.\")
(defvar ebib-fields-highlight nil \"Highlight to mark the current field.\")
(defvar ebib-strings-highlight nil \"Highlight to mark the current string.\")

;; general bookkeeping
(defvar ebib-field-history nil \"Minibuffer field name history.\")
(defvar ebib-filters-history nil \"Minibuffer history for filters.\")
(defvar ebib-cite-command-history nil \"Minibuffer history for citation commands.\")
(defvar ebib-key-history nil \"Minibuffer history for entry keys.\")
(defvar ebib-keywords-history nil \"Minibuffer history for keywords.\")

(defvar ebib-saved-window-config nil \"Stores the window configuration when Ebib is called.\")
(defvar ebib-window-before nil \"The window that was active when Ebib was called.\")
(defvar ebib-buffer-before nil \"The buffer that was active when Ebib was called.\")
;;(defvar ebib-pre-multiline-buffer nil \"The buffer in the window before switching to the multiline edit buffer.\")
(defvar ebib-export-filename nil \"Filename to export entries to.\")
(defvar ebib-push-buffer nil \"Buffer to push entries to.\")
(defvar ebib-search-string nil \"Stores the last search string.\")
(defvar ebib-editing nil \"Indicates what the user is editing, either 'fields or 'preamble.\")
(defvar ebib-multiline-unbraced nil \"Indicates whether the multiline text being edited is braced.\")
(defvar ebib-log-error nil \"Indicates whether an error was logged.\")
(defvar ebib-local-bibtex-filenames nil
  \"A buffer-local variable holding a list of the name(s) of that buffer's .bib file(s)\")
(make-variable-buffer-local 'ebib-local-bibtex-filenames)
(defvar ebib-syntax-table (make-syntax-table) \"Syntax table used for reading .bib files.\")
(modify-syntax-entry ?\\[ \".\" ebib-syntax-table)
(modify-syntax-entry ?\\] \".\" ebib-syntax-table)
(modify-syntax-entry ?\\( \".\" ebib-syntax-table)
(modify-syntax-entry ?\\) \".\" ebib-syntax-table)
(modify-syntax-entry ?\\\" \"w\" ebib-syntax-table)

;; Filters
(defvar ebib-filters-alist nil \"Alist of saved filters.\")
(defvar ebib-filters-last-filter nil \"The last used filter.\")

;; Keywords
;;
;; `ebib-keywords-files-alist' lists directories with keywords
;; files plus the keywords in them. If there is a single keywords
;; file, then there is only one entry. Entries have three
;; elements: the dir (or full filename in case of a single
;; keywords file), a list of saved keywords, and a list of new
;; keywords added during the current session.
(defvar ebib-keywords-files-alist nil \"Alist of keywords files.\")

;; `ebib-keywords-list-per-session' is composed of the keywords
;; in `ebib-keywords-list' and whatever new keywords are added by
;; the user during the current session. These new additions are
;; discarded when ebib is closed.
(defvar ebib-keywords-list-per-session nil \"List of keywords for the current session.\")

;; The databases

;; the master list and the current database
(defvar ebib-databases nil \"List of structs containing the databases.\")
(defvar ebib-cur-db nil \"The database that is currently active.\")
(defvar ebib-cur-keys-list nil \"Sorted list of entry keys in the current database.\")

;; bookkeeping required when editing field values or @STRING definitions

(defvar ebib-hide-hidden-fields t \"If set to T, hidden fields are not shown.\")

;; these variables are set when the user enters the entry and strings buffer, respectively
(defvar ebib-cur-entry-fields nil \"The fields of the type of the current entry.\")
(defvar ebib-cur-strings-list nil \"A sorted list of strings in the current database.\")

;; this is set by `ebib-fill-entry-buffer'
(defvar ebib-current-field nil \"The current field.\")

;; and this one by `ebib-fill-strings-buffer'
(defvar ebib-current-string nil \"The current @STRING definition.\")

;; the prefix key and the multiline key are stored in a variable so that the
;; user can customise them.
(defvar ebib-prefix-key ?\\;)
(defvar ebib-multiline-key ?\\|)

;; this is an AucTeX variable, but we want to check its value, so let's
;; keep the compiler from complaining.
(eval-when-compile
  (defvar TeX-master))

;; this is to keep XEmacs from complaining.
(eval-when-compile
  (if (featurep 'xemacs)
      (defvar mark-active)))

;; XEmacs has line-number, not line-number-at-pos.
(eval-and-compile
  (if (featurep 'xemacs)
      (defalias 'line-number-at-pos 'line-number)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Useful macros and functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; We sometimes (often, in fact ;-) need to do something with a string, but
;; take special action (or do nothing) if that string is empty.
;; `ebib-ifstring' makes that easier:

(defmacro ebib-ifstring (bindvar then &rest else)
  \"Execute THEN only if STRING is nonempty.
Format: (ebib-ifstring (var value) then-form [else-forms]) VAR is bound
to VALUE, which is evaluated. If VAR is a nonempty string,
THEN-FORM is executed. If VAR is either \\\"\\\" or nil, ELSE-FORM is
executed. Returns the value of THEN or of ELSE.\"
  (declare (indent 2))
  `(let ,(list bindvar)
     (if (not (or (null ,(car bindvar))
                  (equal ,(car bindvar) \"\")))
         ,then
       ,@else)))

(defmacro ebib-last1 (lst &optional n)
  \"Returns the last (or Nth last) element of LST.\"
  `(car (last ,lst ,n)))

;; we sometimes need to walk through lists.  these functions yield the
;; element directly preceding or following ELEM in LIST. in order to work
;; properly, ELEM must be unique in LIST, obviously. if ELEM is the
;; first/last element of LIST, or if it is not contained in LIST at all,
;; the result is nil.
(defun ebib-next-elem (elem list)
  (cadr (member elem list)))

(defun ebib-prev-elem (elem list)
  (if (or (equal elem (car list))
          (not (member elem list)))
      nil
    (ebib-last1 list (1+ (length (member elem list))))))

(defun ebib-locate-bibfile (file &optional dirs)
  \"Locate and/or expand FILE to an absolute filename.
First try to locate BibTeX file FILE with `locate-file' and with
`ebib-bibtex-extensions' as possible suffixes. If this does not
yield a result, expand FILE with `expand-file-name', adding the
first extension in `ebib-bibtex-extensions' if FILE has no
filename suffix.\"
  (or (locate-file file (or dirs \"/\") (append '(\"\") ebib-bibtex-extensions))
      (expand-file-name (if (file-name-extension file)
                            file
                          (concat file (car ebib-bibtex-extensions))))))

(defun ebib-ensure-extension (filename ext)
  \"Make sure FILENAME has an extension.
Return FILENAME if it alread has an extension, otherwise return
FILENAME appended with EXT. Note that EXT should start with a
dot.\"
  (if (file-name-extension filename)
      filename
    (concat filename ext)))

(defmacro with-ebib-buffer-writable (&rest body)
  \"Makes the current buffer writable and executes the commands in BODY.
After BODY is executed, the buffer modified flag is unset.\"
  (declare (indent defun))
  `(let ((modified (buffer-modified-p)))
     (unwind-protect
         (let ((buffer-read-only nil))
           ,@body)
       (set-buffer-modified-p modified))))

(defmacro with-ebib-window-nondedicated (&rest body)
  \"Execute BODY with the current window non-dedicated.
Restore the dedicated status after executing BODY.\"
  (declare (indent defun))
  `(let ((dedicated (window-dedicated-p)))
     (unwind-protect
         (progn
           (set-window-dedicated-p (selected-window) nil)
           ,@body)
       (if dedicated
           (set-window-dedicated-p (selected-window) t)))))

;; XEmacs doesn't know about propertize...
(if (not (fboundp 'propertize))
    (defun propertize (string &rest properties)
      \"Return a copy of STRING with text properties added.
First argument is the string to copy.  Remaining arguments form a
sequence of PROPERTY VALUE pairs for text properties to add to
the result.\"
      (let ((new-string (copy-sequence string)))
        (add-text-properties 0 (length new-string) properties new-string)
        new-string)))

;; TODO decide what to do with this.
;; (defun region-active ()
;;   (if (featurep 'xemacs)
;;       (region-active-p)
;;     mark-active))

(defun ebib-remove-from-string (string remove)
  \"Returns a copy of STRING with all the occurrences of REMOVE taken out.
REMOVE can be a regex.\"
  (apply 'concat (split-string string remove)))

(defun ebib-multiline-p (string)
  \"True if STRING is multiline.\"
  (if (stringp string)
      (string-match \"\\n\" string)))

(defun ebib-first-line (string)
  \"Returns the first line of a multi-line string.\"
  (string-match \"\\n\" string)
  (substring string 0 (match-beginning 0)))

(defun ebib-sort-in-buffer (limit str)
  \"Moves POINT to the right position to insert STR in a buffer with lines sorted A-Z.\"
  (let ((upper limit)
        middle)
    (when (> limit 0)
      (let ((lower 0))
        (goto-char (point-min))
        (while (progn
                 (setq middle (/ (+ lower upper 1) 2))
                 (goto-char (point-min))
                 (forward-line (1- middle)) ; if this turns out to be where we need to be,
                 (beginning-of-line)        ; this puts POINT at the right spot.
                 ;; if upper and lower differ by only 1, we have found the
                 ;; position to insert the entry in.
                 (> (- upper lower) 1))
          (save-excursion
            (let ((beg (point)))
              (end-of-line)
              (if (string< (buffer-substring-no-properties beg (point)) str)
                  (setq lower middle)
                (setq upper middle)))))))))

(defun ebib-match-all-in-string (match-str string)
  \"Highlights all the matches of MATCH-STR in STRING.
The return value is a list of two elements: the first is the
modified string, the second either t or nil, indicating whether a
match was found at all.\"
  (cl-do ((counter 0 (match-end 0)))
      ((not (string-match match-str string counter)) (cl-values string (not (= counter 0))))
    (add-text-properties (match-beginning 0) (match-end 0) '(face highlight) string)))

(defun ebib-looking-at-goto-end (str &optional match)
  \"Like `looking-at' but moves point to the end of the matching string.
MATCH acts just like the argument to MATCH-END, and defaults to
0.\"
  (or match (setq match 0))
  (let ((case-fold-search t))
    (if (looking-at str)
        (goto-char (match-end match)))))

;; this needs to be wrapped in an eval-and-compile, to keep Emacs from
;; complaining that ebib-execute-helper isn't defined when it compiles
;; ebib-execute-when.
(eval-and-compile
  (defun ebib-execute-helper (env)
    \"Helper function for `ebib-execute-when'.\"
    (cond
     ((eq env 'entries)
      'ebib-cur-keys-list)
     ((eq env 'marked-entries)
      '(and ebib-cur-db
            (ebib-db-marked-entries-p ebib-cur-db)))
     ((eq env 'database)
      'ebib-cur-db)
     ((eq env 'real-db)
      '(and ebib-cur-db
            (not (ebib-db-get-filter ebib-cur-db))))
     ((eq env 'filtered-db)
      '(and ebib-cur-db
            (ebib-db-get-filter ebib-cur-db)))
     ((eq env 'no-database)
      '(not ebib-cur-db))
     (t t))))

(defmacro ebib-execute-when (&rest forms)
  \"Macro to facilitate writing Ebib functions.
This functions essentially like a `cond' clause: the basic format
is (ebib-execute-when FORMS ...), where each FORM is built up
as (ENVIRONMENTS BODY). ENVIRONMENTS is a list of symbols (not
quoted) that specify under which conditions BODY is to be
executed. Valid symbols are:

entries: execute when there are entries in the database,
marked-entries: execute when there are marked entries in the database,
database: execute if there is a database,
no-database: execute if there is no database,
real-db: execute when there is a database and it is not filtered,
filtered-db: execute when there is a database and it is filtered,
default: execute if all else fails.

Just like with `cond', only one form is actually executed, the
first one that matches. If ENVIRONMENT contains more than one
condition, BODY is executed if they all match (i.e., the
conditions are AND'ed.)\"
  (declare (indent defun))
  `(cond
    ,@(mapcar #'(lambda (form)
                  (cons (if (= 1 (length (car form)))
                            (ebib-execute-helper (caar form))
                          `(and ,@(mapcar #'(lambda (env)
                                              (ebib-execute-helper env))
                                          (car form))))
                        (cdr form)))
              forms)))

;; the numeric prefix argument is 1 if the user gave no prefix argument at
;; all. the raw prefix argument is not always a number. so we need to do
;; our own conversion.
(defun ebib-prefix (num)
  (when (numberp num)
    num))

(defun ebib-called-with-prefix ()
  \"Returns T if the command was called with a prefix key.\"
  (if (featurep 'xemacs)
      (member (character-to-event ebib-prefix-key) (append (this-command-keys) nil))
    (member (event-convert-list (list ebib-prefix-key))
            (append (this-command-keys-vector) nil))))

(defmacro ebib-called-interactively-p ()
  \"Returns T if the command was called interactively.
This is a compatibility macro for Emacs 23, in which
called-interactively-p doesn't take an argument, while in Emacs
24, it takes one obligatory argument.\"
  (if (< emacs-major-version 24)
      '(interactive-p)
    '(called-interactively-p 'any)))

(defmacro ebib-export-to-db (num message copy-fn)
  \"Exports data to another database.
NUM is the number of the database to which the data is to be copied.

MESSAGE is a string displayed in the echo area if the export was
succesful. It must contain a %d directive, which is used to
display the database number to which the entry was exported.

COPY-FN is the function that actually copies the relevant
data. It must take as argument the database to which the data is
to be copied. COPY-FN must return T if the copying was
successful, and NIL otherwise.\"
  (let ((goal-db (make-symbol \"goal-db\")))
    `(let ((,goal-db (nth (1- ,num) ebib-databases)))
       (if (not ,goal-db)
           (error \"Database %d does not exist\" ,num)
         (when (funcall ,copy-fn ,goal-db)
           (ebib-set-modified t ,goal-db)
           (message ,message ,num))))))

(defmacro ebib-export-to-file (prompt-string message insert-fn)
  \"Exports data to a file.
PROMPT-STRING is the string that is used to ask for the filename
to export to. INSERT-FN must insert the data to be exported into
the current buffer: it is called within a `with-temp-buffer',
whose contents is appended to the file the user enters.

MESSAGE is shown in the echo area when the export was
successful. It must contain a %s directive, which is used to
display the actual filename.\"
  (let ((filename (make-symbol \"filename\")))
    `(let ((insert-default-directory (not ebib-export-filename)))
       (ebib-ifstring (,filename (read-file-name
                           ,prompt-string \"~/\" nil nil ebib-export-filename))
           (with-temp-buffer
             (funcall ,insert-fn)
             (append-to-file (point-min) (point-max) ,filename)
             (setq ebib-export-filename ,filename))))))

(defun ebib-get-obl-fields (entry-type)
  \"Returns the obligatory fields of ENTRY-TYPE.\"
  (nth 1 (assoc entry-type ebib-entry-types)))

(defun ebib-get-opt-fields (entry-type)
  \"Returns the optional fields of ENTRY-TYPE.\"
  (nth 2 (assoc entry-type ebib-entry-types)))

(defun ebib-get-all-fields (entry-type)
  \"Returns all the fields of ENTRY-TYPE as a list.
The first element in the list is the symbol `=type='.\"
  (cons '=type= (append (ebib-get-obl-fields entry-type)
                       (ebib-get-opt-fields entry-type)
                       ebib-additional-fields)))

;; This is simply to save some typing.
(defun ebib-cur-entry-key ()
  \"Get the key of the current entry.\"
  (ebib-db-get-current-entry-key ebib-cur-db))

(defun ebib-erase-buffer (buffer)
  (with-current-buffer buffer
    (with-ebib-buffer-writable
      (erase-buffer))))

(defun ebib-make-highlight (begin end buffer)
  (let (highlight)
    (if (featurep 'xemacs)
        (progn
          (setq highlight (make-extent begin end buffer))
          (set-extent-face highlight 'highlight))
      (progn
        (setq highlight (make-overlay begin end buffer))
        (overlay-put highlight 'face 'highlight)))
    highlight))

(defun ebib-move-highlight (highlight begin end buffer)
  (if (featurep 'xemacs)
      (set-extent-endpoints highlight begin end buffer)
    (move-overlay highlight begin end buffer)))

(defun ebib-highlight-start (highlight)
  (if (featurep 'xemacs)
      (extent-start-position highlight)
    (overlay-start highlight)))

(defun ebib-highlight-end (highlight)
  (if (featurep 'xemacs)
      (extent-end-position highlight)
    (overlay-end highlight)))

(defun ebib-delete-highlight (highlight)
  (if (featurep 'xemacs)
      (detach-extent highlight)
    (delete-overlay highlight)))

(defun ebib-set-index-highlight ()
  (with-current-buffer (cdr (assoc 'index ebib-buffer-alist))
    (beginning-of-line)
    (let ((beg (point)))
      (if ebib-index-display-fields
          (end-of-line)
        (skip-chars-forward \"^ \"))
      (ebib-move-highlight ebib-index-highlight beg (point) (cdr (assoc 'index ebib-buffer-alist)))
      (beginning-of-line))))

(defun ebib-set-fields-highlight ()
  (with-current-buffer (cdr (assoc 'entry ebib-buffer-alist))
    (beginning-of-line)
    (let ((beg (point)))
      (ebib-looking-at-goto-end \"[^ \\t\\n\\f]*\")
      (ebib-move-highlight ebib-fields-highlight beg (point) (cdr (assoc 'entry ebib-buffer-alist)))
      (beginning-of-line))))

(defun ebib-set-strings-highlight ()
  (with-current-buffer (cdr (assoc 'strings ebib-buffer-alist))
    (beginning-of-line)
    (let ((beg (point)))
      (ebib-looking-at-goto-end \"[^ \\t\\n\\f]*\")
      (ebib-move-highlight ebib-strings-highlight beg (point) (cdr (assoc 'strings ebib-buffer-alist)))
      (beginning-of-line))))

(defun ebib-display-buffer-reuse-window (buffer alist)
  \"Display BUFFER in an existing Ebib buffer.
If BUFFER is the index buffer, simply switch to the window
displaying it. (This function should not be called if there is a
chance the index buffer is not visible.) For any other buffer,
find a window displaying an Ebib buffer other than the index
buffer, switch to that window and display BUFFER. If no window
can be found, return NIL.

Note, The argument ALIST has no function.\"
  (let (window)
    (cond
     ;; the index buffer can only be displayed in its dedicated window.
     ((eq buffer (cdr (assoc 'index ebib-buffer-alist)))
      (setq window (get-buffer-window buffer)))
     ;; if ebib-layout isn't full, the multiline buffer should not be
     ;; displayed in an Ebib buffer.
     ((and (eq buffer (cdr (assoc 'multiline ebib-buffer-alist)))
           (not (eq ebib-layout 'full)))
      (setq window nil))
     (t (let ((buffers (delq nil (mapcar #'(lambda (bf)
                                             (unless (eq (car bf) 'index)
                                               (cdr bf)))
                                         ebib-buffer-alist))))
          (while (and buffers
                      (not (get-buffer-window (car buffers))))
            (setq buffers (cdr buffers)))
          (setq window (get-buffer-window (car buffers))))))
    (when window
      (select-window window)
      (with-ebib-window-nondedicated
        (switch-to-buffer buffer))
      window)))

(defun ebib-display-buffer-largest-window (buffer alist)
  \"Display BUFFER in the largest non-dedicated window.
The argument ALIST has no function.\"
  (unless ebib-popup-entry-window
    (let ((window (get-largest-window)))
      (select-window window)
      (switch-to-buffer buffer)
      window)))

(defun ebib-pop-to-buffer (buffer)
  \"Select or create a window to display BUFFER and display it.
BUFFER is a symbol indicating the buffer to switch to. It can be
'index, 'entry, 'strings, 'log or 'multiline.

If BUFFER is 'index, switch to the index window or signal an
error if there is no window displaying the index buffer.

For any other buffer, if there is a visible Ebib buffer other
than the index buffer, switch to its window and display BUFFER.
If there is no Ebib window, use the largest non-dedicated window
or, if `ebib-layout' is set to `popup', pop up a new window. If
all else fails, pop up a new frame.\"
  (if (or (not (eq buffer 'index))
          (get-buffer-window (cdr (assoc 'index ebib-buffer-alist))))
      (pop-to-buffer (cdr (assoc buffer ebib-buffer-alist))
                     '((ebib-display-buffer-reuse-window
                        ebib-display-buffer-largest-window
                        display-buffer-pop-up-window
                        display-buffer-pop-up-frame))
                     t)
    (error \"Ebib is lowered. Use `M-x ebib' to restart\")))

(defun ebib-display-entry (entry-key)
  \"Display ENTRY-KEY in the index buffer at POINT.\"
  (with-current-buffer (cdr (assoc 'index ebib-buffer-alist))
    (with-ebib-buffer-writable
      (insert (format \"%-30s %s\\n\"
                      entry-key
                      (if ebib-index-display-fields
                          (mapconcat #'(lambda (field)
                                         (or (ebib-db-get-field-value field entry-key ebib-cur-db 'noerror 'unbraced)
                                             \"\"))
                                     ebib-index-display-fields
                                     \"  \") ; separator for mapconcat
                        \"\"))))))

(defun ebib-redisplay-current-field ()
  \"Redisplays the contents of the current field in the entry buffer.\"
  (with-current-buffer (cdr (assoc 'entry ebib-buffer-alist))
    ;; If the `crossref' field has changed, we need to redisplay the entire entry.
    (if (eq ebib-current-field 'crossref)
        (progn
          (ebib-fill-entry-buffer)
          (setq ebib-current-field 'crossref)
          (re-search-forward \"^crossref\")
          (ebib-set-fields-highlight))
      (with-ebib-buffer-writable
        (goto-char (ebib-highlight-start ebib-fields-highlight))
        (let ((beg (point)))
          (end-of-line)
          (delete-region beg (point)))
        (insert (propertize (format \"%-17s \" (symbol-name ebib-current-field)) 'face 'ebib-field-face)
                (ebib-get-field-highlighted ebib-current-field (ebib-cur-entry-key)))
        (ebib-set-fields-highlight)))))

(defun ebib-redisplay-current-string ()
  \"Redisplays the current string definition in the strings buffer.\"
  (with-current-buffer (cdr (assoc 'strings ebib-buffer-alist))
    (with-ebib-buffer-writable
      (let ((val (ebib-db-get-string ebib-current-string ebib-cur-db nil 'unbraced)))
        (goto-char (ebib-highlight-start ebib-strings-highlight))
        (let ((beg (point)))
          (end-of-line)
          (delete-region beg (point)))
        (insert (format \"%-18s %s\" ebib-current-string
                        (if (ebib-multiline-p val)
                            (concat \"+\" (ebib-first-line val))
                          (concat \" \" val))))
        (ebib-set-strings-highlight)))))

(defun ebib-move-to-field (field direction)
  \"Moves the fields overlay to the line containing FIELD.
If DIRECTION is positive, searches forward, if DIRECTION is
negative, searches backward. If DIRECTION is 1 or -1, searches
from POINT, if DIRECTION is 2 or -2, searches from beginning or
end of buffer.  If FIELD is not found in the entry buffer, the
overlay is not moved.  FIELD must be a symbol.\"

  ;;Note: this function does NOT change the value of `ebib-current-field'!

  (with-current-buffer (cdr (assoc 'entry ebib-buffer-alist))
    (if (eq field '=type=)
        (goto-char (point-min))
      (cl-multiple-value-bind (fn start limit) (if (>= direction 0)
                                                   (cl-values 're-search-forward (point-min) (point-max))
                                                 (cl-values 're-search-backward (point-max) (point-min)))
        ;; make sure we can get back to our original position, if the field
        ;; cannot be found in the buffer:
        (let ((current-pos (point)))
          (when (eq (logand direction 1) 0) ; if direction is even
            (goto-char start))
          (unless (funcall fn (concat \"^\" (symbol-name field)) limit t)
            (goto-char current-pos)))))
    (ebib-set-fields-highlight)))

(defun ebib-get-xref-field (field entry-type)
  \"Return the field from which FIELD inherits in ENTRY-TYPE.
For BibTeX, a field simply inherits from the same field in the
cross-referenced entry. BibLaTeX, however, allows complex
inheritance relations, so that e.g., the field `booktitle' may
inherit from the field `title' in the cross-referenced entry.

The inheritance scheme is stored in `ebib-biblatex-inheritance'.\"
  (let ((inheritances (or (cadr (assq entry-type ebib-biblatex-inheritance))
                          (cadr (assq 'all ebib-biblatex-inheritance)))))
    (or (cadr (assq field inheritances))
        field)))

(defun ebib-get-field-highlighted (field key &optional match-str db)
  ;; Note: we need to work on a copy of the string, otherwise the highlights
  ;; are made to the string as stored in the database. Hence copy-sequence.
  (or db (setq db ebib-cur-db))
  (let* ((case-fold-search t)
         (value (ebib-db-get-field-value field key db 'noerror nil 'xref))
         (string (if (car value)
                     (copy-sequence (car value))))
         (xref (cadr value))
         (raw \" \")
         (multiline \" \")
         (matched nil))
    ;; we have to do a couple of things now:
    ;; - remove {} or \"\" around the string, if they're there
    ;; - search for match-str
    ;; - properly adjust the string if it's multiline
    ;; but all this is not necessary if there was no string
    (when string
      (if xref
          (setq string (propertize string 'face 'ebib-crossref-face 'fontified t)))
      (if (ebib-db-unbraced-p string)
          (setq raw \"*\")
        (setq string (ebib-db-unbrace string))) ; we have to make the string look nice
      (when match-str
        (cl-multiple-value-setq (string matched) (ebib-match-all-in-string match-str string)))
      (when (ebib-multiline-p string)
        ;; IIUC PROPERTIZE shouldn't be necessary here, as the variable
        ;; multiline is local and therefore the object it refers to should
        ;; be GC'ed when the function returns. But for some reason, the
        ;; plus sign is persistent, and if it's been highlighted as the
        ;; result of a search, it stays that way.
        (setq multiline (propertize \"+\" 'face nil))
        (setq string (ebib-first-line string)))
      (when (and matched
                 (string= multiline \"+\"))
        (add-text-properties 0 1 '(face highlight) multiline)))
    (concat raw multiline string)))

(defun ebib-format-fields (key fn &optional match-str db)
  (or db
      (setq db ebib-cur-db))
  (let* ((entry (ebib-db-get-entry key db))
         (entry-type (cdr (assoc '=type= entry)))
         (obl-fields (ebib-get-obl-fields entry-type))
         (opt-fields (ebib-get-opt-fields entry-type)))
    (funcall fn (format \"%-19s %s\\n\" (propertize \"type\" 'face 'ebib-field-face) entry-type))
    (mapc #'(lambda (fields)
              (funcall fn \"\\n\")
              (mapcar #'(lambda (field)
                          (unless (and (get field 'ebib-hidden)
                                       ebib-hide-hidden-fields)
                            (funcall fn (propertize (format \"%-17s \" field) 'face 'ebib-field-face))
                            (funcall fn (or
                                         (ebib-get-field-highlighted field key match-str)
                                         \"\"))
                            (funcall fn \"\\n\")))
                      fields))
          (list obl-fields opt-fields ebib-additional-fields))))

(defun ebib-redisplay ()
  \"Redisplay the index and entry buffers.\"
  (ebib-fill-index-buffer)
  (ebib-fill-entry-buffer))

(defun ebib-fill-index-buffer ()
  \"Fills the index buffer with the list of keys in `ebib-cur-db'.
If `ebib-cur-db' is nil, the buffer is just erased and its name set
to \\\"none\\\".\"
  ;; Note: this function sets `ebib-cur-keys-list'.
  (with-current-buffer (cdr (assoc 'index ebib-buffer-alist))
    ;; First set the modification flag, so that it's still correct after
    ;; with-ebib-buffer-writable.
    (when ebib-cur-db
     (set-buffer-modified-p (ebib-db-modified-p ebib-cur-db)))
    (with-ebib-buffer-writable
      (erase-buffer)
      (if (not ebib-cur-db)
          (rename-buffer \" none\")
        (setq ebib-cur-keys-list
              (if (ebib-db-get-filter ebib-cur-db)
                  (ebib-filters-run-filter ebib-cur-db)
                (ebib-db-list-keys ebib-cur-db)))
        ;; Set a header line if there is a filter.
        (setq header-line-format (ebib-filters-pp-filter (ebib-db-get-filter ebib-cur-db)))
        ;; We may call this function when there are no entries in the
        ;; database. If so, we don't need to do this:
        (when (ebib-cur-entry-key)
          ;; It may be that no entry satisfies the filter.
          (if (not ebib-cur-keys-list)
              (message \"No entries matching the filter\")
            ;; Make sure the current entry is among the visible entries.
            (unless (member (ebib-cur-entry-key) ebib-cur-keys-list)
              (ebib-db-set-current-entry-key (car ebib-cur-keys-list) ebib-cur-db))
            (mapc #'(lambda (entry)
                      (ebib-display-entry entry)
                      (when (member entry (ebib-db-list-marked-entries ebib-cur-db 'nosort))
                        (save-excursion
                          (forward-line -1)
                          (ebib-display-mark t))))
                  ebib-cur-keys-list)
            (goto-char (point-min))
            (re-search-forward (format \"^%s \" (ebib-cur-entry-key)))
            (beginning-of-line)
            (ebib-set-index-highlight)))
        (rename-buffer (concat (format \" %d:\" (1+ (- (length ebib-databases)
                                                     (length (member ebib-cur-db ebib-databases)))))
                               (ebib-db-get-filename ebib-cur-db 'shortened)))))))

(defun ebib-display-mark (mark &optional beg end)
  \"Mark/unmark an entry.
Add/remove `ebib-marked-face` to the region between BEG and END,
or to the entry point is on if these are omitted. If MARK is t,
`ebib-marked-face is added, if nil, it is removed. NB: if BEG and
END are omitted, this function changes point.\"
  (unless (and beg end)
    (beginning-of-line)
    (setq beg (point))
    (skip-chars-forward \"^ \")
    (setq end (point)))
  (if mark
      (add-text-properties beg end '(face ebib-marked-face))
    (remove-text-properties beg end '(face ebib-marked-face))))

(defun ebib-fill-entry-buffer (&optional match-str)
  \"Fills the entry buffer with the fields of the current entry.
MATCH-STRING is a regexp that will be highlighted when it occurs in the
field contents.\"
  (with-current-buffer (cdr (assoc 'entry ebib-buffer-alist))
    (with-ebib-buffer-writable
      (erase-buffer)
      (when ebib-cur-keys-list         ; are there entries being displayed?
        (ebib-format-fields (ebib-cur-entry-key) #'insert match-str)
        (setq ebib-current-field '=type=)
        (goto-char (point-min))))))

(defun ebib-set-modified (mod &optional db)
  \"Sets the modified flag of the database DB to MOD.
If DB is nil, it defaults to the current database, and the
modified flag of the index buffer is also (re)set. MOD must be
either T or NIL.\"
  (unless db
    (setq db ebib-cur-db))
  (ebib-db-set-modified mod db)
  (when (eq db ebib-cur-db)
    (with-current-buffer (cdr (assoc 'index ebib-buffer-alist))
      (set-buffer-modified-p mod))))

(defun ebib-modified-p ()
  \"Checks if any of the databases in Ebib were modified.
Returns the first modified database, or NIL if none was modified.\"
  (let ((db (car ebib-databases)))
    (while (and db
                (not (ebib-db-modified-p db)))
      (setq db (ebib-next-elem db ebib-databases)))
    db))

(defun ebib-create-new-database ()
  \"Creates a new database instance and returns it.\"
  (let ((new-db (ebib-db-new-database)))
    (setq ebib-databases (append ebib-databases (list new-db)))
    new-db))

(defun ebib-match-paren-forward (limit)
  \"Moves forward to the closing parenthesis matching the opening parenthesis at POINT.
This function handles parentheses () and braces {}. Does not
search/move beyond LIMIT. Returns T if a matching parenthesis was
found, NIL otherwise. If point was not at an opening parenthesis
at all, NIL is returned and point is not moved. If point was at
an opening parenthesis but no matching closing parenthesis was
found, an error is logged and point is moved one character
forward to allow parsing to continue.\"
  (cond
   ((eq (char-after) ?\\{)
    (ebib-match-brace-forward limit))
   ((eq (char-after) ?\\()
    ;; we wrap this in a condition-case because we need to log the error
    ;; message outside of the save-restriction, otherwise we get the wrong
    ;; line number.
    (condition-case nil
        (save-restriction
          (narrow-to-region (point) limit)
          ;; this is really a hack. we want to allow unbalanced parentheses in
          ;; field values (bibtex does), so we cannot use forward-list
          ;; here. for the same reason, looking for the matching paren by hand
          ;; is pretty complicated. however, balanced parentheses can only be
          ;; used to enclose entire entries (or @STRINGs or @PREAMBLEs) so we
          ;; can be pretty sure we'll find it right before the next @ at the
          ;; start of a line, or right before the end of the file.
          (re-search-forward \"^@\" nil 0)
          (skip-chars-backward \"@ \\n\\t\\f\")
          (forward-char -1)
          (if (eq (char-after) ?\\))
              t
            (goto-char (1+ (point-min)))
            (error \"\")))
      (error (ebib-log 'error \"Error in line %d: Matching closing parenthesis not found!\" (line-number-at-pos))
             nil)))
   (t nil)))

(defun ebib-match-delim-forward (limit)
  \"Moves forward to the closing delimiter matching the opening delimiter at POINT.
This function handles braces {} and double quotes \\\"\\\". Does not
search/move beyond LIMIT. Returns T if a matching delimiter was
found, NIL otherwise. If point was not at an opening delimiter at
all, NIL is returned and point is not moved. If point was at an
opening delimiter but no matching closing delimiter was found, an
error is logged and point is moved one character forward to allow
parsing to continue.\"
  (cond
   ((eq (char-after) ?\\\")
    (ebib-match-quote-forward limit))
   ((eq (char-after) ?\\{)
    (ebib-match-brace-forward limit))
   (t nil)))

(defun ebib-match-brace-forward (limit)
  \"Moves forward to the closing brace matching the opening brace at POINT.
Does not search/move beyond LIMIT. Returns T if a matching brace
was found, NIL otherwise. If point was not at an opening brace at
all, NIL is returned and point is not moved. If point was at an
opening brace but no matching closing brace was found, an error
is logged and point is moved one character forward to allow
parsing to continue.\"
  (when (eq (char-after) ?\\{) ; make sure we're really on a brace, otherwise return nil
    (condition-case nil
        (save-restriction
          (narrow-to-region (point) limit)
          (progn
            (forward-list)
            ;; all of ebib expects that point moves to the closing
            ;; parenthesis, not right after it, so we adjust.
            (forward-char -1)
            t))               ; return t because a matching brace was found
      (error (progn
               (ebib-log 'error \"Error in line %d: Matching closing brace not found!\" (line-number-at-pos))
               (forward-char 1)
               nil)))))

(defun ebib-match-quote-forward (limit)
  \"Moves to the closing double quote matching the quote at POINT.
Does not search/move beyond LIMIT. Returns T if a matching quote
was found, NIL otherwise. If point was not at a double quote at
all, NIL is returned and point is not moved. If point was at a
quote but no matching closing quote was found, an error is logged
and point is moved one character forward to allow parsing to
continue.\"
  (when (eq (char-after (point)) ?\\\")  ; make sure we're on a double quote.
    (condition-case nil
        (save-restriction
          (narrow-to-region (point) limit)
          (while (progn
                   (forward-char) ; move forward because we're on a double quote
                   (skip-chars-forward \"^\\\"\") ; search the next double quote
                   (eq (char-before) ?\\\\))) ; if it's preceded by a backslash, keep on searching
          (or (eq (char-after) ?\\\")
              (progn
                (goto-char (1+ (point-min)))
                (error \"\"))))
      (error (ebib-log 'error \"Error in line %d: Matching closing quote not found!\" (line-number-at-pos))
             nil))))

(defun ebib-store-entry (entry-key fields db &optional timestamp if-exists)
  \"Store the entry defined by ENTRY-KEY and FIELDS into DB.
Optional argument TIMESTAMP indicates whether a timestamp is to
be added to the entry. Note that for a timestamp to be added,
`ebib-use-timestamp' must also be set to T. IF-EXISTS is as for
`ebib-db-set-entry'.\"
  (ebib-db-set-entry entry-key fields db if-exists)
  (when (and timestamp ebib-use-timestamp)
    (ebib-db-set-field-value 'timestamp (format-time-string ebib-timestamp-format) entry-key db 'overwrite))
  (ebib-set-modified t db))

(defun ebib-search-key-in-buffer (entry-key)
  \"Searches ENTRY-KEY in the index buffer.
Moves point to the first character of the key and returns point.\"
  (goto-char (point-min))
  (re-search-forward (concat \"^\" entry-key))
  (beginning-of-line)
  (point))

(defvar ebib-info-flag nil \"Flag to indicate whether Ebib called Info or not.\")

(defadvice Info-exit (after ebib-info-exit activate)
  \"Quit info and return to Ebib, if Info was called from there.\"
  (when ebib-info-flag
    (setq ebib-info-flag nil)
    (ebib)))

(defun read-file-to-list (filename)
  \"Return a list of lines from file FILENAME.\"
  (if (and filename                               ; protect against 'filename' being 'nil'
           (file-readable-p filename))
      (with-temp-buffer
        (insert-file-contents filename)
        (split-string (buffer-string) \"\\n\" t))))    ; 't' is omit nulls, blank lines in this case

(defun ebib-keywords-load-keywords (db)
  \"Check if there is a keywords file for DB and make sure it is loaded.\"
  (unless (or (not ebib-keywords-file)
              (file-name-directory ebib-keywords-file))
    (let ((dir (expand-file-name (file-name-directory (ebib-db-get-filename db)))))
      (if dir
          (let ((keyword-list (read-file-to-list (concat dir ebib-keywords-file))))
            ;; note: even if keyword-list is empty, we store it, because the user
            ;; may subsequently add keywords.
            (add-to-list 'ebib-keywords-files-alist    ; add the dir if not in the list yet
                         (list dir keyword-list nil)   ; the extra empty list is for new keywords
                         t #'(lambda (x y) (equal (car x) (car y)))))))))

(defun ebib-keywords-add-keyword (keyword db)
  \"Add KEYWORD to the list of keywords for DB.\"
  (if (not ebib-keywords-file)        ; only the general list exists
      (add-to-list 'ebib-keywords-list-per-session keyword t)
    (let ((dir (or (file-name-directory ebib-keywords-file)      ; a single keywords file
                   (file-name-directory (ebib-db-get-filename db)))))    ; per-directory keywords files
      (push keyword (cl-third (assoc dir ebib-keywords-files-alist))))))

(defun ebib-keywords-for-database (db)
  \"Return the list of keywords for database DB.
When the keywords come from a file, add the keywords in
`ebib-keywords-list', unless `ebib-keywords-use-only-file' is set.\"
  (if (not ebib-keywords-file)        ; only the general list exists
      ebib-keywords-list-per-session
    (let* ((dir (or (file-name-directory ebib-keywords-file)     ; a single keywords file
                    (file-name-directory (ebib-db-get-filename db))))    ; per-directory keywords files
           (lst (assoc dir ebib-keywords-files-alist)))
      (append (cl-second lst) (cl-third lst)))))

(defun ebib-keywords-get-file (db)
  \"Return the name of the keywords file for DB.\"
  (if (and ebib-keywords-file ; TODO not sure if this function'll work correctly if ebib-keywords-file is NIL.
           (file-name-directory ebib-keywords-file))
      ebib-keywords-file
    (concat (file-name-directory (ebib-db-get-filename db)) ebib-keywords-file)))

(defun ebib-keywords-save-to-file (keyword-file-descr)
  \"Save all keywords in KEYWORD-FILE-DESCR to the associated file.
KEYWORD-FILE-DESCR is an element of `ebib-keywords-files-alist',
that is, it consists of a list of three elements, the first is
the directory of the keywords file, the second the existing
keywords and the third the keywords added in this session.\"
  (let ((file (if (file-name-directory ebib-keywords-file)
                  ebib-keywords-file
                (concat (car keyword-file-descr) ebib-keywords-file))))
    (if (file-writable-p file)
        (with-temp-buffer
          (mapc #'(lambda (keyword)
                    (insert (format \"%s\\n\" keyword)))
                (append (cl-second keyword-file-descr) (cl-third keyword-file-descr)))
          (write-region (point-min) (point-max) file))
      (ebib-log 'warning \"Could not write to keyword file `%s'\" file))))

(defun ebib-keywords-save-new-keywords (db)
  \"Check if new keywords were added to DB and save them as required.\"
  (let ((lst (ebib-keywords-new-p db))
        (file (ebib-keywords-get-file db)))
    (when (and (cl-third lst)           ; if there are new keywords
               (or (eq ebib-keywords-file-save-on-exit 'always)
                   (and (eq ebib-keywords-file-save-on-exit 'ask)
                        (y-or-n-p \"New keywords have been added. Save \"))))
      (ebib-keywords-save-to-file lst)
      ;; now move the new keywords to the list of existing keywords
      (setf (cl-second lst) (append (cl-second lst) (cl-third lst)))
      (setf (cl-third lst) nil))))

(defun ebib-keywords-save-cur-db ()
  \"Save new keywords for the current database.\"
  (interactive)
  (ebib-keywords-save-new-keywords ebib-cur-db))

(defun ebib-keywords-new-p (&optional db)
  \"Check whether there are new keywords.
Returns NIL if there are no new keywords, or a list containing
all the elements in `ebib-keywords-files-alist' that contain new
keywords.

Optional argument DB specifies the database to check for.\"
  (if db
      (let* ((dir (or (and ebib-keywords-file
                           (file-name-directory ebib-keywords-file)) ; a single keywords file
                      (file-name-directory (ebib-db-get-filename db)))) ; per-directory keywords files
             (lst (assoc dir ebib-keywords-files-alist)))
        (if (cl-third lst)
            lst))
    (cl-remove-if-not #'cl-third ebib-keywords-files-alist)))

(defun ebib-keywords-save-all-new ()
  \"Check if new keywords were added during the session and save them as required.\"
  (interactive)
  (let ((new (ebib-keywords-new-p)))
    (when (and new
               (or (eq ebib-keywords-file-save-on-exit 'always)
                   (ebib-called-interactively-p)
                   (and (eq ebib-keywords-file-save-on-exit 'ask)
                        (y-or-n-p (format \"New keywords were added. Save '%s'? \"
                                          (file-name-nondirectory ebib-keywords-file)))))) ; strip path for succinctness
      (mapc #'(lambda (elt)
                (ebib-keywords-save-to-file elt))
            new))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main program execution ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;###autoload
(defun ebib (&optional file)
  \"Ebib, a BibTeX database manager.
Optional argument FILE is a file to load. If FILE is already
loaded, switch to it.\"
  (interactive)
  ;; First do some stuff in the buffer from which Ebib was called.
  ;; Save the buffer from which Ebib is called.
  (setq ebib-buffer-before (current-buffer))
  ;; Set the push buffer to the current buffer.
  (setq ebib-push-buffer (current-buffer))
  ;; See if there are local databases.
  (or ebib-local-bibtex-filenames
      (setq ebib-local-bibtex-filenames (ebib-get-local-databases)))
  (let (key)
    (if file ;; Expand FILE if given.
        (setq file (ebib-locate-bibfile file (append ebib-bib-search-dirs (list default-directory))))
      ;; Otherwise see if there's a key at point.
      (setq key (ebib-read-string-at-point \"][^\\\"@\\\\&$#%',={} \\t\\n\\f\")))
    ;; Initialize Ebib if required.
    (ebib-init)
    ;; Set up the windows.
    (ebib-setup-windows)
    ;; See if we have a file or a key.
    (cond
     (file (ebib-load-bibtex-file-internal file))
     (key (ebib-find-and-set-key key (buffer-local-value 'ebib-local-bibtex-filenames ebib-buffer-before)))))
  (ebib-redisplay))

(defun ebib-find-and-set-key (key files)
  \"Make KEY the current entry.
FILES is a list of BibTeX files in which KEY is searched. If
FILES is `none', only the current database is searched.\"
  (when ebib-databases
    (if (eq files 'none)
        (unless (member key ebib-cur-keys-list)
          (setq key nil))
      (let ((database (catch 'found
                        (mapc #'(lambda (file)
                                  (let ((db (ebib-get-db-from-filename file)))
                                    (if (and db (member key (ebib-db-list-keys db 'nosort)))
                                        (throw 'found db))))
                              files)
                        nil))) ; We must return nil if the key wasn't found anywhere.
        (if (null database)
            (setq key nil)
          (setq ebib-cur-db database))))
    (if key 
        (ebib-db-set-current-entry-key key ebib-cur-db))))

(defun ebib-read-string-at-point (chars)
  \"Reads a string at POINT delimited by CHARS and returns it.
CHARS is a string of characters that should not occur in the string.\"
  (save-excursion
    (skip-chars-backward (concat \"^\" chars))
    (let ((beg (point)))
      (ebib-looking-at-goto-end (concat \"[^\" chars \"]*\"))
      (buffer-substring-no-properties beg (point)))))

(defun ebib-init ()
  \"Initialise Ebib.
This function sets all variables to their initial values, creates
the buffers, reads the rc file and loads the files in
`ebib-preload-bib-files'.\"
  (unless ebib-initialized
    (setq ebib-current-field nil
          ebib-saved-window-config nil)
    (put 'timestamp 'ebib-hidden t)
    (ebib-create-buffers)
    (if (and ebib-keywords-file
             (file-name-directory ebib-keywords-file)) ; returns nil if there is no directory part
        (add-to-list 'ebib-keywords-files-alist (list (file-name-directory ebib-keywords-file)
                                                      (read-file-to-list ebib-keywords-file) nil)))
    (setq ebib-keywords-list-per-session (copy-tree ebib-keywords-list))
    (ebib-filters-load-file ebib-filters-default-file)
    (setq ebib-index-highlight (ebib-make-highlight 1 1 (cdr (assoc 'index ebib-buffer-alist))))
    (setq ebib-fields-highlight (ebib-make-highlight 1 1 (cdr (assoc 'entry ebib-buffer-alist))))
    (setq ebib-strings-highlight (ebib-make-highlight 1 1 (cdr (assoc 'strings ebib-buffer-alist))))
    (add-hook 'kill-emacs-query-functions 'ebib-kill-emacs-query-function)
    (load ebib-rc-file t)
    (if ebib-preload-bib-files
        (mapc #'(lambda (file)
                  (ebib-load-bibtex-file-internal (or (locate-file file ebib-bib-search-dirs)
                                                      file)))
              ebib-preload-bib-files))
    (setq ebib-initialized t)))

(defun ebib-setup-windows ()
  \"Create Ebib's window configuration in the current frame.\"
  ;; If the index buffer is visible, just switch to it.
  (let ((index-window (get-buffer-window (cdr (assoc 'index ebib-buffer-alist)))))
    (if index-window
        (select-window index-window)
      ;; Save the current window configuration.
      (setq ebib-saved-window-config (current-window-configuration))
      (cond
       ((eq ebib-layout 'full)
        (delete-other-windows))
       ((eq ebib-layout 'custom)
        (setq ebib-window-before (selected-window))
        (let ((ebib-window (split-window (selected-window) (- (window-width) ebib-width) t)))
          (select-window ebib-window))))
      (let* ((index-window (selected-window))
             (entry-window (split-window index-window ebib-index-window-size
                                         ebib-window-vertical-split)))
        (switch-to-buffer (cdr (assoc 'index ebib-buffer-alist)))
        (unless (eq ebib-layout 'index-only)
          (set-window-buffer entry-window (cdr (assoc 'entry ebib-buffer-alist))))
        (set-window-dedicated-p index-window t)
        (if (eq ebib-layout 'custom)
            (set-window-dedicated-p entry-window t))))))

(defun ebib-create-buffers ()
  \"Creates the buffers for Ebib.\"
  ;; first we create a buffer for multiline editing.  this one does *not*
  ;; have a name beginning with a space, because undo-info is normally
  ;; present in an edit buffer.
  (add-to-list 'ebib-buffer-alist (cons 'multiline (get-buffer-create \"*Ebib-edit*\")))
  (with-current-buffer (cdr (assoc 'multiline ebib-buffer-alist))
    (funcall ebib-multiline-major-mode)
    (ebib-multiline-mode t))
  ;; then we create a buffer to hold the fields of the current entry.
  (add-to-list 'ebib-buffer-alist (cons 'entry (get-buffer-create \"*Ebib-entry*\")))
  (with-current-buffer (cdr (assoc 'entry ebib-buffer-alist))
    (ebib-entry-mode)
    (buffer-disable-undo))
  ;; then we create a buffer to hold the @STRING definitions
  (add-to-list 'ebib-buffer-alist (cons 'strings (get-buffer-create \"*Ebib-strings*\")))
  (with-current-buffer (cdr (assoc 'strings ebib-buffer-alist))
    (ebib-strings-mode)
    (buffer-disable-undo))
  ;; the log buffer
  (add-to-list 'ebib-buffer-alist (cons 'log (get-buffer-create \"*Ebib-log*\")))
  (with-current-buffer (cdr (assoc 'log ebib-buffer-alist))
    (erase-buffer)
    (insert \"Ebib log messages\\n\\n(Press C-v or SPACE to scroll down, M-v or `b' to scroll up, `q' to quit.)\\n\\n\")
    (ebib-log-mode)
    (buffer-disable-undo))
  ;; and lastly we create a buffer for the entry keys.
  (add-to-list 'ebib-buffer-alist (cons 'index (get-buffer-create \" none\")))
  (with-current-buffer (cdr (assoc 'index ebib-buffer-alist))
    (ebib-index-mode)
    (buffer-disable-undo)
    (if ebib-index-mode-line
        (setq mode-line-format ebib-index-mode-line))))

(defun ebib-quit ()
  \"Quits Ebib.
The Ebib buffers are killed, all variables except the keymaps are set to nil.\"
  (interactive)
  (when (if (ebib-modified-p)
            (yes-or-no-p \"There are modified databases. Quit anyway? \")
          (y-or-n-p \"Quit Ebib? \"))
    (ebib-keywords-save-all-new)
    (ebib-filters-update-filters-file)
    (mapc #'(lambda (buffer)
              (kill-buffer buffer))
          (mapcar #'cdr ebib-buffer-alist))
    (setq ebib-databases nil
          ebib-cur-db nil
          ebib-buffer-alist nil
          ebib-initialized nil
          ebib-index-highlight nil
          ebib-fields-highlight nil
          ebib-strings-highlight nil
          ebib-export-filename nil
          ebib-window-before nil
          ebib-buffer-before nil
          ebib-cur-keys-list nil
          ebib-keywords-files-alist nil
          ebib-keywords-list-per-session nil
          ebib-filters-alist nil)
    (set-window-configuration ebib-saved-window-config)
    (remove-hook 'kill-emacs-query-functions 'ebib-kill-emacs-query-function)
    (message \"\")))

(defun ebib-kill-emacs-query-function ()
  \"Ask if the user wants to save any modified databases and added
keywords when Emacs is killed.\"
  (when (or (not (ebib-modified-p))
            (if (y-or-n-p \"Save all unsaved Ebib databases? \")
                (progn
                  (ebib-save-all-databases)
                  t)
              (yes-or-no-p \"Ebib holds modified databases. Kill anyway? \")))
    (ebib-keywords-save-all-new)
    t))

;;;;;;;;;;;;;;;;
;; index-mode ;;
;;;;;;;;;;;;;;;;

(eval-and-compile
  (define-prefix-command 'ebib-prefix-map)
  (suppress-keymap ebib-prefix-map))

;; macro to redefine key bindings.

(defmacro ebib-key (buffer key &optional command prefixed)
  (cond
   ((eq buffer 'index)
    (let ((one `(define-key ebib-index-mode-map ,key (quote ,command)))
          (two (when (or prefixed
                         (null command))
                 `(define-key ebib-prefix-map ,key (quote ,command)))))
      (if two
          `(progn ,one ,two)
        one)))
   ((eq buffer 'entry)
    `(define-key ebib-entry-mode-map ,key (quote ,command)))
   ((eq buffer 'strings)
    `(define-key ebib-strings-mode-map ,key (quote ,command)))
   ((eq buffer 'mark-prefix)
    `(progn
       (define-key ebib-index-mode-map (format \"%c\" ebib-prefix-key) nil)
       (define-key ebib-index-mode-map ,key 'ebib-prefix-map)
       (setq ebib-prefix-key (string-to-char ,key))))
   ((eq buffer 'multiline)
    `(progn
       (define-key ebib-multiline-mode-map \"\\C-c\" nil)
       (mapc #'(lambda (command)
                 (define-key ebib-multiline-mode-map (format \"\\C-c%s%c\" ,key (car command)) (cdr command)))
             '((?q . ebib-quit-multiline-edit-and-save)
               (?c . ebib-cancel-multiline-edit)
               (?s . ebib-save-from-multiline-edit)))
       (setq ebib-multiline-key (string-to-char ,key))))))

(defvar ebib-index-mode-map
  (let ((map (make-keymap)))
    (suppress-keymap map)
    map)
  \"Keymap for the ebib index buffer.\")

;; we define the keys with ebib-key rather than with define-key, because
;; that automatically sets up ebib-prefix-map as well.
(ebib-key index [up] ebib-prev-entry)
(ebib-key index [down] ebib-next-entry)
(ebib-key index [right] ebib-next-database)
(ebib-key index [left] ebib-prev-database)
(ebib-key index [prior] ebib-index-scroll-down)
(ebib-key index [next] ebib-index-scroll-up)
(ebib-key index [home] ebib-goto-first-entry)
(ebib-key index [end] ebib-goto-last-entry)
(ebib-key index [return] ebib-select-and-popup-entry)
(ebib-key index \" \" ebib-index-scroll-up)
(ebib-key index \"/\" ebib-search)
(ebib-key index \"&\" ebib-filters-logical-and)
(ebib-key index \"|\" ebib-filters-logical-or)
(ebib-key index \"~\" ebib-filters-logical-not)
(ebib-key index \";\" ebib-prefix-map)
(ebib-key index \"?\" ebib-info)
(ebib-key index \"a\" ebib-add-entry)
(ebib-key index \"b\" ebib-index-scroll-down)
(ebib-key index \"c\" ebib-index-c)
(ebib-key index \"C\" ebib-follow-crossref)
(ebib-key index \"d\" ebib-delete-entry t)
(ebib-key index \"e\" ebib-edit-entry)
(ebib-key index \"E\" ebib-edit-keyname)
(ebib-key index \"f\" ebib-view-file)
(ebib-key index \"F\" ebib-filters-map)
(ebib-key index \"g\" ebib-goto-first-entry)
(ebib-key index \"G\" ebib-goto-last-entry)
(ebib-key index \"h\" ebib-index-help)
(ebib-key index \"i\" ebib-browse-doi)
(ebib-key index \"j\" ebib-next-entry)
(ebib-key index \"J\" ebib-switch-to-database)
(ebib-key index \"k\" ebib-prev-entry)
(ebib-key index \"K\" ebib-generate-autokey)
(ebib-key index \"l\" ebib-show-log)
(ebib-key index \"m\" ebib-mark-entry t)
(ebib-key index \"n\" ebib-search-next)
(ebib-key index [(control n)] ebib-next-entry)
(ebib-key index [(meta n)] ebib-index-scroll-up)
(ebib-key index \"o\" ebib-load-bibtex-file)
(ebib-key index \"p\" ebib-push-bibtex-key t)
(ebib-key index [(control p)] ebib-prev-entry)
(ebib-key index [(meta p)] ebib-index-scroll-down)
(ebib-key index \"P\" ebib-edit-preamble)
(ebib-key index \"q\" ebib-quit)
(ebib-key index \"r\" ebib-reload-current-database)
(ebib-key index \"R\" ebib-reload-all-databases)
(ebib-key index \"s\" ebib-save-current-database)
(ebib-key index \"S\" ebib-edit-strings)
(ebib-key index \"u\" ebib-browse-url)
(ebib-key index \"x\" ebib-export-entry t)
(ebib-key index \"\\C-xb\" ebib-leave-ebib-windows)
(ebib-key index \"\\C-xk\" ebib-quit)
(ebib-key index \"X\" ebib-export-preamble)
(ebib-key index \"z\" ebib-leave-ebib-windows)
(ebib-key index \"Z\" ebib-lower)

(defun ebib-switch-to-database-nth (key)
  (interactive (list (if (featurep 'xemacs)
                         (event-key last-command-event)
                       last-command-event)))
  (ebib-switch-to-database (- (if (featurep 'xemacs)
                                  (char-to-int key)
                                key) 48)))

(mapc #'(lambda (key)
          (define-key ebib-index-mode-map (format \"%d\" key)
            'ebib-switch-to-database-nth))
      '(1 2 3 4 5 6 7 8 9))

;; The filters keymap
(eval-and-compile
  (define-prefix-command 'ebib-filters-map)
  (suppress-keymap 'ebib-filters-map)
  (define-key ebib-filters-map \"&\" 'ebib-filters-logical-and)
  (define-key ebib-filters-map \"|\" 'ebib-filters-logical-or)
  (define-key ebib-filters-map \"~\" 'ebib-filters-logical-not)
  (define-key ebib-filters-map \"a\" 'ebib-filters-apply-filter)
  (define-key ebib-filters-map \"c\" 'ebib-filters-cancel-filter)
  (define-key ebib-filters-map \"d\" 'ebib-filters-delete-filter)
  (define-key ebib-filters-map \"D\" 'ebib-filters-delete-all-filters)
  (define-key ebib-filters-map \"l\" 'ebib-filters-load-from-file)
  (define-key ebib-filters-map \"L\" 'ebib-filters-reapply-last-filter)
  (define-key ebib-filters-map \"r\" 'ebib-filters-reapply-filter)
  (define-key ebib-filters-map \"R\" 'ebib-filters-rename-filter)
  (define-key ebib-filters-map \"s\" 'ebib-filters-store-filter)
  (define-key ebib-filters-map \"S\" 'ebib-filters-save-filters)
  (define-key ebib-filters-map \"v\" 'ebib-filters-view-filter)
  (define-key ebib-filters-map \"V\" 'ebib-filters-view-all-filters)
  (define-key ebib-filters-map \"w\" 'ebib-filters-write-to-file)
  (define-key ebib-filters-map \"W\" 'ebib-write-database))

(define-derived-mode ebib-index-mode
  fundamental-mode \"Ebib-index\"
  \"Major mode for the Ebib index buffer.\"
  (setq buffer-read-only t)
  (setq cursor-type nil)
  (setq truncate-lines t))

(easy-menu-define ebib-index-menu ebib-index-mode-map \"Ebib index menu\"
  '(\"Ebib\"
    [\"Open Database...\" ebib-load-bibtex-file t]
    [\"Merge Database...\" ebib-merge-bibtex-file (and ebib-cur-db (not (ebib-db-get-filter ebib-cur-db)))]
    [\"Save Database\" ebib-save-current-database (and ebib-cur-db
                                                     (ebib-db-modified-p ebib-cur-db))]
    [\"Save All Databases\" ebib-save-all-databases (ebib-modified-p)]
    [\"Save Database As...\" ebib-write-database ebib-cur-db]
    [\"Close Database\" ebib-close-database ebib-cur-db]
    \"--\"
    [\"Save New Keywords For Database\" ebib-keywords-save-cur-db (ebib-keywords-new-p ebib-cur-db)]
    [\"Save All New Keywords\" ebib-keywords-save-all-new (ebib-keywords-new-p)]
    \"--\"
    (\"Entry\"
     [\"Add\" ebib-add-entry (and ebib-cur-db (not (ebib-db-get-filter ebib-cur-db)))]
     [\"Edit\" ebib-edit-entry ebib-cur-keys-list]
     [\"Delete\" ebib-delete-entry (and ebib-cur-db
                                      (ebib-cur-entry-key)
                                      (not (ebib-db-get-filter ebib-cur-db)))])
    [\"Edit Strings\" ebib-edit-strings (and ebib-cur-db (not (ebib-db-get-filter ebib-cur-db)))]
    [\"Edit Preamble\" ebib-edit-preamble (and ebib-cur-db (not (ebib-db-get-filter ebib-cur-db)))]
    \"--\"
    [\"Open URL\" ebib-browse-url (ebib-db-get-field-value ebib-standard-url-field (ebib-cur-entry-key) ebib-cur-db 'noerror)]
    [\"Open DOI\" ebib-browse-doi (ebib-db-get-field-value ebib-standard-doi-field (ebib-cur-entry-key) ebib-cur-db 'noerror)]
    [\"View File\" ebib-view-file (ebib-db-get-field-value ebib-standard-file-field (ebib-cur-entry-key) ebib-cur-db 'noerror)]
    (\"Print Entries\"
     [\"As Bibliography\" ebib-latex-entries (and ebib-cur-db (not (ebib-db-get-filter ebib-cur-db)))]
     [\"As Index Cards\" ebib-print-entries ebib-cur-db]
     [\"Print Multiline Fields\" ebib-toggle-print-multiline :enable t
      :style toggle :selected ebib-print-multiline]
     [\"Print Cards on Separate Pages\" ebib-toggle-print-newpage :enable t
      :style toggle :selected ebib-print-newpage])
    \"--\"
    (\"Options\"
     [\"Show Hidden Fields\" ebib-toggle-hidden :enable t
      :style toggle :selected (not ebib-hide-hidden-fields)]
     [\"Use Timestamp\" ebib-toggle-timestamp :enable t
      :style toggle :selected ebib-use-timestamp]
     [\"Save Cross-Referenced Entries First\" ebib-toggle-xrefs-first :enable t
      :style toggle :selected ebib-save-xrefs-first]
     [\"Allow Identical Fields\" ebib-toggle-identical-fields :enable t
      :style toggle :selected ebib-allow-identical-fields]
     [\"Full Layout\" ebib-toggle-layout :enable t
      :style toggle :selected (eq ebib-layout 'full)]
     [\"Modify Entry Types\" ebib-customize-entry-types t]
     [\"Customize Ebib\" ebib-customize t])
    [\"View Log Buffer\" ebib-show-log t]
    [\"Lower Ebib\" ebib-lower t]
    [\"Quit\" ebib-quit t]
    [\"Help on Ebib\" ebib-info t]))

(easy-menu-add ebib-index-menu ebib-index-mode-map)

(defun ebib-customize ()
  \"Switches to Ebib's customisation group.\"
  (interactive)
  (ebib-lower)
  (customize-group 'ebib))

(defun ebib-customize-entry-types ()
  \"Customizes `ebib-entry-types'.\"
  (interactive)
  (ebib-lower)
  (customize-variable 'ebib-entry-types))

(defun ebib-log (type format-string &rest args)
  \"Writes a message to Ebib's log buffer.
TYPE (a symbol) is the type of message. It can be LOG, which
writes the message to the log buffer only; MESSAGE, which writes
the message to the log buffer and outputs it with the function
MESSAGE; WARNING, which logs the message and sets the variable
`ebib-log-error' to 0; or ERROR, which logs the message and sets
the variable `ebib-log-error' to 1. The latter two can be used to
signal the user to check the log for warnings or errors.

This function adds a newline to the message being logged.\"
  (with-current-buffer (cdr (assoc 'log ebib-buffer-alist))
    (cond
     ((eq type 'warning)
      (or ebib-log-error ; if ebib-error-log is already set to 1, we don't want to overwrite it!
          (setq ebib-log-error 0)))
     ((eq type 'error)
      (setq ebib-log-error 1))
     ((eq type 'message)
      (apply 'message format-string args)))
    (insert (apply 'format  (concat (if (eq type 'error)
                                        (propertize format-string 'face 'font-lock-warning-face)
                                      format-string)
                                    \"\\n\")
                   args))))

(defun ebib-load-bibtex-file (&optional file)
  \"Open a BibTeX file.\"
  (interactive)
  (unless file
    (setq file (ebib-ensure-extension (read-file-name \"File to open: \" \"~/\") (car ebib-bibtex-extensions))))
  (ebib-load-bibtex-file-internal file)
  (ebib-redisplay))

(defun ebib-load-bibtex-file-internal (file)
  \"Helper function for `ebib-load-bibtex-file'.
Note: it is assumed that FILE is a fully expanded filename.\"
  (let ((db (ebib-get-db-from-filename file)))
    (if db                              ; FILE is already open in Ebib.
        (setq ebib-cur-db db)
      (setq ebib-cur-db (ebib-create-new-database))
      (ebib-db-set-filename file ebib-cur-db)
      (setq ebib-log-error nil)         ; we haven't found any errors
      (ebib-log 'log \"%s: Opening file %s\" (format-time-string \"%d %b %Y, %H:%M:%S\") file)
      (if (file-exists-p file)
          (progn
            ;; load the entries in the file
            (ebib-load-entries file ebib-cur-db)
            ;; If the user makes any changes, we'll want to create a back-up.
            (ebib-db-set-backup t ebib-cur-db)
            (ebib-db-set-current-entry-key t ebib-cur-db)
            (ebib-set-modified nil))
        ;; if the file does not exist, we need to issue a message.
        (ebib-log 'message \"(New file)\"))
      ;; add keywords for the new database
      (ebib-keywords-load-keywords ebib-cur-db)
      (if ebib-keywords-files-alist
          (ebib-log 'log \"Using keywords from %s.\" (ebib-keywords-get-file ebib-cur-db))
        (ebib-log 'log \"Using general keyword list.\")))))

(defun ebib-reload-current-database ()
  \"Reload the current database from disk.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     (when (yes-or-no-p \"Reload current database from file \")
       (ebib-reload-database ebib-cur-db)
       (ebib-set-modified nil)
       (ebib-redisplay)
       (message \"Database reloaded\")))
    ((default) (beep))))

(defun ebib-reload-all-databases ()
  \"Reload all databases from disk.\"
  (interactive)
  (when (yes-or-no-p \"Reload all databases from file \")
    (mapc #'(lambda (db)
              (ebib-reload-database db)
              (ebib-set-modified nil db))
          ebib-databases)
    (ebib-redisplay)))

(defun ebib-reload-database (db)
  \"Reload database DB from disk.\"
  (let ((file (ebib-db-get-filename db)))
    ;; first clear out some variables
    (ebib-db-clear-database db)
    ;; then load the file
    (ebib-log 'log \"%s: Reloading file %s\" (format-time-string \"%d-%b-%Y: %H:%M:%S\") file)
    (ebib-db-set-filename file db)
    (ebib-load-entries file db)
    (ebib-db-set-current-entry-key t db)))

(defun ebib-merge-bibtex-file ()
  \"Merges a BibTeX file into the current database.\"
  (interactive)
  (ebib-execute-when
    ((real-db)
     (let ((file (expand-file-name (read-file-name \"File to merge: \"))))
       (if (not (file-readable-p file))
           (error \"No such file: %s\" file)
         (setq ebib-log-error nil)      ; we haven't found any errors (yet)
         (ebib-log 'log \"%s: Merging file %s\" (format-time-string \"%d-%b-%Y: %H:%M:%S\") (ebib-db-get-filename ebib-cur-db))
         (ebib-load-entries file ebib-cur-db)
         (unless (ebib-cur-entry-key)
           (ebib-db-set-current-entry-key t ebib-cur-db))
         (ebib-redisplay)
         (ebib-set-modified t))))
    ((default) (beep))))

(defun ebib-load-entries (file db)
  \"Load BibTeX entries from FILE into DB.\"
  (with-temp-buffer
    (with-syntax-table ebib-syntax-table
      (insert-file-contents file)
      (let ((result (ebib-find-bibtex-entries db nil)))
        ;; Log the results.
        (ebib-log 'message \"%d entries, %d @STRINGs and %s @PREAMBLE found in file.\"
                  (car result)
                  (cadr result)
                  (if (cl-caddr result)
                      \"a\"
                    \"no\"))
        (when ebib-log-error
          (message \"%s found! Press `l' to check Ebib log buffer.\" (nth ebib-log-error '(\"Warnings\" \"Errors\"))))))))

(defun ebib-find-bibtex-entries (db timestamp)
  \"Find the BibTeX entries in the current buffer.
The search is started at the beginnig of the buffer. All entries
found are stored in DB. Return value is a three-element list: the
first element is the number of entries found, the second the
number of @STRING definitions, and the third is T or NIL,
indicating whether a @PREAMBLE was found.

TIMESTAMP indicates whether a timestamp is to be added to each
entry. Note that a timestamp is only added if `ebib-use-timestamp'
is set to T.\"
  (let ((n-entries 0)
        (n-strings 0)
        (preamble nil))
    (goto-char (point-min))
    (while (re-search-forward \"^@\" nil t) ; find the next entry
      (let ((beg (point)))
        (if (ebib-looking-at-goto-end (concat \"\\\\(\" ebib-bibtex-identifier \"\\\\)[[:space:]]*[\\(\\{]\") 1)
          (let ((entry-type (downcase (buffer-substring-no-properties beg (point)))))
            (ebib-looking-at-goto-end \"[[:space:]]*[\\(\\{]\")
            (cond
             ((equal entry-type \"string\") ; string and preamble must be treated differently
              (if (ebib-read-string db)
                  (setq n-strings (1+ n-strings))))
             ((equal entry-type \"preamble\")
              (when (ebib-read-preamble db)
                (setq preamble t)))
             ((equal entry-type \"comment\") ; ignore comments
              (ebib-log 'log \"Comment at line %d ignored\" (line-number-at-pos))
              (ebib-match-paren-forward (point-max)))
             ((assoc (intern-soft entry-type) ebib-entry-types) ; if the entry type has been defined
              (if (ebib-read-entry entry-type db timestamp)
                  (setq n-entries (1+ n-entries))))
             ;; anything else we report as an unknown entry type.
             (t (ebib-log 'warning \"Line %d: Unknown entry type `%s'. Skipping.\" (line-number-at-pos) entry-type)
                (ebib-match-paren-forward (point-max)))))
          (ebib-log 'error \"Error: illegal entry type at line %d. Skipping\" (line-number-at-pos)))))
    (list n-entries n-strings preamble)))

(defun ebib-read-string (db)
  \"Read the @STRING definition beginning at the line POINT is on.
If a proper abbreviation and string are found, they are stored in
DB. Return the string if one was read, NIL otherwise.\"
  (let ((limit (save-excursion       ; we find the matching end parenthesis
                 (backward-char)
                 (ebib-match-paren-forward (point-max))
                 (point))))
    (skip-chars-forward \"\\\"#%'(),={} \\n\\t\\f\" limit)
    (let ((beg (point)))
      (if (ebib-looking-at-goto-end (concat \"\\\\(\" ebib-bibtex-identifier \"\\\\)[ \\t\\n\\f]*=\") 1)
        (ebib-ifstring (abbr (buffer-substring-no-properties beg (point)))
            (progn
              (skip-chars-forward \"^\\\"{\" limit)
              (let ((beg (point)))
                (ebib-ifstring (string (if (ebib-match-delim-forward limit)
                                     (buffer-substring-no-properties beg (1+ (point)))
                                   nil))
                    (unless (ebib-db-set-string abbr string db 'noerror)
                      (ebib-log 'warning (format \"Line %d: @STRING definition `%s' duplicated. Skipping.\"
                                                   (line-number-at-pos) abbr)))))))
        (ebib-log 'error \"Error: illegal string identifier at line %d. Skipping\" (line-number-at-pos))))))

(defun ebib-read-preamble (db)
  \"Read the @PREAMBLE definition and stores it in DB.
If there was already another @PREAMBLE definition, the new one is
added to the existing one with a hash sign `#' between them.\"
  (let ((beg (point)))
    (forward-char -1)
    (when (ebib-match-paren-forward (point-max))
      (ebib-db-set-preamble (buffer-substring-no-properties beg (point)) db 'append))))

(defun ebib-read-entry (entry-type db &optional timestamp)
  \"Read a BibTeX entry and store it in DB.
Returns the entry key if an entry was found, NIL otherwise.
Optional argument TIMESTAMP indicates whether a timestamp is to
be added. (Whether a timestamp is actually added, also depends on
`ebib-use-timestamp'.)\"
  (setq entry-type (intern-soft entry-type))
  (let ((limit (save-excursion
                 (backward-char)
                 (ebib-match-paren-forward (point-max))
                 (point)))
        (beg (progn
               (skip-chars-forward \" \\n\\t\\f\") ; note the space!
               (point))))
    (let (entry-key)
      (if (ebib-looking-at-goto-end (concat \"\\\\(\"
                                            ebib-key-regexp
                                            \"\\\\)[ \\t\\n\\f]*,\")
                                    1)  ; this delimits the entry key
          (progn                        ; if we found an entry key
            (setq entry-key (buffer-substring-no-properties beg (point)))
            (when (string= entry-key \"\") ; to be on the safe side
              (setq entry-key (ebib-generate-tempkey db))
              (ebib-log 'warning \"Line %d: Temporary key generated for entry.\" (line-number-at-pos)))
            (skip-chars-forward \"^,\")) ; move to the comma after the entry key
        ;; if there is no legal entry key, we create a temporary key and try to read the entry anyway.
        (setq entry-key (ebib-generate-tempkey db))
        (ebib-log 'warning \"Line %d: No entry key; generating temporary key.\" (line-number-at-pos)))
      (if (ebib-db-get-entry entry-key db 'noerror)
          (ebib-log 'warning \"Line %d: Entry `%s' duplicated. Skipping.\" (line-number-at-pos) entry-key)
        (ebib-store-entry entry-key (list (cons '=type= entry-type)) db timestamp))
      (cl-loop for field = (ebib-find-bibtex-field limit)
               while field do
               ;; TODO We pass 'overwrite if `ebib-allow-identical-fields'
               ;; is nil in order to overwrite a possible timestamp. This
               ;; has to be handled better, though!
               (ebib-db-set-field-value (car field) (cdr field) entry-key db (if ebib-allow-identical-fields
                                                                                 ebib-field-separator 
                                                                               'overwrite)
                                        'as-is))
      entry-key)))                      ; Return the entry key.

(defun ebib-find-bibtex-field (limit)
  \"Find the field after point.
Return a cons (FIELD . VALUE), or NIL if no field was found.\"
  (skip-chars-forward \"\\\"#%'(),={} \\n\\t\\f\" limit) ; move to the first char of the field name
  (unless (>= (point) limit)   ; if we haven't reached the end of the entry
    (let ((beg (point)))
      (if (ebib-looking-at-goto-end (concat \"\\\\(\" ebib-bibtex-identifier \"\\\\)[ \\t\\n\\f]*=\") 1)
          (let ((field-type (intern (downcase (buffer-substring-no-properties beg (point))))))
            (skip-chars-forward \"#%'(),=} \\n\\t\\f\" limit) ; move to the field contents
            (let* ((beg (point))
                   (field-contents (buffer-substring-no-properties beg (ebib-find-end-of-field limit))))
              (cons field-type field-contents)))
        (ebib-log 'error \"Error: illegal field name found at line %d. Skipping\" (line-number-at-pos))))))

(defun ebib-find-end-of-field (limit)
  \"Move POINT to the end of a field's contents and return POINT.
The contents of a field is delimited by a comma or by the closing brace of
the entry. The latter is at position LIMIT.\"
  (while (and (not (eq (char-after) ?\\,))
              (< (point) limit))
    (ebib-match-delim-forward limit) ; check if we're on a delimiter and if so, jump to the matching closing delimiter
    (forward-char 1))
  (if (= (point) limit)
      (skip-chars-backward \" \\n\\t\\f\"))
  (point))

(defun ebib-leave-ebib-windows ()
  \"Leaves the Ebib windows, lowering them if necessary.\"
  (interactive)
  (ebib-lower t))

(defun ebib-lower (&optional soft)
  \"Hides the Ebib windows.
If optional argument SOFT is non-NIL, just switch to a non-Ebib
buffer if Ebib is not occupying the entire frame.\"
  (interactive)
  (unless (member (window-buffer) (mapcar #'cdr ebib-buffer-alist))
    (error \"Ebib is not active \"))
  (cond
   ((and soft (eq ebib-layout 'custom))
    (select-window ebib-window-before))
   ((and soft (eq ebib-layout 'index-only))
    (other-window 1)
    (if (member (current-buffer) (mapcar #'cdr ebib-buffer-alist))
        (switch-to-buffer nil)))
   (t (set-window-configuration ebib-saved-window-config)))
  (mapc #'(lambda (buffer)
            (bury-buffer buffer))
        (mapcar #'cdr ebib-buffer-alist)))

(defun ebib-prev-entry ()
  \"Moves to the previous BibTeX entry.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     ;; if the current entry is the first entry,
     (let ((prev (ebib-prev-elem (ebib-cur-entry-key) ebib-cur-keys-list)))
       (if (not prev)                   ; if we're on the first entry
           (beep)                       ; just beep
         (ebib-db-set-current-entry-key prev ebib-cur-db)
         (goto-char (ebib-highlight-start ebib-index-highlight))
         (forward-line -1)
         (ebib-set-index-highlight)
         (ebib-fill-entry-buffer))))
    ((default)
     (beep))))

(defun ebib-next-entry ()
  \"Moves to the next BibTeX entry.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     (let ((next (ebib-next-elem (ebib-cur-entry-key) ebib-cur-keys-list)))
       (if (not next)                   ; if we're on the last entry,
           (beep)                       ; just beep
         (ebib-db-set-current-entry-key next ebib-cur-db)
         (goto-char (ebib-highlight-start ebib-index-highlight))
         (forward-line 1)
         (ebib-set-index-highlight)
         (ebib-fill-entry-buffer))))
    ((default)
     (beep))))

(defun ebib-add-entry-stub (&optional entry db)
  \"Add ENTRY to DB in the form of a stub.
Returns the database key of the created entry. ENTRY is an
optional alist consisting of (FIELD . VALUE) pairs. The alist is
converted into a BibTeX entry stub and added to DB, which
defaults to the current database. If an entry alist doesn't
contain the `=type=' field, the entry type is set to the value of
`ebib-default-type'. If it doesn't contain a `=key=' field, a key
is created of the form \\\"<new-entry%d>\\\", where %d is replaced
with a number in ascending sequence.\"
  (unless db
    (setq db ebib-cur-db))
  (let ((fields ())
        entry-key)
    (cl-dolist (props entry)
      ;;aggregate properties, some require special handling
      (cond
       ((eq (car props) '=key=)
        (setq entry-key (cdr props)))
       ((eq (car props) '=type=)   ; the =type= field should not be braced.
        (push props fields))
       ((eq (car props) ebib-standard-file-field)
        (let ((short-file (ebib-file-relative-name (expand-file-name (cdr props)))))
          (push (cons ebib-standard-file-field (ebib-db-brace short-file)) fields)))
       (t
        (push (cons (car props) (ebib-db-brace (cdr props))) fields))))
    ;;check for required
    (unless entry-key
      (setq entry-key (ebib-generate-tempkey db)))
    (unless (assoc '=type= fields)
      (push (cons '=type= ebib-default-type) fields))
    ;; insert
    (ebib-store-entry entry-key fields db t ebib-uniquify-keys)
    entry-key))

(defun ebib-add-entry ()
  \"Interactively adds a new entry to the database.\"
  (interactive)
  (ebib-execute-when
    ((real-db)
     (let ((entry-alist (list)))
       (unless ebib-autogenerate-keys
         (add-to-list 'entry-alist (cons '=key= (read-string \"New entry key: \" nil 'ebib-key-history))))
       (ebib-db-set-current-entry-key (ebib-add-entry-stub entry-alist ebib-cur-db) ebib-cur-db)
       (ebib-redisplay)
       (ebib-edit-entry-internal)))
    ((no-database)
     (error \"No database open. Use `o' to open a database first\"))
    ((default)
     (beep))))

(defun ebib-add-file-entry (&optional filepath allow-duplicates disable-prompt db)
  \"Add an entry stub for an optional FILEPATH to DB.
If FILEPATH is a list, add entries for each file contained
within. If FILEPATH is a directory, add entries for all its
contents. And if FILEPATH is not given, prompt the user to browse
in the minibuffer, unless DISABLE-PROMPT is T. If a FILEPATH is
already referenced by an entry in the DB, then it is ignored by
default. If ALLOW-DUPLICATES is true, then add new entry stubs
for each file anyway.\"
  (interactive)
  (or db
      (setq db ebib-cur-db))
  (let (all-entry-files)
    (cl-labels
        ((file-exists-in-db-p (fp)
                              (if (member (locate-file fp ebib-file-search-dirs) all-entry-files)
                                  t))
         (add-file-entry (fp)
                         (cond
                          ((listp fp)
                           (cl-dolist (file fp) (add-file-entry file)))
                          ((file-directory-p fp)
                           (add-file-entry (directory-files fp t \"^\\\\([^.]\\\\)\"))) ;ignore hidden
                          ((file-exists-p fp)
                           (if (and (null allow-duplicates) (file-exists-in-db-p fp))
                               (message \"File %s already exists in db, skipping\" fp)
                             (ebib-add-entry-stub (list (cons ebib-standard-file-field fp)) db)
                             (message \"Adding file %s\" fp)))
                          (t
                           (error \"Invalid file %s\" fp)))))
      ;;prompt for file
      (if (and (null filepath) (null disable-prompt))
          (setq filepath (read-file-name \"Add file or directory: \" (file-name-as-directory (car ebib-file-search-dirs)))))
      ;;collect all file paths from db entries into single list
      (unless allow-duplicates
        (cl-dolist (entry-key (ebib-db-list-keys db 'nosort))
          (let ((entry-files (ebib-db-get-field-value ebib-standard-file-field entry-key db 'noerror 'unbraced)))
            (if entry-files
                (cl-dolist (fp (split-string entry-files ebib-filename-separator))
                  (add-to-list 'all-entry-files (locate-file fp ebib-file-search-dirs)))))))
      (add-file-entry filepath)
      (ebib-db-set-current-entry-key t ebib-cur-db)
      (ebib-redisplay))))

(defun ebib-generate-autokey ()
  \"Automatically generate a key for the current entry.
This function uses the function BIBTEX-GENERATE-AUTOKEY to
generate the key, see that function's documentation for details.\"
  (interactive)
  (ebib-execute-when
    ((real-db entries)
     (let ((new-key
            (with-temp-buffer
              (ebib-format-entry (ebib-cur-entry-key) ebib-cur-db nil)
              (let ((x-ref (ebib-db-get-field-value 'crossref (ebib-cur-entry-key) ebib-cur-db 'noerror 'unbraced)))
                (if x-ref
                    (ebib-format-entry x-ref ebib-cur-db nil)))
              (goto-char (point-min))
              (bibtex-generate-autokey))))
       (if (equal new-key \"\")
           (error (format \"Cannot create key\"))
         (ebib-update-keyname new-key))))
    ((default)
     (beep))))

(defun ebib-generate-tempkey (&optional db)
  \"Generate a unique temp key in DB or the current database.
Keys are in the form: <new-entry1>, <new-entry2>, ...\"
  (unless db
    (setq db ebib-cur-db))
  (let ((key-list (ebib-db-list-keys db 'nosort))
        (entry-key \"<new-entry1>\")
        (key-count 2))
    (while (member entry-key key-list)
      (setq entry-key (format \"<new-entry%d>\" key-count))
      (cl-incf key-count))
    entry-key))

(defun ebib-index-c ()
  \"Helper function for the `c' key in the index buffer.\"
  (interactive)
  (if (ebib-db-filtered-p ebib-cur-db)
      (ebib-filters-cancel-filter)
    (ebib-close-database)))

(defun ebib-close-database ()
  \"Closes the current BibTeX database.\"
  (interactive)
  (ebib-execute-when
    ((database)
     (when (if (ebib-db-modified-p ebib-cur-db)
               (yes-or-no-p \"Database modified. Close it anyway? \")
             (y-or-n-p \"Close database? \"))
       (ebib-keywords-save-new-keywords ebib-cur-db)
       (let ((to-be-deleted ebib-cur-db)
             (new-db (ebib-next-elem ebib-cur-db ebib-databases)))
         (setq ebib-databases (delq to-be-deleted ebib-databases))
         (if ebib-databases     ; do we still have another database loaded?
             (progn
               (setq ebib-cur-db (or new-db
                                     (ebib-last1 ebib-databases)))
               (ebib-redisplay))
           ;; otherwise, we have to clean up a little and empty all the buffers.
           (setq ebib-cur-db nil)
           (mapc #'(lambda (buf) ; this is just to avoid typing almost the same thing three times...
                     (with-current-buffer (car buf)
                       (with-ebib-buffer-writable
                         (erase-buffer))
                       (ebib-delete-highlight (cadr buf))))
                 (list (list (cdr (assoc 'entry ebib-buffer-alist)) ebib-fields-highlight)
                       (list (cdr (assoc 'index ebib-buffer-alist)) ebib-index-highlight)
                       (list (cdr (assoc 'strings ebib-buffer-alist)) ebib-strings-highlight)))
           ;; multiline edit buffer
           (with-current-buffer (cdr (assoc 'multiline ebib-buffer-alist))
             (with-ebib-buffer-writable
               (erase-buffer)))
           (with-current-buffer (cdr (assoc 'index ebib-buffer-alist))
             (rename-buffer \" none\"))
           (setq ebib-cur-keys-list nil))
         (message \"Database closed.\"))))))

(defun ebib-goto-first-entry ()
  \"Moves to the first BibTeX entry in the database.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     (ebib-db-set-current-entry-key (car ebib-cur-keys-list) ebib-cur-db)
     (with-current-buffer (cdr (assoc 'index ebib-buffer-alist))
       (goto-char (point-min))
       (ebib-set-index-highlight)
       (ebib-fill-entry-buffer)))
    ((default)
     (beep))))

(defun ebib-goto-last-entry ()
  \"Moves to the last entry in the BibTeX database.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     (ebib-db-set-current-entry-key (ebib-last1 ebib-cur-keys-list) ebib-cur-db)
     (with-current-buffer (cdr (assoc 'index ebib-buffer-alist))
       (goto-char (point-min))
       (forward-line (1- (length ebib-cur-keys-list)))
       (ebib-set-index-highlight)
       (ebib-fill-entry-buffer)))
    ((default)
     (beep))))

(defun ebib-edit-entry ()
  \"Edits the current BibTeX entry.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     (ebib-edit-entry-internal))
    ((default)
     (beep))))

(defun ebib-edit-entry-internal ()
  \"Helper function for `ebib-edit-entry'.\"
  (setq ebib-cur-entry-fields (ebib-get-all-fields (ebib-db-get-field-value '=type= (ebib-cur-entry-key) ebib-cur-db)))
  (ebib-pop-to-buffer 'entry)
  (ebib-set-fields-highlight))

(defun ebib-edit-keyname ()
  \"Changes the key of a BibTeX entry.\"
  (interactive)
  (ebib-execute-when
    ((real-db entries)
     (let ((cur-keyname (ebib-cur-entry-key)))
       (ebib-ifstring (new-keyname (read-string (format \"Change `%s' to: \" cur-keyname)
                                         cur-keyname
                                         'ebib-key-history))
           (ebib-update-keyname new-keyname))))
    ((default)
     (beep))))

(defun ebib-update-keyname (new-key)
  \"Change the key of the current BibTeX entry to NEW-KEY.
This function updates both the database and the buffer.\"
  (let ((marked (ebib-db-marked-p (ebib-cur-entry-key) ebib-cur-db))
        (actual-new-key (ebib-db-change-key (ebib-cur-entry-key) new-key ebib-cur-db (if ebib-uniquify-keys 'uniquify 'noerror))))
    (when actual-new-key
      (ebib-db-set-current-entry-key actual-new-key ebib-cur-db)
      (if marked (ebib-mark-entry))
      (ebib-redisplay)
      (ebib-set-modified t))))

(defun ebib-mark-entry ()
  \"Marks or unmarks the current entry.
When used with the prefix key, mark all entries or unmark all
marked entries.\"
  (interactive)
  (if (ebib-called-with-prefix)
      (ebib-execute-when
        ((marked-entries)
         (ebib-db-unmark-entry 'all ebib-cur-db)
         (ebib-fill-index-buffer)
         (message \"All entries unmarked\"))
        ((entries)
         (ebib-db-mark-entry 'all ebib-cur-db)
         (ebib-fill-index-buffer)
         (message \"All entries marked\"))
        ((default)
         (beep)))
    (ebib-execute-when
      ((entries)
       (with-current-buffer (cdr (assoc 'index ebib-buffer-alist))
         (with-ebib-buffer-writable 
           (ebib-db-toggle-mark (ebib-cur-entry-key) ebib-cur-db)
           (ebib-display-mark (ebib-db-marked-p (ebib-cur-entry-key) ebib-cur-db)
                              (ebib-highlight-start ebib-index-highlight)
                              (ebib-highlight-end ebib-index-highlight)))))
      ((default)
       (beep)))))

(defun ebib-index-scroll-down ()
  \"Moves one page up in the database.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     (scroll-down)
     (ebib-select-entry))
    ((default)
     (beep))))

(defun ebib-index-scroll-up ()
  \"Moves one page down in the database.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     (scroll-up)
     (ebib-select-entry))
    ((default)
     (beep))))

(defun ebib-format-entry (key db timestamp)
  \"Write entry KEY in DB into the current buffer in BibTeX format.
If TIMESTAMP is T and `ebib-use-timestamp' is set, a timestamp is
added to the entry, possibly overwriting an existing timestamp.\"
  (let ((entry (ebib-db-get-entry key db 'noerror)))
    (when entry
      (insert (format \"@%s{%s,\\n\" (cdr (assoc '=type= entry)) key))
      (mapc #'(lambda (field)
                (unless (or (eq (car field) '=type=)
                            (and (eq (car field) 'timestamp) timestamp ebib-use-timestamp))
                  (insert (format \"\\t%s = %s,\\n\" (car field) (cdr field)))))
            entry)
      (if (and timestamp ebib-use-timestamp)
          (insert (format \"\\ttimestamp = {%s}\" (format-time-string ebib-timestamp-format)))
        (delete-char -2))               ; the final \",\\n\" must be deleted
      (insert \"\\n}\\n\\n\"))))

(defun ebib-format-strings (db)
  \"Write the @STRINGs of DB into the current buffer in BibTeX format.\"
  (mapc #'(lambda (str)
            (insert (format \"@STRING{%s = %s}\\n\" (car str) (cdr str))))
        (ebib-db-get-all-strings db))
  (insert \"\\n\"))

(defun ebib-get-sortstring (entry-key sortkey-list db)
  \"Return the field value on which the entry ENTRY-KEY is to be sorted.
DB is the database that contains the entry referred to by
ENTRY-KEY. SORTKEY-LIST is a list of fields that are considered
in order for the sort value.\"
  (let ((sort-string nil))
    (while (and sortkey-list
                (null (setq sort-string (ebib-db-get-field-value (car sortkey-list) entry-key db 'noerror 'unbraced))))
      (setq sortkey-list (cdr sortkey-list)))
    sort-string))

(defun ebib-format-database-as-bibtex (db)
  \"Write database DB into the current buffer in BibTeX format.\"
  ;; We define two comparison functions for `sort'. These must simply
  ;; return non-NIL if the first element is to be sorted before the second.
  (cl-flet
      ;; The first one is simple: if X has a crossref field, it must be
      ;; sorted before Y (or at least *can* be, if Y also has a crossref
      ;; field).
      ((compare-xrefs (x y)
                      (ebib-db-get-field-value 'crossref x db 'noerror))
       ;; This one's a bit trickier. We iterate over the lists of fields in
       ;; `ebib-sort-order'. For each level, `ebib-get-sortstring' then
       ;; returns the string that can be used for sorting. If all fails,
       ;; sorting is done on the basis of the entry key.
       (entry< (x y)
               (let (sortstring-x sortstring-y)
                 (cl-loop for sort-list in ebib-sort-order do
                          (setq sortstring-x (ebib-get-sortstring x sort-list db))
                          (setq sortstring-y (ebib-get-sortstring y sort-list db))
                          while (string= sortstring-x sortstring-y))
                 (if (and sortstring-x sortstring-y)
                     (string< sortstring-x sortstring-y)
                   (string< x y))))) ; compare entry keys
    (when (ebib-db-get-preamble db)
      (insert (format \"@PREAMBLE{%s}\\n\\n\" (ebib-db-get-preamble db))))
    (ebib-format-strings db)
    ;; Only entries in `ebib-cur-keys-list' are saved, in case we're
    ;; writing a filtered db to a new file.
    (let ((sorted-list (copy-tree ebib-cur-keys-list)))
      (cond
       (ebib-save-xrefs-first
        (setq sorted-list (sort sorted-list #'compare-xrefs)))
       (ebib-sort-order
        (setq sorted-list (sort sorted-list #'entry<))))
      (mapc #'(lambda (key) (ebib-format-entry key db nil)) sorted-list))))

(defun ebib-make-backup (file)
  \"Create a backup of FILE.
Honour `ebib-create-backups' and BACKUP-DIRECTORY-ALIST.\"
  (when ebib-create-backups
    (let ((backup-file (make-backup-file-name file)))
      (if (file-writable-p backup-file)
          (copy-file file backup-file t)
        (ebib-log 'error \"Could not create backup file `%s'\" backup-file)))))

(defun ebib-save-database (db)
  \"Saves the database DB.\"
  (when (and (ebib-db-backup-p db)
             (file-exists-p (ebib-db-get-filename db)))
    (ebib-make-backup (ebib-db-get-filename db))
    (ebib-db-set-backup nil db))
  (with-temp-buffer
    (ebib-format-database-as-bibtex db)
    (write-region (point-min) (point-max) (ebib-db-get-filename db)))
  (ebib-set-modified nil db))

(defun ebib-write-database ()
  \"Writes the current database to a different file.
If the current database is filtered, only the entries that match
the filter are saved. The original file is not deleted.\"
  (interactive)
  (ebib-execute-when
    ((database)
     (ebib-ifstring (new-filename (expand-file-name (read-file-name \"Save to file: \" \"~/\")))
         (when (or (not (file-exists-p new-filename))
                   (y-or-n-p (format (format \"File %s already exists; overwrite \" new-filename))))
           (with-temp-buffer
             (ebib-format-database-as-bibtex ebib-cur-db)
             (write-region (point-min) (point-max) new-filename nil nil nil))
           (if (ebib-db-get-filter ebib-cur-db)
               (message \"Wrote filtered entries as new database to %s\" new-filename)
             ;; If this wasn't a filtered db, we rename it.
             (ebib-db-set-filename new-filename ebib-cur-db 'overwrite)
             (rename-buffer (concat (format \" %d:\" (1+ (- (length ebib-databases)
                                                          (length (member ebib-cur-db ebib-databases)))))
                                    (file-name-nondirectory new-filename)))
             (ebib-set-modified nil)))))
    ((default)
     (beep))))

(defun ebib-save-current-database ()
  \"Saves the current database.\"
  (interactive)
  (ebib-execute-when
    ((real-db)
     (if (not (ebib-db-modified-p ebib-cur-db))
         (message \"No changes need to be saved.\")
       (ebib-save-database ebib-cur-db)))
    ((filtered-db)
     ;; Saving a filtered db would result in saving only the entries that
     ;; match the filter.
     (error \"Cannot save a filtered database. Use `w' to write to a file.\"))))

(defun ebib-save-all-databases ()
  \"Saves all currently open databases if they were modified.\"
  (interactive)
  (mapc #'(lambda (db)
            (when (ebib-db-modified-p db)
              (ebib-save-database db)))
        ebib-databases)
  (message \"All databases saved.\"))

(defun ebib-print-filename ()
  \"Displays the filename of the current database in the minibuffer.\"
  (interactive)
  (message (ebib-db-get-filename ebib-cur-db)))

(defun ebib-follow-crossref ()
  \"Follow the crossref field and jump to that entry.
If the current entry's crossref field is empty, search for the
first entry with the current entry's key in its crossref field.\"
  (interactive)
  (let ((new-cur-entry (ebib-db-get-field-value 'crossref (ebib-cur-entry-key) ebib-cur-db 'noerror 'unbraced)))
    (if new-cur-entry
        ;; If there is a cross-reference, see if we can find it.
        (cond
         ((member new-cur-entry ebib-cur-keys-list)
          (ebib-db-set-current-entry-key new-cur-entry ebib-cur-db)
          (ebib-redisplay))
         ((member new-cur-entry (ebib-db-list-keys ebib-cur-db 'nosort))
          (error \"Crossreference `%s' not visible due to active filter\" new-cur-entry))
         (t (error \"Entry `%s' does not exist\" new-cur-entry)))
      ;; Otherwise, we assume the user wants to search for entries
      ;; cross-referencing the current one.
      (setq ebib-search-string (ebib-cur-entry-key))
      (ebib-search-next))))

(defun ebib-toggle-hidden ()
  \"Toggle viewing hidden fields.\"
  (interactive)
  (setq ebib-hide-hidden-fields (not ebib-hide-hidden-fields))
  (ebib-fill-entry-buffer))

(defun ebib-toggle-timestamp ()
  \"Toggle using timestamp for new entries.\"
  (interactive)
  (setq ebib-use-timestamp (not ebib-use-timestamp)))

(defun ebib-toggle-xrefs-first ()
  \"Toggle saving of crossreferenced entries first.\"
  (interactive)
  (setq ebib-save-xrefs-first (not ebib-save-xrefs-first)))

(defun ebib-toggle-identical-fields ()
  \"Toggle whether Ebib allows identical fields when opening a .bib file.\"
  (interactive)
  (setq ebib-allow-identical-fields (not ebib-allow-identical-fields)))

(defun ebib-toggle-layout ()
  \"Toggles the Ebib layout.\"
  (interactive)
  (if (eq ebib-layout 'full)
      (setq ebib-layout 'custom)
    (setq ebib-layout 'full))
  (ebib-lower)
  (ebib))

(defun ebib-toggle-print-newpage ()
  \"Toggle whether index cards are printed with a newpage after each card.\"
  (interactive)
  (setq ebib-print-newpage (not ebib-print-newpage)))

(defun ebib-toggle-print-multiline ()
  \"Toggle whether multiline fields are printed.\"
  (interactive)
  (setq ebib-print-multiline (not ebib-print-multiline)))

(defun ebib-delete-entry ()
  \"Deletes the current entry from the database.\"
  (interactive)
  (cl-flet ((remove-entry (key)
                          (ebib-db-remove-entry key ebib-cur-db)
                          (ebib-db-unmark-entry key ebib-cur-db) ; This is harmless if key isn't marked.
                          (ebib-db-set-current-entry-key (or (ebib-next-elem key ebib-cur-keys-list)
                                                             (ebib-last1 ebib-cur-keys-list))
                                                         ebib-cur-db
                                                         'first)
                          (setq ebib-cur-keys-list (delete key ebib-cur-keys-list))))
    (ebib-execute-when
      ((entries) ; TODO this means we can delete an entry from a filtered db!
       (if (and (ebib-called-with-prefix) (ebib-db-marked-entries-p ebib-cur-db))
           (when (y-or-n-p \"Delete all marked entries? \")
             (mapc #'remove-entry (ebib-db-list-marked-entries ebib-cur-db 'nosort))
             (message \"Marked entries deleted.\"))
         (let ((cur-entry (ebib-cur-entry-key)))
           (when (y-or-n-p (format \"Delete %s? \" cur-entry))
             (remove-entry cur-entry)
             (message (format \"Entry `%s' deleted.\" cur-entry)))))
       (ebib-set-modified t)
       (ebib-redisplay))
      ((default)
       (beep)))))

(defun ebib-select-and-popup-entry ()
  \"Make the entry at point current and display it.
If `ebib-layout' is set to `index-only', also popup the entry
buffer and switch to it.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     (ebib-select-entry)
     (when (eq ebib-layout 'index-only)
       ;; this makes the entry buffer visible but then switches to the
       ;; index buffer again.
       (ebib-pop-to-buffer 'entry)
       (ebib-pop-to-buffer 'index)))
    ((default)
     (beep))))

(defun ebib-select-entry ()
  \"Make the entry at point current.\"
  (beginning-of-line)
  (let ((beg (point)))
    (let ((key (save-excursion
                 (skip-chars-forward \"^ \")
                 (buffer-substring-no-properties beg (point)))))
      (ebib-db-set-current-entry-key key ebib-cur-db)
      (ebib-set-index-highlight)
      (ebib-fill-entry-buffer))))

;; the exporting functions will have to be redesigned completely. for now (1 Feb
;; 2012) we just define a new function ebib-export-entries. in the long run,
;; this should be the general exporting function, calling other functions as the
;; need arises.

(defun ebib-export-entries (entries &optional source-db filename)
  \"Exports ENTRIES from SOURCE-DB to FILENAME.
ENTRIES is a list of entry keys. SOURCE-DB defaults to the
current database. If FILENAME is not provided, the user is asked
for one.\"
  (unless filename
    (setq filename (read-file-name
                    \"File to export entries to:\" \"~/\" nil nil ebib-export-filename)))
  (unless source-db
    (setq source-db ebib-cur-db))
  (with-temp-buffer
    (insert \"\\n\")
    (mapc #'(lambda (key)
              (ebib-format-entry key ebib-cur-db nil))
          entries)
    (append-to-file (point-min) (point-max) filename)
    (setq ebib-export-filename filename)))

(defun ebib-export-entry (prefix)
  \"Copies entries to another database.
The prefix argument indicates which database to copy the entry
to. If no prefix argument is present, a filename is asked to
which the entry is appended.\"
  (interactive \"P\")
  (let ((num (ebib-prefix prefix)))
    (if (ebib-called-with-prefix)
        (ebib-export-marked-entries num)
      (ebib-export-single-entry num))))

(defun ebib-export-single-entry (num)
  \"Copies the current entry to another database.
NUM indicates which database to copy the entry to. If it is NIL,
a filename is asked to which the entry is appended.\"
  (ebib-execute-when
    ((entries)
     (if num
         (ebib-export-to-db num (format \"Entry `%s' copied to database %%d.\" (ebib-cur-entry-key))
                            #'(lambda (db)
                                (let ((entry-key (ebib-cur-entry-key)))
                                  (if (member entry-key (ebib-db-list-keys db 'nosort))
                                      (error \"Entry key `%s' already exists in database %d\" entry-key num)
                                    (ebib-store-entry entry-key (copy-tree (ebib-db-get-entry entry-key ebib-cur-db)) db t)
                                    ;; if this is the first entry in the target DB,
                                    ;; its CUR-ENTRY must be set!
                                    (when (null (ebib-db-get-current-entry-key db))
                                      (ebib-db-set-current-entry-key t db))
                                    t)))) ; we must return T, WHEN does not always do this.
       (ebib-export-to-file (format \"Export `%s' to file: \" (ebib-cur-entry-key))
                            (format \"Entry `%s' exported to %%s.\" (ebib-cur-entry-key))
                            #'(lambda ()
                                (insert \"\\n\")
                                (ebib-format-entry (ebib-cur-entry-key) ebib-cur-db t)))))
    ((default)
     (beep))))

(defun ebib-export-marked-entries (num)
  \"Copies the marked entries to another database.
NUM indicates which database to copy the entry to. If it is NIL,
a filename is asked to which the entry is appended.\"
  (ebib-execute-when
    ((marked-entries)
     (if num
         (ebib-export-to-db
          num \"Entries copied to database %d.\"
          #'(lambda (db)
              (mapc #'(lambda (entry-key)
                        (if (member entry-key (ebib-db-list-keys db 'nosort))
                            (error \"Entry key `%s' already exists in database %d\" entry-key num)
                          (ebib-store-entry entry-key (copy-tree (ebib-db-get-entry entry-key ebib-cur-db)) db t)))
                    (ebib-db-list-marked-entries ebib-cur-db 'nosort))
              ;; if the target DB was empty before, its CUR-ENTRY must be set!
              (when (null (ebib-db-get-current-entry-key db))
                (ebib-db-set-current-entry-key t db))
              t))         ; we must return T, WHEN does not always do this.
       (ebib-export-to-file \"Export to file: \" \"Entries exported to %s.\"
                            #'(lambda ()
                                (mapc #'(lambda (entry-key)
                                          (insert \"\\n\")
                                          (ebib-format-entry entry-key ebib-cur-db t))
                                      (ebib-db-list-marked-entries ebib-cur-db 'nosort))))))
    ((default)
     (beep))))

(defun ebib-search ()
  \"Search the current Ebib database.
The search is conducted with STRING-MATCH and can therefore be a
regexp. Searching starts with the current entry. In a filtered
database, only the visible entries are searched.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     (ebib-ifstring (search-str (read-string \"Search database for: \"))
         (progn
           (setq ebib-search-string search-str)
           ;; first we search the current entry
           (if (ebib-search-in-entry ebib-search-string
                                     (ebib-db-get-entry (ebib-cur-entry-key) ebib-cur-db))
               (ebib-fill-entry-buffer ebib-search-string)
             ;; if the search string wasn't found in the current entry, we continue searching.
             (ebib-search-next)))))
    ((default)
     (beep))))

(defun ebib-search-next ()
  \"Searches the next occurrence of `ebib-search-string'.
Searching starts at the entry following the current entry. If a
match is found, the matching entry is shown and becomes the new
current entry. If a filter is active, only the visible entries
are searched.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     (if (null ebib-search-string)
         (message \"No search string\")
       (let ((cur-search-entry (cdr (member (ebib-cur-entry-key) ebib-cur-keys-list))))
         (while (and cur-search-entry
                     (null (ebib-search-in-entry ebib-search-string
                                                 (ebib-db-get-entry (car cur-search-entry) ebib-cur-db 'noerror))))
           (setq cur-search-entry (cdr cur-search-entry)))
         (if (null cur-search-entry)
             (message (format \"`%s' not found\" ebib-search-string))
           (ebib-db-set-current-entry-key (car cur-search-entry) ebib-cur-db)
           (with-current-buffer (cdr (assoc 'index ebib-buffer-alist))
             (goto-char (point-min))
             (re-search-forward (format \"^%s \" (ebib-cur-entry-key)))
             (beginning-of-line)
             (ebib-set-index-highlight)
             (ebib-fill-entry-buffer ebib-search-string))))))
    ((default)
     (beep))))

(defun ebib-search-in-entry (search-str entry &optional field)
  \"Searches one entry of the ebib database.
Returns a list of fields in ENTRY that match the regexp
SEARCH-STR, or NIL if no matches were found. If FIELD is given,
only that field is searched. ENTRY is an alist of (FIELD . VALUE)
pairs.

Normally, the `=type=' field, which stores the entry type, is not
searched, but it is possible to seach for specific entry types by
specifying `=type=' for FIELD. In that case, the search string
can still be a string, but only exact matches will return a
result.\"
  (let ((case-fold-search t)  ; we want to ensure a case-insensitive search
        (result nil))
    (if field
        (let ((value (cdr (assoc field entry))))
          (when (or (and (stringp value)
                         (string-match search-str value))
                    (and (symbolp value)
                         (string= search-str (symbol-name value)))) ; The =type= field has a symbol as value.
            (setq result (list field))))
      (mapc #'(lambda (field)
                (when (and (stringp (cdr field)) ; We exlude the =type= field here.
                           (string-match search-str (cdr field)))
                  (setq result (cons (car field) result))))
            entry))
    result))

(defun ebib-edit-strings ()
  \"Edits the @STRING definitions in the database.\"
  (interactive)
  (ebib-execute-when
    ((real-db)
     (setq ebib-cur-strings-list (ebib-db-list-strings ebib-cur-db))
     (ebib-fill-strings-buffer)
     (ebib-pop-to-buffer 'strings)
     (goto-char (point-min)))
    ((default)
     (beep))))

(defun ebib-edit-preamble ()
  \"Edits the @PREAMBLE definition in the database.\"
  (interactive)
  (ebib-execute-when
    ((real-db)
     (ebib-multiline-edit 'preamble (ebib-db-get-preamble ebib-cur-db)))
    ((default)
     (beep))))

(defun ebib-export-preamble (prefix)
  \"Exports the @PREAMBLE definition.
If a prefix argument is given, it is taken as the database to
export the preamble to. If the goal database already has a
preamble, the new preamble will be appended to it. If no prefix
argument is given, the user is asked to enter a filename to which
the preamble is appended.\"
  (interactive \"P\")
  (ebib-execute-when
    ((real-db)
     (if (null (ebib-db-get-preamble ebib-cur-db))
         (error \"No @PREAMBLE defined\")
       (let ((num (ebib-prefix prefix)))
         (if num
             (ebib-export-to-db num \"@PREAMBLE copied to database %d\"
                                #'(lambda (db)
                                    (ebib-db-set-preamble (ebib-db-get-preamble ebib-cur-db) db 'append)))
           (ebib-export-to-file \"Export @PREAMBLE to file: \"
                                \"@PREAMBLE exported to %s\"
                                #'(lambda ()
                                    (insert (format \"\\n@preamble{%s}\\n\\n\" (ebib-db-get-preamble ebib-cur-db)))))))))
    ((default)
     (beep))))

(defun ebib-print-entries ()
  \"Creates a LaTeX file listing the entries.
Either prints the entire database, or the marked entries.\"
  (interactive)
  (ebib-execute-when
    ((entries)
     (let ((entries (or (when (or (ebib-called-with-prefix)
                                  (equal '(menu-bar) (elt (this-command-keys-vector) 0)))
                          (ebib-db-list-marked-entries ebib-cur-db))
                        (ebib-db-list-keys ebib-cur-db))))
       (ebib-ifstring (tempfile (if (not (string= \"\" ebib-print-tempfile))
                             ebib-print-tempfile
                           (read-file-name \"Use temp file: \" \"~/\" nil nil)))
           (progn
             (with-temp-buffer
               (insert \"\\\\documentclass{article}\\n\\n\")
               (when ebib-print-preamble
                 (mapc #'(lambda (string)
                           (insert (format \"%s\\n\" string)))
                       ebib-print-preamble))
               (insert \"\\n\\\\begin{document}\\n\\n\")
               (mapc #'(lambda (entry-key)
                         ;; first create a table
                         (insert \"\\\\begin{tabular}{p{0.2\\\\textwidth}p{0.8\\\\textwidth}}\\n\")
                         ;; insert the entry type
                         (let ((entry (ebib-db-get-entry entry-key ebib-cur-db)))
                           (insert (format \"\\\\multicolumn{2}{l}{\\\\texttt{%s (%s)}}\\\\\\\\\\n\"
                                           entry-key (symbol-name (cdr (assoc '=type= entry)))))
                           (insert \"\\\\hline\\n\")
                           ;; Then the other fields.
                           (mapc #'(lambda (field)
                                     (ebib-ifstring (value (cdr (assoc field entry)))
                                         (when (or (not (ebib-multiline-p value))
                                                   ebib-print-multiline)
                                           (insert (format \"%s: & %s\\\\\\\\\\n\"
                                                           field (ebib-db-unbrace value))))))
                                 ;; Note: ebib-get-all-fields returns a list with `=type=' as its first element.
                                 (cdr (ebib-get-all-fields (cdr (assoc '=type= entry))))))
                         (insert \"\\\\end{tabular}\\n\\n\")
                         (insert (if ebib-print-newpage
                                     \"\\\\newpage\\n\\n\"
                                   \"\\\\bigskip\\n\\n\")))
                     entries)
               (insert \"\\\\end{document}\\n\")
               (write-region (point-min) (point-max) tempfile))
             (ebib-lower)
             (find-file tempfile)))))
    ((default)
     (beep))))

(defun ebib-latex-entries ()
  \"Creates a LaTeX file that \\\\nocites entries from the database.
Operates either on all entries or on the marked entries.\"
  (interactive)
  (ebib-execute-when
    ((real-db entries)
     (ebib-ifstring (tempfile (if (not (string= \"\" ebib-print-tempfile))
                           ebib-print-tempfile
                         (read-file-name \"Use temp file: \" \"~/\" nil nil)))
         (progn
           (with-temp-buffer
             (insert \"\\\\documentclass{article}\\n\\n\")
             (when ebib-latex-preamble
               (mapc #'(lambda (string)
                         (insert (format \"%s\\n\" string)))
                     ebib-latex-preamble))
             (insert \"\\n\\\\begin{document}\\n\\n\")
             (if (and (or (ebib-called-with-prefix)
                          (equal '(menu-bar) (elt (this-command-keys-vector) 0)))
                      (ebib-db-marked-entries-p ebib-cur-db))
                 (mapc #'(lambda (entry)
                           (insert (format \"\\\\nocite{%s}\\n\" entry)))
                       (ebib-db-list-marked-entries ebib-cur-db))
               (insert \"\\\\nocite{*}\\n\"))
             (insert (format \"\\n\\\\bibliography{%s}\\n\\n\" (expand-file-name (ebib-db-get-filename ebib-cur-db))))
             (insert \"\\\\end{document}\\n\")
             (write-region (point-min) (point-max) tempfile))
           (ebib-lower)
           (find-file tempfile))))
    ((default)
     (beep))))

(defun ebib-switch-to-database (num)
  (interactive \"NSwitch to database number: \")
  (let ((new-db (nth (1- num) ebib-databases)))
    (if new-db
        (progn
          (setq ebib-cur-db new-db)
          (ebib-redisplay))
      (error \"Database %d does not exist\" num))))

(defun ebib-next-database ()
  (interactive)
  (ebib-execute-when
    ((database)
     (let ((new-db (ebib-next-elem ebib-cur-db ebib-databases)))
       (unless new-db
         (setq new-db (car ebib-databases)))
       (setq ebib-cur-db new-db)
       (ebib-redisplay)))))

(defun ebib-prev-database ()
  (interactive)
  (ebib-execute-when
    ((database)
     (let ((new-db (ebib-prev-elem ebib-cur-db ebib-databases)))
       (unless new-db
         (setq new-db (ebib-last1 ebib-databases)))
       (setq ebib-cur-db new-db)
       (ebib-redisplay)))))

(defun ebib-extract-urls (string)
  \"Extract URLs from STRING.
What counts as a URL is defined by `ebib-url-regexp'. Return the
URLs as a list of strings. Parts of the string that are not
recognized as URLs are discarded.\"
  (let ((start 0)
        (result nil))
    (while (string-match ebib-url-regexp string start)
      (add-to-list 'result (match-string 0 string) t)
      (setq start (match-end 0)))
    result))

(defun ebib-browse-url (num)
  \"Browse the URL in the standard URL field.
If this field contains more than one URL, ask the user which one
to open. Alternatively, the user can provide a numeric prefix
argument.\"
  (interactive \"P\")
  (ebib-execute-when
    ((entries)
     (let ((urls (ebib-db-get-field-value ebib-standard-url-field (ebib-cur-entry-key) ebib-cur-db 'noerror 'unbraced 'xref)))
       (if (listp urls)
           (setq urls (car urls)))
       (if urls
           (ebib-call-browser urls num)
         (error \"Field `%s' is empty\" ebib-standard-url-field))))
    ((default)
     (beep))))

(defun ebib-browse-doi ()
  \"Open the DOI in the standard DOI field in a browser.
The stardard DOI field (see user option
`ebib-standard-doi-field') may contain only one DOI. The DOI is
combined with the URL \\\"http://dx.doi.org/\\\" before being sent to
the browser.\"
  (interactive)
  (ebib-execute-when
   ((entries)
    (let ((doi (ebib-db-get-field-value ebib-standard-doi-field (ebib-cur-entry-key) ebib-cur-db 'noerror 'unbraced 'xref)))
      (if (listp doi)
          (setq doi (car doi)))
      (if doi
          (ebib-call-browser (concat \"http://dx.doi.org/\" doi))
        (error \"No DOI found in field `%s'\" ebib-standard-doi-field))))
   ((default)
    (beep))))

(defun ebib-call-browser (string &optional n)
  \"Call a browser with the Nth URL in STRING.
STRING is a string containing one or more URLs. If there is more
than one, N specifies which one to pass to the browser. If N
is NIL, the user is asked which URL to open.\"
  (let ((urls (ebib-extract-urls string)))
    (cond
     ((null (cdr urls))                 ; there's only one URL
      (setq n 1))
     ((not (integerp n)) ; the user didn't provide a numeric prefix argument
      (setq n (string-to-number (read-string (format \"Select URL to open [1-%d]: \" (length urls)))))))
    (if (or (< n 1)             ; if the user provide a number out of range
            (> n (length urls)))
        (setq n 1))
    (let ((url (nth (1- n) urls)))
      (when url
        (if (string-match \"\\\\\\\\url{\\\\(.*?\\\\)}\" url) ; see if the url is contained in \\url{...}
            (setq url (match-string 1 url)))
        (if ebib-browser-command
            (progn
              (message \"Executing `%s %s'\" ebib-browser-command url)
              (start-process \"Ebib-browser\" nil ebib-browser-command url))
          (message \"Opening `%s'\" url)
          (browse-url url))))))

(defun ebib-view-file (num)
  \"Views a file in the standard file field.
The standard file field (see option `ebib-standard-file-field') may
contain more than one filename. In that case, a numeric prefix
argument can be used to specify which file to choose.\"
  (interactive \"P\")
  (ebib-execute-when
    ((entries)
     (let ((filename (ebib-db-get-field-value ebib-standard-file-field (ebib-cur-entry-key) ebib-cur-db 'noerror 'unbraced 'xref)))
       (if (listp filename)
           (setq filename (car filename)))
       (if filename
           (ebib-call-file-viewer filename num)
         (error \"Field `%s' is empty\" ebib-standard-file-field))))
    ((default)
     (beep))))

(defun ebib-call-file-viewer (filename &optional n)
  \"Open FILENAME with an external viewer.
FILENAME can also be a string of filenames separated by
`ebib-filename-separator', in which case the Nth file is
opened. If N is NIL, the user is asked to enter a number.\"
  (let ((files (split-string filename ebib-filename-separator t)))
    (cond
     ((null (cdr files))                ; there's only one file
      (setq n 1))
     ((not (integerp n))  ; the user did not pass a numeric prefix argument
      (setq n (string-to-number (read-string (format \"Select file to open [1-%d]: \" (length files)))))))
    (if (or (< n 1)    ; if the user provided a number that is out of range
            (> n (length files)))
        (setq n 1))
    (let* ((file (nth (1- n) files))
           (file-full-path
            (or (locate-file file ebib-file-search-dirs)
                (locate-file (file-name-nondirectory file) ebib-file-search-dirs)
                (expand-file-name file))))
      (if (file-exists-p file-full-path)
          (let ((ext (file-name-extension file-full-path)))
            (ebib-ifstring (viewer (cdr (assoc ext ebib-file-associations)))
                (progn
                  (message \"Executing `%s %s'\" viewer file-full-path)
                  (start-process (concat \"ebib \" ext \" viewer process\") nil viewer file-full-path))
              (message \"Opening `%s'\" file-full-path)
              (ebib-lower)
              (find-file file-full-path)))
        (error \"File not found: `%s'\" file)))))

(defun ebib-filters-logical-and (not)
  \"Filter the current database.
If the current database is filtered already, perform a logical
AND on the entries.\"
  (interactive \"p\")
  (ebib-execute-when
    ((entries)
     (ebib-filters-create-filter 'and not)
     (ebib-redisplay))
    ((default)
     (beep))))

(defun ebib-filters-logical-or (not)
  \"Filter the current database.
If the current database is filtered already, perform a logical OR
on the entries.\"
  (interactive \"p\")
  (ebib-execute-when
    ((entries)
     (ebib-filters-create-filter 'or not)
     (ebib-redisplay))
    ((default)
     (beep))))

(defun ebib-filters-logical-not ()
  \"Negate the current filter.\"
  (interactive)
  (ebib-execute-when
    ((filtered-db)
     (ebib-db-set-filter (if (eq (car (ebib-db-get-filter ebib-cur-db)) 'not)
                             (cadr (ebib-db-get-filter ebib-cur-db))
                           `(not ,(ebib-db-get-filter ebib-cur-db)))
                         ebib-cur-db)
     (ebib-redisplay))
    ((default)
     (beep))))

(defun ebib-filters-view-filter ()
  \"Display the currently active filter in the minibuffer.\"
  (interactive)
  (ebib-execute-when
    ((filtered-db)
     (message (ebib-filters-pp-filter (ebib-db-get-filter ebib-cur-db))))
    ((default)
     (error \"No filter is active\"))))

(defun ebib-filters-view-all-filters ()
  \"Display all filters in a *Help* buffer.\"
  (interactive)
  (with-help-window (help-buffer)
    (let ((print-length nil)
          (print-level nil)
          (print-circle nil))
      (princ \"Currently stored filters:\\n\\n\")
      (if ebib-filters-alist
          (pp ebib-filters-alist)
        (princ \"None.\")))))

(defun ebib-filters-reapply-filter ()
  \"Reapply the current filter.\"
  (interactive)
  (ebib-execute-when
    ((filtered-db)
     (ebib-redisplay))
    ((default)
     (error \"No filter is active\"))))

(defun ebib-filters-reapply-last-filter ()
  \"Reapply the last used filter.\"
  (interactive)
  (ebib-db-set-filter ebib-filters-last-filter ebib-cur-db)
  (ebib-redisplay)
  (message \"Reapplied last filter\"))

(defun ebib-filters-cancel-filter ()
  \"Cancel the current filter.\"
  (interactive)
  (ebib-execute-when
    ((filtered-db)
     (setq ebib-filters-last-filter (ebib-db-get-filter ebib-cur-db))
     (ebib-db-set-filter nil ebib-cur-db)
     (ebib-redisplay)
     (message \"Filter cancelled\"))
    ((default)
     (beep))))

(defun ebib-filters-select-filter (prompt)
  \"Select a filter from the saved filters.
Return the filter as a list (NAME FILTER).\"
  (if (not ebib-filters-alist)
      (error \"No stored filters\")
    (let* ((completion-ignore-case ebib-filters-ignore-case)
           (name (completing-read prompt
                                  (sort (copy-alist ebib-filters-alist)
                                        #'(lambda (x y) (string-lessp (car x) (car y))))
                                  nil t)))
      (ebib-filters-get-filter name))))

(defun ebib-filters-rename-filter ()
  \"Rename a filter.\"
  (interactive)
  (let ((filter (ebib-filters-select-filter \"Rename filter: \"))
        (new-name (read-from-minibuffer \"Enter new name: \")))
    (if (ebib-filters-exists-p new-name)
        (error (format \"A filter named `%s' already exists\" new-name))
      (setcar filter new-name))))

(defun ebib-filters-store-filter ()
  \"Store the current filter.\"
  (interactive)
  (let ((filter (or (ebib-db-get-filter ebib-cur-db)
                    ebib-filters-last-filter)))
    (if filter
        (let ((name (read-from-minibuffer \"Enter filter name: \")))
          (when (or (not (ebib-filters-exists-p name))
                    (y-or-n-p (format \"Filter `%s' already exists. Overwrite \" name)))
            (ebib-filters-add-filter name filter 'overwrite)
            (message \"Filter stored.\")))
      (message \"No filter to store\"))))

(defun ebib-filters-apply-filter ()
  \"Select a filter and apply it to the current database.\"
  (interactive)
  (ebib-execute-when
    ((real-db)
     (let ((filter (ebib-filters-select-filter \"Apply filter: \")))
       (when filter
         (ebib-db-set-filter (cadr filter) ebib-cur-db)
         (ebib-redisplay))))
    ((filtered-db)
     (error \"A stored filter can only be applied to a real database\"))))

(defun ebib-filters-delete-filter ()
  \"Delete a filter from the stored filters.\"
  (interactive)
  (let ((filter (ebib-filters-select-filter \"Delete filter: \")))
    (when filter
        (setq ebib-filters-alist (delq filter ebib-filters-alist))
    (message \"Filter %s deleted\" (car filter)))))

(defun ebib-filters-delete-all-filters ()
  \"Delete all stored filters.\"
  (interactive)
  (setq ebib-filters-alist nil)
  (message \"All stored filters deleted.\"))

(defun ebib-filters-load-from-file (file)
  \"Read filters from FILE.
If there are stored filters, ask whether they should be
overwritten en bloc or whether the new filters should be
appended.\"
  (interactive \"fRead filters from file: \")
  (setq file (expand-file-name file))
  (setq ebib-log-error nil)
  (let ((overwrite
         (if ebib-filters-alist
             (eq ?o (read-char-choice \"There are stored filters: (o)verwrite/(a)ppend? \" '(?o ?a))))))
    (ebib-filters-load-file file overwrite))
  (if (and ebib-log-error
           (= ebib-log-error 0))
      (message \"No filters found in %s\" file)
    (message \"Filters loaded from %s\" file)))

(defun ebib-filters-save-filters ()
  \"Save all filters in `ebib-filters-default-file'.
If there are no stored filters, the filter file is deleted.\"
  (interactive)
  (ebib-filters-update-filters-file))

(defun ebib-filters-write-to-file ()
  \"Write filters to FILE.\"
  (interactive)
  (if (not ebib-filters-alist)
      (message \"No stored filters\")
    (let ((file (read-file-name \"Save filters to file: \")))
      (ebib-filters-save-file file))))

(defun ebib-filters-create-filter (bool not)
  \"Create a filter interactively and store it in the current database.
BOOL is the operator to be used, either `and' or `or'. If NOT<0,
a logical `not' is applied to the selection.\"
  (let ((field (completing-read (format \"Filter: %s<field> contains <search string>%s. Enter field: \"
                                        (if (< not 0) \"not \" \"\")
                                        (if (< not 0) \"\" \"\"))
                                (append  (list '(\"any\" . 0)
                                               '(\"=type=\" . 0))
                                         (mapcar #'(lambda (x)
                                                     (cons (symbol-name x) 0))
                                                 (append ebib-unique-field-list ebib-additional-fields)))
                                nil t nil 'ebib-field-history)))
    (setq field (intern-soft field))
    (let* ((prompt (format \"Filter: %s%s contains <search string>%s. Enter %s: \"
                                       (if (< not 0) \"not \" \"\")
                                       field
                                       (if (< not 0) \"\" \"\")
                                       (if (string= field \"=type=\") \"entry type\" \"regexp\")))
           (regexp (cond
                    ((string= field \"=type=\")
                     (completing-read prompt ebib-entry-types nil t nil 'ebib-filters-history))
                    ((string= field \"keywords\")
                     (completing-read prompt (ebib-keywords-for-database ebib-cur-db)  nil nil nil 'ebib-keywords-history))
                    (t
                     (read-string prompt nil 'ebib-filters-history)))))
      (ebib-execute-when
        ((filtered-db)
         (ebib-db-set-filter `(,bool ,(ebib-db-get-filter ebib-cur-db)
                                     ,(if (>= not 0)
                                          `(contains ,field ,regexp)
                                        `(not (contains ,field ,regexp))))
                             ebib-cur-db))
        ((real-db)
         (ebib-db-set-filter (if (>= not 0)
                                 `(contains ,field ,regexp)
                               `(not (contains ,field ,regexp)))
                             ebib-cur-db))))))

(defun ebib-filters-run-filter (db)
  \"Run the filter of DB.
Return a list of entry keys that match DB's filter.\"
  ;; The filter uses a macro `contains', which we locally define here. This
  ;; macro in turn uses a dynamic variable `entry', which we must set
  ;; before eval'ing the filter.
  (let ((filter `(cl-macrolet ((contains (field regexp)
                                         `(ebib-search-in-entry ,regexp entry ,(unless (eq field 'any) `(quote ,field)))))
                   ,(ebib-db-get-filter db))))
    (sort (delq nil (mapcar #'(lambda (key)
                                (let ((entry (ebib-db-get-entry key db 'noerror)))
                                  (when (eval filter)
                                    key)))
                            (ebib-db-list-keys db 'nosort)))
          'string<)))

(defun ebib-filters-pp-filter (filter)
  \"Convert FILTER into a string suitable for displaying.
If `ebib-filters-display-as-lisp' is set, this simply converts
FILTER into a string representation of the Lisp expression.
Otherwise, it is converted into infix notation. If FILTER is NIL,
return value is also NIL.\"
  (when filter
    (if ebib-filters-display-as-lisp
        (format \"%S\" filter)
      (cl-labels
          ((pp-filter (f)
                      (cond
                       ((listp f)
                        (let ((op (cl-first f)))
                          (cond
                           ((eq op 'not)
                            (format \"not %s\" (pp-filter (cl-second f))))
                           ((member op '(and or contains))
                            (format \"(%s %s %s)\" (pp-filter (cl-second f)) op (pp-filter (cl-third f)))))))
                       ((stringp f)
                        (format \"\\\"%s\\\"\" f))
                       ((symbolp f)
                        (format \"%s\" f)))))
        (let ((pretty-filter (pp-filter filter)))
          (if (string-match \"\\\\`(\\\\(.*\\\\))\\\\'\" pretty-filter)
              (match-string 1 pretty-filter)
            pretty-filter))))))

(defun ebib-filters-load-file (file &optional overwrite)
  \"Load filters from FILE.
If OVERWRITE in non-NIL, the existing filters are discarded.
Otherwise the new filters are added to the existing ones, unless
there is a name conflict.\"
  (when (file-readable-p file)
    (with-temp-buffer
      (insert-file-contents file)
      (goto-char (point-min))
      (let ((flist (when (search-forward \"(\" nil t)
                     (forward-char -1)
                     (read (current-buffer)))))
        (if (not (listp flist))
            (ebib-log 'warning \"No filters found in %s\" file)
          (ebib-log 'log \"%s: Loading filters from file %s.\" (format-time-string \"%d %b %Y, %H:%M:%S\") file)
          (if overwrite
              (setq ebib-filters-alist nil))
          (mapc #'(lambda (filter)
                    (ebib-filters-add-filter (car filter) (cadr filter)))
                flist))))))

(defun ebib-filters-save-file (file)
  \"Write `ebib-filters-alist' to FILE\"
  (with-temp-buffer
    (let ((print-length nil)
          (print-level nil)
          (print-circle nil))
      (insert \";; -*- mode: emacs-lisp -*-\\n\\n\")
      (insert (format \";; Ebib filters file\\n;; Saved on %s\\n\\n\" (format-time-string \"%Y.%m.%d %H:%M\")))
      (pp ebib-filters-alist (current-buffer))
      (condition-case nil ;; TODO I should use this for the keywords file as well, so that ebib-quit doesn't terminate prematurely.
	  (write-region (point-min) (point-max) file)
	(file-error (message \"Can't write %s\" file))))))

(defun ebib-filters-update-filters-file ()
  \"Update the filters file.
If there are stored filters, they are saved to
`ebib-filters-default-file', otherwise this file is deleted.\"
  (if ebib-filters-alist
      (ebib-filters-save-file ebib-filters-default-file)
    (condition-case nil
        (when (file-exists-p ebib-filters-default-file)
          (delete-file ebib-filters-default-file) ; accepts additional arg `delete-by-moving-to-trash' in Emacs 24
          (message \"Filter file %s deleted.\" ebib-filters-default-file))
      (file-error (message \"Can't delete %s\" ebib-filters-default-file)))))

(defun ebib-filters-add-filter (name filter &optional overwrite)
  \"Add FILTER under NAME in `ebib-filters-alist'.
If a filter with NAME already exists, the filter is not added,
unless OVERWRITE is non-NIL.\"
  (if (ebib-filters-exists-p name)
      (if overwrite
          (setcdr (ebib-filters-get-filter name) (list filter))
        (ebib-log 'message \"Filter name conflict: \\\"%s\\\".\" name))
    (push (list name filter) ebib-filters-alist)))

(defun ebib-filters-get-filter (name &optional noerror)
  \"Return the filter record corresponding to NAME.
Return a list (NAME FILTER) if found. If there is no
filter named NAME, raise an error, unless NOERROR is non-NIL.\"
  (or (assoc-string name ebib-filters-alist ebib-filters-ignore-case)
      (unless noerror
        (error \"Invalid filter %s\" name))))

(defun ebib-filters-exists-p (name)
  \"Return non-NIL if a filter with NAME already exists.\"
  (assoc-string name ebib-filters-alist ebib-filters-ignore-case))

(defun ebib-show-log ()
  \"Displays the contents of the log buffer.\"
  (interactive)
  (ebib-pop-to-buffer 'log))

(defun ebib-create-citation-command (format-string &optional key)
  \"Create a citation command using FORMAT-STRING.
If FORMAT-STRING contains a %K directive, it is replaced with
KEY. Furthermore, FORMAT-STRING may contain any number of %A
directives for additional arguments to the citation. The user is
asked to supply a string for each of them, which may be empty.

Each %A directive may be wrapped in a %<...%> pair, containing
optional material both before and after %A. If the user supplies
an empty string for such an argument, the optional material
surrounding it is not included in the citation command.\"
  (when (and (string-match \"%K\" format-string)
             key)
    (setq format-string (replace-match key t t format-string)))
  (let (arg-prompt)
    (cl-loop for n = 1 then (1+ n)
             until (null (string-match \"%<\\\\(.*?\\\\)%A\\\\(.*?\\\\)%>\\\\|%A\\\\|%D\" format-string)) do
             (setq arg-prompt
                   (if (string= (match-string 0 format-string) \"%D\")
                       \"Description\"
                     \"Argument\"))
             (setq format-string
                   (replace-match (ebib-ifstring (argument
                                                  (save-match-data
                                                    (read-from-minibuffer (format \"%s%s%s: \"
                                                                                  arg-prompt
                                                                                  (if (string= arg-prompt \"Argument\")
                                                                                      (format \" %s\" n)
                                                                                    \"\")
                                                                                  (if key
                                                                                      (concat \" for \" key)
                                                                                    \"\")))))
                                      (concat \"\\\\1\" argument \"\\\\2\")
                                    \"\")
                                  t nil format-string))
             finally return format-string)))

(defun ebib-split-citation-string (format-string)
  \"Split up FORMAT-STRING.
The return value is a list of (BEFORE REPEATER SEPARATOR AFTER),
where BEFORE is the part before the repeating part of
FORMAT-STRING, REPEATER the repeating part, SEPARATOR the string
to be placed between each instance of REPEATER and AFTER the part
after the last instance of REPEATER.\"
  (let (before repeater separator after)
    ;; first check if the format string has a repeater and if so, separate each component
    (cond
     ((string-match \"\\\\(.*?\\\\)%(\\\\(.*\\\\)%\\\\(.*?\\\\))\\\\(.*\\\\)\" format-string)
      (setq before (match-string 1 format-string)
            repeater (match-string 2 format-string)
            separator (match-string 3 format-string)
            after (match-string 4 format-string)))
     ((string-match \"\\\\(.*?\\\\)\\\\(%K\\\\)\\\\(.*\\\\)\" format-string)
      (setq before (match-string 1 format-string)
            repeater (match-string 2 format-string)
            after (match-string 3 format-string))))
    (cl-values before repeater separator after)))

(defun ebib-push-bibtex-key ()
  \"Pushes the current entry to a LaTeX buffer.
The user is prompted for the buffer to push the entry into.\"
  (interactive)
  (let ((called-with-prefix (ebib-called-with-prefix)))
    (ebib-execute-when
      ((entries)
       (let ((buffer (read-buffer (if called-with-prefix
                                      \"Push marked entries to buffer: \"
                                    \"Push entry to buffer: \")
                                  ebib-push-buffer t)))
         (when buffer
           (setq ebib-push-buffer buffer)
           (let* ((format-list (or (cadr (assoc (buffer-local-value 'major-mode (get-buffer buffer)) ebib-citation-commands))
                                   (cadr (assoc 'any ebib-citation-commands))))
                  (citation-command
                   ;; Read a citation command from the user:
                   (ebib-ifstring (format-string (cadr (assoc
                                                        (completing-read \"Command to use: \" format-list nil nil nil 'ebib-cite-command-history)
                                                        format-list)))
                       (cl-multiple-value-bind (before repeater separator after) (ebib-split-citation-string format-string)
                         (cond
                          ((and called-with-prefix ; if there are marked entries and the user wants to push those
                                (ebib-db-marked-entries-p ebib-cur-db))
                           (concat (ebib-create-citation-command before)
                                   (mapconcat #'(lambda (key) ; then deal with the entries one by one
                                                  (ebib-create-citation-command repeater key))
                                              (ebib-db-list-marked-entries ebib-cur-db)
                                              (if separator separator (read-from-minibuffer \"Separator: \")))
                                   (ebib-create-citation-command after)))
                          (t        ; otherwise just take the current entry
                           (ebib-create-citation-command (concat before repeater after) (ebib-cur-entry-key)))))
                     ;; If the user doesn't provide a command, we just insert the entry key or keys:
                     (if (ebib-db-marked-entries-p ebib-cur-db)
                         (mapconcat #'(lambda (key)
                                        key)
                                    (ebib-db-list-marked-entries ebib-cur-db)
                                    (read-from-minibuffer \"Separator: \"))
                       (ebib-cur-entry-key)))))
             (when citation-command
               (with-current-buffer buffer
                 (insert citation-command))
               (message \"Pushed entries to buffer %s\" buffer))))))
      ((default)
       (beep)))))

(defun ebib-index-help ()
  \"Shows the info node of Ebib's index buffer.\"
  (interactive)
  (setq ebib-info-flag t)
  (ebib-lower)
  (info \"(ebib) The Index Buffer\"))

(defun ebib-info ()
  \"Shows Ebib's info node.\"
  (interactive)
  (setq ebib-info-flag t)
  (ebib-lower)
  (info \"(ebib)\"))

;;;;;;;;;;;;;;;;
;; entry-mode ;;
;;;;;;;;;;;;;;;;

(defvar ebib-entry-mode-map
  (let ((map (make-keymap)))
    (suppress-keymap map)
    (define-key map [up] 'ebib-prev-field)
    (define-key map [down] 'ebib-next-field)
    (define-key map [prior] 'ebib-goto-prev-set)
    (define-key map [next] 'ebib-goto-next-set)
    (define-key map [home] 'ebib-goto-first-field)
    (define-key map [end] 'ebib-goto-last-field)
    (define-key map [return] 'ebib-edit-field)
    (define-key map \" \" 'ebib-goto-next-set)
    (define-key map \"b\" 'ebib-goto-prev-set)
    (define-key map \"c\" 'ebib-copy-field-contents)
    (define-key map \"d\" 'ebib-delete-field-contents)
    (define-key map \"e\" 'ebib-edit-field)
    (define-key map \"f\" 'ebib-view-file-in-field)
    (define-key map \"g\" 'ebib-goto-first-field)
    (define-key map \"G\" 'ebib-goto-last-field)
    (define-key map \"h\" 'ebib-entry-help)
    (define-key map \"j\" 'ebib-next-field)
    (define-key map \"k\" 'ebib-prev-field)
    (define-key map \"l\" 'ebib-edit-multiline-field)
    (define-key map [(control n)] 'ebib-next-field)
    (define-key map [(meta n)] 'ebib-goto-prev-set)
    (define-key map [(control p)] 'ebib-prev-field)
    (define-key map [(meta p)] 'ebib-goto-next-set)
    (define-key map \"q\" 'ebib-quit-entry-buffer)
    (define-key map \"r\" 'ebib-toggle-raw)
    (define-key map \"s\" 'ebib-insert-abbreviation)
    (define-key map \"u\" 'ebib-browse-url-in-field)
    (define-key map \"x\" 'ebib-cut-field-contents)
    (define-key map \"y\" 'ebib-yank-field-contents)
    (define-key map \"\\C-xb\" 'ebib-quit-entry-buffer)
    (define-key map \"\\C-xk\" 'ebib-quit-entry-buffer)
    map)
  \"Keymap for the Ebib entry buffer.\")

(define-derived-mode ebib-entry-mode
  fundamental-mode \"Ebib-entry\"
  \"Major mode for the Ebib entry buffer.\"
  (setq buffer-read-only t)
  (setq cursor-type nil)
  (setq truncate-lines t))

(defun ebib-quit-entry-buffer ()
  \"Quits editing the entry.
If the key of the current entry matches the pattern
<new-entry%d>, a new key is automatically generated using
`bibtex-generate-autokey'.\"
  (interactive)
  (cond
   ((and ebib-popup-entry-window
         (eq ebib-layout 'index-only))
    (delete-window))
   ((eq ebib-layout 'index-only)
    (switch-to-buffer nil t)))
  (ebib-pop-to-buffer 'index)
  (ebib-delete-highlight ebib-fields-highlight)
  ;; (select-window (get-buffer-window (cdr (assoc 'index ebib-buffer-alist))))
  (if (string-match \"<new-entry[0-9]+>\" (ebib-cur-entry-key))
      (ebib-generate-autokey)))

(defun ebib-find-visible-field (field direction)
  \"Finds the first visible field before or after FIELD.
If DIRECTION is negative, search the preceding fields, otherwise
search the succeeding fields. If FIELD is visible itself, return
that. If there is no preceding/following visible field, return
NIL. If `ebib-hide-hidden-fields' is NIL, return FIELD.\"
  (when ebib-hide-hidden-fields
    (let ((fn (if (>= direction 0)
                  'ebib-next-elem
                'ebib-prev-elem)))
      (while (and field
                  (get field 'ebib-hidden))
        (setq field (funcall fn field ebib-cur-entry-fields)))))
  field)

(defun ebib-prev-field ()
  \"Moves to the previous field.\"
  (interactive)
  (let ((new-field (ebib-find-visible-field (ebib-prev-elem ebib-current-field ebib-cur-entry-fields) -1)))
    (if (null new-field)
        (beep)
      (setq ebib-current-field new-field)
      (ebib-move-to-field ebib-current-field -1))))

(defun ebib-next-field ()
  \"Moves to the next field.\"
  (interactive)
  (let ((new-field (ebib-find-visible-field (ebib-next-elem ebib-current-field ebib-cur-entry-fields) 1)))
    (if (null new-field)
        (when (ebib-called-interactively-p) ; I call this function after editing a field, and we don't want a beep then.
          (beep))
      (setq ebib-current-field new-field)
      (ebib-move-to-field ebib-current-field 1))))

(defun ebib-goto-first-field ()
  \"Moves to the first field.\"
  (interactive)
  (let ((new-field (ebib-find-visible-field (car ebib-cur-entry-fields) 1)))
    (if (null new-field)
        (beep)
      (setq ebib-current-field new-field)
      (ebib-move-to-field ebib-current-field -1))))

(defun ebib-goto-last-field ()
  \"Moves to the last field.\"
  (interactive)
  (let ((new-field (ebib-find-visible-field (ebib-last1 ebib-cur-entry-fields) -1)))
    (if (null new-field)
        (beep)
      (setq ebib-current-field new-field)
      (ebib-move-to-field ebib-current-field 1))))

(defun ebib-goto-next-set ()
  \"Moves to the next set of fields.\"
  (interactive)
  (cond
   ((eq ebib-current-field '=type=) (ebib-next-field))
   ((member ebib-current-field ebib-additional-fields) (ebib-goto-last-field))
   (t (let* ((entry-type (ebib-db-get-field-value '=type= (ebib-cur-entry-key) ebib-cur-db))
             (obl-fields (ebib-get-obl-fields entry-type))
             (opt-fields (ebib-get-opt-fields entry-type))
             (new-field nil))
        (when (member ebib-current-field obl-fields)
          (setq new-field (ebib-find-visible-field (car opt-fields) 1)))
        ;; new-field is nil if there are no opt-fields
        (when (or (member ebib-current-field opt-fields)
                  (null new-field))
          (setq new-field (ebib-find-visible-field (car ebib-additional-fields) 1)))
        (if (null new-field)
            ;; if there was no further set to go to, go to the last field
            ;; of the current set
            (ebib-goto-last-field)
          (setq ebib-current-field new-field)
          (ebib-move-to-field ebib-current-field 1))))))

(defun ebib-goto-prev-set ()
  \"Moves to the previous set of fields.\"
  (interactive)
  (unless (eq ebib-current-field '=type=)
    (let* ((entry-type (ebib-db-get-field-value '=type= (ebib-cur-entry-key) ebib-cur-db))
           (obl-fields (ebib-get-obl-fields entry-type))
           (opt-fields (ebib-get-opt-fields entry-type))
           (new-field nil))
      (if (member ebib-current-field obl-fields)
          (ebib-goto-first-field)
        (when (member ebib-current-field ebib-additional-fields)
          (setq new-field (ebib-find-visible-field (ebib-last1 opt-fields) -1)))
        (when (or (member ebib-current-field opt-fields)
                  (null new-field))
          (setq new-field (ebib-find-visible-field (ebib-last1 obl-fields) -1)))
        (if (null new-field)
            (ebib-goto-first-field)
          (setq ebib-current-field new-field)
          (ebib-move-to-field ebib-current-field -1))))))

(defun ebib-edit-entry-type ()
  \"Edits the entry type.\"
  (ebib-ifstring (new-type (completing-read \"type: \" ebib-entry-types nil t))
      (progn
        (setq new-type (intern-soft new-type))
        (ebib-db-set-field-value '=type= new-type (ebib-cur-entry-key) ebib-cur-db 'overwrite 'unbraced)
        (ebib-fill-entry-buffer)
        (setq ebib-cur-entry-fields (ebib-get-all-fields new-type))
        (ebib-set-modified t))))

(defun ebib-edit-crossref ()
  \"Edits the crossref field.\"
  (ebib-ifstring (key (completing-read \"Key to insert in `crossref': \" (ebib-db-list-keys ebib-cur-db 'nosort) nil t nil 'ebib-key-history))
      (progn
        (ebib-db-set-field-value 'crossref key (ebib-cur-entry-key) ebib-cur-db 'overwrite)
        ;; We now redisplay the entire entry buffer, so that the crossref'ed
        ;; fields show up. This also puts the cursor back on the =type= field,
        ;; though, so we need to readjust.
        (ebib-fill-entry-buffer)
        (setq ebib-current-field 'crossref)
        (re-search-forward \"^crossref\")
        (ebib-set-fields-highlight)
        (ebib-set-modified t))))

(defun ebib-sort-keywords (keywords)
  \"Sort the KEYWORDS string, remove duplicates, and return it as a string.\"
  (mapconcat 'identity
             (sort (delete-dups (split-string keywords ebib-field-separator t))
                   'string<)
             ebib-field-separator))

(defun ebib-edit-keywords ()
  \"Edit the keywords field.\"
  ;; we shadow the binding of `minibuffer-local-completion-map' so that we
  ;; can unbind <SPC>, since keywords may contain spaces. note also that in
  ;; emacs 24, we can use `make-composed-keymap' for this purpose, but in
  ;; emacs 23.1, this function is not available.
  (let ((minibuffer-local-completion-map `(keymap (keymap (32)) ,@minibuffer-local-completion-map))
        (collection (ebib-keywords-for-database ebib-cur-db)))
    (cl-loop for keyword = (completing-read \"Add a new keyword (ENTER to finish): \" collection nil nil nil 'ebib-keywords-history)
             until (string= keyword \"\")
             do (let* ((conts (ebib-db-get-field-value 'keywords (ebib-cur-entry-key) ebib-cur-db 'noerror 'unbraced))
                       (new-conts (if conts
                                      (concat conts ebib-field-separator keyword)
                                    keyword)))
                  (ebib-db-set-field-value 'keywords
                                           (if ebib-keywords-field-keep-sorted
                                               (ebib-sort-keywords new-conts)
                                             new-conts)
                                           (ebib-cur-entry-key)
                                           ebib-cur-db
                                           'overwrite) 
                  (ebib-redisplay-current-field)
                  (unless (member keyword collection)
                    (ebib-keywords-add-keyword keyword ebib-cur-db)))
             finally return (ebib-set-modified t))))

(defun ebib-edit-file-field ()
  \"Edit the `ebib-standard-file-field'.
Filenames are added to the standard file field separated by
`ebib-filename-separator'. The first directory in
`ebib-file-search-dirs' is used as the start directory.\"
  (let ((start-dir (file-name-as-directory (car ebib-file-search-dirs))))
    (cl-loop for file = (read-file-name \"Add file (ENTER to finish): \" start-dir nil 'confirm-after-completion)
             until (or (string= file \"\")
                       (string= file start-dir))
             do (let* ((short-file (ebib-file-relative-name (expand-file-name file)))
                       (conts (ebib-db-get-field-value ebib-standard-file-field (ebib-cur-entry-key) ebib-cur-db 'noerror 'unbraced))
                       (new-conts (if conts
                                      (concat conts ebib-filename-separator short-file)
                                    short-file)))
                  (ebib-db-set-field-value ebib-standard-file-field new-conts (ebib-cur-entry-key) ebib-cur-db 'overwrite) 
                  (ebib-redisplay-current-field))
             finally return (ebib-set-modified t))))

(defun ebib-file-relative-name (file)
  \"Return a name for FILE relative to `ebib-file-search-dirs'.
If FILE is not in (a subdirectory of) one of the directories in
`ebib-file-search-dirs', return FILE.\"
  ;; We first create a list of names relative to each dir in
  ;; ebib-file-search-dirs, discarding those that start with `..'
  (let* ((names (delq nil (mapcar #'(lambda (dir)
                                      (let ((rel-name (file-relative-name file dir)))
                                        (unless (string-prefix-p \"..\" rel-name)
                                          rel-name)))
                                  ebib-file-search-dirs)))
         ;; Then we take the shortest one...
         (name (car (sort names #'(lambda (x y)
                                    (< (length x) (length y)))))))
    ;; ...and return it, or the filename itself if it couldn't be
    ;; relativized.
    (or name file)))

(defun ebib-edit-normal-field ()
  \"Edit a field that does not require special treatment.\"
    (let ((init-contents (ebib-db-get-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db 'noerror))
          (brace? nil))
      (if (ebib-multiline-p init-contents)
          (ebib-edit-multiline-field) ; this always returns nil
        (when init-contents
          (setq brace? (ebib-db-unbraced-p init-contents))
          (setq init-contents (ebib-db-unbrace init-contents)))
        (ebib-ifstring (new-contents (read-string (format \"%s: \" (symbol-name ebib-current-field))
                                           (if init-contents
                                               (cons init-contents 0))))
            (ebib-db-set-field-value ebib-current-field new-contents (ebib-cur-entry-key) ebib-cur-db 'overwrite brace?)
          (ebib-db-remove-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db))
        (ebib-redisplay-current-field)
        (ebib-set-modified t))))

(defun ebib-edit-field (&optional pfx)
  \"Edit a field of a BibTeX entry.
Most fields are edited directly using the minibuffer, but a few
are handled specially: the `type' and `crossref` fields offer
completion, the `annote' field is edited as a multiline field,
the `keyword' field adds keywords one by one, also allowing
completion, and the field in `ebib-standard-file-field' uses
filename completion and shortens filenames if they are in (a
subdirectory of) one of the directories in
`ebib-file-search-dirs'.

With a prefix argument, the `keyword' field and the field in
`ebib-standard-file-field' can be edited directly. For other
fields, the prefix argument has no meaning.\"
  (interactive \"P\")
  (let ((result
         (cond
          ((eq ebib-current-field '=type=) (ebib-edit-entry-type))
          ((eq ebib-current-field 'crossref) (ebib-edit-crossref))
          ((and (eq ebib-current-field 'keywords)
                (not pfx))
           (ebib-edit-keywords))
          ((and (eq ebib-current-field ebib-standard-file-field)
                (not pfx))
           (ebib-edit-file-field))
          ((eq ebib-current-field 'annote) (ebib-edit-multiline-field))
          (t (ebib-edit-normal-field)))))
    ;; we move to the next field, but only if ebib-edit-field was
    ;; called interactively, otherwise we get a strange bug in
    ;; ebib-toggle-raw...
    (if (and result (ebib-called-interactively-p))
        (ebib-next-field))))

(defun ebib-browse-url-in-field (num)
  \"Browse a URL in the current field.
If the field may contain multiple URLs (as defined by
`ebib-url-regexp'), the user is asked which one to open.
Altertanively, a numeric prefix argument can be passed.\"
  (interactive \"P\")
  (let ((urls (ebib-db-get-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db 'noerror 'unbraced)))
    (if urls
        (ebib-call-browser urls num)
      (error \"Field `%s' is empty\" ebib-current-field))))

(defun ebib-view-file-in-field (num)
  \"Views a file in the current field.
The field may contain multiple filenames, in which case the
prefix argument can be used to specify which file is to be
viewed.\"
  (interactive \"P\")
  (let ((files (ebib-db-get-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db 'noerror 'unbraced)))
    (if files
        (ebib-call-file-viewer files num)
      (error \"Field `%s' is empty\" ebib-current-field))))

(defun ebib-copy-field-contents ()
  \"Copies the contents of the current field to the kill ring.\"
  (interactive)
  (unless (eq ebib-current-field '=type=)
    (let ((contents (car (ebib-db-get-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db 'noerror 'unbraced 'xref))))
      (when (stringp contents)
        (kill-new contents)
        (message \"Field contents copied.\")))))

(defun ebib-cut-field-contents ()
  \"Kills the contents of the current field. The killed text is put in the kill ring.\"
  (interactive)
  (unless (eq ebib-current-field '=type=)
    (let ((contents (ebib-db-get-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db 'noerror 'unbraced)))
      (when (stringp contents)
        (ebib-db-remove-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db)
        (kill-new contents)
        (ebib-redisplay-current-field)
        (ebib-set-modified t)
        (message \"Field contents killed.\")))))

(defun ebib-yank-field-contents (arg)
  \"Inserts the last killed text into the current field.
If the current field already has a contents, nothing is inserted,
unless the previous command was also `ebib-yank-field-contents',
then the field contents is replaced with the previous yank. That
is, multiple uses of this command function like the combination
of C-y/M-y. Prefix arguments also work the same as with C-y/M-y.\"
  (interactive \"P\")
  (if (or (eq ebib-current-field '=type=) ; we cannot yank into the =type= or crossref fields
          (eq ebib-current-field 'crossref)
          (unless (eq last-command 'ebib-yank-field-contents) ; nor into a field already filled
            (ebib-db-get-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db 'noerror)))
      (progn
        (setq this-command t)
        (beep))
    (let ((new-contents (current-kill (cond
                                       ((listp arg)
                                        (if (eq last-command 'ebib-yank-field-contents) 1 0))
                                       ((eq arg '-) -2)
                                       (t (1- arg))))))
      (when new-contents
        (ebib-db-set-field-value ebib-current-field new-contents (ebib-cur-entry-key) ebib-cur-db 'overwrite)
        (ebib-redisplay-current-field)
        (ebib-set-modified t)))))

(defun ebib-delete-field-contents ()
  \"Deletes the contents of the current field.
The deleted text is not put in the kill ring.\"
  (interactive)
  (if (eq ebib-current-field '=type=)
      (beep)
    (when (y-or-n-p \"Delete field contents? \")
      (ebib-db-remove-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db)
      (ebib-redisplay-current-field)
      (ebib-set-modified t)
      (message \"Field contents deleted.\"))))

(defun ebib-toggle-raw ()
  \"Toggles the raw status of the current field contents.\"
  (interactive)
  (unless (or (eq ebib-current-field '=type=)
              (eq ebib-current-field 'crossref)
              (eq ebib-current-field 'keywords))
    (let ((contents (ebib-db-get-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db 'noerror)))
      (unless contents     ; If there is no value,
        (ebib-edit-field)  ; the user can enter one, which we must then store unbraced.
        (setq contents (ebib-db-get-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db 'noerror)))
      (when contents ; We must check to make sure the user entered some value.
        (ebib-db-set-field-value ebib-current-field contents (ebib-cur-entry-key) ebib-cur-db 'overwrite (not (ebib-db-unbraced-p contents)))
        (ebib-redisplay-current-field)
        (ebib-set-modified t)))))

(defun ebib-edit-multiline-field ()
  \"Edits the current field in multiline-mode.\"
  (interactive)
  (unless (or (eq ebib-current-field '=type=)
              (eq ebib-current-field 'crossref))
    (let ((text (ebib-db-get-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db 'noerror)))
      (if (ebib-db-unbraced-p text)
          (setq ebib-multiline-unbraced t)
        (setq text (ebib-db-unbrace text))
        (setq ebib-multiline-unbraced nil))
      (ebib-multiline-edit 'fields text))))

(defun ebib-insert-abbreviation ()
  \"Inserts an abbreviation from the ones defined in the database.\"
  (interactive)
  (if (ebib-db-get-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db 'noerror)
      (beep)
    (let ((strings (ebib-db-list-strings ebib-cur-db 'nosort)))
      (when strings
        (unwind-protect
            (progn
              (other-window 1)
              (let ((string (completing-read \"Abbreviation to insert: \" strings nil t)))
                (when string
                  (ebib-db-set-field-value ebib-current-field string (ebib-cur-entry-key) ebib-cur-db 'overwrite 'unbraced)
                  (ebib-set-modified t))))
          (other-window 1)
          ;; we can't do this earlier, because we would be writing to the index buffer...
          (ebib-redisplay-current-field)
          (ebib-next-field))))))

(defun ebib-entry-help ()
  \"Shows the info node for Ebib's entry buffer.\"
  (interactive)
  (setq ebib-info-flag t)
  (ebib-lower)
  (info \"(ebib) The Entry Buffer\"))

;;;;;;;;;;;;;;;;;;
;; strings-mode ;;
;;;;;;;;;;;;;;;;;;

(defvar ebib-strings-mode-map
  (let ((map (make-keymap)))
    (suppress-keymap map)
    (define-key map [up] 'ebib-prev-string)
    (define-key map [down] 'ebib-next-string)
    (define-key map [prior] 'ebib-strings-page-up)
    (define-key map [next] 'ebib-strings-page-down)
    (define-key map [home] 'ebib-goto-first-string)
    (define-key map [end] 'ebib-goto-last-string)
    (define-key map \" \" 'ebib-strings-page-down)
    (define-key map \"a\" 'ebib-add-string)
    (define-key map \"b\" 'ebib-strings-page-up)
    (define-key map \"c\" 'ebib-copy-string-contents)
    (define-key map \"d\" 'ebib-delete-string)
    (define-key map \"e\" 'ebib-edit-string)
    (define-key map \"g\" 'ebib-goto-first-string)
    (define-key map \"G\" 'ebib-goto-last-string)
    (define-key map \"h\" 'ebib-strings-help)
    (define-key map \"j\" 'ebib-next-string)
    (define-key map \"k\" 'ebib-prev-string)
    (define-key map \"l\" 'ebib-edit-multiline-string)
    (define-key map [(control n)] 'ebib-next-string)
    (define-key map [(meta n)] 'ebib-strings-page-down)
    (define-key map [(control p)] 'ebib-prev-string)
    (define-key map [(meta p)] 'ebib-strings-page-up)
    (define-key map \"q\" 'ebib-quit-strings-buffer)
    (define-key map \"x\" 'ebib-export-string)
    (define-key map \"X\" 'ebib-export-all-strings)
    (define-key map \"\\C-xb\" 'ebib-quit-strings-buffer)
    (define-key map \"\\C-xk\" 'ebib-quit-strings-buffer)
    map)
  \"Keymap for the ebib strings buffer.\")

(define-derived-mode ebib-strings-mode
  fundamental-mode \"Ebib-strings\"
  \"Major mode for the Ebib strings buffer.\"
  (setq buffer-read-only t)
  (setq cursor-type nil)
  (setq truncate-lines t))

(defun ebib-quit-strings-buffer ()
  \"Quits editing the @STRING definitions.\"
  (interactive)
  (if (and (eq ebib-layout 'index-only)
           ebib-popup-entry-window)
      (delete-window)
    (with-ebib-window-nondedicated
      (switch-to-buffer nil t)))
  (ebib-pop-to-buffer 'index))

(defun ebib-prev-string ()
  \"Moves to the previous string.\"
  (interactive)
  (if (equal ebib-current-string (car ebib-cur-strings-list))  ; if we're on the first string
      (beep)
    ;; go to the beginnig of the highlight and move upward one line.
    (goto-char (ebib-highlight-start ebib-strings-highlight))
    (forward-line -1)
    (setq ebib-current-string (ebib-prev-elem ebib-current-string ebib-cur-strings-list))
    (ebib-set-strings-highlight)))

(defun ebib-next-string ()
  \"Moves to the next string.\"
  (interactive)
  (if (equal ebib-current-string (ebib-last1 ebib-cur-strings-list))
      (when (ebib-called-interactively-p) (beep))
    (goto-char (ebib-highlight-start ebib-strings-highlight))
    (forward-line 1)
    (setq ebib-current-string (ebib-next-elem ebib-current-string ebib-cur-strings-list))
    (ebib-set-strings-highlight)))

(defun ebib-goto-first-string ()
  \"Moves to the first string.\"
  (interactive)
  (setq ebib-current-string (car ebib-cur-strings-list))
  (goto-char (point-min))
  (ebib-set-strings-highlight))

(defun ebib-goto-last-string ()
  \"Moves to the last string.\"
  (interactive)
  (setq ebib-current-string (ebib-last1 ebib-cur-strings-list))
  (goto-char (point-max))
  (forward-line -1)
  (ebib-set-strings-highlight))

(defun ebib-strings-page-up ()
  \"Moves 10 strings up.\"
  (interactive)
  (let ((number-of-strings (length ebib-cur-strings-list))
        (remaining-number-of-strings (length (member ebib-current-string ebib-cur-strings-list))))
    (if (<= (- number-of-strings remaining-number-of-strings) 10)
        (ebib-goto-first-string)
      (setq ebib-current-string (nth
                                 (- number-of-strings remaining-number-of-strings 10)
                                 ebib-cur-strings-list))
      (goto-char (ebib-highlight-start ebib-strings-highlight))
      (forward-line -10)
      (ebib-set-strings-highlight))))

(defun ebib-strings-page-down ()
  \"Moves 10 strings down.\"
  (interactive)
  (let ((number-of-strings (length ebib-cur-strings-list))
        (remaining-number-of-strings (length (member ebib-current-string ebib-cur-strings-list))))
    (if (<= remaining-number-of-strings 10)
        (ebib-goto-last-string)
      (setq ebib-current-string (nth
                                 (- number-of-strings remaining-number-of-strings -10)
                                 ebib-cur-strings-list))
      (goto-char (ebib-highlight-start ebib-strings-highlight))
      (forward-line 10)
      (ebib-set-strings-highlight))))

(defun ebib-fill-strings-buffer ()
  \"Fills the strings buffer with the @STRING definitions.\"
  (with-current-buffer (cdr (assoc 'strings ebib-buffer-alist))
    (with-ebib-buffer-writable
      (erase-buffer)
      (cl-dolist (elem ebib-cur-strings-list)
        (let ((str (ebib-db-get-string elem ebib-cur-db 'noerror 'unbraced)))
          (insert (format \"%-18s %s\\n\" elem
                          (if (ebib-multiline-p str)
                              (concat \"+\" (ebib-first-line str))
                            (concat \" \" str)))))))
    (goto-char (point-min))
    (setq ebib-current-string (car ebib-cur-strings-list))
    (ebib-set-strings-highlight)
    (set-buffer-modified-p nil)))

(defun ebib-edit-string ()
  \"Edits the value of an @STRING definition
When the user enters an empty string, the value is not changed.\"
  (interactive)
  (let ((init-contents (ebib-db-get-string ebib-current-string ebib-cur-db 'noerror 'unbraced)))
    (ebib-ifstring (new-contents (read-string (format \"%s: \" ebib-current-string)
                                              (if init-contents
                                                  (cons init-contents 0)
                                                nil)))
        (progn
          (ebib-db-set-string ebib-current-string new-contents ebib-cur-db 'overwrite)
          (ebib-redisplay-current-string)
          (ebib-next-string)
          (ebib-set-modified t))
      (error \"@STRING definition cannot be empty\"))))

(defun ebib-copy-string-contents ()
  \"Copies the contents of the current string to the kill ring.\"
  (interactive)
  (let ((contents (ebib-db-get-string ebib-current-string ebib-cur-db nil 'unbraced)))
    (kill-new contents)
    (message \"String value copied.\")))

(defun ebib-delete-string ()
  \"Deletes the current @STRING definition from the database.\"
  (interactive)
  (when (y-or-n-p (format \"Delete @STRING definition %s? \" ebib-current-string))
    (ebib-db-remove-string ebib-current-string ebib-cur-db)
    (with-ebib-buffer-writable
      (let ((beg (progn
                   (goto-char (ebib-highlight-start ebib-strings-highlight))
                   (point))))
        (forward-line 1)
        (delete-region beg (point))))
    (let ((new-cur-string (ebib-next-elem ebib-current-string ebib-cur-strings-list)))
      (setq ebib-cur-strings-list (delete ebib-current-string ebib-cur-strings-list))
      (when (null new-cur-string)       ; deleted the last string
        (setq new-cur-string (ebib-last1 ebib-cur-strings-list))
        (forward-line -1))
      (setq ebib-current-string new-cur-string))
    (ebib-set-strings-highlight)
    (ebib-set-modified t)
    (message \"@STRING definition deleted.\")))

(defun ebib-add-string ()
  \"Creates a new @STRING definition.\"
  (interactive)
  (ebib-ifstring (new-abbr (read-string \"New @STRING abbreviation: \" nil 'ebib-key-history))
      (progn
        (if (member new-abbr ebib-cur-strings-list)
            (error (format \"%s already exists\" new-abbr)))
        (ebib-ifstring (new-string (read-string (format \"Value for %s: \" new-abbr)))
            (progn
              (ebib-db-set-string new-abbr new-string ebib-cur-db)
              (ebib-sort-in-buffer (length ebib-cur-strings-list) new-abbr)
              (with-ebib-buffer-writable
                (insert (format \"%-19s %s\\n\" new-abbr new-string)))
              (forward-line -1)
              (ebib-set-strings-highlight)
              (setq ebib-current-string new-abbr)
              (setq ebib-cur-strings-list (ebib-db-list-strings ebib-cur-db))
              (ebib-set-modified t))))))

(defun ebib-export-string (prefix)
  \"Exports the current @STRING.
The prefix argument indicates which database to copy the string
to. If no prefix argument is present, a filename is asked to
which the string is appended.\"
  (interactive \"P\")
  (let ((num (ebib-prefix prefix)))
    (if num
        (ebib-export-to-db num (format \"@STRING definition `%s' copied to database %%d\" ebib-current-string)
                           #'(lambda (db)
                               (ebib-db-set-string ebib-current-string (ebib-db-get-string ebib-current-string ebib-cur-db) db)))
      (ebib-export-to-file (format \"Export @STRING definition `%s' to file: \" ebib-current-string)
                           (format \"@STRING definition `%s' exported to %%s\" ebib-current-string)
                           #'(lambda ()
                               (insert (format \"\\n@string{%s = %s}\\n\"
                                               ebib-current-string
                                               (ebib-db-get-string ebib-current-string ebib-cur-db))))))))

(defun ebib-export-all-strings (prefix)
  \"Exports all @STRING definitions.
If a prefix argument is given, it is taken as the database to
copy the definitions to. Without prefix argument, asks for a file
to append them to.\"
  (interactive \"P\")
  (when ebib-current-string ; there is always a current string, unless there are no strings
    (let ((num (ebib-prefix prefix)))
      (if num
          (ebib-export-to-db
           num \"All @STRING definitions copied to database %d\"
           #'(lambda (db)
               (mapc #'(lambda (abbr)
                         (ebib-db-set-string abbr (ebib-db-get-string abbr ebib-cur-db) db 'noerror))
                     ebib-cur-strings-list)))
        (ebib-export-to-file \"Export all @STRING definitions to file: \"
                             \"All @STRING definitions exported to %s\"
                             #'(lambda ()
                                 (insert (format \"\\n\")) ; to keep things tidy.
                                 (ebib-format-strings ebib-cur-db)))))))

(defun ebib-strings-help ()
  \"Shows the info node on Ebib's strings buffer.\"
  (interactive)
  (setq ebib-info-flag t)
  (ebib-lower)
  (info \"(ebib) The Strings Buffer\"))

;;;;;;;;;;;;;;;;;;;;
;; multiline edit ;;
;;;;;;;;;;;;;;;;;;;;

(define-minor-mode ebib-multiline-mode
  \"Minor mode for Ebib's multiline edit buffer.\"
  :init-value nil :lighter nil :global nil
  :keymap '((\"\\C-c|q\" . ebib-quit-multiline-edit-and-save)
            (\"\\C-c|c\" . ebib-cancel-multiline-edit)
            (\"\\C-c|s\" . ebib-save-from-multiline-edit)
            (\"\\C-c|h\" . ebib-multiline-help)))

(easy-menu-define ebib-multiline-menu ebib-multiline-mode-map \"Ebib multiline menu\"
  '(\"Ebib\"
    [\"Store Text and Exit\" ebib-quit-multiline-edit-and-save t]
    [\"Cancel Edit\" ebib-cancel-multiline-edit t]
    [\"Save Text\" ebib-save-from-multiline-edit t]
    [\"Help\" ebib-multiline-help t]))

(easy-menu-add ebib-multiline-menu ebib-multiline-mode-map)

(defun ebib-multiline-edit (type &optional starttext)
  \"Switches to Ebib's multiline edit buffer.
STARTTEXT is a string that contains the initial text of the buffer.\"
  ;; (setq ebib-pre-multiline-buffer (current-buffer))
  (ebib-pop-to-buffer 'multiline)
  (set-buffer-modified-p nil)
  (erase-buffer)
  (setq ebib-editing type)
  (when starttext
    (insert starttext)
    (goto-char (point-min))
    (set-buffer-modified-p nil)))

(defun ebib-quit-multiline-edit-and-save ()
  \"Quits the multiline edit buffer, saving the text.\"
  (interactive)
  (ebib-store-multiline-text)
  (ebib-leave-multiline-edit-buffer) 
  (message \"Text stored.\"))

(defun ebib-cancel-multiline-edit ()
  \"Quits the multiline edit buffer and discards the changes.\"
  (interactive)
  (catch 'no-cancel
    (when (buffer-modified-p)
      (unless (y-or-n-p \"Text has been modified. Abandon changes? \")
        (throw 'no-cancel nil)))
    (ebib-leave-multiline-edit-buffer)))

(defun ebib-leave-multiline-edit-buffer ()
  \"Leaves the multiline edit buffer.
Restores the previous buffer in the window that the multiline
edit buffer was shown in.\"
  (if (and (eq ebib-layout 'index-only)
           ebib-popup-entry-window)
      (delete-window)
    (switch-to-buffer nil t))
  (cond
   ((eq ebib-editing 'preamble)
    (ebib-pop-to-buffer 'index))
   ((eq ebib-editing 'fields)
    (ebib-pop-to-buffer 'entry)
    (ebib-redisplay-current-field))))

(defun ebib-save-from-multiline-edit ()
  \"Saves the database from within the multiline edit buffer.
The text being edited is stored before saving the database.\"
  (interactive)
  (ebib-store-multiline-text)
  (ebib-save-database ebib-cur-db)
  (set-buffer-modified-p nil))

(defun ebib-store-multiline-text ()
  \"Stores the text being edited in the multiline edit buffer.\"
  (let ((text (buffer-substring-no-properties (point-min) (point-max))))
    (cond
     ((eq ebib-editing 'preamble)
      (if (equal text \"\")
          (ebib-db-remove-preamble ebib-cur-db)
        (ebib-db-set-preamble text ebib-cur-db 'overwrite)))
     ((eq ebib-editing 'fields)
      (if (equal text \"\")
          (ebib-db-remove-field-value ebib-current-field (ebib-cur-entry-key) ebib-cur-db) 
        (ebib-db-set-field-value ebib-current-field text (ebib-cur-entry-key) ebib-cur-db 'overwrite ebib-multiline-unbraced)))))
  (ebib-set-modified t))

(defun ebib-multiline-help ()
  \"Show the info node on Ebib's multiline edit buffer.\"
  (interactive)
  (setq ebib-info-flag t)
  (ebib-lower)
  (info \"(ebib) The Multiline Edit Buffer\"))

;;;;;;;;;;;;;;;;;;;
;; ebib-log-mode ;;
;;;;;;;;;;;;;;;;;;;

(defvar ebib-log-mode-map
  (let ((map (make-keymap)))
    (suppress-keymap map)
    (define-key map \" \" 'scroll-up)
    (define-key map \"b\" 'scroll-down)
    (define-key map \"q\" 'ebib-quit-log-buffer)
    map)
  \"Keymap for the ebib log buffer.\")

(define-derived-mode ebib-log-mode
  fundamental-mode \"Ebib-log\"
  \"Major mode for the Ebib log buffer.\"
  (local-set-key \"\\C-xb\" 'ebib-quit-log-buffer)
  (local-set-key \"\\C-xk\" 'ebib-quit-log-buffer))

(defun ebib-quit-log-buffer ()
  \"Exits the log buffer.\"
  (interactive)
  (if (and (eq ebib-layout 'index-only)
           ebib-popup-entry-window)
      (delete-window)
    (with-ebib-window-nondedicated
      (switch-to-buffer nil t)))
  (ebib-pop-to-buffer 'index))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; functions for non-Ebib buffers ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun ebib-import ()
  \"Searches for BibTeX entries in the current buffer.
The entries are added to the current database (i.e. the database
that was active when Ebib was lowered. Works on the whole buffer,
or on the region if it is active.\"
  (interactive)
  (if (not ebib-cur-db)
      (error \"No database loaded\")
    (with-syntax-table ebib-syntax-table
      (save-excursion
        (save-restriction
          (if (use-region-p)
              (narrow-to-region (region-beginning)
                                (region-end)))
          (let ((buffer (current-buffer)))
            (with-temp-buffer
              (insert-buffer-substring buffer)
              (let ((result (ebib-find-bibtex-entries ebib-cur-db t)))
                (unless (ebib-cur-entry-key)
                  (ebib-db-set-current-entry-key t ebib-cur-db))
                (ebib-redisplay)
                (ebib-set-modified t)
                (message (format \"%d entries, %d @STRINGs and %s @PREAMBLE found in buffer.\"
                                 (car result)
                                 (cadr result)
                                 (if (caddr result) \"a\" \"no\")))))))))))

(defun ebib-get-db-from-filename (filename)
  \"Returns the database struct associated with FILENAME.\"
  (when filename
    (if (file-name-absolute-p filename)
        (setq filename (expand-file-name filename))) ; expand ~, . and ..
    (catch 'found
      (mapc #'(lambda (db)
                ;; If filename is absolute, we want to compare to the
                ;; absolute filename of the database, otherwise we should use
                ;; only the non-directory component.
                (if (string= filename (ebib-db-get-filename db (not (file-name-absolute-p filename))))
                    (throw 'found db)))
            ebib-databases)
      nil)))

(defun ebib-get-local-databases ()
  \"Return a list of .bib files associated with the file in the current LaTeX buffer.
Each element in the list is a string holding the name of the .bib
file. This function simply searches the current LaTeX file or its
master file for a `\\\\bibliography' or `\\\\addbibresource' command
and returns the file(s) given in its argument. If no such command
is found, return the symbol `none'.\"
  ;; This only makes sense in LaTeX buffers
  (if (not (eq major-mode 'latex-mode))
      'none
    (let ((texfile-buffer (current-buffer))
          texfile)
      ;; if AucTeX's TeX-master is used and set to a string, we must
      ;; search that file for a \\bibliography command, as it's more
      ;; likely to be in there than in the file we're in.
      (and (boundp 'TeX-master)
           (stringp TeX-master)
           (setq texfile (ebib-ensure-extension TeX-master \".tex\")))
      (with-temp-buffer
        (if (and texfile (file-readable-p texfile))
            (insert-file-contents texfile)
          (insert-buffer-substring texfile-buffer))
        (save-excursion
          (save-match-data
            (let (files)
              (goto-char (point-min))
              ;; First search for a \\bibliography command:
              (if (re-search-forward \"\\\\\\\\\\\\(?:no\\\\)*bibliography{\\\\(.*?\\\\)}\" nil t)
                  (setq files (mapcar #'(lambda (file)
                                          (ebib-ensure-extension file \".bib\"))
                                      (split-string (buffer-substring-no-properties (match-beginning 1) (match-end 1)) \",[ ]*\")))
                ;; If we didn't find a \\bibliography command, search for \\addbibresource commands:
                (while (re-search-forward \"\\\\\\\\addbibresource\\\\(\\\\[.*?\\\\]\\\\)?{\\\\(.*?\\\\)}\" nil t)
                  (let ((option (match-string 1))
                        (file (match-string-no-properties 2)))
                    ;; If this isn't a remote resource, add it to the list.
                    (unless (and option (string-match \"location=remote\" option))
                      (push file files)))))
              (or files 'none))))))))

(defun ebib-create-collection-from-db ()
  \"Create a collection of BibTeX keys.
The source of the collection is either curent database or, if the
current buffer is a LaTeX file containing a \\\\bibliography
command, the BibTeX files in that command (if they are open in
Ebib).\"
  (or ebib-local-bibtex-filenames
      (setq ebib-local-bibtex-filenames (ebib-get-local-databases)))
  (let (collection)
    (if (eq ebib-local-bibtex-filenames 'none)
        (if (null ebib-cur-keys-list)
            (error \"No entries found in current database\")
          (setq collection ebib-cur-keys-list))
      (mapc #'(lambda (file)
                (let ((db (ebib-get-db-from-filename file)))
                  (cond
                   ((null db)
                    (message \"Database %s not loaded\" file))
                   ((null (ebib-db-get-current-entry-key db))
                    (message \"No entries in database %s\" file))
                   (t (setq collection (append (ebib-db-list-keys db 'nosort)
                                               collection))))))
            ebib-local-bibtex-filenames))
    collection))

(defun ebib-insert-bibtex-key ()
  \"Inserts a BibTeX key at POINT.
The user is prompted for a BibTeX key and has to choose one from
the database(s) associated with the current LaTeX file, or from
the current database if there is no \\\\bibliography command. Tab
completion works.\"
  (interactive)
  (ebib-execute-when
    ((database)
     (let ((collection (ebib-create-collection-from-db)))
       (when collection
         (let* ((key (completing-read \"Key to insert: \" collection nil t nil 'ebib-key-history))
                (format-list (or (cadr (assoc (buffer-local-value 'major-mode (current-buffer)) ebib-citation-commands))
                                 (cadr (assoc 'any ebib-citation-commands))))
                (citation-command
                 (ebib-ifstring (format-string (cadr (assoc
                                               (completing-read \"Command to use: \" format-list nil nil nil 'ebib-cite-command-history)
                                               format-list)))
                     (cl-multiple-value-bind (before repeater separator after) (ebib-split-citation-string format-string)
                       (concat (ebib-create-citation-command before)
                               (ebib-create-citation-command repeater key)
                               (ebib-create-citation-command after)))
                   key))) ; if the user didn't provide a command, we insert just the entry key
           (when citation-command
             (insert (format \"%s\" citation-command)))))))
    ((default)
     (error \"No database loaded\"))))

(defun ebib-create-bib-from-bbl ()
  \"Create a .bib file for the current LaTeX document.
The LaTeX document must have a .bbl file associated with it. All
bibitems are extracted from this file and a new .bib file is
created containing only these entries.\"
  (interactive)
  (ebib-execute-when
    ((database)
     (or ebib-local-bibtex-filenames
         (setq ebib-local-bibtex-filenames (ebib-get-local-databases)))
     (let* ((filename-sans-extension (file-name-sans-extension (buffer-file-name)))
            (bbl-file (concat filename-sans-extension \".bbl\"))
            (bib-file (concat filename-sans-extension (car ebib-bibtex-extensions))))
       (unless (file-exists-p bbl-file)
         (error \"No .bbl file exists. Run BibTeX first\"))
       (when (or (not (file-exists-p bib-file))
                 (y-or-n-p (format \"%s already exists. Overwrite? \" (file-name-nondirectory bib-file))))
         (when (file-exists-p bib-file)
           (delete-file bib-file)) ; accepts additional arg `delete-by-moving-to-trash' in Emacs 24
         (let ((databases
                (delq nil (mapcar #'(lambda (file)
                                      (ebib-get-db-from-filename file))
                                  ebib-local-bibtex-filenames))))
           (with-temp-buffer
             (insert-file-contents bbl-file)
             (ebib-export-entries (ebib-read-entries-from-bbl) databases bib-file))))))
    ((default)
     (beep))))

(defun ebib-read-entries-from-bbl ()
  (interactive)
  (goto-char (point-min))
  (let (entries)
    (while (re-search-forward \"\\\\\\\\bibitem\\\\[\\\\(?:.\\\\|\\n[^\\n]\\\\)*\\\\]{\\\\(.*?\\\\)}\" nil t)
      (add-to-list 'entries (match-string 1) t))
    entries))

(provide 'ebib)

;;; ebib ends here

;;; ebib.el ends here
"]) (easy-kill . [(20131212 156) ((emacs (24))) "kill things easily" single ";;; Commentary:

;; `easy-kill' aims to be a drop-in replacement for `kill-ring-save'.
;;
;; To use: (global-set-key [remap kill-ring-save] 'easy-kill)

;; `easy-mark' is similar to `easy-kill' but marks the region
;; immediately. It can be a handy replacement for `mark-sexp' allowing
;; `+'/`-' to do list-wise expanding/shrinking.
;;
;; To use: (global-set-key [remap mark-sexp] 'easy-mark)

;; Please send bug reports or feature requests to:
;;      https://github.com/leoliu/easy-kill/issues

"]) (easy-after-load . [(20121224 1849) nil "eval-after-load for all files in a directory" single nil]) (e2wm-svg-clock . [(20130303 1326) ((e2wm (20130225 1602)) (svg-clock (0 4))) "e2wm plugin for svg-clock" single ";;; Commentary:
;;
;; e2wm plugin for svg-clock.

"]) (e2wm-bookmark . [(20120811 2350) ((e2wm (1 2))) "Bookmark plugin for e2wm.el" single ";;; Commentary:
;;
;; e2wm is window manager. e2wm makes windowlayout easy.
;; e2wm-bookmark is a plugin for e2wm. this provides small window
;; to manage bookmarks. this cooperate with files plugin and 
;; buffer history plugin.
;;


"]) (e2wm-R . [(20130505 2208) ((e2wm (20130225 1602)) (inlineR (20120520 2332)) (ess (20130225 1754))) "some e2wm plugin and perspective for GNU R" single ";;; Commentary:

;; e2wm is a window manager. e2wm makes windowlayout easy.
;; e2wm-R is a e2wm plugin for GNU R. It provides some window
;; to manage graphics or R objects.

"]) (e2wm . [(20130909 2314) ((window-layout (1 2))) "simple window manager for emacs" tar ";;; Commentary:

;; This is an demonstration implementation of introducing window management to Emacs.
;; * Management of list of editable buffers
;; * Assignment of windows for pop-up buffers
;; * Switching window layout like the perspective in eclipse
;; * Plug-in extension 

;; The current implementation has following perspectives:
;; * code      : main coding layout
;; * two       : side by side layout
;; * doc       : reading documentation layout
;; * dashboard : showing plug-ins like dashboard in Mac OSX
;; * array     : selecting buffers like expose in Mac OSX

;;; Installation:

;; (1) Put e2wm.el and window-layout.el in load-path.
;; (2) Put the following code in your .emacs file,
;;    (require 'e2wm)
;; (3) M-x e2wm:start-management to start e2wm.
;; To stop e2wm, M-x e2wm:stop-management or [C-c ; Q].


;;; Customization

;; * Layout recipe (`e2wm:c-PST-NAME-recipe'):

;; Layout recipe RECIPE (e.g., `e2wm:c-code-recipe') is a recursive
;; tree-like structure defined as follows:

;; (SPLIT-TYPE [SPLIT-OPTION]
;;             WINDOW-or-RECIPE    ; left or upper side
;;             WINDOW-or-RECIPE)   ; right or lower side

;; WINDOW is a name (symbol) of the window. This is used in the
;; `:name' property of the window information list (winfo, see the
;; next section).

;; Split types (SPLIT-TYPE):

;;   - : split vertically
;;   | : split horizontally

;; Split option list SPLIT-OPTION is a plist with the following
;; properties. (the prefix 'left' can be replaced by 'right', 'upper'
;; and 'lower'.):

;;   :left-size        : (column or row number) window size
;;   :left-max-size    : (column or row number) if window size is larger
;;                     : than this value, the window is shrunken.
;;   :left-size-ratio  : (0.0 - 1.0) window size ratio. the size of
;;                     : the other side is the rest.
;;
;; Note:
;; The split option can be omitted.
;; The size parameters, :size, :max-size and :size-ratio, are mutually
;; exclusive.  The size of a window is related with one of the other
;; side window. So, if both side windows set size parameters, the
;; window size may not be adjusted as you write.

;; * Window information  (`e2wm:c-PST-NAME-winfo'):

;; Window information (e.g., `e2wm:c-code-winfo') is a list of window
;; options (plist).  Besides the options defined in window-layout.el,
;; `:name' (mandatory), `:buffer', `:default-hide' and `:fix-size',
;; e2wm has additional options.

;;   :name      [*] : the window name.
;;   :buffer        : A buffer name or a buffer object to show the window.
;;                  : If nil or omitted, the current buffer remains.
;;   :default-hide  : If t, the window is hided initially.
;;                  : (type: t or nil, default: nil)
;;   :fix-size      : If t, when the windows are laid out again, the
;;                  : window size is remained.
;;                  : (type: t or nil, default: nil)
;;   :plugin        : Plug-in name.
;;                  : (type: symbol)
;;   :plugin-args   : Arguments for the plug-in.  See each plug-in
;;                  : documentation for use of this option.
;;                  : (type: any lisp objecct)

;;; Development memo:

;; See readme for further documentation.

;; ** Side effects
;; 
;; * advice 
;;  - buffer\347\263\273
;;     switch-to-buffer, pop-to-buffer
;;  - window-configuration\347\263\273
;;     current-window-configuration
;;     window-configuration-frame
;;     compare-window-configurations
;;     set-window-configuration
;;     window-configuration-p
;; * hook
;;     kill-buffer-hook
;;     window-configuration-change-hook
;;     completion-setup-hook
;;     after-save-hook
;; * override variable
;;     special-display-function

;; ** Local words
;; pst     : Perspective
;; e2wm:c- : Configuration variables
;; e2wm:$  : Structure functions

;; ** Source code layout

;; Configurations  / e2wm:c-
;; Fundamental functions
;; Buffer history management / e2wm:history-
;; Framework for perspectives / e2wm:pst-
;; Framework for perspective set / e2wm:pstset-
;; Advices and hooks (switch-to-buffer, pop-to-buffer and so on)
;; Framework for plug-ins / e2wm:plugin-
;; Menu definition / e2wm:menu-
;; Plug-in definitions / e2wm:def-plugin-
;; Perspective definitions / e2wm:dp-
;;   code  / e2wm:dp-code-
;;   doc   / e2wm:dp-doc-
;;   two   / e2wm:dp-two-
;;   dashboard / e2wm:dp-dashboard-
;;   array / e2wm:dp-array-
;; Start-up and exit e2wm

"]) (dynamic-fonts . [(20131106 706) ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Set faces based on available fonts" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'dynamic-fonts)
;;
;;     (dynamic-fonts-setup)     ; finds \"best\" fonts and sets faces:
;;                               ; default, fixed-pitch, variable-pitch
;;
;; Explanation
;;
;; Dynamic-fonts.el makes font configuration more portable between
;; machines.  When Emacs is starting up, dynamic-fonts chooses fonts
;; for your basic faces based on which fonts are actually available
;; on your system.
;;
;; You may set a list of fonts in order of preference using customize.
;;
;; See Also
;;
;;     M-x customize-group RET dynamic-fonts RET
;;     M-x customize-group RET font-utils RET
;;
;; Notes
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.3 and lower : no
;;
;;     Requires font-utils.el
;;
;; Bugs
;;
;;     Checking for font availability is slow on most systems.  This
;;     library can add up to several seconds to startup time.
;;     Workaround: where supported, font information will be cached
;;     to disk.  See customization options for font-utils.
;;
;; TODO
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (dylan-mode . [(20140109 623) nil "Major mode for editing Dylan programs." tar ";;; Commentary:

;; Dylan mode is a major mode for editing Dylan programs. It provides
;; indenting and font-lock support.
;;
;; This code requires Emacs 24.


"]) (duplicate-thing . [(20120515 948) nil "Duplicate current line & selection" single ";;; Commentary:
;; 1. Duplicate current line.
;; 2. Duplicate a selection when selection is active.
;; 3. Only C-u, replicate, comment out the range.
;; 4. Numerical prefix is specified as 'C-u 5': do multiple times repeatedly.
;; 
;; (require 'duplicate-thing)
;; (global-set-key (kbd \"M-c\") 'duplicate-thing)
;; 

"]) (dummy-h-mode . [(20130824 1159) nil "switch major mode to c-/c++-/objc-mode on .h file" single ";;; Commentary:

;; The `dummy-h-mode' is a major mode for header files (.h)
;; of C, C++ or Objective-C.  It detects the suitable major mode
;; which is one of `c-mode', `c++-mode' and `objc-mode',
;; then switches the buffer major mode to the detected major mode.
;; The detecting process is as follows:
;;
;; 1. Check the existance of the corresponding source file (.c, .cc or ...)
;; 2. Search keywords in the file.
;; 3. Check the filename extensions of all files in the directory.

"]) (dtrt-indent . [(20130301 855) nil "Adapt to foreign indentation offsets" tar ";;; Commentary:

;; A minor mode that guesses the indentation offset originally used
;; for creating source code files and transparently adjusts the
;; corresponding settings in Emacs, making it more convenient to edit
;; foreign files.
;;
;; This hooks into many major modes - c-mode, java-mode, shell-mode
;; and ruby-mode, to name but a few - and makes an educated guess on
;; which offset is appropriate by analyzing indentation levels in the
;; file.
;;
;; Heuristics are used to estimate the proper indentation offset and
;; therefore this system is not infallible, however adjustments will
;; only be made if the guess is considered reliable.  This way it
;; should leave you off no worse than before.
;;
;; To install,
;;   (require 'dtrt-indent)
;;   (dtrt-indent-mode 1)
;;
;; The default settings have been carefully chosen and tested to work
;; reliably on a wide range of source files.  However, if it doesn't
;; work for you they can be fine tuned using M-x customize-group
;; dtrt-indent
;;
;; There is more extensive information in the dtrt-indent info page
;; which you currently need to install manually.
;;
;; Improvements over guess-offset.el:
;;
;; - Whereas guess-offset only worked for C, C++ and Java files,
;;   dtrt-indent supports plenty of major modes (Shell script, Perl
;;   and Ruby are worth mentioning) and is easier to adapt to other
;;   languages.
;;
;; - dtrt-indent is now a minor mode and can be switched on and off,
;;   both globally and locally (the latter using a File Variable).
;;
;; - dtrt-indent is more precise in analyzing the syntax of source
;;   files, making its guess more accurate (it now ignores lines in
;;   comments, multi-line expressions, here documents and the like.)
;;
;; - dtrt-indent stops analyzing a source file after a customizable
;;   amount of lines, making it operate faster on large source files.
;;
;; - dtrt-indent leaves alone files that explicitly set the
;;   indentation offset with a File Variable.
;;
;; - dtrt-indent comes with diagnostic functions to help you
;;   understand what it does behind the scenes, adapt it to new
;;   languages or fine-tune its parameters.
;;
;; - The name of the script has been changed to better reflect its
;;   purpose.
;;
;; - The customization group is now a child of the convenience and
;;   files groups instead of the tools group.
;;
;; - The customization variables are named more sensibly and are
;;   better documented.
;;
;; - Documentation is improved and no longer confusingly refers to
;;   \"tab width\" instead of \"indentation offset\".
;;
;; Files not touched by dtrt-indent:
;;
;; - Files that specify the corresponding variable
;;   (e.g. c-basic-offset) as a File Variable.
;;
;; - Files that specify dtrt-indent-mode: 0 as a File Variable.
;;
;; - Files for which dtrt-indent-accept-file-function returns nil.
;;
;; - Files with a major mode that dtrt-indent doesn't hook into.
;;
;; - Files for which the indentation offset cannot be guessed
;;   reliably.
;;
;; Limitations:
;;
;; - dtrt-indent can't deal well with files that use variable
;;   indentation offsets, e.g. files that use varying indentation
;;   based on the outer construct.
;;
;; - dtrt-indent currently only supports a limited number of languages
;;   (major-modes).
;;
;; - dtrt-indent only guesses the indendation offset, not the
;;   indentation style.  For instance, it does not detect whether a
;;   C-like file uses hanging braces or not.
;;
;; - dtrt-indent can't deal well with files that mix hard tabs with
;; - spaces for indentation.
;;
;; TODO:
;;
;; - verbose and diagnostics messages
;; - make sure variable documentation match their function
;; - make sure defaults are sensible
;; - complete info page
;; - bulk (real world) tests
;; - functional tests
;; - unit tests

"]) (dsvn . [(20130120 1257) nil "Subversion interface" single ";;; Commentary:
;; 
;; This is an interface for managing Subversion working copies.  It
;; can show you an up-to-date view of the current status, and commit
;; changes. If also helps you do other tasks such as updating,
;; switching, diffing and more.
;;
;; To get you started, add this line to your startup file:
;;
;;  (autoload 'svn-status \"dsvn\" \"Run `svn status'.\" t)
;;  (autoload 'svn-update \"dsvn\" \"Run `svn update'.\" t)
;;
;; This file integrates well with vc-svn, so you might want to do this
;; as well:
;;
;;   (require 'vc-svn)
;;
;; To get the status view, type
;;
;;   M-x svn-status
;;
;; and select a directory where you have a checked-out Subversion
;; working copy.  A buffer will be created that shows what files you
;; have modified, and any unknown files.  The file list corresponds
;; closely to that produced by \"svn status\", only slightly
;; reformatted.
;;
;; Navigate through the file list using \"n\" and \"p\", for next and
;; previous file, respectively.
;;
;; You can get a summary of available commands by typing \"?\".
;;
;; Some commands operate on files, and can either operate on the file
;; under point, or on a group of files that have been marked.  The
;; commands used for marking a file are the following:
;;
;;   m      mark and go down  
;;   DEL    unmark and go up  
;;   u      unmark and go down
;;   SPC    toggle mark       
;;   M-DEL  unmark all       
;;
;; The commands that operate on files are:
;;
;;   f      Visit the file under point (does not use marks)
;;   o      Visit the file under point in another window (does not use marks)
;;   =      Show diff of uncommitted changes.  This does not use marks
;;            unless you give a prefix argument (C-u) 
;;   c      Commit files
;;   a      Add files
;;   r      Remove files
;;   R      Resolve conflicts
;;   M      Rename/move files
;;   U      Revert files
;;   P      View or edit properties of the file or directory under point
;;            (does not use marks)
;;   l      Show log of file or directory under point (does not use marks)
;;
;; These commands update what is shown in the status buffer:
;;
;;   g      Rerun \"svn status\" to update the list.  Use a prefix
;;            argument (C-u) to clear the list first to make sure that
;;            it is correct.
;;   s      Update status of selected files
;;   S      Show status of specific file or directory
;;   x      Expunge unchanged files from the list
;;
;; To update the working copy:
;;
;;   M-u    Run \"svn update\".  If a prefix argument is given (C-u),
;;            you will be prompted for a revision to update to.
;;   M-s    Switch working copy to another branch.
;;   M-m    Merge in changes using \"svn merge\".
;;
;; To view the Subversion log, type \"M-x svn-log\".
;;
;; Bugs and missing features:
;; 
;; - Annotate (blame).
;; - Log, with a useful log mode where the user can easily view any revision
;;   as a diff or visit a revision of a file in a buffer.
;; - Integration with ediff or similar to resolve conflicts.

(require 'vc)
(require 'log-edit)
(require 'uniquify)

(defconst svn-status-msg-col   1)
(defconst svn-status-flags-col 11)
(defconst svn-status-mark-col  18)
(defconst svn-status-file-col  20)

(defgroup dsvn nil
  \"Settings for dsvn.\"
  :group 'tools)

(defcustom svn-program \"svn\"
  \"*The svn program to run\"
  :type 'string
  :group 'dsvn)  

(defcustom svn-restore-windows nil
  \"*Non-nil means that the window configuration is restored after commit\"
  :type 'boolean
  :group 'dsvn)

(defcustom svn-diff-args '(\"-x\" \"-p\")
  \"*Additional arguments used for all invocations of `svn diff'.\"
  :type '(repeat string)
  :group 'dsvn)

;; start-file-process and process-file are needed for tramp but only appeared
;; in Emacs 23 and 22 respectively.
(setq svn-start-file-process
  (if (fboundp 'start-file-process) 'start-file-process 'start-process))
(setq svn-process-file
  (if (fboundp 'process-file) 'process-file 'call-process))

;; Run svn with default (US-English) messages, since we are going to
;; parse them.
(setq svn-process-environment '(\"LC_MESSAGES=C\"))

(defun svn-call-in-svn-environment (func)
  ;; Dynamic rebinding of process-environment
  (let ((process-environment
         (append svn-process-environment process-environment)))
    (funcall func)))

(defun svn-start-svn-process (buffer args)
  \"Start an svn process associated to BUFFER, with command-line
arguments ARGS. Return the process object for it.\"
  (svn-call-in-svn-environment
   (lambda ()
     (apply svn-start-file-process \"svn\" buffer svn-program args))))

(defun svn-call-svn (infile buffer display args)
  \"Call svn synchronously. Arguments are like process-file.\"
  (svn-call-in-svn-environment
   (lambda ()
     (apply svn-process-file svn-program infile buffer display args))))

(defun svn-call-process (buffer args)
  \"Run svn and wait for it to finish.
Argument BUFFER is the buffer in which to insert output.
Optional argument ARGS are the arguments to svn.\"
  (let ((proc (svn-start-svn-process buffer args)))
    (set-process-coding-system proc 'utf-8)
    (set-process-filter proc 'svn-output-filter)
    (while (eq (process-status proc) 'run)
      (accept-process-output proc 5)
      (sit-for 0))))

(defun svn-run-with-output (subcommand &optional args mode)
  \"Run 'svn' with output to another window.
Argument SUBCOMMAND is the command to execute.
Optional argument ARGS is a list of the arguments to the command.
Optional argument MODE is the major mode to use for the output buffer.

Return non-NIL if there was any output.\"
  (let ((buf (get-buffer-create \"*svn output*\"))
        (dir default-directory)
        (inhibit-read-only t))
    (with-current-buffer buf
      (erase-buffer)
      (if mode
          (funcall mode)
        (fundamental-mode))
      (setq default-directory dir)
      (setq buffer-read-only t)
      (let ((proc (svn-start-svn-process buf (cons subcommand args))))
        (set-process-coding-system proc 'utf-8)
        (set-process-filter proc 'svn-output-filter)
        (while (eq (process-status proc) 'run)
          (accept-process-output proc 5)
          (sit-for 0)))
      (if (= (point-min) (point-max))
          nil
        (save-selected-window
          (select-window (display-buffer buf))
          (goto-char (point-min)))
        t))))

(defun svn-run-hidden (command args)
  \"Run 'svn' without showing output.
Argument COMMAND is the command to run.
Optional argument ARGS is a list of arguments.
Returns the buffer that holds the output from 'svn'.\"
  (let ((buf (get-buffer-create \" *svn*\"))
        (dir default-directory))
    (with-current-buffer buf
      (erase-buffer)
      (setq default-directory dir))
    (svn-call-svn nil buf nil (cons (symbol-name command) args))
    buf))

(defun svn-run-for-stdout (command args)
  \"Run `svn', and return standard output as a string, discarding stderr.
Argument COMMAND is the svn subcommand to run.
Optional argument ARGS is a list of arguments.\"
  (let ((output-buffer (generate-new-buffer \"*svn-stdout*\")))
    (svn-call-svn nil (list output-buffer nil) nil
                  (cons (symbol-name command) args))
    (let ((stdout (with-current-buffer output-buffer (buffer-string))))
      (kill-buffer output-buffer)
      stdout)))

(defun svn-output-filter (proc str)
  \"Output filter for svn output.
Argument PROC is the process object.
Argument STR is the output string.\"
  (save-excursion
    (set-buffer (process-buffer proc))
    (goto-char (process-mark proc))
    ;; put point back where it was to avoid scrolling for long output
    ;; (e.g., large diffs)
    (let ((p (point))
          (inhibit-read-only t))
      (insert-before-markers str)
      (goto-char p))))

(defvar svn-todo-queue '()
  \"A queue of commands to run when the current command finishes.\")
(make-variable-buffer-local 'svn-todo-queue)

(defun svn-current-url ()
  \"Get the repository URL.\"
  (with-current-buffer (svn-run-hidden 'info ())
    (if (re-search-backward \"^URL: \\\\(.*\\\\)$\" nil t)
        (match-string 1)
      (error \"Couldn't find the current URL\"))))

(defun svn-repository-root ()
  \"Get the repository root.\"
  (with-current-buffer (svn-run-hidden 'info ())
    (if (re-search-backward \"^Repository Root: \\\\(.*\\\\)$\" nil t)
        (match-string 1)
      (error \"Couldn't find the repository root\"))))

(defconst svn-noninteractive-blacklist
  '(add revert resolved)
  \"Subversion commands that don't accept the --non-interactive option.
This is only important for svn 1.4, as 1.5 accepts this option for all
commands.\") 

(defun svn-run (command args &optional description)
  \"Run subversion command COMMAND with ARGS.

Optional third argument DESCRIPTION is a string used in the status
buffer to describe what is going on.\"
  ;; Clean up old output
  (let ((inhibit-read-only t))
    (delete-region svn-output-marker (point-max)))
  
  (let* ((command-s (symbol-name command))
         (filter-func (intern (concat \"svn-\" command-s \"-filter\")))
         (sentinel-func (intern (concat \"svn-\" command-s \"-sentinel\")))
         proc)
    ;; The command status-v is interpreted as status -v
    (when (eq command 'status-v)
      (setq command-s \"status\"
            args (cons \"-v\" args)))
    (unless (memq command svn-noninteractive-blacklist)
      (setq args (cons \"--non-interactive\" args)))
    (setq proc (svn-start-svn-process (current-buffer) (cons command-s args)))
    (if (fboundp filter-func)
        (set-process-filter proc filter-func)
      (set-process-filter proc 'svn-default-filter))
    (if (fboundp sentinel-func)
        (set-process-sentinel proc sentinel-func)
      (set-process-sentinel proc 'svn-default-sentinel))
    (setq svn-running (list description proc))
    (set-svn-process-status 'running)
    proc))

(defun svn-check-running ()
  (when svn-running
    (error \"Can't run two svn processes from the same buffer\")))

(defun svn-run-async (command args &optional file-filter)
  \"Run subversion command COMMAND with ARGS, possibly at a later time.

Optional third argument FILE-FILTER is the file filter to be in effect
during the run.\"

  (if svn-running
      (setq svn-todo-queue
	    (nconc svn-todo-queue
		   (list (list command args file-filter))))
    (progn
      (set (make-local-variable 'svn-file-filter) file-filter)
      (svn-run command args))))

;; This could be used to debug filter functions
(defvar svn-output-queue nil)
(defvar svn-in-output-filter nil)
(defun svn-filter-queue (proc str)
  (setq svn-output-queue (nconc svn-output-queue (list str)))
  (unless svn-in-output-filter
    (let ((svn-in-output-filter t))
      (while svn-output-queue
        (svn-status-filter proc (car svn-output-queue))
        (setq svn-output-queue (cdr svn-output-queue))))))

(defun svn-default-filter (proc str)
  (save-excursion
    (set-buffer (process-buffer proc))
    (let ((inhibit-read-only t))
      (goto-char (point-max))
      (insert str))))

(defun svn-default-sentinel (proc reason)
  (with-current-buffer (process-buffer proc)
    (when (and svn-running
               (eq proc (cadr svn-running)))
      (setq svn-running nil)
      (if (/= (process-exit-status proc) 0)
          (set-svn-process-status 'failed)
        (set-svn-process-status 'finished))
      (move-to-column goal-column))
    (when svn-todo-queue
      (let ((cmd-info (car svn-todo-queue)))
        (setq svn-todo-queue (cdr svn-todo-queue))
	(let ((command (car cmd-info))
	      (args (cadr cmd-info))
	      (file-filter (car (cddr cmd-info))))
	  (set (make-local-variable 'svn-file-filter) file-filter)
	  (svn-run command args))))))

(defun svn-diff (arg)
  \"Run `svn diff'.
Argument ARG are the command line arguments.\"
  (interactive \"ssvn diff arguments: \")
  (svn-run-with-output \"diff\"
		       (append svn-diff-args (split-string arg))
		       'diff-mode))

(defun svn-add-unversioned-files-p (files)
  \"Ask the user whether FILES should be added; return the answer.\"
  (let ((buf (get-buffer-create \"*svn-unversioned-files*\")))
    (with-current-buffer buf
      (setq buffer-read-only nil)
      (erase-buffer)
      (insert (mapconcat (lambda (f) f) files \"\\n\"))
      (setq buffer-read-only t)
      (goto-char (point-min))
      (save-selected-window
        (pop-to-buffer buf)
        (shrink-window-if-larger-than-buffer)
        (let* ((n (length files))
               (add-them (y-or-n-p
                          (if (= n 1)
                              \"Add this item first? \"
                            (format \"Add these %d items first? \" n)))))
          (let ((win (get-buffer-window buf)))
            (if win
                (condition-case nil
                    (delete-window win)
                  (error nil))))
          (bury-buffer buf)
          add-them)))))

(defun svn-commit ()
  \"Commit changes to one or more files.\"
  (interactive)
  (save-some-buffers)
  (let ((unversioned-files (svn-action-files
                            (lambda (pos) (eq (svn-file-status pos) ?\\?)))))
    (if unversioned-files
        (if (svn-add-unversioned-files-p unversioned-files)
            (progn
              (message \"Adding unversioned items. Please re-commit when ready.\")
              (svn-run 'add unversioned-files \"Adding files\"))
          (message \"Files not added; nothing committed.\"))
      (let ((status-buf (current-buffer))
            (commit-buf (get-buffer-create \"*svn commit*\"))
            (window-conf (and svn-restore-windows
                              (current-window-configuration)))
            (listfun (lambda () (with-current-buffer log-edit-parent-buffer
                                  (svn-action-files)))))
        (log-edit 'svn-confirm-commit t
                  (if (< emacs-major-version 23)
                      listfun
                    (list (cons 'log-edit-listfun listfun)))
                  commit-buf)
        (set (make-local-variable 'saved-window-configuration) window-conf)))))

(defun svn-confirm-commit ()
  \"Commit changes with the current buffer as commit message.\"
  (interactive)
  (let ((files (with-current-buffer log-edit-parent-buffer
                 (svn-action-files)))
        (commit-buf (current-buffer))
        (status-buf log-edit-parent-buffer)
        (window-conf saved-window-configuration)
	;; XEmacs lacks make-temp-file but has make-temp-name + temp-directory
        (msg-file (if (fboundp 'make-temp-file)
		      (make-temp-file \"svn-commit\")
		    (make-temp-name (expand-file-name \"svn-commit\"
						      (temp-directory))))))
    ;; Ensure final newline
    (goto-char (point-max))
    (unless (bolp)
      (newline))
    (write-region (point-min) (point-max) msg-file)
    (when (boundp 'vc-comment-ring)
      ;; insert message into comment ring, unless identical to the previous
      (let ((comment (buffer-string)))
	(when (or (ring-empty-p vc-comment-ring)
		  (not (equal comment (ring-ref vc-comment-ring 0))))
	  (ring-insert vc-comment-ring comment))))
    (kill-buffer commit-buf)
    (with-current-buffer status-buf
      (make-local-variable 'svn-commit-msg-file)
      (make-local-variable 'svn-commit-files)
      (setq svn-commit-msg-file msg-file)
      (setq svn-commit-files files)
      (svn-run 'commit (append (list \"-N\" \"-F\" msg-file) files)))
    (if window-conf
        (set-window-configuration window-conf))))

(defun svn-commit-filter (proc str)
  \"Output filter function for `svn commit'.\"
  (save-excursion
    (set-buffer (process-buffer proc))
    (let ((inhibit-read-only t)
          (nomore))
      (goto-char (point-max))
      (insert str)
      (goto-char svn-output-marker)
      (while (not nomore)
        (cond ((looking-at
                \"\\\\(Sending\\\\|Adding\\\\|Transmitting file\\\\|Deleting\\\\) .*\\n\")
               ;; Ignore these expected and uninteresting messages
               (delete-region (match-beginning 0)
                              (match-end 0)))
              ((looking-at \"Committed revision \\\\([0-9]+\\\\).\\n\")
               (svn-update-label svn-revision-label (match-string 1))
               (forward-line 1))
              ((looking-at \".*\\n\")
               ;; Unexpected output is left in the buffer
               (forward-line 1))
              (t
               (setq nomore t)))))))

(defun svn-commit-sentinel (proc reason)
  \"Sentinel function for `svn commit'.\"
  (with-current-buffer (process-buffer proc)
    (when (= (process-exit-status proc) 0)
      (while svn-commit-files
        (let* ((file (car svn-commit-files))
               (path (concat default-directory file))
               (pos (svn-file-pos file))
               (file-buffer (get-file-buffer path))
               (inhibit-read-only t))
          (when pos
            (svn-update-status-flag pos ?\\  ?\\ )
            (svn-update-status-msg pos \"Committed\"))
          (when (and file-buffer (fboundp 'vc-svn-workfile-version))
            (with-current-buffer file-buffer
              ;; Use buffer-file-name instead of path to get the
              ;; canonical file name used by vc
              ;; TODO: use the version number written by the commit command
              (vc-file-setprop buffer-file-name 'vc-workfile-version
                               (vc-svn-workfile-version buffer-file-name))
              (vc-mode-line buffer-file-name))))
        (setq svn-commit-files (cdr svn-commit-files))))
    (delete-file svn-commit-msg-file))
  (svn-default-sentinel proc reason))

;;; Svn log

(defun svn-file-log (pos)
  \"List the change log of the selected file or directory.\"
  (interactive \"d\")
  (let ((file (or (svn-getprop pos 'file)
                  (svn-getprop pos 'dir))))
    (unless file
      (error \"No file or directory on this line\"))
    (svn-log (list file))))

(defun svn-log (arg)
  \"Run `svn log'.
Argument ARG is the command-line arguments, as a string or a list.\"
  (interactive \"ssvn log arguments: \")
  (when (stringp arg)
    (setq arg (split-string arg)))
  (svn-run-with-output \"log\" arg
                       'svn-log-mode))

(defvar svn-log-mode-map nil
  \"Keymap for `svn-log-mode'.\")
(unless svn-log-mode-map
  (setq svn-log-mode-map (make-sparse-keymap))
  (define-key svn-log-mode-map \"\\r\" 'svn-log-show-diff)
  (define-key svn-log-mode-map \"n\" 'svn-log-next)
  (define-key svn-log-mode-map \"p\" 'svn-log-prev)
  (define-key svn-log-mode-map \"e\" 'svn-log-edit)
  (define-key svn-log-mode-map \"+\" 'svn-log-expand)
  (define-key svn-log-mode-map \"-\" 'svn-log-compact)
  (define-key svn-log-mode-map \"=\" 'svn-log-diff)
  )

(defun svn-update-log-entry (verbose-p)
  \"Update the log entry under point, using verbose output if
VERBOSE-P.\"
  (save-excursion
    (end-of-line)
    (re-search-backward svn-log-entry-start-re nil t)
    (let ((start (point)))
      (unless (re-search-forward \"^r\\\\([0-9]+\\\\) |\" nil t)
        (error \"Found no commit\"))
      (let* ((commit-id (string-to-int (match-string 1)))
             (new (svn-run-hidden 'log
                                  (append (and verbose-p '(\"-v\"))
                                          '(\"-r\")
                                          (list (int-to-string commit-id)))))
             (text (with-current-buffer new
                     (goto-char (point-min))
                     (unless (re-search-forward svn-log-entry-start-re nil t)
                       (error \"Failed finding log entry start\"))
                     (unless (re-search-forward svn-log-entry-start-re nil t)
                       (error \"Failed finding log entry end\"))
                     (buffer-substring (point-min) (match-beginning 0))))
             (inhibit-read-only t))
        (re-search-forward svn-log-entry-start-re nil 'limit)
        (goto-char (match-beginning 0))
        (delete-region start (point))
        (insert text)))))

(defun svn-log-expand ()
  \"Show verbose log entry information.\"
  (interactive)
  (svn-update-log-entry t))

(defun svn-log-compact ()
  \"Show compact log entry information.\"
  (interactive)
  (svn-update-log-entry nil))

(defun svn-log-mode ()
  \"Major mode for viewing Subversion logs.

\\\\{svn-log-mode-map}\"
  (interactive)
  (kill-all-local-variables)
  (setq major-mode 'svn-log-mode
        mode-name \"Svn log\")
  (use-local-map svn-log-mode-map)
  (setq paragraph-start \"^commit\"))

(defconst svn-log-entry-start-re \"^-\\\\{72\\\\}$\")

(defun svn-log-find-revision (commit-id)
  (let (found start)
    (save-excursion
      (goto-char (point-min))
      (while (and (re-search-forward svn-log-entry-start-re nil t)
                  (setq start (point))
                  (re-search-forward \"^r\\\\([0-9]+\\\\) |\" nil t)
                  (if (/= (string-to-int (match-string 1)) commit-id)
                      t
                    (setq found t)
                    nil))))
    (when found
      (goto-char start)
      (beginning-of-line)
      t)))

(defun svn-log-current-commit ()
  (save-excursion
    (end-of-line)
    (re-search-backward svn-log-entry-start-re nil t)
    (unless (re-search-forward \"^r\\\\([0-9]+\\\\) |\" nil t)
      (error \"Found no commit\"))
    (string-to-int (match-string 1))))

(defun svn-log-show-diff ()
  \"Show the changes introduced by the changeset under point.\"
  (interactive)
  (let ((commit-id (svn-log-current-commit))
        (diff-buf (get-buffer-create \"*svn diff*\"))
        (dir default-directory)
        (inhibit-read-only t))
    (display-buffer diff-buf)
    (with-current-buffer diff-buf
      (diff-mode)
      (setq buffer-read-only t)
      (erase-buffer)
      (setq default-directory dir)
      (svn-call-process diff-buf
       (append (list \"diff\" \"-r\" (format \"%d:%d\" (1- commit-id) commit-id))
               svn-diff-args)))))

(defun svn-log-edit-files (commit-id)
  (let ((root (svn-repository-root))
        result)
    (with-current-buffer
        (svn-run-hidden 'log (list \"-v\" \"-r\"
                                    (int-to-string commit-id)
                                    root))
      (goto-char (point-min))
      (unless (re-search-forward \"^Changed paths:\" nil t)
        (error \"Cannot find list of changes\"))
      (while (re-search-forward
              \"^   \\\\(\\\\S-+\\\\)\\\\s-+\\\\(.*?\\\\)\\\\( (from .*)$\\\\)?$\"
              nil t)
        (let ((how (match-string 1))
              (file (match-string 2))
              (tail (match-string 3)))
          (when (string-match \"\\\\([^/]*/\\\\)?\\\\([^/]*\\\\)$\" file)
            (setq file (match-string 0 file)))
          (setq result (cons (concat how \" \" file) result)))))
    (nreverse result)))

(defun svn-log-diff ()
  \"Run `svn diff' for the current log entry.\"
  (interactive)
  (let ((commit-id (svn-log-current-commit)))
    (svn-run-with-output \"diff\"
			 (append svn-diff-args
				 (list \"-c\" (number-to-string commit-id)))
                         'diff-mode)))

(defun svn-log-edit ()
  \"Edit the log message for the revision under point.\"
  (interactive)
  (let* ((commit-id (svn-log-current-commit))
	 (log (svn-propget commit-id \"svn:log\"))
         (cwd default-directory)
         (parent-buffer (current-buffer))
	 (buffer (get-buffer-create (format \"*svn log message of r%d*\"
					    commit-id))))
    (log-edit 'svn-log-edit-done t
              `(lambda () (svn-log-edit-files ,commit-id))
              buffer)
    (insert log)
    (set (make-local-variable 'svn-commit-id) commit-id)
    (set (make-local-variable 'svn-directory) cwd)
    (set (make-local-variable 'svn-parent-buffer) parent-buffer)
    (setq default-directory cwd)
    (message (substitute-command-keys
	      \"Press \\\\[log-edit-done] when you are done editing.\"))))

(defun svn-log-edit-done ()
  (interactive)
  (setq default-directory svn-directory) ; just in case the user cd'd
  (message \"Changing log message...\")
  (let ((commit-id svn-commit-id))
    (svn-propset commit-id \"svn:log\" (buffer-string))
    (when (buffer-name svn-parent-buffer)
      (save-excursion
        (set-buffer svn-parent-buffer)
        (when (svn-log-find-revision commit-id)
          (svn-update-log-entry nil)))))
  (kill-buffer nil)
  (message \"Changing log message... done\"))

(defun svn-log-next ()
  \"Move to the next changeset in the log.\"
  (interactive)
  (end-of-line)
  (unless (re-search-forward svn-log-entry-start-re nil t)
    (error \"Found no commit\"))
  (beginning-of-line)
  (svn-log-show-diff))

(defun svn-log-prev ()
  \"Move to the previous changeset in the log.\"
  (interactive)
  (beginning-of-line)
  (unless (re-search-backward svn-log-entry-start-re nil t)
    (error \"Found no commit\"))
  (svn-log-show-diff))

(defun svn-new-label (&optional pos)
  (unless pos (setq pos (point)))
  (let ((start (make-marker))
        (stop (make-marker)))
    (set-marker start pos)
    (set-marker stop pos)
    (list start stop)))

(defun svn-update-label (label str)
  (let ((start (car label))
        (stop (cadr label))
        (inhibit-read-only t))
    (delete-region start stop)
    (set-marker-insertion-type stop t)
    (save-excursion
      (goto-char start)
      (insert str))))

;;; Svn propedit

(defun svn-prop-args (file-or-rev)
  \"Returns a list of arguments to the 'svn prop...' commands, to
make them act on FILE-OR-REV (a file name or a revision number).\"
  (if (integerp file-or-rev)
      (list \"--revprop\" \"-r\" (int-to-string file-or-rev))
    (list file-or-rev)))

(defun svn-prop-description (file-or-rev)
  \"Returns a human-readable description of FILE-OR-REV (a file
name or revision number).\"
  (if (integerp file-or-rev)
      (format \"revision %d\" file-or-rev)
    file-or-rev))

(defun svn-propget (file-or-rev propname)
  \"Return the Subversion property PROPNAME of FILE-OR-REV (file
name or revision number).\"
  (with-current-buffer
      (svn-run-hidden 'propget
		      (cons propname
			    (svn-prop-args file-or-rev)))
    (substring (buffer-string) 0 -1)))	; trim final newline added by svn

(defun svn-get-props (file)
  \"Return an alist containing the properties of FILE\"
  ;; First retrieve the property names, and then the value of each.
  ;; We can't use proplist -v because is output is ambiguous when values
  ;; consist of multiple lines.
  (if (string-equal (svn-run-for-stdout 'info (list file)) \"\")
    (error \"%s is not under version control\" file))
  (let (propnames)
    (with-current-buffer (svn-run-hidden 'proplist (list file))
      (goto-char (point-min))
      (when (looking-at \"Properties on \")
	(forward-line 1)
	(while (looking-at \"  \\\\(.+\\\\)$\")
	  (setq propnames (cons (match-string 1) propnames))
	  (forward-line 1))))
    (mapcar (lambda (propname)
	      (cons propname (svn-propget file propname)))
	    propnames)))

(defun svn-propedit (file)
  \"Edit properties of FILE.\"
  (interactive (list (expand-file-name
		      (or (svn-getprop (point) 'file)
			  (read-file-name \"Edit properties of file: \"
					  default-directory
					  nil t
					  (svn-getprop (point) 'dir))))))
  (let ((local-file (svn-local-file-name file)))
    (when (string-equal local-file \"\")
	(setq local-file \".\")
	(setq file (file-name-as-directory file)))
    (svn-check-running)
    (let ((buf-name (format \"*propedit %s*\" local-file)))
      (if (get-buffer buf-name)
	  (kill-buffer buf-name))
      (let ((prop-alist (svn-get-props local-file))
	    (propedit-buf (get-buffer-create buf-name)))
	(switch-to-buffer-other-window propedit-buf)
	(svn-propedit-mode)
	(insert
      \"# Properties of \" local-file \"\\n\"
      \"#\\n\"
      \"# Lines are on the form PROPNAME: VALUE for single-line values,\\n\"
      \"# or just PROPNAME: followed by one or more lines starting with > for\\n\"
      \"# multi-line values. Lines starting with # are ignored.\\n\"
      \"#\\n\"
      \"# Change, add, delete or rename properties just by editing this\\n\"
      \"# buffer; then press \"
         (substitute-command-keys \"\\\\[svn-propedit-done]\")
	 \" to save changes.\\n\\n\")
	(mapc (lambda (prop)
		(let* ((value (cdr prop))
		       (lines nil)
		       (len (length value))
		       (ofs 0))
		  ;; Split value in lines - we can't use split-string because
		  ;; its behaviour is not consistent across Emacs versions.
		  (while (<= ofs len)
		    (let* ((nl (or (string-match \"\\n\" value ofs) len)))
		      (setq lines (cons (substring value ofs nl) lines))
		      (setq ofs (+ nl 1))))
		  (setq lines (nreverse lines))
		  ;; The lines list now contains one string per line, and
		  ;; an empty list at the end if the string finished in a \\n.

		  (insert (car prop) \":\")
		  (if (> (length lines) 1)
		      (progn
			(insert \"\\n\")
			(mapc (lambda (line) (insert \">\" line \"\\n\"))
			      lines))
		    (insert \" \" (or (car lines) \"\") \"\\n\"))))
	      (sort prop-alist #'(lambda (a b) (string< (car a) (car b)))))
	(make-local-variable 'svn-propedit-file)
	(setq svn-propedit-file file)
	(setq default-directory (file-name-directory file))
	(message
	 (substitute-command-keys
	  \"Press \\\\[svn-propedit-done] when you are done editing.\"))))))

(defvar svn-propedit-mode-map nil
  \"Keymap for `svn-propedit-mode'.\")
(unless svn-propedit-mode-map
  (setq svn-propedit-mode-map (make-sparse-keymap))
  (define-key svn-propedit-mode-map \"\\C-c\\C-c\" 'svn-propedit-done))

(defun svn-propedit-mode ()
  \"Major mode for editing Subversion properties.\"
  (interactive)
  (kill-all-local-variables)
  (setq major-mode 'svn-propedit-mode
	mode-name \"Svn propedit\")
  (use-local-map svn-propedit-mode-map)
  (setq font-lock-defaults
	'(((\"^#.*$\"			       ;comment
	    . 'font-lock-comment-face)
	   (\"^\\\\([^ \\t\\n#>][^ \\t\\n]*\\\\):\"      ;property name
	    . (1 'bold))
	   (\"^[^ \\t\\n#>][^ \\t\\n]*: *\\\\(.*\\\\)$\" ;property value
	    . (1 'font-lock-function-name-face))
	   (\"^>\"			       ;multi-line marker
	    . 'bold)
	   (\"^>\\\\(.*\\\\)$\"		       ;property value (continued)
	    . (1 'font-lock-function-name-face))
	   )
	  nil				;keywords-only
	  nil				;case-fold
	  ;; syntax-alist: don't fontify quotes specially in any way
	  ((?\\\" . \".\"))
	  nil				;syntax-begin
	  ))
  (font-lock-mode))

(defun svn-props-from-buffer ()
  \"Parse the current propedit buffer and return an alist of the properties.\"
  (save-excursion
    (let (prop-alist)
      (goto-char (point-min))
      (while (not (eobp))
	(cond ((looking-at \"^\\\\([^ \\t\\n#>][^ \\t\\n]*\\\\): *\\\\(.*\\\\)$\")
	       (let ((prop-name (match-string 1))
		     (value (match-string 2)))
		 (set-text-properties 0 (length prop-name) nil prop-name)
		 (set-text-properties 0 (length value) nil value)
		 (when (assoc prop-name prop-alist)
		   (error \"Duplicated property %s\" prop-name))
		 (setq prop-alist (cons (cons prop-name value) prop-alist))))
	      ((looking-at \"^>\\\\(.*\\\\)$\")
	       (let ((extra-line (match-string 1)))
		 (set-text-properties 0 (length extra-line) nil extra-line)
		 (when (null prop-alist)
		   (error \"Continued line not preceded by property name\"))
		 (let ((old-value (cdar prop-alist)))
		   (setcdr (car prop-alist)
			   (concat old-value \"\\n\" extra-line))))))
	(forward-line 1))

      ;; Remove the extra leading newline from multi-line values
      (mapcar (lambda (prop)
		(let ((name (car prop))
		      (value (cdr prop)))
		  (if (and (not (equal value \"\"))
			   (equal (substring value 0 1) \"\\n\"))
		      (cons name (substring value 1))
		    prop)))
	      prop-alist))))

(defun svn-propdel (file prop-name)
  \"Delete FILE's property PROP-NAME.\"
  (svn-run-hidden 'propdel (list prop-name file)))

(defun svn-propset (file-or-rev prop-name prop-value)
  \"Set the property PROP-NAME to PROP-VALUE for FILE-OR-REV (a
file name or revision number).\"
  (let ((buf (svn-run-hidden 'propset (append (list prop-name prop-value)
                                              (svn-prop-args file-or-rev)))))
    (unless
        (with-current-buffer buf
          (goto-char (point-min))
          (looking-at \"^property '.*' set on \"))
      (switch-to-buffer buf)
      (error \"Failed setting property %s of %s\"
             prop-name
             (svn-prop-description file-or-rev)))))

(defun svn-propedit-done ()
  \"Apply property changes to the file.\"
  (interactive)
  (let ((wc-props (svn-get-props svn-propedit-file))
	(new-props (svn-props-from-buffer))
	(changes 0))

    ;; first remove properties that the user deleted from the buffer
    (mapc (lambda (wc-prop)
	    (let ((prop-name (car wc-prop)))
	      (when (not (assoc prop-name new-props))
		(message \"Deleting property %s\" prop-name)
		(svn-propdel svn-propedit-file prop-name)
		(setq changes (1+ changes)))))
	  wc-props)

    ;; then set the properties that have changed or are new
    (mapc (lambda (new-prop)
	    (let* ((prop-name (car new-prop))
		   (wc-prop (assoc prop-name wc-props)))
	      (unless (equal new-prop wc-prop)
		(message \"Setting property %s\" prop-name)
		(svn-propset svn-propedit-file prop-name (cdr new-prop))
		(setq changes (1+ changes)))))
	  new-props)
    (cond
     ((> changes 1) (message \"Changed %d properties.\" changes))
     ((= changes 0) (message \"No properties changed.\"))))
  (svn-foreach-svn-buffer
   svn-propedit-file
   (lambda (local-file-name file-pos)
     (svn-refresh-item local-file-name nil)))
  (kill-buffer (current-buffer)))

;;; Svn buffer

(defvar svn-files-start nil)
(defvar svn-files-stop nil)
(defvar svn-url-label nil)
(defvar svn-revision-label nil)
(defvar svn-running-label nil)
(defvar svn-output-marker nil)

(defvar svn-running nil)

(defun create-svn-buffer (dir)
  \"Create a buffer for showing svn status.
Argument DIR is the directory to run svn in.\"
  (let ((status-buf (create-file-buffer (concat dir \"*svn*\")))
        (inhibit-read-only t))
    (with-current-buffer status-buf
      (setq default-directory dir)
      (svn-status-mode)

      (make-local-variable 'svn-url-label)
      (make-local-variable 'svn-revision-label)
      (make-local-variable 'svn-running-label)
      (make-local-variable 'svn-output-marker)

      (insert \"Svn status for \" dir) (newline)
      (insert \"URL: \") (setq svn-url-label (svn-new-label))
      (insert \" revision \" ) (setq svn-revision-label (svn-new-label))
      (newline)
      (newline)
      (insert \"---- \") (setq svn-running-label (svn-new-label))
      (newline)
      (setq svn-files-start (point-marker))
      (set-marker-insertion-type svn-files-start nil)
      (setq svn-last-inserted-marker (point-marker))
      (set-marker-insertion-type svn-last-inserted-marker nil)
      (insert \"----\")
      (newline)
      (setq svn-output-marker (point-marker))
      (set-marker-insertion-type svn-output-marker nil)
      ;; Do this after inserting stuff
      (setq svn-files-stop (copy-marker svn-files-start t))
      (setq buffer-read-only t))
    status-buf))

(defun switch-to-svn-buffer (dir)
  \"Switch to a (possibly new) buffer displaying status for DIR\"
  (setq dir (file-name-as-directory dir))
  (let ((buffers (buffer-list)))
    (while (and buffers
                (not (with-current-buffer (car buffers)
                       (and (eq major-mode 'svn-status-mode)
                            (string= default-directory dir)))))
      (setq buffers (cdr buffers)))
    (switch-to-buffer (if buffers
                          (car buffers)
                        (create-svn-buffer dir)))))

(defun svn-in-dir-p (dir file)
  \"Return non-NIL if FILE is inside DIR\"
  (let ((l (length dir)))
    (and (> (length file) l)
         (string= dir (substring file 0 l)))))

;;; Svn status

(defun svn-status (dir)
  \"Run `svn status'.
Argument DIR is the directory to run svn status in.\"
  (interactive \"DDirectory: \\n\")
  (switch-to-svn-buffer dir)
  (let ((proc (svn-run 'info ())))
    (while (eq (process-status proc) 'run)
      (accept-process-output proc 2 10000)))
  ;; The sentinel isn't run by a-p-o, so we hack around it
  (setq svn-running nil)
  (svn-refresh)
  (message
   (substitute-command-keys
    \"Welcome to dsvn. Press \\\\[svn-status-help] for keyboard help summary.\")))

(defun svn-refresh (&optional clear)
  \"Run `svn status'.
If optional prefix argument CLEAR is non-NIL, clear the buffer first.\"
  (interactive \"P\")
  (svn-check-running)
  (let ((inhibit-read-only t))
    (if clear
        (delete-region svn-files-start svn-files-stop)
      (put-text-property svn-files-start svn-files-stop 'svn-updated nil))
    (setq svn-last-inserted-filename nil)
    (svn-run 'status '())))

(defun svn-run-status-v (files recursive)
  \"Run svn status -v on FILES. If not RECURSIVE, only applies to files and
directories explicitly listed in FILES.\"

  ;; The command 'svn status -N DIR' will process the immediate contents of
  ;; DIR as well as DIR itself, but that is not what we want if running
  ;; non-recursively. To compensate, filter the status output through a list
  ;; of files and directories we are interested in.

  (let ((flag (if recursive nil '(\"-N\")))
	(file-filter
	 (if recursive
	     nil
	   (mapcar (lambda (file)
		     ;; trim trailing slash for directory comparison to work
		     (if (equal (substring file -1) \"/\")
			 (substring file 0 -1)
		       file))
		   files))))
    (svn-run-async 'status-v (append flag files) file-filter)))

(defun svn-refresh-file ()
  \"Run `svn status' on the selected files.\"
  (interactive)
  (svn-check-running)
  (let ((actions (svn-actions))
        (inhibit-read-only t))
    (setq svn-last-inserted-filename nil)
    (put-text-property svn-files-start svn-files-stop 'svn-updated t)
    (mapc (lambda (pos)
            (svn-setprop pos 'updated nil))
          (mapcar 'cadr actions))
    (svn-run-status-v (mapcar 'car actions) t))
  (svn-next-file 1))

(defun svn-local-file-name (file)
  \"Return file name relative the current directory, or raise an error if
outside.\"
  (if (file-directory-p file)
      (setq file (file-name-as-directory file)))
  (let ((exp-default-dir (expand-file-name default-directory)))
    (if (file-name-absolute-p file)
	(let ((ddl (length exp-default-dir)))
	  (if (or (< (length file) ddl)
		  (not (string= (substring file 0 ddl)
				exp-default-dir)))
	      (error \"Outside working copy\")
	    (substring file ddl)))
      file)))

(defun svn-refresh-item (file recursive)
  \"Refresh status for FILE. If RECURSIVE, do it recursively (for directories).\"
  (svn-check-running)
  (let ((inhibit-read-only t))
    (setq svn-last-inserted-filename nil)
    (let ((local-file (svn-local-file-name file)))
      (svn-run-status-v (list local-file) recursive))))

(defun svn-refresh-one (file)
  \"Run `svn status' on FILE.\"
  (interactive (list (expand-file-name
		      (read-file-name \"Svn status on file: \"
				      default-directory
				      nil t
				      (or (svn-getprop (point) 'file)
					  (svn-getprop (point) 'dir))))))
  (svn-refresh-item file t))

(defun svn-cleanup-status ()
  (save-excursion
    (let ((inhibit-read-only t))
      (goto-char svn-files-start)
      (while (< (point) svn-files-stop)
        (if (or (svn-getprop (point) 'dir)
                (svn-getprop (point) 'updated))
            (forward-line)
          (svn-update-status-flag (point) ?\\  ?\\ )
          (svn-update-status-msg (point) \"\")
          (forward-line))))))

;; Translate backslashes to forward slashes, because that is what
;; Emacs uses internally even on Windows and it permits us to compare
;; file name strings.
(defun svn-normalise-path (path)
  (replace-regexp-in-string \"\\\\\\\\\" \"/\" path t t))

(defun svn-status-filter (proc str)
  (save-excursion
    (set-buffer (process-buffer proc))
    (let ((inhibit-read-only t))
      (goto-char (point-max))
      (insert str)
      (goto-char svn-output-marker)
      (while
	 (cond
	  ((looking-at
	    \"\\\\([ ACDGIMRX?!~][ CM][ L][ +][ S][ KOTB]\\\\)[ C]? \\\\([^ ].*\\\\)\\n\")
	   (let ((status (match-string 1))
		 (filename (svn-normalise-path (match-string 2))))
	     (delete-region (match-beginning 0) (match-end 0))
	     (svn-insert-file filename status))
	   t)
	  ((looking-at \"\\n\\\\|Performing status on external item at .*\\n\")
	   (delete-region (match-beginning 0) (match-end 0))
	   t)
	  ((looking-at \"      > +\\\\([^ ].*\\\\)\\n\")
	   (let ((tree-conflict (match-string 1)))
	     (delete-region (match-beginning 0) (match-end 0))
	     (svn-update-status-msg svn-last-inserted-marker \"TConflict\")
	     (svn-update-conflict-msg svn-last-inserted-marker tree-conflict))
	   t))))))

(defun svn-status-sentinel (proc reason)
  (with-current-buffer (process-buffer proc)
    (svn-cleanup-status)
    (svn-insert-dirs))
  (svn-default-sentinel proc reason))

(defun svn-status-v-filter (proc str)
  (save-excursion
    (set-buffer (process-buffer proc))
    (let ((inhibit-read-only t))
      (goto-char (point-max))
      (insert str)
      (goto-char svn-output-marker)
      (while
	  (cond
	   ((looking-at
	     \"\\\\(?:\\\\(\\\\?.....\\\\)\\\\|\\\\([ ACDGIMRX!~][ CM][ L][ +][ S][ KOTB]\\\\)[ C]? [* ] +[^ ]+ +[^ ]+ +[^ ]+\\\\) +\\\\([^ ].*\\\\)\\n\")
	    (let ((status (or (match-string 1) (match-string 2)))
		  (filename (svn-normalise-path (match-string 3))))
	      (delete-region (match-beginning 0) (match-end 0))
	      (when (or (not svn-file-filter)
			(member filename svn-file-filter))
		(svn-insert-file filename status)))
	    t)
	   ((looking-at \"      > +\\\\([^ ].*\\\\)\\n\")
	    (let ((tree-conflict (match-string 1)))
	      (delete-region (match-beginning 0) (match-end 0))
	      (svn-update-status-msg svn-last-inserted-marker \"TConflict\")
	      (svn-update-conflict-msg svn-last-inserted-marker tree-conflict))
	    t))))))

(defun svn-status-v-sentinel (proc reason)
  (with-current-buffer (process-buffer proc)
    (svn-cleanup-status))
  (svn-default-sentinel proc reason))

;; info

(defun svn-info-filter (proc str)
  \"Output filter function for `svn info'.\"
  (save-excursion
    (set-buffer (process-buffer proc))
    (let ((inhibit-read-only t)
          (nomore))
      (goto-char (point-max))
      (insert str)
      (goto-char svn-output-marker)
      (while (not nomore)
        (cond ((looking-at \"URL: \\\\(.*\\\\)\\n\")
               (svn-update-label svn-url-label (match-string 1))
               (forward-line 1))
              ((looking-at \"Revision: \\\\([0-9]+\\\\)\\n\")
               (svn-update-label svn-revision-label (match-string 1))
               (forward-line 1))
              ((looking-at \".*\\n\")
               ;; Unexpected output is left in the buffer
               (forward-line 1))
              (t
               (setq nomore t)))))))

;; update

(defun svn-update (dir)
  \"Run `svn update'.
Argument DIR is the directory to run svn status in.\"
  (interactive \"DDirectory: \\n\")
  (switch-to-svn-buffer dir)
  (svn-update-current))

(defun svn-update-current (&optional revision)
  \"Run `svn update' in the current buffer.
Update to REVISION, which defaults to HEAD.
With prefix arg, prompt for REVISION.\"
  (interactive (list
                (if current-prefix-arg
                    (read-string \"update to revision (HEAD): \"
                                 nil nil \"HEAD\")
                  nil)))
  (svn-check-running)
  (make-local-variable 'svn-updated-files)
  (setq svn-updated-files nil)
  (let ((args (if revision
                  (list \"-r\" revision)
                '())))
    (svn-run 'update args \"Updating\")))

(defconst svn-update-flag-name
  '((?A . \"Added\")
    (?D . \"Deleted\")
    (?U . \"Updated\")
    (?G . \"Merged\")
    (?C . \"Conflict\")
    (?E . \"Existed\")))

(defvar svn-merging nil)

(defun svn-remap-update-to-status (status-char)
  \"Map a status character from the svn update command to the resulting status.\"
  (if svn-merging
      (cond ((memq status-char '(?U ?G))
             ?M)
            (t
             status-char))
    (cond ((memq status-char '(?A ?D ?U))
           ?\\ )
          ((eq status-char ?G)
           ?M)
          (t
           status-char))))

(defun svn-update-filter (proc str)
  (save-excursion
    (set-buffer (process-buffer proc))
    (let ((inhibit-read-only t)
          nomore)
      (goto-char (point-max))
      (insert str)
      (goto-char svn-output-marker)
      (while (not nomore)
        (cond ((looking-at
                \"\\\\([ ADUCGE][ ADUCGE][ B]\\\\)\\\\([ C]?\\\\) \\\\([^ ].*\\\\)\\n\")
               (let* ((status (match-string 1))
                      (file-status (elt status 0))
                      (prop-status (elt status 1))
		      (tree-status (match-string 2))
                      (filename (svn-normalise-path (match-string 3))))
                 (delete-region (match-beginning 0)
                                (match-end 0))
                 (svn-insert-file
                  filename
                  ;; Remap A and U to unmodified in file and prop status
                  (format \"%c%c....\"
                          (svn-remap-update-to-status file-status)
                          (svn-remap-update-to-status prop-status))
                  ;; Optimize for some common cases
                  (cond ((string= tree-status \"C\")
			 \"TConflict\")
			((= prop-status ?\\ )
                         (cdr (assq file-status svn-update-flag-name)))
                        ((= file-status ?\\ )
                         (let ((s (format \"P %s\"
                                          (cdr (assq prop-status
                                                     svn-update-flag-name)))))
                           (if (> (length s) 9)
                               (substring s 0 9)
                             s)))
                        (t
                         status)))
                 (setq svn-updated-files (cons filename svn-updated-files))))
              ((looking-at \"At revision \\\\([0-9]+\\\\)\\\\.\\n\")
               (svn-update-label svn-revision-label (match-string 1))
               (forward-line 1))
              ((looking-at \"Updating '.*':\\n\")
               (delete-region (match-beginning 0) (match-end 0)))
              ((and (not svn-merging)
                    (looking-at \"Updated to revision \\\\([0-9]+\\\\)\\\\.\\n\"))
               (svn-update-label svn-revision-label (match-string 1))
               (forward-line 1))
              ((looking-at \".*\\n\")
               ;; Unexpected output is left in the buffer
               (forward-line 1))
              (t
               (setq nomore t)))))))

(defun svn-update-sentinel (proc reason)
  (with-current-buffer (process-buffer proc)
    (svn-insert-dirs)
    (mapc #'svn-revert-if-needed svn-updated-files))
  (svn-default-sentinel proc reason))

(defun svn-revert-if-needed (filename)
  \"Revert buffer visiting FILENAME if any, because the file is believed to have
been modified.\"
  (let ((buf (find-buffer-visiting filename)))
    (when (and buf (not (buffer-modified-p buf)))
      (with-current-buffer buf
	(let ((was-ro buffer-read-only))
	  (condition-case nil
	      (revert-buffer t t)
	    (error nil))
	  (when was-ro (toggle-read-only 1)))))))

(defun svn-complete-url (url pred all)
  (string-match \"\\\\`\\\\(.*/\\\\)\\\\([^/]*\\\\)\\\\'\" url)
  (let* ((base-url (match-string 1 url))
         (match-file (match-string 2 url))
         (match-len (length match-file))
         (files))
    (with-current-buffer (svn-run-hidden 'ls (list base-url))
      (goto-char (point-min))
      (while (looking-at \".+$\")
        (let ((file (match-string 0)))
          (if (and (>= (length file) match-len)
                   (string= match-file (substring file 0 match-len)))
              (setq files (cons file files)))
          (forward-line 1))))
    (setq files (nreverse files))
    (cond (all
           (mapcar (lambda (f) (concat base-url f))
                   files))
          ((and (= (length files) 1)
                (string= (car files) match-file))
           t)
          (t
           (try-completion url
                           (mapcar (lambda (s) (cons (concat base-url s) nil))
                                   files)
                           pred)))))

(defvar svn-switch-history nil)

(defun svn-switch (url)
  \"Run `svn switch'.\"
  (interactive (list (completing-read \"Switch to (URL): \"
                                      'svn-complete-url
                                      nil nil
                                      (svn-current-url)
                                      'svn-switch-history)))
  (svn-check-running)
  (make-local-variable 'svn-updated-files)
  (setq svn-updated-files nil)
  (svn-update-label svn-url-label url)
  (svn-run 'switch (list url)))

(defun svn-switch-filter (proc str)
  \"Filter function for 'svn switch' output.\"
  ;; The output is identical(?) to svn update
  (svn-update-filter proc str))

(defun svn-switch-sentinel (proc reason)
  ;; switch is basically a glorified update
  (svn-update-sentinel proc reason))

;; merge

(defun svn-merge (from-url from-rev to-url to-rev)
  \"Run `svn merge'.\"
  (interactive (list (completing-read \"Merge from (URL): \"
                                      'svn-complete-url
                                      nil nil
                                      (svn-current-url)
                                      'svn-switch-history)
                     (read-string \"Merge from revision (HEAD): \"
                                  nil nil \"HEAD\")
                     (completing-read \"Merge to (URL): \"
                                      'svn-complete-url
                                      nil nil
                                      (car svn-switch-history)
                                      'svn-switch-history)
                     (read-string \"Merge to revision (HEAD): \"
                                  nil nil \"HEAD\")))
  (svn-check-running)
  (make-local-variable 'svn-updated-files)
  (setq svn-updated-files nil)
  (svn-run 'merge (list (format \"%s@%s\" from-url from-rev)
                        (format \"%s@%s\" to-url to-rev))))

(defun svn-merge-filter (proc str)
  \"Filter function for 'svn merge' output.\"
  ;; The output is similar to svn update
  (let ((svn-merging t))
    (svn-update-filter proc str)))

(defun svn-merge-sentinel (proc reason)
  ;; merge is basically a glorified update
  (svn-update-sentinel proc reason))


(defvar svn-last-inserted-filename nil)
(defvar svn-last-inserted-marker nil)

(defsubst svn-file-name< (fn1 fn2)
  \"Compare two filenames, FN1 and FN2 and decide the sort order\"
  (let ((dir1 (or (file-name-directory fn1) \"\"))
        (dir2 (or (file-name-directory fn2) \"\")))
    (cond ((and (< (length dir1) (length dir2))
                (string= dir1 (substring dir2 0 (length dir1))))
           t)
          ((and (> (length dir1) (length dir2))
                (string= dir2 (substring dir1 0 (length dir2))))
           nil)
          (t
           (string< fn1 fn2)))))
          
(defun svn-insert-file (filename status &optional info)
  (save-excursion
    (save-restriction
      (narrow-to-region (1- svn-files-start) svn-files-stop)
      (if svn-last-inserted-filename
          (goto-char svn-last-inserted-marker)
        ;; Move to the middle of the list and start there
        (let ((line-count (count-lines svn-files-start svn-files-stop)))
          (goto-char svn-files-start)
          (forward-line (/ line-count 2))
          (setq svn-last-inserted-filename
                (or (svn-getprop (point) 'file)
                    (svn-getprop (point) 'dir)))))
      ;; Scan for the place to insert the new file, or replace an
      ;; existing line
      (cond ((null svn-last-inserted-filename)
             nil)
            ((svn-file-name< filename svn-last-inserted-filename)
             ;;(if (not (bobp))
             ;;    (forward-line -1))
             (while (and (not (bobp))
                         (not (svn-file-name< (or (svn-getprop (point) 'file)
                                                  (svn-getprop (point) 'dir))
                                              filename)))
               (forward-line -1))
             (forward-line 1))
            (t
             (while (and (not (eobp))
                         (svn-file-name< (or (svn-getprop (point) 'file)
                                             (svn-getprop (point) 'dir))
                                         filename))
               (forward-line 1))))
      (let ((marked nil))
        (when (string= filename (svn-getprop (point) 'file))
          (setq marked (svn-getprop (point) 'mark))
          (delete-region (point) (progn (forward-line 1) (point))))
        (set-marker svn-last-inserted-marker (point))
        (insert \" \"
                (if info (format \"%-9s \" info) \"          \")
                status
                (if marked \" * \" \"   \")
                filename)
        (newline)
        (add-text-properties svn-last-inserted-marker (point)
                             (append (list 'svn-file filename
                                           'svn-updated t
                                           'svn-mark marked)
                                     (if marked
                                         (list 'face 'svn-mark-face)
                                       ()))))))
  (setq svn-last-inserted-filename filename))

(defun svn-remove-line (pos)
  (save-excursion
    (goto-char pos)
    (forward-line 1)
    (delete-region pos (point))))

(defun svn-insert-dirs ()
  (interactive)
  (save-excursion
    (save-restriction
      (narrow-to-region svn-files-start svn-files-stop)
      (goto-char (point-min))
      (let ((inhibit-read-only t)
            (current-dir nil))
        (while (not (eobp))
          (let ((dir (svn-getprop (point) 'dir)))
            (if dir
                (setq current-dir dir)
              (let* ((start (point))
                     (file (svn-getprop (point) 'file))
                     (dir (or (file-name-directory file)
                              \"\")))
                (when (not (string= dir current-dir))
                  (setq current-dir dir)
                  (if (string= dir \"\")
                      (insert \"         Top-level directory:\")
                    (insert \"         Directory \" dir \":\"))
                  (newline)
		  ;; Next line only needed on XEmacs
		  (remove-text-properties start (point) '(svn-file nil))
                  (add-text-properties start (point)
                                       (list 'face 'bold
                                             'svn-dir dir))))))
          (forward-line 1))))))

(defun svn-file-pos (filename)
  \"Move to the line containing file information for FILENAME.\"
  (let ((pos svn-files-start))
    (while (and pos
                (not (string= filename (get-text-property pos 'svn-file))))
      (setq pos (next-single-property-change pos 'svn-file)))
    pos))
  
(defun svn-update-file-status (filename status-char)
  (let ((inhibit-read-only t))
    (save-excursion
      (svn-goto-file filename)
      (beginning-of-line)
      (delete-char 1)
      (insert status-char))))

(defun set-svn-process-status (status)
  (let ((description (car svn-running)))
    (svn-update-label svn-running-label
                      (cond ((eq status 'running)
                             (format \"%s...\"
                                     (or description \"Running\")))
                            ((eq status 'finished)
                             \"\")        ; \"Finished\")
                            ((eq status 'failed)
                             \"Failed\")
                            (t
                             \"\"))))
  (cond ((eq status 'running)
         (setq mode-line-process \": running\"))
        (t
         (setq mode-line-process nil))))

(defvar svn-status-mode-map nil
  \"Keymap for `svn-status-mode'.\")

(defun svn-status-set-default-mode-map ()
  (setq svn-status-mode-map (make-sparse-keymap))
  (define-key svn-status-mode-map \"a\" 'svn-add-file)
  (define-key svn-status-mode-map \"c\" 'svn-commit)
  (define-key svn-status-mode-map \"f\" 'svn-find-file)
  (define-key svn-status-mode-map [mouse-2] 'svn-mouse-find-file)
  (define-key svn-status-mode-map \"\\r\" 'svn-find-file)
  (define-key svn-status-mode-map \"g\" 'svn-refresh)
  (define-key svn-status-mode-map \"\\M-u\" 'svn-update-current)
  (define-key svn-status-mode-map \" \" 'svn-toggle-mark)
  (define-key svn-status-mode-map \"m\" 'svn-mark-forward)
  (define-key svn-status-mode-map \"\\177\" 'svn-unmark-backward)
  (define-key svn-status-mode-map \"u\" 'svn-unmark-forward)
  (define-key svn-status-mode-map \"\\M-\\177\" 'svn-unmark-all)
  (define-key svn-status-mode-map \"o\" 'svn-find-file-other-window)
  (define-key svn-status-mode-map \"r\" 'svn-remove-file)
  (define-key svn-status-mode-map \"=\" 'svn-diff-file)
  (define-key svn-status-mode-map \"p\" 'svn-previous-file)
  (define-key svn-status-mode-map \"n\" 'svn-next-file)
  (define-key svn-status-mode-map \"l\" 'svn-file-log)
  (define-key svn-status-mode-map \"s\" 'svn-refresh-file)
  (define-key svn-status-mode-map \"S\" 'svn-refresh-one)
  (define-key svn-status-mode-map \"x\" 'svn-expunge)
  (define-key svn-status-mode-map \"U\" 'svn-revert)
  (define-key svn-status-mode-map \"R\" 'svn-resolve)
  (define-key svn-status-mode-map \"M\" 'svn-move)
  (define-key svn-status-mode-map \"D\" 'svn-insert-dirs)
  (define-key svn-status-mode-map \"\\M-s\" 'svn-switch)
  (define-key svn-status-mode-map \"\\M-m\" 'svn-merge)
  (define-key svn-status-mode-map \"q\" 'bury-buffer)
  (define-key svn-status-mode-map \"?\" 'svn-status-help)
  (define-key svn-status-mode-map \"P\" 'svn-propedit)
)

(unless svn-status-mode-map (svn-status-set-default-mode-map))

(defun svn-status-mode ()
  \"Major mode for Subversion status buffers.

\\\\{svn-status-mode-map}\"
  (interactive)
  (kill-all-local-variables)
  
  (make-local-variable 'svn-files-start)
  (make-local-variable 'svn-files-stop)
  (make-local-variable 'svn-last-inserted-marker)
  (make-local-variable 'svn-last-inserted-filename)
  (make-local-variable 'svn-running)

  (set (make-local-variable 'list-buffers-directory)
       (expand-file-name \"*svn*\"))

  (setq major-mode 'svn-status-mode
        mode-name \"Svn status\")
  (use-local-map svn-status-mode-map)
  (setq goal-column svn-status-mark-col))


(defun svn-goto-file (filename)
  (let ((pos (next-single-property-change (point-min) 'svn-file)))
    (while (and pos
                (not (string= (svn-getprop pos 'file) filename)))
      (setq pos (next-single-property-change pos 'svn-file)))
    (if pos
        (goto-char pos))))

(defsubst svn-getprop (pos prop)
  (get-text-property pos (intern (concat \"svn-\" (symbol-name prop)))))

(defsubst svn-setprop (pos prop value)
  (save-excursion
    (goto-char pos)
    (beginning-of-line)
    (let ((start (point)))
      (forward-line)
      (put-text-property start (point)
                         (intern (concat \"svn-\" (symbol-name prop)))
                         value))))

(defsubst svn-file-status (pos)
  \"Get the file status for the file at POS.\"
  (char-after (+ pos svn-status-flags-col)))

(defsubst svn-prop-status (pos)
  \"Get the property status for the file at POS.\"
  (char-after (+ pos svn-status-flags-col 1)))

(defface svn-mark-face
  '((((type tty) (class color))
     (:background \"cyan\" :foreground \"black\"))
    (((class color) (background light))
     (:background \"yellow2\"))
    (((class color) (background dark))
     (:background \"darkblue\"))
    (t (:inverse-video t)))
  \"Face used to highlight marked files\"
  :group 'dsvn)

(defun svn-highlight-line (mark)
  (save-excursion
    (beginning-of-line)
    (let ((start (point)))
      (forward-line)
      (let ((end (point))
	    (prop (list 'face 'svn-mark-face)))
	(if mark
	    (add-text-properties start end prop)
	  (remove-text-properties start end prop))))))

(defun svn-set-mark (pos mark)
  \"Update the mark on the status line at POS.
Set it if MARK is non-NIL, and clear it if MARK is NIL.\"
  (save-excursion
    (let ((inhibit-read-only t))
      (goto-char (+ pos svn-status-mark-col))
      (delete-char 1)
      (insert-and-inherit (if mark \"*\" \" \"))
      (svn-highlight-line mark)
      (forward-line 1)
      (put-text-property pos (point) 'svn-mark mark))))

(defun svn-actions (&optional pred)
  \"Return a list of lists (FILE POS) to act on.
Optional argument PRED is a predicate function that is called with POS as
argument.\"
  (let ((positions ()))
    (let ((pos (next-single-property-change (point-min) 'svn-file)))
      (while pos
        (when (get-text-property pos 'svn-mark)
          (setq positions (cons pos positions)))
        (setq pos (next-single-property-change pos 'svn-file))))
    (when (null positions)
      (unless (svn-getprop (point) 'file)
        (error \"No file on this line\"))
      (setq positions (list (line-beginning-position))))

    (let ((files ()))
      (mapc (lambda (pos)
              (when (or (not pred) (funcall pred pos))
                (setq files (cons (list (get-text-property pos 'svn-file)
                                        pos)
                                  files))))
            (reverse positions))
      (reverse files))))

(defun svn-action-files (&optional pred)
  \"Return a list of file names to act on.
Optional argument PRED is a predicate function that is called with POS as
argument.\"
  (mapcar 'car (svn-actions pred)))

(defun svn-find-file (pos)
  \"Find the file under point.\"
  (interactive \"d\")
  (let ((filename (or (svn-getprop pos 'file)
                      (svn-getprop pos 'dir))))
    (if filename
        (find-file filename)
      (error \"No file on this line\"))))

(defun svn-mouse-find-file (ev)
  \"Find the file clicked on.\"
  (interactive \"e\")
  (svn-find-file (posn-point (event-start ev))))

(defun svn-find-file-other-window ()
  \"Find the file under point.\"
  (interactive)
  (let ((filename (or (svn-getprop (point) 'file)
                      (svn-getprop (point) 'dir))))
    (if filename
        (find-file-other-window filename)
      (error \"No file on this line\"))))

(defun svn-add-file ()
  \"Add the selected files to version control.\"
  (interactive)
  (let ((actions (svn-action-files
                  (lambda (pos)
                    (or (eq (svn-file-status pos) ?\\?)
                        (error \"%s is already under version control\"
			       (svn-getprop pos 'file)))))))
    (svn-run 'add actions \"Adding files\")))

(defun svn-add-filter (proc str)
  \"Output filter function for `svn add'.\"
  ;; This filter is shared with the delete command
  (save-excursion
    (set-buffer (process-buffer proc))
    (let ((inhibit-read-only t))
      (goto-char (point-max))
      (insert str)
      (goto-char svn-output-marker)
      (while (looking-at
              ;; What format is this, really?
              \"\\\\([AD]  \\\\).....  \\\\(.*\\\\)\\n\")
        (let ((status (concat (match-string 1) \"   \"))
              (filename (svn-normalise-path (match-string 2))))
          (delete-region (match-beginning 0)
                         (match-end 0))
          (svn-insert-file filename status))))))

(defun svn-can-undo-deletion-p (actions)
  \"Whether all marked files/directories can be deleted undoably\"
  (or (null actions)
      (and (let* ((fp (car actions))
		  (pos (cadr fp)))
	     ;; We can safely remove unmodified files under version control,
	     ;; and idempotently already deleted files.
	     (memq (svn-file-status pos) '(?\\  ?D)))
	   (svn-can-undo-deletion-p (cdr actions)))))

(defun svn-plural (count noun)
  (format \"%d %s\" count
	  (if (= count 1)
	      noun
	    (if (equal (substring noun -1) \"y\")
		(concat (substring noun 0 -1) \"ies\")
	      (concat noun \"s\")))))

(defun svn-delete-dir-tree (file)
  \"Remove a file or directory tree.\"
  (cond ((file-symlink-p file)
	 ;; In Emacs 21, delete-file refuses to delete a symlink to a
	 ;; directory. We work around it by overwriting the symlink
	 ;; with a dangling link first. (We can't do that in later
	 ;; Emacs versions, because make-symbolic-link may decide to
	 ;; create the link inside the old link target directory.)
	 (when (<= emacs-major-version 21)
	   (make-symbolic-link \"/a/file/that/does/not/exist\" file t))
	 (delete-file file))

	((file-directory-p file)
	 (mapc #'(lambda (f)
		   (unless (or (equal f \".\") (equal f \"..\"))
		     (svn-delete-dir-tree (concat file \"/\" f))))
	       (directory-files file))
	 (delete-directory file))

	(t 				; regular file
	 (delete-file file))))

(defun svn-remove-file ()
  \"Remove the selected files and directories.\"
  (interactive)
  (let* ((actions (svn-actions))
	 (dir-count
	  (length (delq nil (mapcar (lambda (fp)
				      (file-directory-p (car fp)))
				    actions))))
	 (nondir-count (- (length actions) dir-count))
	 (inhibit-read-only t))
    (when (or (svn-can-undo-deletion-p actions)
	      (y-or-n-p
	       (format \"Really remove %s? \"
		       (cond ((zerop dir-count)
			      (svn-plural nondir-count \"file\"))
			     ((zerop nondir-count)
			      (svn-plural dir-count \"directory\"))
			     (t
			      (concat 
			       (svn-plural dir-count \"directory\")
			       \" and \"
			       (svn-plural nondir-count \"file\")))))))
      (let ((svn-files ()))
        (mapc (lambda (fp)
		(let ((file (car fp))
		      (pos (cadr fp)))
		  (if (/= (svn-file-status pos) ?\\?)
		      (setq svn-files (cons file svn-files))
		    (svn-delete-dir-tree file)
		    (svn-remove-line pos))))
	      ;; traverse the list backwards, to keep buffer positions of
	      ;; remaining files valid
	      (reverse actions))
        (when svn-files
          (svn-run 'delete (cons \"--force\" svn-files) \"Removing files\"))))))

(defun svn-delete-filter (proc str)
  (svn-add-filter proc str))

(defun svn-revert ()
  \"Revert the selected files.\"
  (interactive)
  (let ((files (svn-action-files
                (lambda (pos)
                  (or (memq (svn-file-status pos) '(?D ?A ?M ?C ?!))
                      (memq (svn-prop-status pos) '(?D ?A ?M ?C ?!))
                      (error \"%s has no local changes\"
			     (svn-getprop pos 'file)))))))
    (when (y-or-n-p (format \"Really revert %d %s? \"
                            (length files)
                            (if (> (length files) 1)
                                \"files\"
                              \"file\")))
      (make-local-variable 'svn-reverted-files)
      (setq svn-reverted-files files)
      (svn-run 'revert files \"Reverting files\"))))

(defun svn-revert-sentinel (proc reason)
  (svn-default-sentinel proc reason)
  (if (= (process-exit-status proc) 0)
      (with-current-buffer (process-buffer proc)
        (let ((inhibit-read-only t))
          (svn-run-status-v svn-reverted-files nil))))
  (mapc #'svn-revert-if-needed svn-reverted-files))

(defun svn-resolve ()
  \"Mark the selected files as resolved.\"
  (interactive)
  (let ((files (svn-action-files
                (lambda (pos)
                  (or (memq (svn-file-status pos) '(?C ?!))
		      (memq (svn-prop-status pos) '(?C ?!))
		      (error \"%s has no conflicts\"
			     (svn-getprop pos 'file)))))))
    (make-local-variable 'svn-resolved-files)
    (setq svn-resolved-files files)
    (svn-run 'resolved files \"Marking resolved files\")))

(defun svn-resolved-sentinel (proc reason)
  (svn-default-sentinel proc reason)
  (if (= (process-exit-status proc) 0)
      (with-current-buffer (process-buffer proc)
        (let ((inhibit-read-only t))
          (svn-run-status-v svn-resolved-files nil)))))

(defun svn-move ()
  \"Move/rename the selected file.\"
  (interactive)
  (let ((files (svn-action-files)))
    (if (/= (length files) 1)
        (error \"Can only rename one file at a time\"))
    (when (file-directory-p (car files))
      (error \"Can only move files\"))
    (let* ((src (car files))
           (dir (file-name-directory src))
           (dst (completing-read \"Move to: \"
                                 'svn-complete-url
                                 nil nil
                                 dir
                                 'svn-switch-history)))
      (svn-run 'move (list src dst) \"Moving file\"))))

(defun svn-move-filter (proc str)
  (save-excursion
    (set-buffer (process-buffer proc))
    (let ((inhibit-read-only t))
      (goto-char (point-max))
      (insert str)
      (goto-char svn-output-marker)
      (while (looking-at
              \"\\\\([AD]     \\\\)    \\\\(.*\\\\)\\n\")
        (let ((status (match-string 1))
              (filename (svn-normalise-path (match-string 2))))
          (if (string= status \"A     \")
              (setq status \"A  +  \"))
          (delete-region (match-beginning 0)
                         (match-end 0))
          (svn-insert-file filename status))))))

(defun svn-toggle-file-mark ()
  \"Toggle the mark for the file under point.\"
  (let ((mark (svn-getprop (point) 'mark)))
    (svn-set-mark (line-beginning-position) (not mark))))

(defun svn-toggle-mark ()
  \"Toggle the mark for the file under point, or files in the dir under point.\"
  (interactive)
  (cond ((svn-getprop (point) 'file)
	 (svn-toggle-file-mark))
	((svn-getprop (point) 'dir)
	 (let ((dir (svn-getprop (point) 'dir))
	       file)
	   (save-excursion
	     (forward-line 1)
	     (setq file (svn-getprop (point) 'file))
	     (while (and file
			 (svn-in-dir-p dir file))
	       (svn-toggle-file-mark)
	       (forward-line 1)
	       (setq file (svn-getprop (point) 'file))))))))

(defun svn-change-mark-forward (mark)
  \"Set or clear the mark for the file under point and move to next line.\"
  (cond ((svn-getprop (point) 'file)
         (svn-set-mark (line-beginning-position) mark)
         (let (pos (svn-next-file-pos))
           (if pos
               (svn-next-file 1)
             (next-line 1))))
        ((svn-getprop (point) 'dir)
         (let ((dir (svn-getprop (point) 'dir))
               file)
           (forward-line 1)
           (setq file (svn-getprop (point) 'file))
           (while (and file 
                       (svn-in-dir-p dir file))
             (svn-set-mark (point) mark)
             (forward-line 1)
             (setq file (svn-getprop (point) 'file)))
           (move-to-column goal-column)))
        (t
         (error \"No file on line\"))))

(defun svn-mark-forward ()
  \"Set the mark for the file under point and move to next line.\"
  (interactive)
  (svn-change-mark-forward t))

(defun svn-mark-backward ()
  \"Set the mark for the file under point and move to next line.\"
  (interactive)
  (svn-previous-file 1)
  (svn-set-mark (line-beginning-position) t))

(defun svn-unmark-forward ()
  \"Unset the mark for the file on the previous line.\"
  (interactive)
  (svn-change-mark-forward nil))

(defun svn-unmark-backward ()
  \"Unset the mark for the file on the previous line.\"
  (interactive)
  (svn-previous-file 1)
  (svn-set-mark (line-beginning-position) nil))

(defun svn-unmark-all ()
  \"Unset the mark for the file on the previous line.\"
  (interactive)
  (let ((pos-list (mapcar 'cadr (svn-actions))))
    (while pos-list
      (svn-set-mark (car pos-list) nil)
      (setq pos-list (cdr pos-list)))))

(defun svn-diff-file (all)
  \"Show diff for the file under point.
If the prefix argument ALL is non-NIL, show diff for all selected
files instead.\"
  (interactive \"P\")
  (let ((files (if all
                   (svn-action-files)
                 (list (or (svn-getprop (point) 'file)
                           (svn-getprop (point) 'dir)
                           (error \"No file on line\"))))))
    (unless (svn-run-with-output \"diff\" (append svn-diff-args files)
				 'diff-mode)
      (message \"No difference found\"))))

(defun svn-previous-file (arg)
  \"Move to the ARGth previous line containing file information.\"
  (interactive \"p\")
  (let ((pos (previous-single-property-change (point) 'svn-file)))
    (if (not pos)
        (error \"No previous file\"))

    ;; Usually we have just found the beginning of the current line
    (when (string= (get-text-property pos 'svn-file)
                   (svn-getprop (point) 'file))
      (setq pos (previous-single-property-change pos 'svn-file))
      (if (not pos)
          (error \"No previous file\")))

    ;; Skip lines that don't contain file info
    (when (null (get-text-property pos 'svn-file))
      (setq pos (previous-single-property-change pos 'svn-file))
      (if (not pos)
          (error \"No previous file\")))

    (goto-char (+ pos goal-column))
    (if (> arg 1)
        (svn-previous-file (1- arg)))))

(defun svn-next-file-pos ()
  (let ((pos (next-single-property-change (point) 'svn-file)))
    (and pos
	 ;; Skip lines that don't contain file info
	 (if (null (get-text-property pos 'svn-file))
	     (next-single-property-change pos 'svn-file)
	   pos))))

(defun svn-next-file (arg)
  \"Move to the ARGth next line containing file information.\"
  (interactive \"p\")
  (let ((pos (svn-next-file-pos)))
    (if pos
        (goto-char (+ pos goal-column))
      ;; Allow stepping past last file
      (if (< (point) svn-files-stop)
          (next-line 1)
        (error \"No next file\")))

    (if (> arg 1)
        (svn-next-file (1- arg)))))

(defun svn-expunge ()
  \"Remove entried for unmodified files.\"
  (interactive)
  (save-excursion
    (let ((inhibit-read-only t)
          (last-dir \"/\"))
      (goto-char svn-files-stop)
      (forward-line -1)
      (while (>= (point) svn-files-start)
        (let ((dir (svn-getprop (point) 'dir)))
          (if dir
              (progn
                (when last-dir
                  ;; If this is a superdirectory, leave it
                  (unless (and (> (length dir) (length last-dir))
                               (string= (substring dir 0 (length last-dir))
                                        last-dir))
                    (svn-remove-line (point))))
                (setq last-dir dir))
            (let ((file-status (svn-file-status (point)))
                  (prop-status (svn-prop-status (point))))
              (if (and (memq file-status '(?\\  ?I ?X))
                       (eq prop-status ?\\ ))
                  (svn-remove-line (point))
                (setq last-dir nil)))))
        (forward-line -1))))
  (move-to-column goal-column)
  (setq svn-last-inserted-filename nil))


(defun svn-format-help-column (table)
  (mapcar (lambda (cmd-desc)
	       (let ((cmd (car cmd-desc))
		     (desc (cadr cmd-desc)))
		 (format \"%-4s %s\"
			 (key-description (car (where-is-internal cmd)))
			 desc)))
	     table))

(defun svn-merge-columns-list (columns fmt)
  (let ((first-lines (mapcar #'car columns)))
    (and (eval `(or ,@first-lines))
	 (cons (mapconcat (lambda (str) (format fmt (or str \"\")))
			  first-lines \" | \")
	       (svn-merge-columns-list (mapcar #'cdr columns) fmt)))))

(defun svn-merge-columns (columns width)
  (mapconcat #'identity
	     (svn-merge-columns-list columns (format \"%%-%ds\" width))
	     \"\\n\"))

(defun svn-status-help ()
  \"Display keyboard help for the svn-status buffer.\"
  (interactive)
  (message (svn-merge-columns
	    (list (svn-format-help-column
		   '((svn-commit \"commit marked files\")
		     (svn-add-file \"add marked files\")
		     (svn-remove-file \"remove marked files\")
		     (svn-revert \"revert marked files\")
		     (svn-update-current \"update working copy\")
		     (svn-resolve \"resolve conflicts\")
		     (svn-move \"rename/move files\")
		     (svn-switch \"switch working tree\")
		     (svn-merge \"merge into WC\")
		     (svn-propedit \"edit properties\")))
		  (svn-format-help-column
		   '((svn-mark-forward \"mark and go down\")
		     (svn-unmark-backward \"go up and unmark\")
		     (svn-unmark-forward  \"unmark and go down\")
		     (svn-toggle-mark \"toggle mark\")
		     (svn-unmark-all \"unmark all\")))
		  (svn-format-help-column
		   '((svn-find-file \"visit file\")
		     (svn-find-file-other-window \"visit file other win\")
		     (svn-diff-file \"show file diff\")
		     (svn-file-log \"show file log\")
		     (svn-refresh \"refresh all files\")
		     (svn-refresh-file \"refresh marked files\")
		     (svn-refresh-one \"refresh named file\")
		     (svn-expunge \"expunge unchanged\"))))
	    24)))

;;; Hooks

(defun svn-buffer-list ()
  \"Return a list of svn status buffers.\"
  (let ((buffers ())
        (all-buffers (buffer-list)))
    (while all-buffers
      (let ((buf (car all-buffers)))
        (if (eq (with-current-buffer buf major-mode)
                'svn-status-mode)
            (setq buffers (cons buf buffers))))
      (setq all-buffers (cdr all-buffers)))
    buffers))

(defun svn-update-status-flag (pos flag &optional prop-flag)
  \"Update the status flag column for file at position POS.
Argument FLAG is the character to use.\"
  (save-excursion
    (goto-char (+ pos svn-status-flags-col))
    (insert-and-inherit flag)
    (delete-char 1)
    (when prop-flag
      (insert-and-inherit prop-flag)
      (delete-char 1))))

(defun svn-update-status-msg (pos msg)
  \"Update the message column for file at position POS.
Argument MSG is the character to use.\"
  (save-excursion
    (goto-char (+ pos svn-status-msg-col))
    (delete-char 9)
    (insert-and-inherit (format \"%-9s\" msg))))

(defun svn-update-conflict-msg (pos msg)
  (save-excursion
    (let ((filename (svn-getprop pos 'file)))
      (goto-char (+ pos svn-status-file-col (length filename)))
      (delete-char (- (line-end-position) (point)))
      (insert-and-inherit (concat \" -- \" msg)))))

(defun svn-foreach-svn-buffer (file-name function)
  \"Call FUNCTION for each svn status buffer that contains FILE-NAME.
The current buffer will be the svn status buffer, and the arguments to
the function is the local form of the filename and the buffer position
where the file information is.\"
  (let* ((svn-buffers (svn-buffer-list))
         (inhibit-read-only t)
	 (file-path (file-truename file-name)))
    (while svn-buffers
      (with-current-buffer (car svn-buffers)
        (let ((dir (file-truename default-directory)))
          (when (and (>= (length file-path) (length dir))
                     (string= dir (substring file-path 0 (length dir))))
            (let* ((local-file-name (substring file-path (length dir)))
                   (file-pos (svn-file-pos local-file-name)))
              (funcall function local-file-name file-pos)))))
      (setq svn-buffers (cdr svn-buffers)))))

(defun svn-after-save ()
  \"Update svn status buffer when saving a file.\"
  (svn-foreach-svn-buffer
   (buffer-file-name)
   (lambda (local-file-name file-pos)
     (if file-pos
         (let ((old-status (svn-file-status file-pos)))
           (when (= old-status ?\\ )
             (svn-update-status-flag file-pos ?M))
           (svn-update-status-msg file-pos \"\"))
       (svn-run-status-v (list local-file-name) nil))))
  nil)

(add-hook 'after-save-hook 'svn-after-save)

(defun svn-after-commit ()
  \"Update svn status buffer when committing a file from `vc-mode'.\"
  (svn-foreach-svn-buffer
   (buffer-file-name)
   (lambda (local-file-name file-pos)
     (if file-pos
         (progn
           (svn-update-status-flag file-pos ?\\ )
           (svn-update-status-msg file-pos \"Committed\"))
       (svn-insert-file local-file-name \"      \" \"Committed\"))))
  nil)

(add-hook 'vc-checkin-hook 'svn-after-commit)

(defun svn-after-vc-command (command file-or-files flags)
  (when (and (string= command \"svn\")
             ;; Ignore command that do not modify file
             (not (member (car flags) '(\"ann\" \"annotate\" \"blame\"
                                        \"diff\" \"praise\" \"status\"))))
    (mapc (lambda (file)
	    (svn-foreach-svn-buffer
	     file
	     (lambda (local-file-name file-pos)
	       (svn-refresh-item local-file-name t))))
	  ;; In emacs versions prior to 23, the argument is a single file.
	  (if (listp file-or-files)
	      file-or-files
	    (list file-or-files)))))

(add-hook 'vc-post-command-functions 'svn-after-vc-command)

(setq uniquify-list-buffers-directory-modes
      (cons 'svn-status-mode
            uniquify-list-buffers-directory-modes))

(provide 'dsvn)

;;; dsvn.el ends here
"]) (drupal-spell . [(20130520 955) nil "Aspell extra dictionary for Drupal" tar ";;; Commentary:

;; An extra dictionary for aspell with Drupal specific terminology.

"]) (drupal-mode . [(20140113 1441) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar ";;; Commentary:

;; Drupal mode is an advanced minor mode for developing in Drupal.

;; Drupal mode is based on top of PHP mode and defines among other
;; things indentation etc. to match Drupal Coding Standards.

"]) (dropdown-list . [(20120329 1636) nil "Drop-down menu interface" single ";;; Commentary:
;;
;;  According to Jaeyoun Chung, \"overlay code stolen from company-mode.el.\"
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (dropbox . [(20130513 1537) ((json (1 2)) (oauth (1 0 3))) "Emacs backend for dropbox" single ";;; Commentary:

;; This package allows one to access files stored in Dropbox,
;; effectively acting as an Emacs Dropbox client and SDK.

(provide 'dropbox)

;;; TODO
;; - Return permissions other than -rwx------ if folder has shares
;; - dropbox-handle-set-visited-file-modtime might need actual implementation
;; - Switching to deleted buffer on file open
;; - Implement `replace` on insert-file-contents
;; - Implement `lockname` and `mustbenew` on write-region
;; - Implement perma-trashing files
;; - Make RECURSIVE on DELETE-DIRECTORY work lock-free using /sync/batch
;; - Figure out why TRASH is not passed to DELETE-DIRECTORY
;; - \"This file has auto-save data\"
;; - Use locale on authenticating the app (oauth library has issues)
;; - Request confirmation properly for OK-IF-ALREADY-EXISTS in move and copy
;; - DIRED-COMPRESS-FILE is not atomic.  Use /sync/batch
;; - Pop open help page on first use of a /db: path

;; Suggestion to developers: M-x occur \";;;\"

(require 'oauth)
(require 'json)

;;; Customization Options

(defgroup dropbox nil
  \"The Dropbox Emacs Client and SDK\"
  :prefix \"dropbox-\"
  :group 'file)

(defcustom dropbox-token-file \"~/.emacs.d/dropbox-token\"
  \"The file where dropbox.el will store your Dropbox credentials\"
  :group 'dropbox
  :type 'string)

(defcustom dropbox-locale \"en_US\"
  \"The locale in which to return file sizes and times\"
  :group 'dropbox
  :type 'string)

(defcustom dropbox-cache-timeout 60
  \"The duration of time, in seconds, for which dropbox.el will
cache metadata for files.  Setting it longer makes dropbox.el
faster, but means that you will have old data if multiple clients
concurrently modify your dropbox.\"
  :group 'dropbox
  :type 'integer)

(defcustom dropbox-consumer-key \"\"
  \"The dropbox.el consumer key.  Dropbox uses OAuth 1.0, which
relies upon a secret known only to the app that accesses Dropbox.
Run `dropbox-connect` to learn more about how to set up dropbox.el.\"
  :group 'dropbox
  :type 'string)

(defcustom dropbox-consumer-secret \"\"
  \"The dropbox.el consumer secret.  Dropbox uses OAuth 1.0, which
relies upon a secret known only to the app that accesses Dropbox.
Run `dropbox-connect` to learn more about how to set up dropbox.el.\"
  :group 'dropbox
  :type 'string)

(defcustom dropbox-verbose nil
  \"Whether dropbox.el should `message` debug messages.  Helpful for
debugging but otherwise very intrusive.\"
  :group 'dropbox
  :type 'boolean)

; OAuth URL Endpoints
(defvar dropbox-request-url       \"https://api.dropbox.com/1/oauth/request_token\")
(defvar dropbox-access-url        \"https://api.dropbox.com/1/oauth/access_token\")
(defvar dropbox-authorization-url \"https://api.dropbox.com/1/oauth/authorize\")

; Dropbox URL Endpoint hosts
(defvar dropbox-api-host \"api.dropbox.com\")
(defvar dropbox-api-content-host \"api-content.dropbox.com\")
(defvar dropbox-content-apis '(\"files\" \"files_put\" \"thumbnails\"
                               \"commit_chunked_upload\"))
; Locale information
(defvar dropbox-get-not-locale '(\"files\" \"copy_ref\" \"thumbnails\"))
(defvar dropbox-post-not-locale '(\"chunked_upload\"))


; Do not edit the prefix -- lots of hard-coded regexes everywhere
(defvar dropbox-prefix \"/db:\")
(defvar dropbox-cache '())
(defvar dropbox-access-token nil)

;;; Utilities

(defun dropbox-message (fmt-string &rest args)
  (when dropbox-verbose (apply 'message fmt-string args)))

(defconst url-non-sanitized-chars
  (delete ?~ (append url-unreserved-chars '(?/ ?:))))

(defun url-hexify-url (string)
  \"Return a new string that is STRING URI-encoded.
First, STRING is converted to utf-8, if necessary.  Then, for each
character in the utf-8 string, those found in `url-non-sanitized-chars'
are left as-is, all others are represented as a three-character
string: \\\"%\\\" followed by two lowercase hex digits.\"
  (mapconcat (lambda (byte)
               (if (memq byte url-non-sanitized-chars)
                   (char-to-string byte)
                 (format \"%%%02x\" byte)))
             (if (multibyte-string-p string)
                 (encode-coding-string string 'utf-8)
               string)
             \"\"))

(defun dropbox-strip-final-slash (path)
  (cond
   ((null path)
    path)
   ((string= path \"\")
    path)
   ((= (aref path (- (length path) 1)) 47)
    (substring path 0 -1))
   (t path)))

(defmacro with-default-directory (dir &rest body)
  (declare (indent 1))
  `(let ((default-directory ,dir))
       ,@body))

;;; Caching for the Dropbox API

(defun dropbox-cached (name path &optional no-expire)
  (let ((cached (assoc (cons name (dropbox-strip-final-slash path))
                       dropbox-cache)))
    (if (and cached
             (or no-expire
                 (time-less-p (time-subtract (current-time) (cadr cached))
                              `(0 ,dropbox-cache-timeout 0))))
        (cddr cached)
      nil)))

(defun dropbox-cache (name path value)
  (setf path (dropbox-strip-final-slash path))
  (let ((cached (assoc (cons name path) dropbox-cache)))
    (if cached
        (setf (cdr cached) (cons (current-time) value)))
    (setf dropbox-cache (cons `((,name . ,path) . (,(current-time) . ,value))
                              dropbox-cache))

    (if (and (string= name \"metadata\")
             (not (dropbox-error-p value))
             (assoc 'contents value))
        (loop for ent across (cdr (assoc 'contents value))
              for path = (concat dropbox-prefix
                                 (string-strip-prefix \"/\" (cdr (assoc 'path ent))))
              do (dropbox-cache \"metadata\" path ent)))

    value))

(defun dropbox-un-cache (name path)
  (setf dropbox-cache (remove-if '(lambda (x) (equal (car x) (cons name path)))
                                 dropbox-cache)))

(defun dropbox-uncache ()
  (interactive)

  (setf dropbox-cache '()))

;;; Requesting URLs

(defun dropbox-url (name &optional path)
  (let ((ppath (concat \"https://\"
                       (if (member name dropbox-content-apis)
                           dropbox-api-content-host
                         dropbox-api-host)
                       \"/1/\" name)))
    (if path
        (concat ppath \"/dropbox/\" (url-hexify-url (string-strip-prefix \"/\" (dropbox-strip-prefix path))))
      ppath)))

(defvar curl-tracefile nil)

(defun dropbox-get (name &optional path)
  (dropbox-message \"Requesting %s for %s\" name path)
  (with-default-directory \"~/\"
    (let ((extra-curl-args (if (and curl-tracefile
                                    (not extra-curl-args))
                               `(\"--trace\" ,curl-tracefile)
                               extra-curl-args))
          (oauth-nonce-function (function oauth-internal-make-nonce)))

      (oauth-fetch-url dropbox-access-token
                       (concat (dropbox-url name path)
                               (if (not (member name dropbox-get-not-locale))
                                   (concat \"?locale=\" dropbox-locale) \"\"))))))

(defun dropbox-get-http-code (buf)
  (save-excursion
    (with-current-buffer buf
      (beginning-of-buffer)
      (end-of-line)
      (let ((rline (buffer-substring (point-min) (point))))
        (string-match (concat \"^\\\\(HTTP/[\\\\.[:digit:]]+\\\\)\" \"[[:space:]]+\"
                              \"\\\\([[:digit:]]\\\\{3\\\\}\\\\)\" \"[[:space:]]+\"
                              \"\\\\(.*\\\\)$\")
                      rline)
        (list (match-string 1 rline) (string-to-number (match-string 2 rline))
              (match-string 3 rline))))))

(defun dropbox-http-success-p (code)
  (and (>= (cadr code) 200) (< (cadr code) 300)))

(defun dropbox-http-down-p (code)
  (and (>= (cadr code) 500) (< (cadr code) 600)))

(defun dropbox-error-p (json)
  (assoc 'error json))

(defun dropbox-get-json (name &optional path want-contents)
  \"Get JSON for the NAME endpoint for path PATH.  The 'contents
field is not guaranteed to be present unless WANT-CONTENTS is
non-nil.\"

  (let ((cached (dropbox-cached name path)))
    (when (and want-contents (not (assoc 'contents cached)))
      (setf cached nil))
    (or cached
        (with-current-buffer (dropbox-get name path)
          (let ((code (dropbox-get-http-code (current-buffer))))
            (if (dropbox-http-down-p code)
                (error \"Dropbox seems to be having problems: %d %s\"
                       (cadr code) (caddr code))))
          (beginning-of-line)
          (let ((json-false nil))
            (dropbox-cache name path (json-read)))))))

(defun dropbox-post (name &optional path args)
  (dropbox-un-cache name path)
  (dropbox-message \"Requesting %s for %s\" name path)

  (let* ((oauth-nonce-function (function oauth-internal-make-nonce))
         (buf (with-default-directory \"~/\"
               (oauth-post-url dropbox-access-token
                               (concat (dropbox-url name path)
                                       (if (not (member name dropbox-post-not-locale))
                                           (concat \"?locale=\" dropbox-locale) \"\"))
                               args))))

    (with-current-buffer buf
      (let ((code (dropbox-get-http-code buf)))
        (if (dropbox-http-down-p code)
            (error \"Dropbox seems to be having problems: %d %s\"
                   (cadr code) (caddr code))))
      (beginning-of-line)
      (let ((json-false nil))
        (json-read)))))

;;; Authentication

(defun dropbox-authenticate ()
  \"Get authentication token for dropbox\"

  (if (file-exists-p dropbox-token-file)
      (save-excursion
        (find-file dropbox-token-file)
        (let ((str (buffer-substring (point-min) (point-max))))
          (if (string-match \"\\\\([^:]*\\\\):\\\\(.*\\\\)\" str)
              (setq dropbox-access-token
                    (make-oauth-access-token
                     :consumer-key dropbox-consumer-key
                     :consumer-secret dropbox-consumer-secret
                     :auth-t (make-oauth-t
                              :token (match-string 1 str)
                              :token-secret (match-string 2 str))))))
        (save-buffer)
        (kill-this-buffer)))
  (unless dropbox-access-token ; Oh, we need to get a token
    (setq dropbox-access-token
          (let ((oauth-nonce-function (function oauth-internal-make-nonce)))
            (oauth-authorize-app dropbox-consumer-key dropbox-consumer-secret
                                 dropbox-request-url dropbox-access-url
                                 dropbox-authorization-url)))
    (save-excursion
      (find-file dropbox-token-file)
      (end-of-buffer)
      (let ((token (oauth-access-token-auth-t dropbox-access-token)))
        (insert (format \"%s:%s\\n\"
                        (oauth-t-token token)
                        (oauth-t-token-secret token))))
      (save-buffer)
      (kill-this-buffer)))
  dropbox-access-token)

;;; Hooking into Dropbox

(defun dropbox-connect ()
  \"Connect to Dropbox, hacking the \\\"/db:\\\" syntax into `find-file`.\"
  (interactive)

  (dropbox-authenticate)
  (setf file-name-handler-alist
        (cons '(\"\\\\`/db:\" . dropbox-handler) file-name-handler-alist)))

(defun dropbox-handler (operation &rest args)
  \"Handles IO operations to Dropbox files\"

  (if (not (eq operation 'file-remote-p))
      (dropbox-message \"Dropbox'ing operation %s for %s\" operation args))

  (let ((handler (cdr (assoc operation dropbox-handler-alist))))
    (if handler
        (let ((retval (apply handler args)))
          (if (not (eq operation 'file-remote-p)) (dropbox-message \"... returning %s\" retval))
          retval)
      (let* ((inhibit-file-name-handlers
              `(dropbox-handler
                tramp-file-name-handler
                tramp-vc-file-name-handler
                tramp-completion-file-name-handler
                . ,inhibit-file-name-handlers))
             (inhibit-file-name-operation operation)
             (retval (apply operation args)))
        (dropbox-message \"... fall-through returning %s\" retval)
        retval))))

(defconst dropbox-handler-alist
  '(; Path parsing
    (file-name-directory . dropbox-handle-file-name-directory)
    (file-name-nondirectory . dropbox-handle-file-name-nondirectory)
    (expand-file-name . dropbox-handle-expand-file-name)
    (file-truename . dropbox-handle-file-truename)
    (substitute-in-file-name . dropbox-handle-substitute-in-file-name)

    (directory-file-name . dropbox-handle-directory-file-name)
    (file-name-as-directory . dropbox-handle-file-name-as-directory)
    (unhandled-file-name-directory . dropbox-handle-unhandled-file-name-directory)
    (find-backup-file-name . dropbox-handle-find-backup-file-name)
    (make-auto-save-file-name . dropbox-handle-make-auto-save-file-name)

    ; Predicates
    (file-directory-p . dropbox-handle-file-directory-p)
    (file-executable-p . dropbox-handle-file-executable-p)
    (file-exists-p . dropbox-handle-file-exists-p)
    (file-newer-than-file-p . dropbox-handle-file-newer-than-file-p)
    (file-ownership-preserved-p . dropbox-handle-file-ownership-preserved-p)
    (file-readable-p . dropbox-handle-file-readable-p)
    (file-regular-p . dropbox-handle-file-regular-p)
    (file-remote-p . dropbox-handle-file-remote-p)
    (file-symlink-p . dropbox-handle-file-symlink-p)
    (file-writable-p . dropbox-handle-file-writable-p)
    (vc-registered . dropbox-handle-vc-registered)

    ; Attributes
    (file-attributes . dropbox-handle-file-attributes)
    (file-modes . dropbox-handle-file-modes)
    (set-file-modes . dropbox-handle-set-file-modes)
    (file-selinux-context . dropbox-handle-file-selinux-context)
    (set-file-selinux-context . dropbox-handle-set-file-selinux-context)

    (set-visited-file-modtime . dropbox-handle-set-visited-file-modtime)
    (verify-visited-file-modtime . dropbox-handle-verify-visited-file-modtime)
    (set-file-times . dropbox-handle-set-file-times)

    ; Directory Contents
    (directory-files . dropbox-handle-directory-files)
    (directory-files-and-attributes
     . dropbox-handle-directory-files-and-attributes)
    (file-name-all-completions . dropbox-handle-file-name-all-completions)
    (file-name-completion . dropbox-handle-file-name-completion)
    (executable-find . dropbox-handle-executable-find)

    (make-directory . dropbox-handle-make-directory)
    (delete-file . dropbox-handle-delete-file)
    (delete-directory . dropbox-handle-delete-directory)
    (copy-file . dropbox-handle-copy-file)
    (copy-directory . dropbox-handle-copy-directory)
    (rename-file . dropbox-handle-rename-file)
    (make-symbolic-link . dropbox-handle-make-symbolic-link)
    (add-name-to-file . dropbox-handle-add-name-to-file)

    (insert-directory . dropbox-handle-insert-directory)
    (dired-insert-directory . dropbox-handle-dired-insert-directory)
    (dired-uncache . dropbox-handle-dired-uncache)

    ; File Contents
    (insert-file-contents . dropbox-handle-insert-file-contents)
    (file-local-copy . dropbox-handle-file-local-copy)
    (dired-compress-file . dropbox-handle-dired-compress-file)
    (write-region . dropbox-handle-write-region)

    ; Misc
    (load . dropbox-handle-load)

    (process-file . dropbox-handle-process-file)
    (start-file-process . dropbox-handle-start-file-process)
    (shell-command . dropbox-handle-shell-command)))

;;; Path Parsing

(defun dropbox-handle-file-name-directory (filename)
  \"Return the directory component in file name FILENAME\"

  (if (string-match \"^\\\\(/db:.*/\\\\).*$\" filename)
      (match-string 1 filename)
    dropbox-prefix))

(defun dropbox-strip-prefix (filename)
  (substring filename 4))

(defun dropbox-handle-file-name-nondirectory (filename)
  \"Return the filename component in file name FILENAME\"

  (cond
   ((string-match \"^/db:.*/\\\\(.*\\\\)$\" filename)
    (match-string 1 filename))
   (t (substring filename 4))))

(defun dropbox-handle-expand-file-name (filename &optional default-directory)
  \"Return the canonicalized, absolute version of FILENAME\"

  (if (or (file-name-absolute-p filename)
          (not (dropbox-file-p default-directory)))
      filename
    (concat
     dropbox-prefix
     (substring
      (expand-file-name filename
                        (concat \"/\" (dropbox-strip-prefix default-directory)))
      1))))

(defun dropbox-handle-file-truename (filename)
  filename)

(defun dropbox-handle-substitute-in-file-name (filename)
  \"Replace slashes with one slash\"

  (replace-regexp-in-string \".*//+\" \"/\" filename))

(defun dropbox-handle-directory-file-name (directory)
  \"Remove the final slash from a directory name\"

  (if (eq (aref directory (1- (length directory))) ?/)
      (substring directory 0 -1)
    directory))

(defun dropbox-handle-file-name-as-directory (directory)
  \"Remove the final slash from a directory name\"

  (if (and
       (not (eq (aref directory (1- (length directory))) ?/))
       (not (string= directory dropbox-prefix)))
      (concat directory \"/\")
    directory))

(defun dropbox-handle-find-backup-file-name (fn)
  nil)

(defun dropbox-handle-make-auto-save-file-name ()
  (make-temp-file (file-name-nondirectory buffer-file-name)))

(defun dropbox-handle-unhandled-file-name-directory (filename)
  dropbox-prefix)

;;; Predicates

(defun dropbox-file-p (filename)
  \"Return t if file FILENAME is a Dropbox file (i.e. starts with `dropbox-prefix')\"

  (string-prefix-p dropbox-prefix filename))

(defun dropbox-handle-file-directory-p (filename)
  \"Return t if file FILENAME is a directory, too\"

  (if (or (string= filename dropbox-prefix)
          (string= filename (concat dropbox-prefix \"/\")))
      t
    (let ((resp (dropbox-get-json \"metadata\" filename)))
      (if (dropbox-error-p resp)
          nil
        (and (cdr (assoc 'is_dir resp)) (not (assoc 'is_deleted resp)))))))

(defun dropbox-parent (filename)
  \"Get the name of the directory containing FILENAME, even if
FILENAME names a directory\"

  (file-name-directory (directory-file-name filename)))

(defun dropbox-handle-file-executable-p (filename)
  (file-directory-p filename))

(defun dropbox-handle-file-exists-p (filename)
  \"Return t if file FILENAME exists\"

  (let ((resp
         (dropbox-get-json \"metadata\" filename)))
    (and (not (dropbox-error-p resp))
         (not (assoc 'is_deleted resp)))))

(defun dropbox-handle-file-newer-than-file-p (file1 file2)
  ; these files might not both be dropbox files
  (let ((file1attr (file-attributes file1))
	(file2attr (file-attributes file2)))
    (let ((time1 (if file1attr (elt file1attr 4) nil))
	  (time2 (if file2attr (elt file2attr 4) nil)))
      (if time1
	  (if time2
	      (time-less-p time2 time1)
	    t)
	nil))))

(defun dropbox-handle-file-owner-preserved-p (file)
  \"Files have only one owner in Dropbox, so ownership is always preserved\"
  t)

(defun dropbox-handle-file-readable-p (filename)
  \"Files in Dropbox are always readable\"
  t)

(defun dropbox-handle-file-regular-p (file)
  \"Files in Dropbox are always regular; directories are not\"
  (not (file-directory-p file)))

(defun dropbox-handle-file-remote-p (file &optional identification connected)
  \"Test whether FILE is a remote file\"

  (dropbox-message file)

  (if (and connected (not dropbox-access-token))
      nil
    (case identification
      ((method) dropbox-prefix)
      ((user) \"\")
      ((host) \"\")
      ((localname) (dropbox-strip-prefix file))
      (t dropbox-prefix))))

(defun dropbox-handle-file-symlink-p (filename)
  nil)

(defun dropbox-handle-file-writable-p (filename)
  t)

(defun dropbox-handle-vc-registered (file)
  nil)

;;; Attributes

(defun dropbox-handle-file-attributes (filename &optional id-format)
  (let ((resp
         (dropbox-get-json \"metadata\" filename)))
    (if (dropbox-error-p resp)
        nil
      (let ((date (date-to-time (cdr (assoc 'modified resp)))))
      (list (cdr (assoc 'is_dir resp)) ; Is dir?
            1 ; Number of links
            0 ; UID
            0 ; GID
            date ; atime
            date ; mtime
            date ; ctime
            (cdr (assoc 'bytes resp)) ; size in bytes
            ; TODO figure out if folder has any shares
            (concat (if (cdr (assoc 'is_dir resp)) \"d\" \"-\") \"rwx------\") ; perms
            nil
            0
            0)))))

(defun dropbox-handle-file-modes (filename)
  448) ; 448 = 0b111000000 is rwx------

(defun dropbox-handle-set-file-modes (filename mode)
  nil)

(defun dropbox-handle-set-file-times (filename &optional timestamp)
  nil)

(defun dropbox-handle-set-visited-file-modtime (&optional time-list)
  ; TODO: this might need to be implemented
  nil)

(defun dropbox-handle-file-selinux-context (filename)
  \"Report that files in Dropbox have no SELinux context\"
  '(nil nil nil nil))

(defun dropbox-handle-file-selinux-context (filename)
  \"Fail to set FILENAME's SELinux context\"
  nil)

(defun dropbox-handle-verify-visited-file-modtile (&optional buf)
  \"Check that the file BUF is visiting hasn't changed since BUF was opened.\"

  (let* (metadata new-metadata)
    (setf metadata (dropbox-cached \"metadata\" (buffer-file-name buf)))
    (dropbox-un-cache \"metadata\" (buffer-file-name buf))
    (setf newmetadata (dropbox-get-json \"metadata\" (buffer-file-name buf)))

    (or (dropbox-error-p newmetadata)
        (string= (cdr (assoc 'rev metadata)) (cdr (assoc 'rev newmetadata))))))

;;; Directory Contents

(defun string-strip-prefix (prefix str)
  (if (string-prefix-p prefix str)
      (substring str (length prefix))
      str))

(defun dropbox-extract-fname (file path &optional full)
  (let ((fname (string-strip-prefix \"/\" (cdr (assoc 'path file)))))
    (if (cdr (assoc 'is_dir file)) (setf fname (concat fname \"/\")))
    (if full (concat dropbox-prefix fname)
      (string-strip-prefix \"/\" (string-strip-prefix path fname)))))

(defun dropbox-handle-directory-files (directory &optional full match nosort)
  \"Return a list of names of files in DIRECTORY.
There are three optional arguments:
If FULL is non-nil, return absolute file names.  Otherwise return names
 that are relative to the specified directory.
If MATCH is non-nil, mention only file names that match the regexp MATCH.
If NOSORT is non-nil, the list is not sorted--its order is unpredictable.
Otherwise, the list returned is sorted with `string-lessp'.
NOSORT is useful if you plan to sort the result yourself.\"

  (let* ((path (dropbox-strip-prefix directory))
	 (metadata (dropbox-get-json \"metadata\" directory t)) ; want-contents: t
	 (unsorted
	  (if (cdr (assoc 'is_dir metadata))
	      (loop for file across (cdr (assoc 'contents metadata))
		    for fname = (dropbox-extract-fname file path full)
		    if (or (null match) (string-match match fname))
		    collect fname)
	    nil)))
    (if nosort unsorted (sort unsorted 'string-lessp))))

(defun dropbox-handle-directory-files-and-attributes (directory &optional full match nosort id-format)
  (let ((files (directory-files directory full match nosort)))
    (list*
     (cons \".\" (file-attributes directory))
     (cons \"..\" (file-attributes (dropbox-parent directory)))
     (loop for file in files
           for attrs = (file-attributes (concat (file-name-as-directory directory)
                                                file) id-format)
           collect (cons file attrs)))))

(defun dropbox-handle-file-name-all-completions (file directory &optional predicate)
  \"Complete file name FILE in directory DIRECTORY.
   Returns string if that string is the longest common prefix to files that start with FILE;
           t if only one such file, and it is named FILE;
           nil if no such files\"

  (let* ((files (directory-files directory)))
    (all-completions file files predicate)))

(defun dropbox-handle-file-name-completion (file directory &optional predicate)
  \"Complete file name FILE in directory DIRECTORY.
   Returns string if that string is the longest common prefix to files that start with FILE;
           t if only one such file, and it is named FILE;
           nil if no such files\"

  (let ((files (directory-files directory))
        (predicate (if (eq predicate 'file-exists-p) nil predicate)))
    (try-completion file files predicate)))

(defun dropbox-handle-make-directory (dir &optional parents)
  \"Create the directory DIR and, if PARENT is non-nil, all parents\"

  (if (or parents
          (let ((parent (dropbox-parent dir)))
            (and (file-exists-p parent) (file-directory-p parent))))
      (dropbox-cache \"metadata\" dir
                     (dropbox-post
                      \"fileops/create_folder\" nil
                      `((\"root\" . \"dropbox\")
                        (\"path\" . ,(dropbox-strip-prefix dir)))))))

(defun dropbox-handle-delete-file (filename &optional trash)
  \"Delete file name FILENAME.  If TRASH is nil, permanently delete it.\"

  (if trash
      (dropbox-cache \"metadata\" filename
                     (dropbox-post \"fileops/delete\" nil
                                   `((\"root\" . \"dropbox\")
                                     (\"path\" . ,(dropbox-strip-prefix
                                                 filename)))))
    (error \"Perma-trashing files not yet implemented\")))

(defun dropbox-handle-delete-directory (directory &optional recursive trash)
  \"Delete the directory DIRECTORY.  If TRASH is nil, permanently delete it.
   If RECURSIVE is nil, throw an error if the directory has contents\"

  (if (not recursive)
      (error \"Non-recursive directory delete not yet implemented\")
    (if nil ;(not trash) ; Emacs passes only one argument from delete-directory
        (error \"Perma-trashing directories not yet implemented\")
      (dropbox-cache \"metadata\" directory
                     (dropbox-post \"fileops/delete\" nil
                                   `((\"root\" . \"dropbox\")
                                     (\"path\" . ,(dropbox-strip-prefix
                                                 directory))))))))

(defun dropbox-handle-dired-uncache (dir)
  \"Remove DIR from the dropbox.el metadata cache\"

  (dropbox-un-cache \"metadata\" dir))

(defun dropbox-handle-insert-directory
  (filename switches &optional wildcard full-directory-p)
  \"Like `insert-directory' for Dropbox files. Code adapted from
`tramp-sh-handle-insert-directory'.\"

  (setq filename (expand-file-name filename))
  (let ((localname (dropbox-strip-prefix filename)))
    (when (stringp switches)
      (setq switches (split-string switches)))
    (unless full-directory-p
      (setq switches (add-to-list 'switches \"-d\" 'append)))
    (setq switches (mapconcat 'shell-quote-argument switches \" \"))
    (dropbox-message
     \"Inserting directory `ls %s %s', wildcard %s, fulldir %s\"
     switches filename wildcard full-directory-p)

    ; TODO: look into uids, gids, and reformatting the date    
    ; example directory listing:
    ; -rw-r--r--   1 ahaven  staff   1476 Jan  7 12:48 tramp.py
    (if (not full-directory-p)
        (let ((attributes (file-attributes filename 'string)))
          (insert (format \"  %s %2d %8s %8s %8d %s \"
                          (elt attributes 8)
                          (elt attributes 1)
                          (elt attributes 2)
                          (elt attributes 3)
                          (elt attributes 7)
                          (format-time-string \"%X\" (elt attributes 4))))
          (let ((fname (file-name-nondirectory (directory-file-name filename)))
                (start (point))
                (isdir (elt attributes 0)))
            (insert fname \"\\n\")
            (put-text-property start (- (point) 1) 'dired-filename t)))
      (let ((acct-info (dropbox-get-json \"account/info\")))
        (unless (null acct-info)
          (let ((quota-info (cdr (assoc 'quota_info acct-info))))
            (let ((total (cdr (assoc 'quota quota-info)))
                  (normal (cdr (assoc 'normal quota-info)))
                  (shared (cdr (assoc 'shared quota-info))))
            (insert (format \"  used %d available %d (%.0f%% total used)\"
                            (+ shared normal) (- total normal shared)
                            (/ (* (+ shared normal) 100.0) total))))
            (newline))))
      (loop for file in (if wildcard
                            (directory-files (file-name-directory filename) t filename)
                          (directory-files filename t))
            do (insert-directory file switches)))))

(defun dropbox-handle-dired-insert-directory (dir switches &optional file-list
                                                  wildcard hdr)
  (if file-list
      (loop for file in file-list
            do (dropbox-handle-insert-directory (concat dir file) switches))
    (dropbox-handle-insert-directory dir switches wildcard t)))

(defun dropbox-handle-copy-file (file newname &optional ok-if-already-exists
                                      keep-time preserve-uid-gid preserve-selinux-context)
  ; TODO: implement ok-if-already-exists parameter
  (cond
   ((and (dropbox-file-p file) (dropbox-file-p newname))
    (dropbox-cache \"metadata\" newname
                   (dropbox-post
                    \"fileops/copy\" nil
                    `((\"root\" . \"dropbox\")
                      (\"from_path\" . ,(dropbox-strip-prefix file))
                      (\"to_path\" . ,(dropbox-strip-prefix newname))))))
   ((and (dropbox-file-p file) (not (dropbox-file-p newname)))
    (move-file (file-local-copy file) newname))
   ((and (not (dropbox-file-p file)) (dropbox-file-p newname))
    (dropbox-upload file newname))))

(defun dropbox-handle-copy-directory (directory newname &optional keep-time
                                                parents copy-contents)
  (cond
   ((and (dropbox-file-p file) (dropbox-file-p newname))
    (if parents (make-directory (dropbox-parent newname) parents))
    (copy-file directory newname nil keep-time parents copy-contents))
   (t
    (error \"Copying directories between the local storage and Dropbox is not supported\"))))

(defun dropbox-handle-rename-file (file newname &optional ok-if-already-exists)
  \"Renames FILE to NEWNAME.  If OK-IF-ALREADY-EXISTS is nil, signal an error if
NEWNAME already exists.  Note that the move is atomic if both FILE and NEWNAME
are /db: files, but otherwise is not necessarily atomic.\"

  (cond
   ((and (dropbox-file-p file) (dropbox-file-p newname))
    (dropbox-un-cache \"metadata\" file)
    (dropbox-un-cache \"metadata\" (file-name-directory file))
    (dropbox-cache \"metadata\" newname
                   (dropbox-post
                    \"fileops/move\" nil
                    `((\"root\" . \"dropbox\")
                      (\"from_path\" . ,(dropbox-strip-prefix file))
                      (\"to_path\" . ,(dropbox-strip-prefix newname))))))
   ((and (dropbox-file-p file) (not (dropbox-file-p newname)))
    (copy-file file newname ok-if-already-exists)
    (delete-file file))
   ((and (not (dropbox-file-p file)) (dropbox-file-p newname))
    (copy-file file newname ok-if-already-exists)
    (delete-file file))))

(defun dropbox-handle-make-symbolic-link (filename linkname
                                                   &optional ok-if-already-exists)
  (error \"Dropbox cannot hold symbolic links\"))

(defun dropbox-handle-add-name-to-file (file newname
                                             &optional ok-if-already-exists)
  (error \"Dropbox cannot handle hard links\"))

(defun dropbox-handle-executable-find (command)
  \"Fail to find any commands\"
  nil)

;;; File contents

(defun dropbox-handle-insert-file-contents (filename &optional visit beg end replace)
  ; TODO: Fails on images with switch to deleted buffer
  ; TODO: implement replace
  (barf-if-buffer-read-only)
  (let* ((buf (current-buffer))
         (respbuf (dropbox-get \"files\" filename))
         (http-code (dropbox-get-http-code respbuf)))
    (if (file-exists-p filename)
        (progn
          (switch-to-buffer respbuf)
          (beginning-of-buffer)
          (re-search-forward \"\\r\\n\\r\\n\")
          (delete-region (point-min) (point))
          (switch-to-buffer buf)
          (save-excursion (insert-buffer-substring respbuf beg end)))
      (switch-to-buffer buf)
      (set-buffer-modified-p nil))
    (when visit
      (setf buffer-file-name filename)
      (setf buffer-read-only (not (file-writable-p filename))))))

; Redefine oauth-curl-retrieve to take extra-curl-args and to echo the curl command
(defun oauth-curl-retrieve (url)
  \"Retrieve via curl\"
  (url-gc-dead-buffers)
  (set-buffer (generate-new-buffer \" *oauth-request*\"))
  (let ((curl-args `(\"-s\" ,(when oauth-curl-insecure \"-k\")
                     \"-X\" ,url-request-method
                     \"-i\" ,url
                     ,@(when oauth-post-vars-alist
                         (apply
                          'append
                          (mapcar
                           (lambda (pair)
                             (list
                              \"-d\"
                              (concat (car pair) \"=\"
                                      (oauth-hexify-string (cdr pair)))))
                           oauth-post-vars-alist)))
                     ,@(oauth-headers-to-curl url-request-extra-headers)
                     ,@extra-curl-args)))
    (dropbox-message \"curl-args: %s\" curl-args)
    (apply 'call-process \"curl\" nil t nil curl-args))
  (url-mark-buffer-as-dead (current-buffer))
  (current-buffer))

(defvar extra-curl-args nil)

(defun dropbox-upload (local-path remote-path)
  (save-excursion
    (let* ((extra-curl-args `(\"--data-binary\" ,(concat \"@\" local-path)))
           (url-request-extra-headers '((\"Content-Type\" . \"application/octet-stream\")))
           (resp (dropbox-post \"files_put\" remote-path '())))
      (if (dropbox-error-p resp)
          nil
        (dropbox-cache \"metadata\" remote-path resp)))))

(defun dropbox-handle-file-local-copy (filename)
  \"Downloads a copy of a Dropbox file to a temporary file.\"
  (save-excursion
    (let* ((newname (make-temp-file (file-name-nondirectory filename)))
           (respbuf (dropbox-get \"files\" file))
           (http-code (dropbox-get-http-code respbuf)))
      (if (not (file-exists-p filename))
          (error \"File to copy doesn't exist\")
        (with-current-buffer respbuf
          (beginning-of-buffer)
          (re-search-forward \"\\r\\n\\r\\n\")
          (write-region (point) (point-max) newname)))
      newname)))

(defun dropbox-handle-dired-compress-file (file)
  \"Compress a file in Dropbox.  Super-inefficient.\"

  (let* ((temp (file-local-copy file))
         (temp.z (dired-compress-file file))
         (suffix (if (string-prefix-p temp temp.z)
                     (string-strip-prefix temp temp.z)
                   \".gz\")))
    (dropbox-upload temp.z (concat file suffix))
    (delete-file file)))

(defun dropbox-handle-write-region (start end filename &optional
					  append visit lockname mustbenew)
  \"Write current region into specified file.
When called from a program, requires three arguments:
START, END and FILENAME.  START and END are normally buffer positions
specifying the part of the buffer to write.
If START is nil, that means to use the entire buffer contents.
If START is a string, then output that string to the file
instead of any buffer contents; END is ignored.

Optional fourth argument APPEND if non-nil means
  append to existing file contents (if any).  If it is an integer,
  seek to that offset in the file before writing.
Optional fifth argument VISIT, if t or a string, means
  set the last-save-file-modtime of buffer to this file's modtime
  and mark buffer not modified.
If VISIT is a string, it is a second file name;
  the output goes to FILENAME, but the buffer is marked as visiting VISIT.
  VISIT is also the file name to lock and unlock for clash detection.
If VISIT is neither t nor nil nor a string,
  that means do not display the \\\"Wrote file\\\" message.
The optional sixth arg LOCKNAME, if non-nil, specifies the name to
  use for locking and unlocking, overriding FILENAME and VISIT.
The optional seventh arg MUSTBENEW, if non-nil, insists on a check
  for an existing file with the same name.  If MUSTBENEW is `excl',
  that means to get an error if the file already exists; never overwrite.
  If MUSTBENEW is neither nil nor `excl', that means ask for
  confirmation before overwriting, but do go ahead and overwrite the file
  if the user confirms.\"

  ; TODO: implement lockname and mustbenew
  (assert (not append)) ; TODO: implement append

  (let ((localfile (make-auto-save-file-name)))
    (write-region start end localfile nil 1)
    (let ((resp (dropbox-upload localfile filename)))
      (if (dropbox-error-p resp)
          nil
        (when (stringp visit)
          (set-visited-file-name visit))
        (when (or (eq t visit) (stringp visit))
          (set-buffer-modified-p nil))
        (when (or (eq t visit) (eq nil visit) (stringp visit))
          (message \"Wrote %s\" filename))))))

;;; Misc

(defun dropbox-handle-process-file (program &optional infile buffer display &rest args)
  nil)

(defun dropbox-handle-start-file-process (name buffer program &rest program-args)
  nil)

(defun dropbox-handle-shell-command (command &optional output-buffer error-buffer)
  nil)

(defun dropbox-handle-load (file &optional noerror nomessage nosuffix must-suffix)
  \"Loads a Lisp file from Dropbox, by copying it to a temporary\"

  (load (file-local-copy file) noerror nomessage nosuffix must-suffix))

;;; dropbox.el ends here
"]) (drill-instructor-AZIK-force . [(20120907 1817) ((popup (0 5))) "Support AZIK input" tar nil]) (drag-stuff . [(20130412 212) nil "Drag stuff (lines, words, region, etc...) around" tar nil]) (dpaste_de . [(20131015 525) ((web (0 3 7))) "Emacs mode to paste to dpaste.de" single ";;; Commentary:

;; Usage:
;;
;; Dpaste a buffer
;;
;; (require 'dpaste_de)
;;
;; (dpaste-buffer)
;; The url is copied into your clipboard and kill ring
;;
;; On a region
;; (require 'dpaste_de)
;; (dpaste-region)
;;
;; Dpaste a buffer by specifying a name
;; (require 'dpaste_de)
;; (dpaste-buffer-with-name \"*scratch*\")
;;
;; Special thanks to Martin Mahner (https://github.com/bartTC) for running dpaste.de

;;; Change Log: 

;; 0.2 - Fixes for the latest web.el
;; 0.1 - Initial commit and push into melpa

"]) (dpaste . [(20120823 1136) nil "Emacs integration for dpaste.com" single ";;; Commentary:

;; dpaste.el provides functions to post a region or buffer to
;; <http://dpaste.com> and put the paste URL into the kill-ring.

;; Inspired by gist.el

;; Current dpaste.com API usage example:

;;     curl -si -F 'content=<-' http://dpaste.com/api/v1/ | \\
;;         grep ^Location: | colrm 1 10

;; Thanks to Paul Bissex (http://news.e-scribe.com) for a great paste
;; service.

;; Installation and setup:

;; Put this file in a directory where Emacs can find it. On GNU/Linux
;; it's usually /usr/local/share/emacs/site-lisp/ and on Windows it's
;; something like \"C:\\Program Files\\Emacs<version>\\site-lisp\". Then
;; add the follow instructions in your .emacs.el:

;;     (require 'dpaste nil)
;;     (global-set-key (kbd \"C-c p\") 'dpaste-region-or-buffer)
;;     (setq dpaste-poster \"Guido van Rossum\")

;; Then with C-c p you can run `dpaste-region-or-buffer'. With a prefix
;; argument (C-u C-c p), your paste will use the hold option.

;; Todo:

;; - Use emacs lisp code to post paste instead curl (version 0.3)

"]) (downplay-mode . [(20140110 2058) nil "focus attention on a region of the buffer" single ";;; Commentary:

;; Downplay is a minor Emacs mode that provides facilities to apply a
;; face (via overlays) to all but the current region or line. 
;;
;; To enable Downplay minor mode, type M-x downplay-mode.
;; This applies only to the current buffer.
;;
;; When 'downplay is called, it will change the downplayed state of
;; the buffer depending on the current state:
;;
;; - when the downplay is inactive:
;;   - if the region is active and transient-mark-mode is active,
;;     downplay-face is applied to all of the buffer except the region
;;   - else downplay-face is applied to all of the buffer except the
;;     current line
;; - when the downplay is active:
;;   - if the region is active and transient-mark-mode is active and
;;     the region has changed since the downplay was activated,
;;     downplay-face is reapplied to all of the buffer except the
;;     region
;;   - else if the current line has changed, downplay-face is
;;     reapplied to all of the buffer except the current line
;;   - else the downplay is deactivated (downplay-face is unapplied
;;     from the entire buffer) 
;;
;; By default, 'downplay is bound to C-c z when downplay-mode is
;; active. The default downplay-face sets the height of the text to
;; 0.75. 

(make-variable-buffer-local
 (defvar downplay-overlays))

(defface downplay-face
  `((t . (:height 0.75)))
  \"Face used for downplayed sections of the buffer.\")

(defun downplay-active-p ()
  (overlay-buffer (first downplay-overlays)))

(defun downplay-all-but (start end)
  (move-overlay (first downplay-overlays) (point-min) start)
  (move-overlay (second downplay-overlays) end (point-max)))

(defun downplay-region-changed-p (start end)
  (and (downplay-active-p)
       (or (not (eq start (overlay-end (first downplay-overlays))))
           (not (eq end (overlay-start (second downplay-overlays)))))))

(defun downplay-quit ()
  (mapcar 'delete-overlay downplay-overlays))

(defun downplay-region-prefix-overlay-end ()
  (let ((start (if (region-active-p)
                   (region-beginning)
                 (line-beginning-position))))
    (if (<= start (point-min))
        (point-min)
      (- start 1))))

(defun downplay-region-postfix-overlay-start ()
  (let ((end (if (region-active-p)
                 (region-end)
               (line-end-position))))
    (if (>= end (point-max))
        (point-max)
      (+ end 1))))

(defun downplay ()
  (interactive)
  (let ((start (downplay-region-prefix-overlay-end))
        (end   (downplay-region-postfix-overlay-start)))
    (cond
     ((downplay-region-changed-p start end) (downplay-all-but start end))
     ((downplay-active-p)                   (downplay-quit))
     ((downplay-all-but start end)))))

;;;###autoload
(define-minor-mode downplay-mode
  \"Downplay all but the region or the current line.\"
  :lighter \" dp\"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd \"C-c z\") 'downplay)
            map)
  (if downplay-mode
      (setq downplay-overlays
            (mapcar (lambda (_)
                      (let ((overlay (make-overlay (point-min) (point-min))))
                        (overlay-put overlay
                                     'font-lock-face 'downplay-face)
                        (delete-overlay overlay)
                        overlay))
                    '(nil nil)))
    (downplay-quit))) 

(provide 'downplay-mode)

;;; downplay-mode.el ends here
"]) (dot-mode . [(20100803 1208) nil "Minor mode to repeat typing or commands" single ";;; Commentary:
;;
;; Purpose of this package: minor mode to repeat typing or commands
;;
;; Installation instructions
;;
;; Install this file somewhere in your load path, byte-compile it and
;; add one of the following to your .emacs file (remove the comment
;; delimiters ;-)
;;
;; If you only want dot-mode to activate when you press \"C-.\", add the
;; the following to your .emacs:
;;
;;     (autoload 'dot-mode \"dot-mode\" nil t) ; vi `.' command emulation
;;     (global-set-key [(control ?.)] (lambda () (interactive) (dot-mode 1)
;;                                       (message \"Dot mode activated.\")))
;;
;; If you want dot-mode all the time (like me), add the following to
;; your .emacs:
;;
;;     (require 'dot-mode)
;;     (add-hook 'find-file-hooks 'dot-mode-on)
;; 
;; You may still want to use the global-set-key above.. especially if you
;; use the *scratch* buffer.
;;
;; To toggle dot mode on or off type `M-x dot-mode'
;;
;; There are only two variables that allow you to modify how dot-mode
;; behaves:
;;           dot-mode-ignore-undo
;;           dot-mode-global-mode
;;
;; dot-mode-ignore-undo - defaults to t.  When nil, it will record keystrokes
;;     that generate an undo just like any other keystroke that changed the
;;     buffer.  I personally find that annoying, but if you want dot-mode to
;;     always remember your undo's:
;;         (setq dot-mode-ignore-undo nil)
;;     Besides, you can always use dot-mode-override to record an undo when
;;     you need to (or even M-x undo).
;;
;; dot-mode-global-mode - defaults to t.  When t, dot-mode only has one
;;     keyboard command buffer.  That means you can make a change in one
;;     buffer, switch buffers, then repeat the change.  When set to nil,
;;     each buffer gets its own command buffer.  That means that after
;;     making a change in a buffer, if you switch buffers, that change
;;     cannot repeated.  If you switch back to the first buffer, your
;;     change can then be repeated again.  This has a nasty side effect
;;     if your change yanks from the kill-ring (You could end up
;;     yanking text you killed in a different buffer).
;;     If you want to set this to nil, you should do so before dot-mode
;;     is activated on any buffers.  Otherwise, you may end up with some
;;     buffers having a local command buffer and others using the global
;;     one.
;;
;; Usage instructions:
;;
;; `C-.'    is bound to dot-mode-execute, which executes the buffer of
;;          stored commands as a keyboard macro.
;;
;; `C-M-.'  is bound to dot-mode-override, which will cause dot-mode
;;          to remember the next keystroke regardless of whether it
;;          changes the buffer and regardless of the value of the
;;          dot-mode-ignore-undo variable.
;;
;; `C-c-.'  is bound to dot-mode-copy-to-last-kbd-macro, which will
;;          copy the current dot mode keyboard macro to the last-kbd-macro
;;          variable.  It can then be executed via call-last-kbd-macro
;;          (normally bound to `C-x-e'), named via name-last-kbd-macro,
;;          and then inserted into your .emacs via insert-kbd-macro.
;;
;; Known bugs:
;;
;; none
;;

;; EMACS vs. VI
;;
;; This mode is written to address one argument in the emacs vs. vi
;; jihad :-)  It emulates the vi `redo' command, repeating the
;; immediately preceding sequence of commands.  This is done by
;; recording input commands which change the buffer, i.e. not motion
;; commands.

;; DESIGN
;;
;; The heart of this minor mode is a state machine.  The function
;; dot-mode-after-change is called from after-change-functions and
;; sets a variable (is there one already?  I couldn't find it) which
;; is examined by dot-mode-loop, called from from post-command-hook.
;; This variable, dot-mode-changed, is used in conjunction with
;; dot-mode-state to move to the next state in the state machine.
;; The state machine is hard coded into dot-mode-loop in the
;; interests of speed; it uses two normal states (idle and store)
;; and two corresponding override states which allow the user to
;; forcibly store commands which do not change the buffer.

(defconst dot-mode-version \"1.10\"
  \"Report bugs to: Robert Wyrick <rob@wyrick.org>\")

;;; CHANGE HISTORY
;;;
;;; 1.1
;;; Wrote dot-mode.el
;;;
;;; 1.2
;;; At the suggestion of Scott Evans <gse@ocsystems.com>, added
;;; 'dot-mode-override' to allow the user to force dot mode to store a
;;; motion command
;;;
;;; 1.3
;;; Changed dot-mode-loop to use a state machine instead of several
;;; booleans
;;;
;;; 1.4
;;; Hard coded the state machine into dot-mode-loop in the hope of
;;; speeding it up
;;;
;;; 1.5
;;; Ported to GNU Emacs - nearly: the keymap doesn't seem to install
;;; correctly.
;;;
;;; 1.6
;;; Rob Wyrick (that's me) took over maintenance of the package from
;;; Jim Gillespie.
;;;
;;; In some versions of Emacs, (this-command-keys) returns a empty
;;; vector by the time it is called from the 'post-command-hook.
;;; So, I split the functionality... now dot-mode-command-keys
;;; stores (this-command-keys) output in a temp variable to be used
;;; by dot-mode-loop and dot-mode-command-keys is called from the
;;; pre-command-hook.  Also re/ported to XEmacs/GNU Emacs.  It works
;;; on both now.  dot-mode-command-keys could have been put on the
;;; after-change-functions hook, but I've begun preliminary work to
;;; capture what's going on in the minibuffer and I'm certain I need
;;; it where it is.
;;;
;;; 1.7
;;; Added my first attempt to capture what the user is doing with
;;; execute-extended-command (M-x).  It even works if the executed
;;; command prompts the user.
;;; Also added some error recovery if the user interrupts or there is
;;; an error during execution of the stored macro.
;;;
;;; 1.8
;;; Second attempt to capture what the user is doing with 
;;; execute-extended-command (M-x).  The previous version didn't work
;;; in XEmacs.  This version works in both XEmacs and GNUEmacs.
;;;
;;; 1.9
;;; Third attempt to capture what the user is doing with 
;;; execute-extended-command (M-x).  Wow was I making things hard.
;;; It's cost me a lot of version numbers in a short amount of time,
;;; so we won't discuss my previous attempts. *grin*  My second attempt
;;; worked just fine, but it was more complicated and maybe not as
;;; portable to older version of X/GNU Emacs.
;;; Other things:
;;;   - Yet another restructuring of the code.  By doing so, 
;;;     quoted-insert (C-q) is properly stored by dot-mode.
;;;     (quoted-insert has been broken since ver 1.6)
;;;   - Deleted an extraneous state and the \"extended-state\" added
;;;     in ver 1.8.  We're down to just two normal states and two
;;;     override states.
;;;   - Added dot-mode-ignore-undo and dot-mode-global-mode variables
;;;     as well as the new function dot-mode-copy-to-last-kbd-macro.
;;;
;;; 1.10
;;; Fixed a bug where the META key wasn't properly recorded on GNU
;;; Emacs.  Actually, if you used ESC for META (like me), everything
;;; worked fine.  But using ALT for META was broken.
;;; Now I'm using this-command-keys-vector when I can.
;;; I also added the dot-mode-event-to-string function to make the
;;; output a little prettier.
;;; Thanks to Scott Evans <gse@antisleep.com> for reporting the bug!
;;;
;;; 1.11
;;; Fixed a bug where dot-mode would give an error if you used
;;; dot-mode-override to record a <right> and then tried to call
;;; dot-mode-execute.  The bug was in dot-mode-event-to-string
;;; Thanks to Scott Evans <gse@antisleep.com> for reporting the bug!

(defvar dot-mode nil
  \"Whether dot mode is on or not\")
(make-variable-buffer-local 'dot-mode)

(defvar dot-mode-map 
  (let ((map (make-sparse-keymap)))
    (if (fboundp 'read-kbd-macro)
        (progn
          (define-key map (read-kbd-macro \"C-.\")   'dot-mode-execute)
          (define-key map (read-kbd-macro \"C-M-.\") 'dot-mode-override)
          (define-key map (read-kbd-macro \"C-c .\") 'dot-mode-copy-to-last-kbd-macro)
        )
      ;; ELSE - try this way...
      (define-key map [(control ?.)]         'dot-mode-execute)
      (define-key map [(control meta ?.)]    'dot-mode-override)
      (define-key map [(control ?c)(?.)]     'dot-mode-copy-to-last-kbd-macro)
    )
    map)
  \"Keymap used in dot mode buffers\")

;; Make sure add-minor-mode exists
(if (not (fboundp 'add-minor-mode))
    (defun add-minor-mode (mode name map)
      (or (assoc mode minor-mode-alist)
          (setq minor-mode-alist
                (cons (list mode name) minor-mode-alist)))
      (or (assoc mode minor-mode-map-alist)
          (setq minor-mode-map-alist
                (cons (cons mode map) minor-mode-map-alist)))))

(add-minor-mode 'dot-mode \" Dot\" dot-mode-map) ;; depends on add-minor-mode

(defvar dot-mode-global-mode t
  \"Should dot-mode share its command buffer between buffers?\")

(defvar dot-mode-ignore-undo t
  \"Should dot-mode ignore undo?\")

(defvar dot-mode-changed nil
  \"Did last command change buffer?\")

(defvar dot-mode-cmd-buffer nil
  \"Saved commands.\")

(defvar dot-mode-cmd-keys nil
  \"Saved keys.\")

(defvar dot-mode-state 0
  \"Current state of dot mode.
0 - Initial (no changes)
1 - Recording buffer changes
2 - Override from state 0
3 - Override from state 1\")

(defvar dot-mode-minibuffer-input nil
  \"Global buffer to capture minibuffer input\")

;; The below statements are another possible definition of dot-mode-command-keys
;; that I *think* will work.  It hasn't been well tested so I'm leaving it
;; out for now.  This was written at the same time I found this-command-keys-vector.
;; Since I don't know what version of emacs has that func, I was working on
;; the below as an alternate work-around.
;; ------------------------------------------------------------------------
;;  ((and (boundp 'current-prefix-arg)
;;        (boundp 'meta-prefix-char)
;;        (fboundp 'this-single-command-keys)) ;; also see this-single-command-raw-keys
;;   (defun dot-mode-command-keys ()
;;     (if (null current-prefix-arg)
;;         (this-single-command-keys)
;;       (vconcat (char-to-string meta-prefix-char) (number-to-string current-prefix-arg) (this-single-command-keys)))))

(cond 
 ((fboundp 'this-command-keys-vector)
  (fset 'dot-mode-command-keys (symbol-function 'this-command-keys-vector)))
 (t
  (defun dot-mode-command-keys ()
    (let ((tmp (this-command-keys)))
      (cond ((vectorp tmp)
             tmp)
            ((stringp tmp)
             (string-to-vector tmp))
            ((fboundp 'character-to-event) ;; xemacs
             (character-to-event tmp))
            (t ;; probably never get here
             (vconcat tmp))))))
)

(defun dot-mode-copy-to-last-kbd-macro ()
  \"Copy the current dot-mode command buffer to the last-kbd-macro variable.
Then it can be called with call-last-kbd-macro, named with name-last-kbd-macro,
or even saved for later use with name-last-kbd-macro\"
  (interactive)
  (if (null dot-mode-cmd-buffer)
      (message \"Nothing to copy.\")
    (setq last-kbd-macro dot-mode-cmd-buffer)
    (message \"Copied.\"))
)

(cond ((and (fboundp 'event-modifiers) (fboundp 'event-basic-type))
       (defun dot-mode-event-to-string (ev)
         \"Return the event as a string.\"
       (let
         ((em (event-modifiers ev))
          (eb (event-basic-type ev)))
         (if (and (not (symbolp eb)) (equal em '(control)))
           (char-to-string ev)
           (concat
             (mapconcat (lambda(x) (concat \"<\" (symbol-name x) \">\")) em \"\")
             (if (symbolp eb) (concat \"<\" (symbol-name eb) \">\") (char-to-string eb))
      )))))
      (t
       (defun dot-mode-event-to-string (ev)
         \"Return the event as a string.\"
         (char-to-string ev)))
)

(defun dot-mode-buffer-to-string ()
       \"Return the macro buffer as a string.\"
  (let ((str dot-mode-cmd-buffer))
    (if (fboundp 'character-to-event) ; we're on X-Emacs
        (progn
          (setq str (prin1-to-string str))
          (setq str (replace-in-string str \" *#<keypress-event +\" \"<\"))
          (setq str (replace-in-string str \" *<\\\\(.\\\\)> *\" \"\\\\1\"))
          (setq str (replace-in-string str \"^\\\\[\\\\(.*\\\\)\\\\]$\" \"\\\\1\"))
        )
      ;; ELSE - we're on GNU Emacs
      (setq str (mapconcat (lambda (arg)
                             (cond ((and (fboundp 'eventp) (eventp arg))
                                    (dot-mode-event-to-string arg))
                                   ((symbolp arg)
                                    (concat \"<\" (symbol-name arg) \">\"))
                                   (t
                                    (char-to-string arg)))) str \"\"))
    )
    str)
)

(defun dot-mode-minibuffer-exit ()
  \"Catch minibuffer exit\"
  ;; Just store it as a string buffer... 
  ;;     On X Emacs, we'll call character-to-event later
  ;;     On GNU Emacs, vconcat will handle strings
  (setq dot-mode-minibuffer-input 
        (concat dot-mode-minibuffer-input (buffer-string) \"\\r\"))

  ;; I'd really like to check this-command to see if it's exit-minibuffer
  ;; and remove this function from the minibuffer-exit-hook if it is.
  ;; Unfortunately, if an extended command asks for 2 or more arguments,
  ;; the first arg would be the only one to get recorded since exit-minibuffer
  ;; is called between each argument.
)

(defun dot-mode-execute ()
  \"Execute stored commands.\"
  (interactive)
  ;; Don't want execution to kick off infinite recursion
  (if (null dot-mode-cmd-buffer)
      (message \"Nothing to repeat\")
    (remove-hook 'pre-command-hook 'dot-mode-pre-hook t)
    (remove-hook 'post-command-hook 'dot-mode-loop t)
    (remove-hook 'after-change-functions 'dot-mode-after-change t)
    ;; Do the business
    (message \"Repeating \\\"%s\\\"\" (dot-mode-buffer-to-string))
     (condition-case nil
        (execute-kbd-macro dot-mode-cmd-buffer)
      ((error quit exit)
       (setq dot-mode-cmd-buffer nil
             dot-mode-state      0)
       (message \"Dot mode reset\")))
    (if (not (null dot-mode-cmd-buffer))
        ;; I message before AND after a macro execution.
        ;; On XEmacs, I never saw the Repeating message above...
        ;; Besides, this way you'll know if your macro somehow
        ;; hangs during execution (on GNU Emacs, anyway).
        (message \"Repeated \\\"%s\\\"\" (dot-mode-buffer-to-string)))
    ;; Put the hooks back
    (make-local-hook 'pre-command-hook)
    (make-local-hook 'post-command-hook)
    (make-local-hook 'after-change-functions)
    (add-hook 'pre-command-hook 'dot-mode-pre-hook nil t)
    (add-hook 'post-command-hook 'dot-mode-loop nil t)
    (add-hook 'after-change-functions 'dot-mode-after-change nil t)
  )
)

(defun dot-mode-override ()
  \"Override standard behaviour and store next keystroke no matter what.\"
  (interactive)
  (setq dot-mode-state (+ dot-mode-state 2))
  (message \"dot-mode will remember the next keystroke...\"))

(defun dot-mode-after-change (start end prevlen)
  \"Dot mode's after-change-functions hook\"
  ;; By the time we get here, dot-mode-pre-hook has already setup
  ;; dot-mode-cmd-keys.  It'll be a vector, t, or nil.

  (cond ((vectorp dot-mode-cmd-keys) ;; we just did an execute-extended-command
                                     ;; or an override

         (if (not dot-mode-changed)     ;; if dot-mode-changed is t, we're in override
             (progn
               ;; remove hook
               (remove-hook 'minibuffer-exit-hook 'dot-mode-minibuffer-exit)
               (if (not (null dot-mode-minibuffer-input))
                   (progn
                     (if (fboundp 'character-to-event) ;; we're on X-Emacs
                         (setq dot-mode-minibuffer-input 
                               (mapcar 'character-to-event dot-mode-minibuffer-input)))
                     (setq dot-mode-cmd-keys (vconcat dot-mode-cmd-keys 
                                                      dot-mode-minibuffer-input))
                   )
               )
             )
           ;; ELSE - we're in override and the keys have already been read
         )
        )
        ;; Normal mode
        (dot-mode-cmd-keys
         (setq dot-mode-cmd-keys (dot-mode-command-keys))
        )
        ;; Else, do nothing dot-mode-cmd-keys will remain nil. (Only happens on ignore-undo)
  )
  (if dot-mode-cmd-keys
      (setq dot-mode-changed t))
)

(defun dot-mode-pre-hook ()
  \"Dot mode's pre-command-hook\"

  ;; remove hook (should already be removed... but double check)
  ;; The only time this will ever do any good is if you did a
  ;; quit out of the minibuffer.  In that case, the hook will
  ;; still be there.  It won't really hurt anything, it will just
  ;; continue to record everything you do in the minibuffer 
  ;; regardless of whether or not it is an execute-extended-command.
  ;; And the dot-mode-minibuffer-input buffer could get quite large.
  (remove-hook 'minibuffer-exit-hook 'dot-mode-minibuffer-exit)

  (cond
   ;; Is this an execute-extended-command?
   ((eq this-command 'execute-extended-command)
    (setq dot-mode-minibuffer-input nil
          ;; Must get this (M-x) now!  It's gone later.
          dot-mode-cmd-keys         (dot-mode-command-keys)
          dot-mode-changed          nil ;; ignore an override
    )
    ;; Must be a global hook
    (add-hook 'minibuffer-exit-hook 'dot-mode-minibuffer-exit)
   )
   (dot-mode-changed            ;; on override, dot-mode-changed is t
    ;; Always read the keys here on override _UNLESS_ it's a quoted-insert.
    ;; This is to make sure we capture keys that don't change the buffer.
    ;; On quoted-insert, all we get here is  , but in dot-mode-after-change,
    ;; we get   plus the following key (and we're guaranteed to change the
    ;; buffer)
    (setq dot-mode-cmd-keys (or (eq this-command 'quoted-insert)
                                (dot-mode-command-keys)))
   )
   ;; Should we ignore this key sequence? (is it an undo?)
   ((and dot-mode-ignore-undo
         (or (eq this-command 'advertised-undo)
             (eq this-command 'undo)))
    (setq dot-mode-cmd-keys nil)
   )
   (t
    (setq dot-mode-cmd-keys t)  ;; signal to read later (in dot-mode-after-change)
   )
  )
)

(defun dot-mode-loop ()
  \"The heart of dot mode.\"
;;  (message \"in: state is %d\" dot-mode-state)
;;  (message \"in: cmd-buffer is '%s'\" (dot-mode-buffer-to-string))
  (cond ((= dot-mode-state 0)           ; idle
         (if dot-mode-changed
             (setq dot-mode-state       1
                   dot-mode-changed     nil
                   dot-mode-cmd-buffer  dot-mode-cmd-keys))
        )
        ((= dot-mode-state 1)           ; recording
         (if dot-mode-changed
             (setq dot-mode-changed     nil
                   dot-mode-cmd-buffer  (vconcat dot-mode-cmd-buffer dot-mode-cmd-keys))
           (setq dot-mode-state 0))
        )
        (t ; = 2 or 3                   ; override
         (setq dot-mode-state       (- dot-mode-state 2)
               dot-mode-changed     t)
        )
  )
;;  (message \"out: state is %d\" dot-mode-state)
;;  (message \"out: cmd-buffer is '%s'\" (dot-mode-buffer-to-string))
)

(defun dot-mode (arg)
  \"Toggle dot mode.
With arg, turn dot mode on iff arg is positive.

Dot mode mimics the `.' function in vi, repeating sequences of
commands and/or typing delimited by motion events.  Use `C-.' rather
than just `.'.\"
  (interactive \"P\")
  (setq dot-mode
        (if (null arg)
            (not dot-mode)
          (> (prefix-numeric-value arg) 0)))
  (if (not dot-mode)
      (progn
        (remove-hook 'pre-command-hook 'dot-mode-pre-hook t)
        (remove-hook 'post-command-hook 'dot-mode-loop t)
        (remove-hook 'after-change-functions 'dot-mode-after-change t)
      )
    ;; ELSE
    ;; The hooks are _ALWAYS_ local since dot-mode may not be on in every buffer
    (make-local-hook 'pre-command-hook)
    (make-local-hook 'post-command-hook)
    (make-local-hook 'after-change-functions)
    (add-hook 'pre-command-hook 'dot-mode-pre-hook nil t)
    (add-hook 'post-command-hook 'dot-mode-loop nil t)
    (add-hook 'after-change-functions 'dot-mode-after-change nil t)
    (if dot-mode-global-mode
        (progn
          (kill-local-variable 'dot-mode-cmd-buffer)
          (kill-local-variable 'dot-mode-cmd-keys)
          (kill-local-variable 'dot-mode-state)
          (kill-local-variable 'dot-mode-changed)
        )
      ;; ELSE
      (make-local-variable 'dot-mode-cmd-buffer)
      (make-local-variable 'dot-mode-cmd-keys)
      (make-local-variable 'dot-mode-state)
      (make-local-variable 'dot-mode-changed)
      (setq dot-mode-state        0
            dot-mode-changed      nil
            dot-mode-cmd-buffer   nil
            dot-mode-cmd-keys     nil
      )
    )
  )
  (cond ((fboundp 'force-mode-line-update)
         (force-mode-line-update))
        ((fboundp 'redraw-modeline)
         (redraw-modeline)))
;;  (set-buffer-modified-p (buffer-modified-p)) ;; Why was I doing this?
)

(defun dot-mode-on ()
  \"Turn on dot-mode.\"
  (interactive)
  (dot-mode 1))

(defalias 'turn-on-dot-mode 'dot-mode-on)

(provide 'dot-mode)

;;; dot-mode.el ends here
"]) (doremi-mac . [(20131226 1835) nil "A macro for defining Do Re Mi commands." single ";;; Commentary:
;;
;;  A macro for defining Do Re Mi commands.
;;
;;  Defines a Do Re Mi command and adds it to a `Do Re Mi' menu-bar
;;  menu.  See library `doremi.el'.
;;
;;
;;; User options defined here:
;;
;;    `define-doremi-after-hook', `define-doremi-before-hook'.
;;
;;  Macro defined here:
;;
;;    `define-doremi'.
;;
;;
;;  Add this to your initialization file (~/.emacs or ~/_emacs):
;;
;;    (autoload 'define-doremi \"doremi-mac\"
;;      \"Define a Do Re Mi command.\" nil 'macro)
;;
;;
;;  See also these other Do Re Mi libraries:
;;
;;    `doremi-frm.el' - Incrementally adjust frame properties.
;;    `doremi-cmd.el' - Other Do Re Mi commands.
;;
;;
;;  Example test commands defined using the macro.
;;
;;  1. Command `doremi-frame-height+' sets the frame height.
;;
;;     (define-doremi frame-height+
;;       \"Set frame height, changing it incrementally.\"   ; Doc string
;;       \"Set Frame Height\"                        ; Command menu name
;;       (lambda (new-val)                         ; Setter function
;;         (set-frame-height (selected-frame) new-val) new-val)
;;       (frame-height (selected-frame)))          ; Initial value
;;
;;  2. Command `doremi-set-bg+' cycles through
;;     (x-defined-colors), setting the background color.
;;
;;     (define-doremi set-bg+
;;       ;; Doc string
;;       \"Set background color, choosing from a list of all colors.\"
;;       \"Set Background Color\"                    ; Command menu name
;;       ;; Setter function
;;       (lambda (newval) (set-background-color newval) newval)
;;       ;; Initial value
;;       (frame-parameter (selected-frame) 'background-color)
;;       nil                                       ; Ignored
;;       (x-defined-colors)                        ; Cycle enumeration
;;       t)    ; Add current color to enumeration if not there already
;;
;;     Command `doremi-set-bg+' runs this hook after running `doremi':
;; (setq define-doremi-after-hook
;;       ;; Update the way faces display with new bg.
;;       (lambda () (frame-set-background-mode (selected-frame))))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (doremi-frm . [(20131226 1834) ((doremi (0)) (faces+ (0)) (frame-fns (0)) (hexrgb (0))) "Incrementally adjust face attributes and frame parameters." single ";;; Commentary:
;;
;;    Do Re Mi commands to incrementally adjust face attributes and
;;    frame parameters using arrow keys or mouse wheel.
;;
;;  When you invoke the Do Re Mi iterative commands defined here, you
;;  can press and hold an up/down arrow key, or rotate the mouse
;;  wheel, to change face attributes or frame parameters.  For more
;;  information, see file `doremi.el' and the doc-string for function
;;  `doremi' in particular.
;;
;;  NOTE: Functions and variables in this library have the prefix
;;        `doremi-'.  In order to more easily distinguish commands
;;        that iterate in Do Re Mi fashion from other functions in the
;;        library, the iterative commands are suffixed with `+'.
;;
;;  Note on saving changes made with the commands defined here:
;;
;;    Some of the commands defined here change face and frame
;;    parameters.  You can save any changes you have made, by using
;;    Customize.  To visit a Customize buffer of all unsaved changes
;;    you have made, use command `customize-customized'.
;;
;;    Frame parameter changes, such as background color, can be saved
;;    for future use by all frames or all frames of a certain kind.
;;    For that, you must change the frame parameters of the
;;    correponding frame-alist variable.
;;
;;    There is no single variable for saving changes to parameters of
;;    the current frame.  Instead, there are several different
;;    frame-alist variables, which you can use to define different
;;    kinds of frames.  These include: `default-frame-alist',
;;    `initial-frame-alist', and `special-display-frame-alist'.  The
;;    complete list of such frame alist variables is available using
;;    function `frame-alist-var-names', defined in library
;;    `frame-cmds.el'.
;;
;;    Example: Suppose you change the background color of a frame and
;;    want to make that the default background color for new frames in
;;    the future.  You will need to update the value of variable
;;    `default-frame-alist' to use the `background-color' parameter
;;    setting of the changed frame.
;;
;;    You can easily copy one or all parameter values from any given
;;    frame to any frame alist (such as `default-frame-alist'), by
;;    using the commands `set-frame-alist-parameter-from-frame' and
;;    `set-all-frame-alist-parameters-from-frame'.  Those commands are
;;    defined in library `frame-cmds.el'.
;;
;;  Note on available color names:
;;
;;    Color names supported by your Emacs release and platform are
;;    those returned by function `x-color-names'.  This often includes
;;    names that are essentially the same as duplicates, e.g.,
;;    \"LightBlue\" and \"light blue\".  By default, Do Re Mi
;;    canonicalizes these names by lowercasing them and removing
;;    whitespace.  Then it removes the duplicates.  This behavior is
;;    governed by option `hexrgb-canonicalize-defined-colors-flag'.
;;    Customize that option to nil if you need the original names.
;;
;;
;;  User options defined here:
;;
;;    `doremi-frame-config-ring-size',
;;    `doremi-move-frame-wrap-within-display-flag',
;;    `doremi-push-frame-config-for-cmds-flag',
;;    `doremi-RGB-increment-factor', `doremi-wrap-color-flag'.
;;
;;
;;  Commands defined here:
;;
;;    `doremi-all-faces-bg+', `doremi-all-faces-fg+',
;;    `doremi-all-frames-bg+', `doremi-all-frames-fg+', `doremi-bg+',
;;    `doremi-bg-blue+', `doremi-bg-brightness+',
;;    `doremi-bg-color-name+', `doremi-bg-cyan+', `doremi-bg-green+',
;;    `doremi-bg-hue+', `doremi-bg-hue-stepping-saturation+',
;;    `doremi-bg-magenta+', `doremi-bg-purity+', `doremi-bg-red+',
;;    `doremi-bg-saturation+', `doremi-bg-value+',
;;    `doremi-bg-yellow+', `doremi-buffer-font-size+',
;;    `doremi-face-bg+', `doremi-face-bg-color-name+',
;;    `doremi-face-bg-hue-stepping-saturation+', `doremi-face-fg+',
;;    `doremi-face-fg-color-name+',
;;    `doremi-face-fg-hue-stepping-saturation+', `doremi-fg+',
;;    `doremi-fg-blue+', `doremi-fg-brightness+',
;;    `doremi-fg-color-name+', `doremi-fg-cyan+', `doremi-fg-green+',
;;    `doremi-fg-hue+', `doremi-fg-hue-stepping-saturation+',
;;    `doremi-fg-magenta+', `doremi-fg-purity+', `doremi-fg-red+',
;;    `doremi-fg-saturation+', `doremi-fg-value+',
;;    `doremi-fg-yellow+', `doremi-font+', `doremi-font-size+',
;;    `doremi-frame-configs+', `doremi-frame-font-size+',
;;    `doremi-frame-height+', `doremi-frame-horizontally+',
;;    `doremi-frame-vertically+', `doremi-frame-width+',
;;    `doremi-increment-background-color',
;;    `doremi-increment-color-component',
;;    `doremi-increment-face-bg-color',
;;    `doremi-increment-face-fg-color',
;;    `doremi-increment-foreground-color',
;;    `doremi-set-background-color', `doremi-set-foreground-color',
;;    `doremi-toggle-wrap-color', `doremi-undo-last-face-change',
;;    `doremi-undo-last-frame-color-change',
;;    `toggle-doremi-wrap-color'.
;;
;;
;;  Non-interactive functions defined here:
;;
;;    `doremi-adjust-increment-for-color-component',
;;    `doremi-all-faces-bg/fg-1', `doremi-all-frames-bg/fg-1',
;;    `doremi-bg-1', `doremi-bg/fg-color-name-1', `doremi-delete-if',
;;    `doremi-face-bg/fg-1', `doremi-face-bg/fg-color-name-1',
;;    `doremi-face-color-component',
;;    `doremi-face-hue-stepping-saturation', `doremi-face-set',
;;    `doremi-fg-1', `doremi-frame-color-component',
;;    `doremi-frame-config-wo-parameters',
;;    `doremi-frame-hue-stepping-saturation',
;;    `doremi-frame-new-position',
;;    `doremi-increment-background-color-1', `doremi-increment-color',
;;    `doremi-increment-face-color',
;;    `doremi-increment-face-color-read-args', `doremi-face-default',
;;    `doremi-increment-blue', `doremi-increment-foreground-color-1',
;;    `doremi-increment-frame-color', `doremi-increment-green',
;;    `doremi-increment-red', `doremi-push-current-frame-config',
;;    `doremi-push-frame-config-for-command', `doremi-read-component',
;;    `doremi-read-increment-arg', `doremi-set-frame-color',
;;    `doremi-wrap-or-limit-color-component'.
;;
;;
;;  Internal variables defined here:
;;
;;    `doremi-current-increment', `doremi-frame-config-ring',
;;    `doremi-last-face-value', `doremi-last-frame-color'.
;;
;;
;;  See also these related Do Re Mi libraries:
;;
;;    `doremi-mac.el' - Macro to define Do Re Mi commands and
;;                      automatically add them to a Do Re Mi menu.
;;    `doremi-cmd.el' - Do Re Mi commands not dealing with frames.
;;
;;  See also these files for other frame commands:
;;
;;     `autofit-frame.el' - Automatically fit each frame to its
;;                          selected window.  Uses `fit-frame.el'.
;;
;;     `fit-frame.el'     - 1) Fit a frame to its selected window.
;;                          2) Incrementally resize a frame.
;;
;;     `frame-cmds.el'    - Various frame and window commands.
;;
;;     `thumb-frm.el'     - Shrink frames to a thumbnail size and
;;                          restore them again.
;;
;;     `zoom-frm.el'      - Zoom a frame, so that its font becomes
;;                          larger or smaller.
;;
;;
;;  Put this in your init file (`~/.emacs'): (require 'doremi-frm)
;;
;;  Suggested key bindings:
;;
;;   (defalias 'doremi-prefix (make-sparse-keymap))
;;   (defvar doremi-map (symbol-function 'doremi-prefix)
;;     \"Keymap for Do Re Mi commands.\")
;;   (define-key global-map \"\\C-xt\" 'doremi-prefix)
;;   (define-key doremi-map \"a\" 'doremi-all-faces-fg+)    ; \"All\"
;;   (define-key doremi-map \"c\" 'doremi-bg+)              ; \"Color\"
;;   (define-key doremi-map \"f\" 'doremi-face-fg+)         ; Face\"
;;   (define-key doremi-map \"h\" 'doremi-frame-height+)
;;   (define-key doremi-map \"t\" 'doremi-font+)            ; \"Typeface\"
;;   (define-key doremi-map \"u\" 'doremi-frame-configs+)   ; \"Undo\"
;;   (define-key doremi-map \"x\" 'doremi-frame-horizontally+)
;;   (define-key doremi-map \"y\" 'doremi-frame-vertically+)
;;   (define-key doremi-map \"z\" 'doremi-font-size+))      ; \"Zoom\"
;;
;;  Customize the menu.  Uncomment this to try it out.
;;
;;   (defvar menu-bar-doremi-menu (make-sparse-keymap \"Do Re Mi\"))
;;   (define-key global-map [menu-bar doremi]
;;     (cons \"Do Re Mi\" menu-bar-doremi-menu))
;;   (define-key menu-bar-doremi-menu [doremi-frame-configs+]
;;     '(menu-item \"Frame Configurations\"  doremi-frame-configs+
;;       :help \"Cycle among frame configurations recorded: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-font+]
;;     '(menu-item \"Font\"  doremi-font+
;;       :help \"Successively cycle among fonts, choosing by name: `up'/`down'\"))
;;   (when (fboundp 'text-scale-increase)    ; Emacs 23+.
;;     (define-key menu-bar-doremi-menu [doremi-buffer-font-size+]
;;       '(menu-item \"Buffer Text Size (Zoom)\" doremi-buffer-font-size+
;;         :help \"Change text size for buffer incrementally: `up'/`down'\")))
;;   (define-key menu-bar-doremi-menu [doremi-frame-font-size+]
;;     '(menu-item \"Frame Font Size (Zoom)\" doremi-frame-font-size+
;;       :help \"Change font size for frame incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-all-frames-fg+]
;;     '(menu-item \"All Frame Foregrounds...\" doremi-all-frames-fg+
;;       :help \"Change foreground of all frames incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-all-frames-bg+]
;;     '(menu-item \"All Frame Backgrounds...\" doremi-all-frames-bg+
;;       :help \"Change background of all frames incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-undo-last-frame-color-change]
;;     '(menu-item \"Undo Frame Color Change\" doremi-undo-last-frame-color-change
;;       :enable doremi-last-frame-color
;;       :help \"Undo the last frame color change by `doremi-fg+' or `doremi-bg+'\"))
;;   (define-key menu-bar-doremi-menu [doremi-fg-color-name+]
;;     '(menu-item \"Frame Foreground Name...\" doremi-fg-color-name+
;;       :help \"Change frame foreground color incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-fg+]
;;     '(menu-item \"Frame Foreground...\" doremi-fg+
;;       :help \"Change frame foreground color incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-bg-color-name+]
;;     '(menu-item \"Frame Background Name...\" doremi-bg-color-name+
;;       :help \"Change frame background color incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-bg+]
;;     '(menu-item \"Frame Background...\" doremi-bg+
;;       :help \"Change frame background color incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-all-faces-fg+]
;;     '(menu-item \"All Faces - Foreground...\" doremi-all-faces-fg+
;;       :help \"Change foreground color of all faces incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-all-faces-bg+]
;;     '(menu-item \"All Faces - Background...\" doremi-all-faces-bg+
;;       :help \"Change background color of all faces incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-undo-last-face-change]
;;     '(menu-item \"Undo Face Color Change\" doremi-undo-last-face-change
;;       :enable (facep 'doremi-last-face) ; Actually, it's always non-nil.
;;       :help \"Undo the last face color change by Do Re Mi\"))
;;   (define-key menu-bar-doremi-menu [doremi-face-fg-color-name+]
;;     '(menu-item \"Face Foreground Name...\" doremi-face-fg-color-name+
;;       :help \"Change foreground color name of a face incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-face-fg+]
;;     '(menu-item \"Face Foreground...\" doremi-face-fg+
;;       :help \"Change foreground color of a face incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-face-bg-color-name+]
;;     '(menu-item \"Face Background Name...\" doremi-face-bg-color-name+
;;       :help \"Change background color name of a face incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-face-bg+]
;;     '(menu-item \"Face Background...\" doremi-face-bg+
;;       :help \"Change background color of a face incrementally: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-frame-vertically+]
;;     '(menu-item \"Move Frame\" doremi-frame-vertically+
;;       :help \"Move frame incrementally: `up'/`down'/`left'/`right'\"))
;;   (define-key menu-bar-doremi-menu [doremi-frame-height+]
;;     '(menu-item \"Frame Size\" doremi-frame-height+
;;       :help \"Resize frame incrementally: `up'/`down'/`left'/`right'\"))
;;
;;
;;  TO DO?
;;
;;    1. Factor out more common stuff between foreground and background.
;;    2. Make it easy to turn on and off doremi-push-frame-config stuff.
;;    3. Integrate more with Customize.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (doremi-cmd . [(20131226 1833) ((doremi (0))) "Miscellaneous Do Re Mi commands" single ";;; Commentary:
;;
;;    Miscellaneous Do Re Mi commands.
;;
;;  During Do Re Mi commands, you can press and hold an up/down arrow
;;  key, or rotate the mouse wheel, to change face attributes or frame
;;  parameters.  For more info, see file `doremi.el' and the
;;  doc-string for function `doremi' in particular.
;;
;;  NOTE: Functions and variables in this library have the prefix
;;        `doremi-'.  In order to more easily distinguish commands
;;        that iterate in Do Re Mi fashion from other functions in the
;;        library, the iterative commands are suffixed with `+'.
;;
;;  If you also use library `crosshairs.el' (which requires libraries
;;  `hl-line.el', `hl-line+.el', `vline.el', and `col-highlight.el'),
;;  then commands `doremi-marks+' and `doremi-global-marks+' use
;;  crosshairs to highlight the mark positions when you visit them.
;;
;;  Note on saving changes made with the commands defined here:
;;
;;    Some of the commands defined here change face and frame
;;    properties. You can save any changes you have made, by using
;;    Customize. To visit a Customize buffer of all unsaved changes
;;    you have made, use command `customize-customized'.
;;
;;    Frame parameter changes, such as background color, can be saved
;;    for future use by all frames or all frames of a certain
;;    kind. For that, you must change the frame parameters of the
;;    correponding frame-alist variable.
;;
;;    There is no single variable for saving changes to parameters of
;;    the current frame. Instead, there are several different
;;    frame-alist variables, which you can use to define different
;;    kinds of frames. These include: `default-frame-alist',
;;    `initial-frame-alist', and `special-display-frame-alist'. The
;;    complete list of such frame alist variables is available using
;;    function `frame-alist-var-names', defined in library
;;    `frame-cmds.el'.
;;
;;    Example: Suppose you change the background color of a frame and
;;    want to make that the default background color for new frames in
;;    the future. You will need to update the value of variable
;;    `default-frame-alist' to use the `background-color' parameter
;;    setting of the changed frame.
;;
;;    You can easily copy one or all parameter values from any given
;;    frame to any frame alist (such as `default-frame-alist'), by
;;    using the commands `set-frame-alist-parameter-from-frame' and
;;    `set-all-frame-alist-parameters-from-frame'. Those commands are
;;    defined in library `frame-cmds.el'.
;;
;;
;;  User options defined here:
;;
;;    `doremi-color-themes', `doremi-custom-themes' (Emacs 24+),
;;    `doremi-custom-themes-accumulate-flag' (Emacs 24+),
;;    `doremi-themes-update-flag'.
;;
;;  Commands defined here:
;;
;;    `doremi-bookmarks+', `doremi-buffers+', `doremi-color-themes+',
;;    `doremi-custom-themes+' (Emacs 24+), `doremi-global-marks+',
;;    `doremi-marks+', `doremi-window-height+',
;;    `doremi-window-width+'.
;;
;;  Non-interactive functions defined here:
;;
;;    `doremi-buffers-1', `doremi-color-themes-1',
;;    `doremi-custom-themes-1' (Emacs 24+), `doremi-global-marks-1',
;;    `doremi-marks-1'.
;;
;;
;;  Add this to your initialization file (~/.emacs or ~/_emacs):
;;
;;    (require 'doremi-cmd)
;;
;;
;;  See also these related Do Re Mi libraries:
;;
;;    `doremi-frm.el' - Do Re Mi commands to adjust frame properties.
;;
;;    `doremi-mac.el' - Macro to define Do Re Mi commands and
;;                      automatically add them to a Do Re Mi menu.
;;
;;
;;  Suggested bindings:
;;
;;   (defalias 'doremi-prefix (make-sparse-keymap))
;;   (defvar doremi-map (symbol-function 'doremi-prefix)
;;     \"Keymap for Do Re Mi commands.\")
;;   (define-key global-map \"\\C-xt\" 'doremi-prefix)
;;   (define-key doremi-map \"b\" 'doremi-buffers+)
;;   (define-key doremi-map \"g\" 'doremi-global-marks+)
;;   (define-key doremi-map \"m\" 'doremi-marks+)
;;   (define-key doremi-map \"r\" 'doremi-bookmarks+) ; reading books?
;;   (define-key doremi-map \"s\" 'doremi-custom-themes+) ; custom schemes
;;   (define-key doremi-map \"w\" 'doremi-window-height+)
;;
;;  Customize the menu. Uncomment this to try it out.
;;
;;   (defvar menu-bar-doremi-menu (make-sparse-keymap \"Do Re Mi\"))
;;   (define-key global-map [menu-bar doremi]
;;     (cons \"Do Re Mi\" menu-bar-doremi-menu))
;;   (define-key menu-bar-doremi-menu [doremi-custom-themes]
;;     '(menu-item \"Custom Themes\" . doremi-custom-themes+
;;       :help \"Successively cycle among custom themes: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-global-marks]
;;     '(menu-item \"Global Marks\" . doremi-global-marks+
;;       :help \"Successively cycle among global marks: `up'/`down'\")))
;;   (define-key menu-bar-doremi-menu [doremi-marks]
;;     '(menu-item \"Marks in Buffer\" . doremi-marks+
;;       :help \"Successively cycle among marks in this buffer: `up'/`down'\")))
;;   (define-key menu-bar-doremi-menu [doremi-bookmarks]
;;     '(menu-item \"Bookmarks\" . doremi-bookmarks+
;;       :help \"Successively cycle among bookmarks: `up'/`down'\")))
;;   (define-key menu-bar-doremi-menu [doremi-buffers]
;;     '(menu-item \"Buffers\" . doremi-buffers+
;;       :help \"Successively cycle among buffers: `up'/`down'\"))
;;   (define-key menu-bar-doremi-menu [doremi-window-height]
;;     '(menu-item \"Window Size\" doremi-window-height+
;;       :help \"Resize window incrementally: `up'/`down'/`left'/`right'\"
;;       :enable (not (one-window-p)))))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (doremi . [(20131226 1835) nil "Do Re Mi: Incremental change using arrow keys or mouse wheel." single ";;; Commentary:
;;
;;    Do Re Mi: Incremental change using arrow keys or mouse wheel.
;;
;; When you invoke Do Re Mi commands, you can then press and hold an
;; up/down arrow key, or turn the mouse wheel, to run up and down the
;; scale: do, re, mi,...
;;
;; Use the up/down arrow keys or the mouse wheel to:
;;
;;  - Change nearly any parameter incrementally (dynamically).
;;
;;  - Repeat an action.
;;
;;  - Cycle through a set of values, without changing anything (for
;;    example, to choose an item).  In this use, think of choosing
;;    from a menu.  This is similar to using a minibuffer history.
;;    The input choices can take the form of any Emacs-Lisp sequence
;;    (list, array, string, vector) - this sequence is converted to a
;;    circular structure (ring).
;;
;;  - Do just about anything: call a different function for each
;;    arrow.
;;
;; This works with numerical parameters that can be incremented and
;; decremented, and it works with parameters that can take on one of a
;; number of values.  In fact, it is even more general than that: you
;; can use it to associate nearly any function or pair of functions
;; with the arrow keys and the mouse wheel.
;;
;; By default, the up and down arrow keys are used, but any other keys
;; may be used instead.  Mouse wheel movements are recognized for
;; Emacs 20 and Emacs 21 (using library `mwheel.el').  `mouse-2'
;; presses are ignored, so that they won't interfere with rotating the
;; wheel.
;;
;; See the doc string for function `doremi' for more information.
;;
;; Code defining a few example commands is included here (but
;; commented out), so you can see how to use this.  For more examples
;; of using function `doremi', see files `doremi-frm.el' and
;; `doremi-cmd.el'.
;;
;; For Emacs prior to release 23, this library requires library
;; `ring+.el', which provides extensions to the standard library
;; `ring.el' to let you manipulate circular structures.  (Library
;; `ring+.el' is part of GNU Emacs 23 and later.)
;;
;;
;;  Non-interactive functions defined here:
;;
;;    `doremi', `doremi-intersection', `doremi-limit',
;;    `doremi-set-new-value', `doremi-wrap'.
;;
;;  User options (variables) defined here:
;;
;;    `doremi-boost-down-keys', `doremi-boost-scale-factor',
;;    `doremi-boost-up-keys', `doremi-down-keys', `doremi-up-keys'.
;;
;;  Add this to your initialization file (~/.emacs or ~/_emacs):
;;
;;    (require 'doremi)
;;
;;  See also these related libraries that make use of `doremi':
;;
;;    `doremi-frm.el' - Incrementally adjust frame properties.
;;    `doremi-cmd.el' - Other Do Re Mi commands.
;;    `doremi-mac.el' - Macro to define Do Re Mi commands and
;;                      automatically add them to Do Re Mi menu.
;;
;;  This has been tested on GNU Emacs 20, 21, and 22 on MS Windows.
;;
;;
;; TO DO?:
;;
;;   - Replace `boost-*' keys by test for modifiers (as for wheel).
;;   - Combine with customize.  That is, have customize buffers use
;;     Do Re Mi commands to defined numeric or enumeration values.
;;   - Provide buttons (menu items) in menus that act like up & down
;;     arrows.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (dom . [(20091224 1827) nil "DOM implementation" single ";;; Commentary:

;; If you are working with XML documents, the parsed data structure
;; returned by the XML parser (xml.el) may be enough for you: Lists of
;; lists, symbols, strings, plus a number of accessor functions.
;;
;; If you want a more elaborate data structure to work with your XML
;; document, you can create a document object model (DOM) from the XML
;; data structure using dom.el.
;;
;; You can create a DOM from XML using `dom-make-document-from-xml'.
;; Note that `xml-parse-file' will return a list of top level elements
;; found in the file, so you must choose one element in that list.
;; Here's an example:
;;
;; (setq doc (dom-make-document-from-xml (car (xml-parse-file \"sample.xml\"))))
;;
;; Note that this DOM implementation uses the attributes and tag names
;; used by the XML parser.  If the XML parser uses symbols instead of
;; string (like xml.el does), then dom.el will also use symbols.  If the
;; XML parsers uses strings (like xml-parse.el does), then dom.el will
;; use strings.
;;
;; It should be trivial to write functions analogous to the
;; dom-*-from-xml functions in order to use an another XML parsers (from
;; psgml.el, for example).

;;; On Interfaces and Classes

;; The elisp DOM implementation uses the dom-node structure to store all
;; attributes.  The various interfaces consist of sets of functions to
;; manipulate these dom-nodes.  The functions of a certain interface
;; share the same prefix.

"]) (dollaro . [(20130620 1325) ((s (1 6 0))) "simple text templates" single ";;; Commentary:

;; This package provides a simple text template engine.
;; A template is a simple text containing $[variable-name] blocks.
;;
;; Literal $ symbols can be inserted normally unless they are followed by
;; an open square bracket, in which case they must be doubled.
;;
;; Example:
;; '$$[foo]' will be rendered as '$[foo]' after template substitution.
;;
;; Two functions are provided, `$:fill-template' and
;; `$:fill-template-from-file', that operate respectively on strings
;; and on files. The template variable values are passed as alists.
;;
;; To use these functions, just
;;  (require 'dollaro)
;;
;; Example Usage:
;; ($:fill-template \"First Name: $[first-name], Last Name: $[last-name]\"
;;                  '((first-name . \"Giovanni\") (last-name . \"Cane\")))
;;
;; ($:fill-template-from-file \"/path/to/template/file\" \"/path/to/destination/file\"
;;                            '((some-var . \"some value\") (another-var . \"another value\")))
;;
"]) (dockerfile-mode . [(20131118 620) nil "Major mode for editing Docker's Dockerfiles" single nil]) (docbook-snippets . [(20130716 1849) ((yasnippet (0 8 0))) "Yasnippets for DocBook" tar ";;; Commentary:

;; DocBook 4.5 yasnippets according to DocBook: The Definitive Guide,
;; version 2.0.17

"]) (dna-mode . [(20130821 1105) nil "a major mode for editing dna sequences" tar ";;; Commentary:
;; * A collection of functions for editing DNA sequences.  It
;;   provides functions to make editing dna in Emacs easier.
;;
;; Dna-mode will:
;;  * Fontify keywords and line numbers in sequences.
;;  * Fontify bases when font-lock-mode is disabled.
;;  * Incrementally search dna over pads and numbers.
;;  * Complement and reverse complement a region.
;;  * Move over bases and entire sequences.
;;  * Detect sequence files by content.

;;; Installation:
;; --------------------
;; Here are two suggested ways for installing this package.
;; You can choose to autoload it when needed, or load it
;; each time emacs is started.  Put one of the following
;; sections in your .emacs:
;;
;; ---Autoload:
;;  (autoload 'dna-mode \"dna-mode\" \"Major mode for dna\" t)
;;  (add-to-list 'magic-mode-alist '(\"^>\\\\|ID\\\\|LOCUS\\\\|DNA\" . dna-mode))
;;  (add-to-list
;;     'auto-mode-alist
;;     '(\"\\\\.\\\\(fasta\\\\|fa\\\\|exp\\\\|ace\\\\|gb\\\\)\\\\'\" . dna-mode))
;;  (add-hook 'dna-mode-hook 'turn-on-font-lock)
;;
;; ---Load:
;;  (setq dna-do-setup-on-load t)
;;  (load \"/pathname/dna-mode\")
;;
;; The dna-isearch-forward function (and isearch in general)
;; is much more useful with something like the following:
;;  (make-face 'isearch)
;;  (set-face-background 'isearch \"yellow\")
;;  (setq-default search-highlight t)

"]) (dkmisc . [(20131110 315) ((emacs (24 1))) "Miscellaneous functions required by dk* packages." tar nil]) (dklrt . [(20131110 541) ((dkmisc (0 50)) (ledger-mode (20130908 1357)) (emacs (24 1))) "Ledger Recurring Transactions." tar nil]) (dkdo . [(20131110 319) ((dkmisc (0 50)) (emacs (24 1))) "Do List major mode based on org-mode." tar nil]) (django-theme . [(20131022 202) nil "Custom face theme for Emacs" single nil]) (dizzee . [(20111009 616) nil "A more pleasant way to manage your project's subprocesses in Emacs." tar nil]) (dispass . [(20130525 434) nil "Emacs wrapper for DisPass" single ";;; Commentary:

;; dispass.el is an Emacs wrapper around DisPass
;; (http://dispass.babab.nl).  For more information see the README.org
;; and NEWS files.

;; This version is written for use with DisPass v0.2.0.

"]) (disk . [(20081128 1506) nil "simplified find-file, revert-file, save-buffer interface" single ";;; Commentary:

;; This unifies disk operations on a file.  Use it by binding it to a
;; key.  Example setup in your ~/.emacs file:
;;
;; (global-set-key (kbd \"<f9>\") 'disk)
;; (autoload 'disk \"disk\" \"Save, revert, or find file.\" t)

"]) (discover . [(20140103 1339) ((makey (0 3))) "discover more of Emacs" single ";;; Commentary:
;;
;; discover.el adds context menus to commonly-used features in
;; Emacs. The context menu functionality is provided by makey.el, a
;; library based on the popup menus used in Magit.
;;
;; For more information read this:
;;
;; http://www.masteringemacs.org/articles/2013/12/21/discoverel-discover-emacs-context-menus/
;;

"]) (disaster . [(20130509 1055) nil "Disassemble C/C++ code under cursor in Emacs" single ";;; Commentary:

;; ![Screenshot](http://i.imgur.com/kMoN1m6.png)
;;
;; Disaster lets you press `C-c d` to see the compiled assembly code for the
;; C/C++ file you're currently editing. It even jumps to and highlights the
;; line of assembly corresponding to the line beneath your cursor.
;;
;; It works by creating a `.o` file using make (if you have a Makefile) or the
;; default system compiler. It then runs that file through objdump to generate
;; the human-readable assembly.

;;; Installation:

;; Make sure to place `disaster.el` somewhere in the load-path and add the
;; following lines to your `.emacs` file to enable the `C-c d` shortcut to
;; invoke `disaster':
;;
;;     (add-to-list 'load-path \"/PATH/TO/DISASTER\")
;;     (require 'disaster)
;;     (define-key c-mode-base-map (kbd \"C-c d\") 'disaster)
;;

"]) (direx . [(20130930 1224) nil "Simple Directory Explorer" tar ";;; Commentary:

;; 

"]) (dired-toggle-sudo . [(20131022 626) nil "Browse directory with sudo privileges." single ";;; Commentary:
;;
;; Allow to switch from current user to sudo when browsind `dired' buffers.
;;
;; To activate and swit with \"C-c C-s\" just put in your .emacs:
;;
;; (require 'dired-toggle-sudo)
;; (define-key dired-mode-map (kbd \"C-c C-s\") 'dired-toggle-sudo)
;; (eval-after-load 'tramp
;;  '(progn
;;     ;; Allow to use: /sudo:user@host:/path/to/file
;;     (add-to-list 'tramp-default-proxies-alist
;;		  '(\".*\" \"\\\\`.+\\\\'\" \"/ssh:%h:\"))))



"]) (dired-toggle . [(20131023 110) nil "provide a simple way to toggle dired buffer for current directory" single ";;; Commentary:
;;
;; Description:
;;
;; `dired-toggle' provide an simple way to toggle dired buffer for
;; current directory(similar to `dired-jump'), and the target buffer
;; is specified so that it will be divided from other dired buffers,
;; for example the dired buffer only shown in a special name which
;; could be edit through the variable `dired-toggle-buffer-name', and
;; it will include a minor mode named `dired-toggle-mode' to ensure
;; all the actions(such as change directory and open a selected file)
;; under the dired buffer will not influence other dired buffers and
;; works as we expected.
;;
;; You could custom the toggled window's size and side through
;; variable `dired-toggle-window-size' and `dired-toggle-window-side'.
;;
;; Source: https://github.com/fasheng/dired-toggle
;;
;; Tips: For a good user experience you may want to use
;; `dired-details.el' or `dired-hide-details-mode' if use Emacs 24.4
;; or later.
;;
;;
;; Usage:
;;
;; Just add the following to your .emacs:
;;
;; (global-set-key (kbd \"<f5>\") 'dired-toggle)
;;
;; You could also custom functions after `dired-toggle-mode' enabled,
;; for example enable `visual-line-mode' for our narrow dired buffer:
;;
;; (add-hook 'dired-toggle-mode-hook
;;           (lambda () (interactive)
;;             (visual-line-mode 1)
;;             (setq-local visual-line-fringe-indicators '(nil right-curly-arrow))
;;             (setq-local word-wrap nil)))
;;
;;
;; Default key-bindings:
;;
;; | \"q\"       | dired-toggle-action-quit         |
;; | \"RET\"     | dired-toggle-action-find-file    |
;; | \"^\"       | dired-toggle-action-up-directory |
;; | \"C-c C-u\" | dired-toggle-action-up-directory |
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (dired-sort-menu . [(20130824 1207) nil "provide menu/dialogue for dired sort options" single ";;; Commentary:

;; This package, which is intended for use with GNU Emacs 20/21,
;; implements a menu and a dialogue that consist of a set of radio
;; buttons and toggles to control sort order in dired mode.  The menu
;; is added as a submenu to the Immediate menu, and bound to S-mouse-2
;; as a popup menu.  The dialogue can be accessed via the menu or the
;; dired key binding `C-d' or the command `dired-sort-dialogue', which
;; *must* be run in a dired buffer!  The dialogue uses the Emacs
;; widget library, which does not require GUI support but uses it if
;; available.  The dialogue can be used with a character-based
;; display; the main keys to use are <TAB> and <RET> if a mouse is not
;; available or does not work.  With a GUI the dialogue pops up its
;; own frame by default; otherwise it uses part of the dired window.
;; This is controlled by the customizable user option
;; `dired-sort-dialogue-own-frame'.

;; The menu and dialogue support the `ls' sort switches [tSXUucrR].
;; These are all implemented by GNU `ls'; the subset [tSucr] are
;; implemented by the standard Emacs 20 `ls-lisp' emulation and all
;; are implemented by the Emacs 21 `ls-lisp' (see above URL).
;; Changing a main sort option turns off reverse sorting; toggling
;; reverse sorting does not change the main sort option.  Setting any
;; prefix argument before selecting a sort order reverses it
;; (e.g. press `C-u' or `C-number' or `M-number' BEFORE accessing the
;; menu bar).  The menu also supports two Emacs 21 `ls-lisp' switches:
;; `ls-lisp-ignore-case' ignores case in alphanumeric sorts and
;; `ls-lisp-dirs-first' lists all directories first.  (These latter
;; two switches improve compatibility with Microsoft Windows
;; Explorer.)

;; The toggles for reverse sorting, `ls-lisp-ignore-case' and
;; `ls-lisp-dirs-first', are bound respectively to the keys \"r\", \"c\"
;; and \"b\" in the dired map.

;; A `Configuration' submenu allows a dired sort configuration to be
;; saved or restored, the current and saved configurations to be
;; swaped (bound to \"T\" for \"toggle\"), or the default to be restored.
;; The saved configuration is saved as a customization, which can also
;; be changed directly.  This submenu also allows
;; `dired-sort-dialogue-own-frame' to be toggled.

;; If a `dired-sort-menu' option causes an error (but not if it is
;; just ignored) then it is automatically disabled via the
;; customization facility.  This is useful because not all `ls' and
;; `ftp' programs support the same sort options.

;; The dialogue allows the setting of arbitrary combinations of dired
;; sort options together, without requiring multiple menu accesses.
;; Each dired buffer has its own dialogue.  This dialogue can be left
;; displayed, in which case it is automatically updated to reflect any
;; changes to its dired buffer that are made by other means.  For
;; tidiness, a dialogue buffer is automatically killed whenever it or
;; its dired buffer becomes invisible.

;; To do:
;;   test `dired-sort-menu-invalid-options' facility;
;;   per-host `dired-sort-menu-invalid-options-remote';
;;   cascade multiple dialogue frames?

;;; Installation:

;; Put this file somewhere where Emacs can find it (i.e. in one of the
;; directories in your `load-path' such as `site-lisp'), optionally
;; byte-compile it (recommended), and put this in your .emacs:
;;
;; (add-hook 'dired-load-hook
;;           (lambda () (require 'dired-sort-menu)))


"]) (dired-sort-menu+ . [(20131226 1833) ((dired-sort-menu (0))) "Extensions to `dired-sort-menu.el'" single ";;; Commentary:
;;
;;    Extensions to `dired-sort-menu.el'
;;
;; Francis J. Wright <F.J.Wright@maths.qmw.ac.uk> wrote library
;; `dired-sort-menu.el' (http://centaur.maths.qmw.ac.uk/Emacs/).
;; Library `dired-sort-menu+.el' modifies `dired-sort-menu.el' to play
;; better with other libraries from Drew Adams.
;;
;; Changes:
;;
;;   1. The toggles for reverse sorting, `ls-lisp-ignore-case' and
;;      `ls-lisp-dirs-first', are bound respectively to \"a\", \"c\", and
;;      \"W\" in the dired map, instead of \"r\", \"c\" and \"b\".
;;
;;   2. We don't define `dired-sort-menu-toggle-ignore-case' and
;;      `dired-sort-menu-toggle-dirs-first' unless they can be used.
;;
;;   3. `handle-delete-frame' is protected against nil `buffer-name'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (dired-single . [(20130824 1200) nil "Reuse the current dired buffer to visit another directory" single ";;; Commentary:
;;
;;  This package provides a way to reuse the current dired buffer to visit
;;  another directory (rather than creating a new buffer for the new directory).
;;  Optionally, it allows the user to specify a name that all such buffers will
;;  have, regardless of the directory they point to.

;;; Installation:
;;
;;  Put this file on your Emacs-Lisp load path and add the following to your
;;  ~/.emacs startup file
;;
;;     (require 'dired-single)
;;
;;  or you can load the package via autoload:
;;
;;     (autoload 'dired-single-buffer \"dired-single\" \"\" t)
;;     (autoload 'dired-single-buffer-mouse \"dired-single\" \"\" t)
;;     (autoload 'dired-single-magic-buffer \"dired-single\" \"\" t)
;;     (autoload 'dired-single-toggle-buffer-name \"dired-single\" \"\" t)
;;
;;  To add a directory to your load-path, use something like the following:
;;
;;      (setq load-path (cons (expand-file-name \"/some/load/path\") load-path))
;;
;;  See below for key-binding suggestions.

"]) (dired-imenu . [(20140109 810) nil "imenu binding for dired mode" single ";;; commentary:
;;
;; After you add the following line to your Emacs init file you can
;; call imenu from a dired buffer and get a list of all files in the
;; current buffer with completion. That's easier to use the isearch if
;; you use something like idomenu.
;;
;; (require 'dired-imenu)
;;
"]) (dired-efap . [(20131121 209) nil "Edit Filename At Point in a dired buffer" single ";;; Commentary:

;; dired-efap.el allows the user to edit the filename at point, by hitting
;; a key (like f2) or double-clicking it.  The name is edited in the dired
;; buffer, and the renaming takes effect when the user hits the RET
;; key.  Only the name of the file at point is tangible and editable, and it
;; uses an special font.
;;
;; This package provides a similar user interface to renaming files to the
;; interface used by some graphical file managers (or \"explorers\", however they
;; are called).
;;
;; The idea for this file was originated from a suggestion I received from Eli
;; Tziperman to improve wdired.
;;
;; Comments, bug reports and ideas welcomed

"]) (dired-dups . [(20130527 1425) nil "Find duplicate files and display them in a dired buffer" single ";;; Commentary: 
;;
;; Bitcoin donations gratefully accepted: 12k9zUo9Dgqk8Rary2cuzyvAQWD5EAuZ4q
;;
;; This library provides the command `dired-find-duplicates' which searches a directory for
;; duplicates of the marked files in the current dired buffer.
;; It requires that the unix find and md5sum commands are on your system.

;;; Installation:
;;
;; Put dired-dups.el in a directory in your load-path, e.g. ~/.emacs.d/
;; You can add a directory to your load-path with the following line in ~/.emacs
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;; where ~/elisp is the directory you want to add 
;; (you don't need to do this for ~/.emacs.d - it's added by default).
;;
;; Add the following to your ~/.emacs startup file.
;;
;; (require 'dired-dups)

"]) (dired-details . [(20130824 1158) nil "make file details hide-able in dired" single ";;; Commentary:

;; `dired-details-hide' makes dired buffers that look like this:
;;
;;  /private/rgiardin/lispHome:
;;  used 1264 available files
;;
;;  drwxr-xr-x   5 rgiardin g632         512 Jan 19  2003 ..
;;  -rw-r--r--   1 rgiardin svrtech     4141 Aug 23 17:07 dired-details.el
;;  -rw-r--r--   1 rgiardin svrtech     4141 Aug 23 17:07 my-really-really-long-I-mean-really-long-filename.el
;;  -rw-r--r--   1 rgiardin svrtech       56 Aug 23 17:07 linked-file.el -> /var/tmp/checkouts/linked-file.el
;;
;; look like this:
;;
;;  /private/rgiardin/lispHome/emacs.config:
;;  used 1264 available files
;;
;;  [...] ..
;;  [...] dired-details.el
;;  [...] my-really-really-long-I-mean-really-long-filename.el
;;  [...] linked-file.el -> [...]
;;
;; The function `dired-details-toggle' will toggle details on and off.
;;
;;
;; INSTALLATION:
;;
;; To apply `dired-details-hide' to all new dired buffers, add the
;; following to your .emacs:
;;
;; (require 'dired-details)
;; (dired-details-install)
;;
;; This also binds the following keys in dired buffers:
;;
;;   ) - dired-details-show
;;   ( - dired-details-hide
;;
;; CHANGES:
;;
;; * 1.3.2: Added sr-mode to dired-details-hide function to make it word with
;;          Sunrise Commander
;; * 1.3.1: Allow \"misc lines (total used, find-dired statuses, etc)\" to be hidden;
;;          suggested by Chris Poole
;; * 1.3: dired-details-toggle and customization support added by Klaus Berndl
;; * 1.2.4: Setup hide and show keybindings earlier than the first hide.
;; * 1.2.3: add dired-details-initially-hide customization as suggested by Harold Maier
;; * 1.2.2: extensive change to support subdirs in dired buffers
;; * 1.2.1: respect current hidden state (not initial state) when inserting subdirs
;;
;; TODO:
;; * add a hook for dired-add-file to hide new entries as necessary
;;

;;; customizable vars

(defgroup dired-details nil
  \"Settings for the dired-details package.\"
  :group 'dired
  :prefix \"dired-details-\")

(defcustom dired-details-hidden-string \"[...]\"
  \"*This string will be shown in place of file details and symbolic links.\"
  :group 'dired-details
  :type 'string)

(defcustom dired-details-hide-link-targets t
  \"*Hide symbolic link target paths.\"
  :group 'dired-details
  :type 'boolean)

(defcustom dired-details-initially-hide t
  \"*Hide dired details on entry to dired buffers.\"
  :group 'dired-details
  :type 'boolean)

(defcustom dired-details-hide-extra-lines t
  \"*Hides lines matching any regex in `dired-details-invisible-lines'.
Changing this variable will not affect existing dired buffers.\"
  :group 'dired-details
  :type 'boolean)

(defcustom dired-details-invisible-lines
  '(\"total used in directory\" \"^\\\\s-*$\" \"find finished\" \"find \\\\.\" \"  wildcard \")
  \"*Hide dired details on entry to dired buffers.\"
  :group 'dired-details
  :type 'list)

;;; implementation

(defvar dired-details-debug nil)

(defvar dired-details-internal-overlay-list nil)
(make-variable-buffer-local 'dired-details-internal-overlay-list)

(defvar dired-details-state nil
  \"Three possible values: nil (has not been set), 'hidden (details are
hidden), 'shown (details are visible).\")
(make-variable-buffer-local 'dired-details-state)

(defun dired-details-install ()
  (eval-after-load \"dired\"
    '(progn
       (add-hook 'dired-after-readin-hook 'dired-details-activate)

       (define-key dired-mode-map \"(\" 'dired-details-hide)
       (define-key dired-mode-map \")\" 'dired-details-show)

       (defadvice dired-revert (before remember-the-details activate)
         (dired-details-delete-overlays)))))

(defun dired-details-activate ()
  \"Set up dired-details in the current dired buffer. Called by
dired-after-readin-hook on initial display and when a subdirectory is
inserted (with `i').\"
  ;;if a state has been chosen in this buffer, respect it
  (if dired-details-state
    (when (eq 'hidden dired-details-state)
      (dired-details-hide))
    ;;otherwise, use the default state
    (when dired-details-initially-hide
      (dired-details-hide))))

(defun dired-details-delete-overlays ()
  (mapc '(lambda (list) (mapc 'delete-overlay
                             (cdr list)))
        dired-details-internal-overlay-list)
  (setq dired-details-internal-overlay-list nil))

(defun dired-details-toggle ( &optional arg default-too )
  \"Toggle visibility of dired details.
With positive prefix argument ARG hide the details, with negative
show them.\"
  (interactive \"P\")
  (let ((hide (if (null arg)
                (not (eq 'hidden dired-details-state))
                (> (prefix-numeric-value arg) 0))))
    (if default-too
      (setq dired-details-initially-hide hide))
    (if hide (dired-details-hide)
        (dired-details-show))))

(defun dired-details-hide ()
  \"Make an invisible, evaporable overlay for each file-line's details
in this dired buffer.\"
  (interactive)
  (unless (memq major-mode '(dired-mode vc-dired-mode sr-mode))
    (error \"dired-details-hide can only be called in dired mode\"))

  (when dired-details-debug
    (let ((b (get-buffer-create \"dired-details-debug\")))
      (append-to-buffer b (point) (point-max))))

  ;;NOTE - we call this even if we're already hidden. There may be a
  ;;new subdirectory inserted that we have to deal with. Pre-existing
  ;;subdirectories will reuse their cached overlays.
  (save-excursion
    (save-restriction
      (widen)
      ;;hide each displayed subdirectory
      (mapc
       '(lambda (dir-and-pos)
          (let ((cached-overlays (assoc (car dir-and-pos)
                                        dired-details-internal-overlay-list)))
            (if cached-overlays
              ;;reuse the existing overlays
              (dired-details-frob-overlays t)
              ;;no existing overlays for this subdir, make 'em
              (let ((cache (list (car dir-and-pos)))
                    (subdir-start (cdr dir-and-pos))
                    (subdir-end (1- (dired-get-subdir-max dir-and-pos))))
                (goto-char subdir-start)
                (forward-line 1) ;;always skip the dir line
                ;;v1.3 (dired-goto-next-file)
                (while (< (point) subdir-end)
                  (dired-details-make-current-line-overlay cache)
                  (forward-line 1))
                  ;;v1.3 (dired-next-line 1))
                (setq dired-details-internal-overlay-list
                      (cons cache dired-details-internal-overlay-list))))))
       dired-subdir-alist)))
  (setq dired-details-state 'hidden))

(defun dired-details-show ()
  \"Show whatever details a call to `dired-details-hide' may have
hidden in this buffer.\"
  (interactive)
  (dired-details-frob-overlays nil)
  (setq dired-details-state 'shown))

(defun dired-details-make-current-line-overlay ( cache )
  (let* ((bol (progn (beginning-of-line) (point)))
         (totally-hide nil)
         (details              ;hide flags, size, owner, date, etc.
          (cond ((ignore-errors (dired-move-to-filename t))
                 (make-overlay (+ 2 bol) (point)))
                ((and dired-details-hide-extra-lines
                      (let ((line (buffer-substring (point-at-bol) (point-at-eol))))
                        (when (delq nil (mapcar (lambda (x) (string-match x line))
                                                dired-details-invisible-lines))
                          (let ((o (make-overlay bol (1+ (point-at-eol)))))
                            ;;this is delayed so that the hide-link bit below doesn't bork
                            (overlay-put o 'make-intangible t)
                            (overlay-put o 'suppress-before t)
                            o)))))))
         (ln-target            ;hide symlink dest
          (when dired-details-hide-link-targets
            (if (progn (beginning-of-line)
                       (search-forward-regexp
                        \"-> \\\\(.*\\\\)\"
                        (save-excursion (end-of-line) (point)) t))
              (make-overlay (match-beginning 1) (match-end 1))))))
    
    (when details
      (overlay-put details 'evaporate t)
      (dired-details-hide-overlay details)

      (when ln-target
        (overlay-put ln-target 'evaporate t)
        (dired-details-hide-overlay ln-target))

      (setcdr cache (append (if ln-target
                              (list ln-target details)
                              (list details))
                            (cdr cache))))))

(defun dired-details-hide-overlay (o)
  (overlay-put o 'invisible t)
  (if (overlay-get o 'make-intangible) (overlay-put o 'intangible t))
  (unless (overlay-get o 'suppress-before)
    (overlay-put o 'before-string dired-details-hidden-string)))

(defun dired-details-show-overlay (o)
  (overlay-put o 'invisible nil)
  (overlay-put o 'before-string nil))

(defun dired-details-frob-overlays ( hide )
  (if dired-details-internal-overlay-list
    (mapc '(lambda (list)
             (mapc (if hide 'dired-details-hide-overlay 'dired-details-show-overlay)
                   (cdr list)))
          dired-details-internal-overlay-list)))

(provide 'dired-details)

;;; dired-details.el ends here
"]) (dired-details+ . [(20131226 1832) ((dired-details (0))) "Enhancements to library `dired-details+.el'." single ";;; Commentary:
;;
;;  This enhances the functionality of library `dired-details.el'.
;;
;;
;;    NOTE: If you use Emacs 24.4 or later then you DO NOT NEED this
;;    library or library `dired-details.el'.  Instead, use
;;    `dired-hide-details-mode'.  Library `dired+.el' enhances
;;    `dired-hide-details-mode' to give it the save features as
;;    `dired-details+.el' provides.  Just use `(require 'dired+.el)'.
;;
;;
;;  `dired-details+.el' enhances `dired-details.el' in these ways:
;;
;;  1. It shrink-wraps Dired's frame whenever you show or hide
;;     details.  For this enhancement, you will need library
;;     `autofit-frame.el'.
;;
;;  2. It updates the listing whenever you create new files or
;;     directories or rename them.
;;
;;  3. It adds user option `dired-details-propagate-flag' which, if
;;     non-nil, propagates the last state you chose to the next Dired
;;     buffer you open.
;;
;;  4. It binds both `)' and `(' to `dired-details-toggle'.
;;
;;  Perhaps #2 corresponds to this TO-DO item in `dired-details.el':
;;
;;    * add a hook for dired-add-file to hide new entries as necessary
;;
;;
;;  ***** NOTE: The following function defined in `dired-details.el'
;;              has been REDEFINED HERE:
;;
;;  `dired-details-activate' - If `dired-details-propagate-flag' is
;;                             non-nil, then use the last state.
;;
;;
;;  Put this in your initialization file (~/.emacs):
;;
;;   (require 'dired-details+)
;;
;;  I also recommend customizing `dired-details-hidden-string' to use
;;  the value \"\" instead of the default \"[...]\" - less wasted space.
;;
;;  Note: This library also calls `dired-details-install', activates
;;  show/hide and binds key `)'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (dired+ . [(20140105 2215) nil "Extensions to Dired." single ";;; Commentary:
;;
;;    Extensions to Dired.
;;
;;  This file extends functionalities provided by standard GNU Emacs
;;  files `dired.el', `dired-aux.el', and `dired-x.el'.
;;
;;  Key bindings changed.  Menus redefined.  `diredp-mouse-3-menu'
;;  popup menu added.  New commands.  Some commands enhanced.
;;
;;  All of the new functions, variables, and faces defined here have
;;  the prefix `diredp-' (for Dired Plus) in their names.
;;
;;  Additional suggested key bindings:
;;
;;    (define-key ctl-x-map   \"d\" 'diredp-dired-files)
;;    (define-key ctl-x-4-map \"d\" 'diredp-dired-files-other-window)
;;
;;
;;  Hide/Show Details
;;  -----------------
;;
;;  Starting with Emacs 24.4, listing details are hidden by default.
;;  Use `(' anytime to toggle this hiding.  You can use option
;;  `diredp-hide-details-initially-flag' to change the default/initial
;;  state.  See also option `diredp-hide-details-propagate-flag'.
;;
;;  If you have an Emacs version older than 24.4, you can use library
;;  `dired-details+.el' (plus `dired-details.el') to get similar
;;  behavior.
;;
;;
;;  Fontification Level
;;  -------------------
;;
;;  If you want a maximum or minimum fontification for Dired mode,
;;  then customize option `font-lock-maximum-decoration'.  If you want
;;  a different fontification level for Dired than for other modes,
;;  you can do this too by customizing
;;  `font-lock-maximize-decoration'.
;;
;;
;;  Act on All Files
;;  ----------------
;;
;;  Most of the commands (such as `C' and `M-g') that operate on the
;;  marked files have the added feature here that multiple `C-u' use
;;  not the files that are marked or the next or previous N files, but
;;  *all* of the files in the Dired buffer.  Just what \"all\" files
;;  means changes with the number of `C-u', as follows:
;;
;;    `C-u C-u'         - Use all files present, but no directories.
;;    `C-u C-u C-u'     - Use all files and dirs except `.' and `..'.
;;    `C-u C-u C-u C-u' - use all files and dirs, `.' and `..'.
;;
;;    (More than four `C-u' act the same as two.)
;;
;;  This feature can be particularly useful when you have a Dired
;;  buffer with files chosen from multiple directories.
;;
;;  Note that this behavior is described only in the doc string of
;;  function `dired-get-marked-files'.  It is *not* described in the
;;  doc strings of the various commands, because that would require
;;  redefining each command separately here.  Instead, we redefine
;;  only macro `dired-map-over-marks' and function
;;  `dired-get-filename' in order to achieve this effect.
;;
;;
;;  Act on Marked (or All) Files Here and Below
;;  -------------------------------------------
;;
;;  The prefix argument behavior just described does not apply to the
;;  `diredp-*-recursive' commands.  These commands act on the marked
;;  files in the current Dired buffer or on all files in the directory
;;  if none are marked.
;;
;;  But these commands also handle marked subdirectories recursively,
;;  in the same way.  That is, they act also on the marked files in
;;  any marked subdirectories, found recursively.  If there is no
;;  Dired buffer for a given marked subdirectory then all of its files
;;  and subdirs are acted on.
;;
;;  With a prefix argument, all marks are ignored.  The commands act
;;  on all files in the current Dired buffer and all of its
;;  subdirectories, recursively.
;;
;;  All of the `diredp-*-recursive' commands are on prefix key `M-+',
;;  and they are available on submenu `Marked Here and Below' of the
;;  `Multiple' menu-bar menu.
;;
;;  If you use library `Icicles' then you have these additional
;;  commands/keys that act recursively on marked files.  They are in
;;  the `Icicles' submenu of menu `Multiple' > `Marked Here and
;;  Below'.
;;
;;  * `M-+ M-s M-s' or `M-s M-s m' - Use Icicles search (and its
;;                  on-demand replace) on the marked files.
;;
;;  * Save the names of the marked files:
;;
;;    `M-+ C-M->' - Save as a completion set, for use during
;;                  completion (e.g. with `C-x C-f').
;;
;;    `M-+ C->'   - Add marked names to the names in the current saved
;;                  completion set.
;;
;;    `M-+ C-}'   - Save persistently to an Icicles cache file, for
;;                  use during completion in another session.
;;
;;    `icicle-dired-save-marked-to-fileset-recursive' - Like `M-+
;;                  C-}', but save persistently to an Emacs fileset.
;;
;;    `M-+ C-M-}' - Save to a Lisp variable.
;;
;;
;;  In the other direction, if you have a saved set of file names then
;;  you can use `C-M-<' (`icicle-dired-chosen-files-other-window') in
;;  Dired to open a Dired buffer for just those files.  So you can
;;  mark some files and subdirs in a hierarchy of Dired buffers, use
;;  `M-+ C-}' to save their names persistently, then later use `C-{'
;;  to retrieve them, and `C-M-<' (in Dired) to open Dired on them.
;;
;;
;;  Wraparound Navigation
;;  ---------------------
;;
;;  In vanilla Dired, `dired-next-marked-file' (`M-}' or `* C-n') and
;;  `dired-previous-marked-file' (`M-{' or `* C-p') wrap around when
;;  you get to the end or the beginning of the Dired buffer.  Handy.
;;
;;  But the other navigation commands do not wrap around.  In Dired+
;;  they do, provided option `diredp-wrap-around-flag' is non-nil,
;;  which it is by default.  This means the following commands:
;;
;;    `diredp-next-line'     - `n', `C-n', `down', `SPC'
;;    `diredp-previous-line' - `p', `C-p', `up'
;;    `diredp-next-dirline'  - `>'
;;    `diredp-prev-dirline'  - `<'
;;    `diredp-next-subdir'   - `C-M-n'
;;    `diredp-prev-subdir'   - `C-M-p'
;;
;;
;;  Inserted Subdirs, Multiple Dired Buffers, Files from Anywhere,...
;;  -----------------------------------------------------------------
;;
;;  These two standard Dired features are worth pointing out:
;;
;;  * You can insert multiple subdirectory listings into a single
;;    Dired buffer using `i' on each subdir line.  Use `C-u i' to
;;    specify `ls' switches.  Specifying switch `R' inserts the
;;    inserted subdirectory's subdirs also, recursively.  You can also
;;    use `i' to bounce between a subdirectory line and its
;;    inserted-listing header line.  You can delete a subdir listing
;;    using `C-u k' on its header line.  You can hide/show an inserted
;;    subdir using `$' and `M-$'.  You can use `C-_' to undo any of
;;    these operations.
;;
;;  * You can open a Dired buffer for an arbitrary set of files, from
;;    different directories.
;;
;;    First, you can pass a glob pattern with wildcards to `dired'
;;    interactively, as the file name.
;;
;;    Beyond that, you can invoke `dired' non-interactively, passing
;;    it a cons of buffer name and file names.  Relative file names
;;    are interpreted relative to the value of `default-directory'.
;;    Use absolute file names if appropriate.
;;
;;  Some other libraries, such as `Bookmark+' and `Icicles', make it
;;  easy to create or re-create Dired buffers that list specific files
;;  and have a particular set of markings.  This can be handy for
;;  using Dired buffers to manage projects.  In such use cases you
;;  might have multiple Dired buffers that have quite specific
;;  contents and that you want to keep around during a session.
;;
;;  This is one motivation for the Dired+ `diredp-*-recursive'
;;  commands, which act on the marked files in marked subdirectories,
;;  recursively.  In one sense, these commands are an alternative to
;;  using a single Dired buffer with inserted subdirectories.  They
;;  let you use the same operations on the files in a set of Dired
;;  directories, without inserting those directories into an ancestor
;;  Dired buffer.
;;
;;  So you might have some subdirectories inserted in the same Dired
;;  buffer, and you might have separate Dired buffers for some
;;  subdirectories.  Sometimes it is useful to have both for the same
;;  subdirectory.  And sometimes it is useful to move from one
;;  presentation to the other.
;;
;;  You can use command `diredp-dired-inserted-subdirs' to open a
;;  separate Dired buffer for each of the subdirs that is inserted in
;;  the current Dired buffer.  Markings and Dired switches are
;;  preserved.
;;
;;  In the opposite direction, if you use `Icicles' then you can use
;;  multi-command `icicle-dired-insert-as-subdir', which lets you
;;  insert any number of directories you choose interactively into a
;;  Dired ancestor directory listing.  If a directory you choose to
;;  insert already has its own Dired buffer, then its markings and
;;  switches are preserved for the new, subdirectory listing in the
;;  ancestor Dired buffer.
;;
;;
;;  Faces defined here:
;;
;;    `diredp-compressed-file-suffix', `diredp-date-time',
;;    `diredp-deletion', `diredp-deletion-file-name',
;;    `diredp-dir-heading', `diredp-dir-priv', `diredp-display-msg',
;;    `diredp-exec-priv', `diredp-executable-tag', `diredp-file-name',
;;    `diredp-file-suffix', `diredp-flag-mark',
;;    `diredp-flag-mark-line', `diredp-get-file-or-dir-name',
;;    `diredp-ignored-file-name', `diredp-link-priv',
;;    `diredp-mode-line-flagged', `diredp-mode-line-marked'
;;    `diredp-no-priv', `diredp-number', `diredp-other-priv',
;;    `diredp-rare-priv', `diredp-read-priv', `diredp-symlink',
;;    `diredp-write-priv'.
;;
;;  Commands defined here:
;;
;;    `diredp-async-shell-command-this-file',
;;    `diredp-bookmark-this-file', `diredp-byte-compile-this-file',
;;    `diredp-capitalize', `diredp-capitalize-recursive',
;;    `diredp-capitalize-this-file', `diredp-chgrp-this-file',
;;    `diredp-chmod-this-file', `diredp-chown-this-file',
;;    `diredp-compress-this-file',
;;    `diredp-copy-filename-as-kill-recursive',
;;    `diredp-copy-tags-this-file', `diredp-copy-this-file',
;;    `diredp-decrypt-this-file', `diredp-delete-this-file',
;;    `diredp-describe-file', `diredp-describe-mode',
;;    `diredp-dired-files', `diredp-dired-files-other-window',
;;    `diredp-dired-for-files', `diredp-dired-for-files-other-window',
;;    `diredp-dired-inserted-subdirs', `diredp-dired-plus-help',
;;    `diredp-dired-this-subdir', `diredp-dired-union',
;;    `diredp-dired-union-other-window',
;;    `diredp-do-async-shell-command-recursive', `diredp-do-bookmark',
;;    `diredp-do-bookmark-in-bookmark-file',
;;    `diredp-do-bookmark-in-bookmark-file-recursive',
;;    `diredp-do-bookmark-recursive', `diredp-do-chmod-recursive',
;;    `diredp-do-chgrp-recursive', `diredp-do-chown-recursive',
;;    `diredp-do-copy-recursive', `diredp-do-decrypt-recursive',
;;    `diredp-do-display-images' (Emacs 22+),
;;    `diredp-do-encrypt-recursive',
;;    `diredp-do-find-marked-files-recursive', `diredp-do-grep',
;;    `diredp-do-grep-recursive', `diredp-do-hardlink-recursive',
;;    `diredp-do-isearch-recursive',
;;    `diredp-do-isearch-regexp-recursive',
;;    `diredp-do-move-recursive', `diredp-do-paste-add-tags',
;;    `diredp-do-paste-replace-tags', `diredp-do-print-recursive',
;;    `diredp-do-query-replace-regexp-recursive',
;;    `diredp-do-redisplay-recursive',
;;    `diredp-do-relsymlink-recursive', `diredp-do-remove-all-tags',
;;    `diredp-do-search-recursive', `diredp-do-set-tag-value',
;;    `diredp-do-shell-command-recursive', `diredp-do-sign-recursive',
;;    `diredp-do-symlink-recursive', `diredp-do-tag',
;;    `diredp-do-touch-recursive', `diredp-do-untag',
;;    `diredp-do-verify-recursive', `diredp-downcase-recursive',
;;    `diredp-downcase-this-file', `diredp-ediff',
;;    `diredp-encrypt-this-file', `diredp-fileset',
;;    `diredp-find-a-file', `diredp-find-a-file-other-frame',
;;    `diredp-find-a-file-other-window',
;;    `diredp-find-file-other-frame',
;;    `diredp-find-file-reuse-dir-buffer',
;;    `diredp-flag-region-files-for-deletion',
;;    `diredp-grep-this-file', `diredp-hardlink-this-file',
;;    `diredp-image-dired-comment-file',
;;    `diredp-image-dired-comment-files-recursive',
;;    `diredp-image-dired-copy-with-exif-name',
;;    `diredp-image-dired-create-thumb',
;;    `diredp-image-dired-delete-tag',
;;    `diredp-image-dired-delete-tag-recursive',
;;    `diredp-image-dired-display-thumb',
;;    `diredp-image-dired-display-thumbs-recursive',
;;    `diredp-image-dired-edit-comment-and-tags',
;;    `diredp-image-dired-tag-file',
;;    `diredp-image-dired-tag-files-recursive',
;;    `diredp-insert-as-subdir', `diredp-insert-subdirs',
;;    `diredp-insert-subdirs-recursive',
;;    `diredp-list-marked-recursive', `diredp-load-this-file',
;;    `diredp-marked', `diredp-marked-other-window',
;;    `diredp-marked-recursive',
;;    `diredp-marked-recursive-other-window',
;;    `diredp-mark-files-tagged-all', `diredp-mark-files-tagged-none',
;;    `diredp-mark-files-tagged-not-all',
;;    `diredp-mark-files-tagged-some',
;;    `diredp-mark-files-tagged-regexp', `diredp-mark-region-files',
;;    `diredp-mark/unmark-extension', `diredp-mouse-3-menu',
;;    `diredp-mouse-backup-diff', `diredp-mouse-copy-tags',
;;    `diredp-mouse-describe-file', `diredp-mouse-diff',
;;    `diredp-mouse-do-bookmark', `diredp-mouse-do-byte-compile',
;;    `diredp-mouse-do-chgrp', `diredp-mouse-do-chmod',
;;    `diredp-mouse-do-chown', `diredp-mouse-do-compress',
;;    `diredp-mouse-do-copy', `diredp-mouse-do-delete',
;;    `diredp-mouse-do-grep', `diredp-mouse-do-hardlink',
;;    `diredp-mouse-do-load', `diredp-mouse-do-print',
;;    `diredp-mouse-do-remove-all-tags', `diredp-mouse-do-rename',
;;    `diredp-mouse-do-set-tag-value',
;;    `diredp-mouse-do-shell-command', `diredp-mouse-do-symlink',
;;    `diredp-mouse-do-tag', `diredp-mouse-do-untag',
;;    `diredp-mouse-downcase', `diredp-mouse-ediff',
;;    `diredp-mouse-find-file', `diredp-mouse-find-file-other-frame',
;;    `diredp-mouse-find-file-reuse-dir-buffer',
;;    `diredp-mouse-flag-file-deletion', `diredp-mouse-mark',
;;    `diredp-mouse-mark-region-files', `diredp-mouse-mark/unmark',
;;    `diredp-mouse-unmark', `diredp-mouse-upcase',
;;    `diredp-mouse-view-file',
;;    `diredp-multiple-w32-browser-recursive',
;;    `diredp-nb-marked-in-mode-name', `diredp-next-dirline',
;;    `diredp-next-line', `diredp-next-subdir', `diredp-omit-marked',
;;    `diredp-omit-unmarked', `diredp-paste-add-tags-this-file',
;;    `diredp-paste-replace-tags-this-file', `diredp-prev-dirline',
;;    `diredp-previous-line', `diredp-prev-subdir',
;;    `diredp-print-this-file', `diredp-relsymlink-this-file',
;;    `diredp-remove-all-tags-this-file', `diredp-rename-this-file',
;;    `diredp-send-bug-report',
;;    `diredp-set-bookmark-file-bookmark-for-marked',
;;    `diredp-set-bookmark-file-bookmark-for-marked-recursive',
;;    `diredp-set-tag-value-this-file',
;;    `diredp-shell-command-this-file', `diredp-sign-this-file',
;;    `diredp-symlink-this-file', `diredp-tag-this-file',
;;    `diredp-toggle-find-file-reuse-dir', `diredp-touch-this-file',
;;    `diredp-toggle-marks-in-region',
;;    `diredp-unmark-files-tagged-all',
;;    `diredp-unmark-files-tagged-none',
;;    `diredp-unmark-files-tagged-not-all',
;;    `diredp-unmark-files-tagged-some', `diredp-unmark-region-files',
;;    `diredp-untag-this-file', `diredp-upcase-recursive',
;;    `diredp-up-directory', `diredp-up-directory-reuse-dir-buffer',
;;    `diredp-upcase-this-file', `diredp-verify-this-file',
;;    `diredp-w32-drives', `diredp-w32-drives-mode',
;;    `global-dired-hide-details-mode' (Emacs 24.4+),
;;    `toggle-diredp-find-file-reuse-dir'.
;;
;;  User options defined here:
;;
;;    `diff-switches', `diredp-hide-details-initially-flag' (Emacs
;;    24.4+), `diredp-hide-details-propagate-flag' (Emacs 24.4+),
;;    `diredp-prompt-for-bookmark-prefix-flag',
;;    `diredp-w32-local-drives', `diredp-wrap-around-flag'.
;;
;;  Non-interactive functions defined here:
;;
;;    `derived-mode-p' (Emacs < 22), `diredp-all-files',
;;    `diredp-ancestor-dirs', `diredp-bookmark',
;;    `diredp-create-files-non-directory-recursive',
;;    `diredp-directories-within',
;;    `diredp-dired-files-interactive-spec',
;;    `diredp-dired-plus-description',
;;    `diredp-dired-plus-description+links',
;;    `diredp-dired-plus-help-link', `diredp-dired-union-1',
;;    `diredp-dired-union-interactive-spec', `diredp-display-image'
;;    (Emacs 22+), `diredp-do-chxxx-recursive',
;;    `diredp-do-create-files-recursive', `diredp-do-grep-1',
;;    `diredp-ensure-mode', `diredp-fewer-than-2-files-p',
;;    `diredp-find-a-file-read-args', `diredp-files-within',
;;    `diredp-files-within-1',
;;    `diredp-fit-frame-unless-buffer-narrowed' (Emacs 24.4+),
;;    `diredp-get-confirmation-recursive', `diredp-get-files',
;;    `diredp-get-files-for-dir', `diredp-get-subdirs',
;;    `diredp-hide-details-if-dired' (Emacs 24.4+),
;;    `diredp-hide/show-details' (Emacs 24.4+),
;;    `diredp-internal-do-deletions', `diredp-list-files',
;;    `diredp-make-find-file-keys-reuse-dirs',
;;    `diredp-make-find-file-keys-not-reuse-dirs', `diredp-maplist',
;;    `diredp-marked-here', `diredp-mark-files-tagged-all/none',
;;    `diredp-mark-files-tagged-some/not-all',
;;    `diredp-nonempty-region-p', `diredp-paste-add-tags',
;;    `diredp-paste-replace-tags', `diredp-read-bookmark-file-args',
;;    `diredp-remove-if-not', `diredp-set-tag-value',
;;    `diredp-string-match-p', `diredp-tag',
;;    `diredp-this-file-marked-p', `diredp-this-file-unmarked-p',
;;    `diredp-this-subdir', `diredp-untag', `diredp-y-or-n-files-p'.
;;
;;  Variables defined here:
;;
;;    `diredp-file-line-overlay', `diredp-files-within-dirs-done',
;;    `diredp-font-lock-keywords-1', `diredp-hide-details-last-state'
;;    (Emacs 24.4+), `diredp-hide-details-toggled' (Emacs 24.4+),
;;    `diredp-loaded-p', `diredp-menu-bar-encryption-menu',
;;    `diredp-menu-bar-images-menu.',
;;    `diredp-menu-bar-immediate-menu',
;;    `diredp-menu-bar-immediate-bookmarks-menu',
;;    `diredp-menu-bar-immediate-encryption-menu',
;;    `diredp-menu-bar-mark-menu', `diredp-menu-bar-operate-menu',
;;    `diredp-menu-bar-operate-bookmarks-menu',
;;    `diredp-menu-bar-recursive-marked-menu',
;;    `diredp-menu-bar-regexp-menu', `diredp-menu-bar-subdir-menu',
;;    `diredp-re-no-dot', `diredp-w32-drives-mode-map'.
;;
;;
;;  ***** NOTE: The following macros defined in `dired.el' have
;;              been REDEFINED HERE:
;;
;;  `dired-map-over-marks'    - Treat multiple `C-u' specially.
;;  `dired-mark-if'           - Better initial msg - Emacs bug #8523.
;;
;;  ***** NOTE: The following functions defined in `dired.el' have
;;              been REDEFINED HERE:
;;
;;  `dired-do-delete'         - Display message to warn that marked,
;;                              not flagged, files will be deleted.
;;  `dired-do-flagged-delete' - Display message to warn that flagged,
;;                              not marked, files will be deleted.
;;  `dired-find-file'         - Allow `.' and `..' (Emacs 20 only).
;;  `dired-get-filename'      - Test `./' and `../' (like `.', `..').
;;  `dired-goto-file'         - Fix Emacs bug #7126.
;;                              Remove `/' from dir before compare.
;;  `dired-hide-details-mode' - Respect new user options:
;;                              * `diredp-hide-details-initially-flag'
;;                              * `diredp-hide-details-propagate-flag'
;;                              (Emacs 24.4+)
;;  `dired-insert-directory'  - Compute WILDCARD arg for
;;                              `insert-directory' for individual file
;;                              (don't just use nil). (Emacs 23+, and
;;                              only for MS Windows)
;;  `dired-insert-set-properties' - `mouse-face' on whole line.
;;  `dired-mark-files-regexp' - Add regexp to `regexp-search-ring'.
;;  `dired-mark-pop-up'       - Delete the window or frame popped up,
;;                              afterward, and bury its buffer. Do not
;;                              show a menu bar for pop-up frame.
;;  `dired-pop-to-buffer'     - Put window point at bob (bug #12281).
;;
"]) (dircmp . [(20130806 1157) nil "Compare and sync directories." tar ";;; Commentary:

;; Add to your Emacs startup file:
;;
;;     (load \"/path/to/dircmp.el\")
;;
;; Then:
;;
;;     M-x compare-directories RET dir1 RET dir2 RET
;;
;; The author uses dircmp-mode with git-difftool's directory diff:
;;
;;     git difftool -d
;;
;; You can configure Emacs with dircmp-mode as your default Git difftool
;; by adding to your .gitconfig:
;;
;;     [difftool \"emacs\"]
;;       cmd = /path/to/dircmp-mode/emacs-git-difftool.sh \\\"$LOCAL\\\" \\\"$REMOTE\\\"
;;       prompt = false
;;     [diff]
;;       tool = emacs
;;
;; git-difftool first learned to do directory diffs in Git 1.7.11. With
;; earlier versions of Git, you can add git-diffall from
;; <https://github.com/thenigan/git-diffall> and use dircmp-mode as your
;; git-diffall tool:
;;
;;     git diffall -x /path/to/dircmp-mode/emacs-git-difftool.sh
;;

"]) (diminish . [(20091203 1012) nil "Diminished modes are minor modes with no modeline display" single ";;; Commentary:

;; Minor modes each put a word on the mode line to signify that they're
;; active.  This can cause other displays, such as % of file that point is
;; at, to run off the right side of the screen.  For some minor modes, such
;; as mouse-avoidance-mode, the display is a waste of space, since users
;; typically set the mode in their .emacs & never change it.  For other
;; modes, such as my jiggle-mode, it's a waste because there's already a
;; visual indication of whether the mode is in effect.

;; A diminished mode is a minor mode that has had its mode line
;; display diminished, usually to nothing, although diminishing to a
;; shorter word or a single letter is also supported.  This package
;; implements diminished modes.

;; You can use this package either interactively or from your .emacs file.
;; In either case, first you'll need to copy this file to a directory that
;; appears in your load-path.  `load-path' is the name of a variable that
;; contains a list of directories Emacs searches for files to load.
;; To prepend another directory to load-path, put a line like
;; (add-to-list 'load-path \"c:/My_Directory\") in your .emacs file.

;; To create diminished modes interactively, type
;;   M-x load-library
;; to get a prompt like
;;   Load library:
;; and respond `diminish' (unquoted).  Then type
;;   M-x diminish
;; to get a prompt like
;;   Diminish what minor mode:
;; and respond with the name of some minor mode, like mouse-avoidance-mode.
;; You'll then get this prompt:
;;   To what mode-line display:
;; Respond by just hitting <Enter> if you want the name of the mode
;; completely removed from the mode line.  If you prefer, you can abbreviate
;; the name.  If your abbreviation is 2 characters or more, such as \"Av\",
;; it'll be displayed as a separate word on the mode line, just like minor
;; modes' names.  If it's a single character, such as \"V\", it'll be scrunched
;; up against the previous word, so for example if the undiminished mode line
;; display had been \"Abbrev Fill Avoid\", it would become \"Abbrev FillV\".
;; Multiple single-letter diminished modes will all be scrunched together.
;; The display of undiminished modes will not be affected.

;; To find out what the mode line would look like if all diminished modes
;; were still minor, type M-x diminished-modes.  This displays in the echo
;; area the complete list of minor or diminished modes now active, but
;; displays them all as minor.  They remain diminished on the mode line.

;; To convert a diminished mode back to a minor mode, type M-x diminish-undo
;; to get a prompt like
;;   Restore what diminished mode:
;; Respond with the name of some diminished mode.  To convert all
;; diminished modes back to minor modes, respond to that prompt
;; with `diminished-modes' (unquoted, & note the hyphen).

;; When you're responding to the prompts for mode names, you can use
;; completion to avoid extra typing; for example, m o u SPC SPC SPC
;; is usually enough to specify mouse-avoidance-mode.  Mode names
;; typically end in \"-mode\", but for historical reasons
;; auto-fill-mode is named by \"auto-fill-function\".

;; To create diminished modes noninteractively in your .emacs file, put
;; code like
;;   (require 'diminish)
;;   (diminish 'abbrev-mode \"Abv\")
;;   (diminish 'jiggle-mode)
;;   (diminish 'mouse-avoidance-mode \"M\")
;; near the end of your .emacs file.  It should be near the end so that any
;; minor modes your .emacs loads will already have been loaded by the time
;; they're to be converted to diminished modes.

;; To diminish a major mode, (setq mode-name \"whatever\") in the mode hook.

"]) (dim-autoload . [(20131019 120) nil "dim complete autoload cookie lines" single ";;; Commentary:

;; Dim autoload cookies.

;; Unlike the built-in font-lock keyword which only changes the
;; appearance of the \"autoload\" substring of the autoload cookie
;; line and repurposes the warning face also used elsewhere, the
;; keyword added here changes the appearance of the complete line
;; using a dedicated face.

;; That face is intended for dimming.  While you are making sure
;; your library contains all the required autoload cookies you can
;; just turn it off.

;; To install the keywords add this to your init file:
;;
;;    (global-dim-autoload-cookies-mode 1)

;; You might even want to dim the cookie lines some more by using
;; a foreground color in `dim-autoload-cookies-line' that is very
;; close to the `default' background color.

"]) (diff-hl . [(20140113 1855) ((cl-lib (0 2))) "Highlight uncommitted changes" tar ";;; Commentary:

;; `diff-hl-mode' highlights uncommitted changes on the left side of
;; the window (using the fringe, by default), allows you to jump
;; between the hunks and revert them selectively.

;; Provided commands:
;;
;; `diff-hl-diff-goto-hunk'  C-x v =
;; `diff-hl-revert-hunk'     C-x v n
;; `diff-hl-previous-hunk'   C-x v [
;; `diff-hl-next-hunk'       C-x v ]
;;
;; The mode takes advantage of `smartrep' if it is installed.

;; Add either of the following to your init file.
;;
;; To use it in all buffers:
;;
;; (global-diff-hl-mode)
;;
;; Only in `prog-mode' buffers, with `vc-dir' integration:
;;
;; (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
;; (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)

"]) (dictionary . [(20131005 526) ((connection (1 10)) (link (1 10))) "Client for rfc2229 dictionary servers" single ";;; Commentary:

;; dictionary allows you to interact with dictionary servers. Use M-x
;; customize-group dictioanry to modify all user settings.
;;
;; Main functions for interaction are:
;; dictionary        - opens a new dictionary buffer
;; dictionary-search - search for the definition of a word
;;
;; You can find more information in the README file of the gibhub
;; repository https://github.com/myrkr/dictionary-el

"]) (dic-lookup-w3m . [(20121101 1033) ((w3m (20120723 324)) (stem (20120826))) "look up dictionaries on the Internet" tar ";;; Commentary:
;; Look up in dictionaries on the Internet using emacs-w3m.

"]) (desktop-registry . [(20130807 1327) nil "Keep a central registry of desktop files" single ";;; Commentary:

;; This module provides functions and a global minor mode that lets
;; you track a central registry of desktop files.  This is useful when
;; you use desktop files as project files and want to be able to
;; switch between them quickly.

(require 'desktop)

"]) (delim-kill . [(20100516 2320) nil "Kill text between delimiters." single ";;; Commentary:

;; Kill text between two delimiters, preserving structure.

;; delim-kill.el contains a single convenience function for editing
;; structured data: delim-kill. Given two characters FROM and TO, it
;; kills the text between the first occurence of FROM before point and
;; the first occurence of TO after point. FROM and TO may be
;; identical.

;; If FROM and TO are not identical, the function preserves the
;; balance between the two characters: For each FROM that is
;; encountered while looking for TO, one additional TO is required;
;; and vice versa. For example, in \"{ foo X{bar} baz }\", with X being
;; point and \"{\" and \"}\" as delimiters, the text \"{ foo {bar} baz }\"
;; will be killed, not \"{ foo {bar}\".

;; delim-kill is useful in programming and in editing other files with
;; structure, such as CSV or JSON. In C-style langiuages, for
;; instance, you can use it to easily kill the {}-delimited block you
;; are currently in. In a CSV file you might kill the current field,
;; regardless of where point is.

;; delim-kill was inspired by Damian Conway's course \"The productive
;; programmer\". Thanks!

;;; Dependencies: none.

;;; Installation:
;; Put the file anywhere in your load path, (require 'delim-kill), and
;; bind the function to a key.

"]) (deft . [(20131027 757) nil "quickly browse, filter, and edit plain text notes" single ";;; Commentary:

;; Deft is an Emacs mode for quickly browsing, filtering, and editing
;; directories of plain text notes, inspired by Notational Velocity.
;; It was designed for increased productivity when writing and taking
;; notes by making it fast and simple to find the right file at the
;; right time and by automating many of the usual tasks such as
;; creating new files and saving files.

;; Deft is open source software and may be freely distributed and
;; modified under the BSD license.  Version 0.5.1 is the latest stable
;; version, released on January 28, 2013.  You may download it
;; directly here:

;;   * [deft.el](http://jblevins.org/projects/deft/deft.el)

;; To follow or contribute to Deft development, you can either
;; [browse](http://jblevins.org/git/deft.git) or clone the Git
;; repository:

;;     git clone git://jblevins.org/git/deft.git

;; ![File Browser](http://jblevins.org/projects/deft/browser.png)

;; The Deft buffer is simply a file browser which lists the titles of
;; all text files in the Deft directory followed by short summaries
;; and last modified times.  The title is taken to be the first line
;; of the file and the summary is extracted from the text that
;; follows.  Files are sorted in terms of the last modified date, from
;; newest to oldest.

;; All Deft files or notes are simple plain text files where the first
;; line contains a title.  As an example, the following directory
;; structure generated the screenshot above.
;;
;;     % ls ~/.deft
;;     about.txt    browser.txt     directory.txt   operations.txt
;;     ack.txt      completion.txt  extensions.txt  text-mode.txt
;;     binding.txt  creation.txt    filtering.txt
;;
;;     % cat ~/.deft/about.txt
;;     About
;;
;;     An Emacs mode for slicing and dicing plain text files.

;; ![Filtering](http://jblevins.org/projects/deft/filter.png)

;; Deft's primary operation is searching and filtering.  The list of
;; files can be limited or filtered using a search string, which will
;; match both the title and the body text.  To initiate a filter,
;; simply start typing.  Filtering happens on the fly.  As you type,
;; the file browser is updated to include only files that match the
;; current string.

;; To open the first matching file, simply press `RET`.  If no files
;; match your search string, pressing `RET` will create a new file
;; using the string as the title.  This is a very fast way to start
;; writing new notes.  The filename will be generated automatically.
;; If you prefer to provide a specific filename, use `C-RET` instead.

;; To open files other than the first match, navigate up and down
;; using `C-p` and `C-n` and press `RET` on the file you want to open.
;; When opening a file, Deft searches forward and leaves the point
;; at the end of the first match of the filter string.

;; You can also press `C-o` to open a file in another window, without
;; switching to the other window.  Issue the same command with a prefix
;; argument, `C-u C-o`, to open the file in another window and switch
;; to that window.

;; To edit the filter string, press `DEL` (backspace) to remove the
;; last character or `M-DEL` to remove the last \"word\".  To yank
;; (paste) the most recently killed (cut or copied) text into the
;; filter string, press `C-y`.  Press `C-c C-c` to clear the filter
;; string and display all files and `C-c C-g` to refresh the file
;; browser using the current filter string.

;; For more advanced editing operations, you can also edit the filter
;; string in the minibuffer by pressing `C-c C-l`.  While in the
;; minibuffer, the history of previous edits can be cycled through by
;; pressing `M-p` and `M-n`.  This form of static, one-time filtering
;; (as opposed to incremental, on-the-fly filtering) may be preferable
;; in some situations, such as over slow connections or on systems
;; where interactive filtering performance is poor.

;; By default, Deft filters files in incremental string search mode,
;; where \"search string\" will match all files containing both \"search\"
;; and \"string\" in any order.  Alternatively, Deft supports direct
;; regexp filtering, where the filter string is interpreted as a
;; formal regular expression.  For example, `^\\(foo\\|bar\\)` matches
;; foo or bar at the beginning of a line.  Pressing `C-c C-t` will
;; toggle between incremental and regexp search modes.  Regexp
;; search mode is indicated by an \"R\" in the mode line.

;; Common file operations can also be carried out from within Deft.
;; Files can be renamed using `C-c C-r` or deleted using `C-c C-d`.
;; New files can also be created using `C-c C-n` for quick creation or
;; `C-c C-m` for a filename prompt.  You can leave Deft at any time
;; with `C-c C-q`.

;; Archiving unused files can be carried out by pressing `C-c C-a`.
;; Files will be moved to `deft-archive-directory', which is a
;; directory named `archive` within your `deft-directory' by default.

;; Files opened with deft are automatically saved after Emacs has been
;; idle for a customizable number of seconds.  This value is a floating
;; point number given by `deft-auto-save-interval' (default: 1.0).

;; Getting Started
;; ---------------

;; To start using it, place it somewhere in your Emacs load-path and
;; add the line

;;     (require 'deft)

;; in your `.emacs` file.  Then run `M-x deft` to start.  It is useful
;; to create a global keybinding for the `deft` function (e.g., a
;; function key) to start it quickly (see below for details).

;; When you first run Deft, it will complain that it cannot find the
;; `~/.deft` directory.  You can either create a symbolic link to
;; another directory where you keep your notes or run `M-x deft-setup`
;; to create the `~/.deft` directory automatically.

;; One useful way to use Deft is to keep a directory of notes in a
;; Dropbox folder.  This can be used with other applications and
;; mobile devices, for example, Notational Velocity or Simplenote
;; on OS X, Elements on iOS, or Epistle on Android.

;; Customization
;; -------------

;; Customize the `deft` group to change the functionality.

;; By default, Deft looks for notes by searching for files with the
;; extension `.txt` in the `~/.deft` directory.  You can customize
;; both the file extension and the Deft directory by running
;; `M-x customize-group` and typing `deft`.  Alternatively, you can
;; configure them in your `.emacs` file:

;;     (setq deft-extension \"txt\")
;;     (setq deft-directory \"~/Dropbox/notes\")

;; You can also customize the major mode that Deft uses to edit files,
;; either through `M-x customize-group` or by adding something like
;; the following to your `.emacs` file:

;;     (setq deft-text-mode 'markdown-mode)

;; Note that the mode need not be a traditional text mode.  If you
;; prefer to write notes as LaTeX fragments, for example, you could
;; set `deft-extension' to \"tex\" and `deft-text-mode' to `latex-mode'.

;; If you prefer `org-mode', then simply use

;;     (setq deft-extension \"org\")
;;     (setq deft-text-mode 'org-mode)

;; For compatibility with other applications which take the title from
;; the filename, rather than from first line of the file, set the
;; `deft-use-filename-as-title' flag to a non-nil value.  This also
;; changes the default behavior for creating new files when the filter
;; is non-empty: the filter string will be used as the new filename
;; rather than inserted into the new file.  To enable this
;; functionality, simply add the following to your `.emacs` file:

;;     (setq deft-use-filename-as-title t)

;; You can easily set up a global keyboard binding for Deft.  For
;; example, to bind it to F8, add the following code to your `.emacs`
;; file:

;;     (global-set-key [f8] 'deft)

;; Deft also provides a function for opening files without using the
;; Deft buffer directly.  Calling `deft-find-file' will prompt for a
;; file to open, just like `find-file', but starting from
;; `deft-directory'.  If the file selected is in `deft-directory', it
;; is opened with the usual deft features (using `deft-text-mode',
;; automatic saving, automatic updating of the Deft buffer, etc.).
;; Otherwise, the file will be opened by `find-file' as usual.
;; Therefore, you can set up a global keybinding for this function to
;; open Deft files anywhere.  For example, to use `C-x C-g`, a
;; neighbor of `C-x C-f`, use the following:

;;     (global-set-key (kbd \"C-x C-g\") 'deft-find-file)

;; The faces used for highlighting various parts of the screen can
;; also be customized.  By default, these faces inherit their
;; properties from the standard font-lock faces defined by your current
;; color theme.

;; Incremental string search is the default method of filtering on
;; startup, but you can set `deft-incremental-search' to nil to make
;; regexp search the default.

;; The title of each file is taken to be the first line of the file,
;; with certain characters removed from the beginning (hash
;; characters, as used in Markdown headers, and asterisks, as in Org
;; Mode headers).  The substrings to remove are specified in
;; `deft-strip-title-regexp'.

;; More generally, the title post-processing function itself can be
;; customized by setting `deft-parse-title-function', which accepts
;; the first line of the file as an argument and returns the parsed
;; title to display in the file browser.  The default function is
;; `deft-strip-title', which removes all occurrences of
;; `deft-strip-title-regexp' as described above.

;; Acknowledgments
;; ---------------

;; Thanks to Konstantinos Efstathiou for writing simplnote.el, from
;; which I borrowed liberally, and to Zachary Schneirov for writing
;; Notational Velocity, whose functionality and spirit I wanted to
;; bring to Emacs.

;; History
;; -------

;; Version 0.5.1 (2013-01-28):

;; * Bug fix: creating files with `C-c C-n` when both the filter string and
;;   `deft-use-filename-as-title' are non-nil resulted in an invalid path.
;; * Bug fix: killed buffers would persist in `deft-auto-save-buffers'.

;; Version 0.5 (2013-01-25):

;; * Implement incremental string search (default) and regex search.
;;   These search modes can be toggled by pressing `C-c C-t`.
;; * Default search method can be changed by setting `deft-incremental-search'.
;; * Support custom `deft-parse-title-function' for post-processing titles.
;; * The default `deft-parse-title-function' simply strips occurrences of
;;   `deft-strip-title-regexp', which removes Markdown and Org headings.
;; * Open files in another window with `C-o`.  Prefix it with `C-u` to
;;   switch to the other window.
;; * For symbolic links, use modification time of taget for sorting.
;; * When opening files, move point to the end of the first match of
;;   the filter string.
;; * Improved filter editing: delete (`DEL`), delete word (`M-DEL`),
;;   and yank (`C-y`).
;; * Advanced filter editing in minibuffer (`C-c C-l`).

;; Version 0.4 (2011-12-11):

;; * Improved filtering performance.
;; * Optionally take title from filename instead of first line of the
;;   contents (see `deft-use-filename-as-title').
;; * Dynamically resize width to fit the entire window.
;; * Customizable time format (see `deft-time-format').
;; * Handle `deft-directory' properly with or without a trailing slash.

;; Version 0.3 (2011-09-11):

;; * Internationalization: support filtering with multibyte characters.

;; Version 0.2 (2011-08-22):

;; * Match filenames when filtering.
;; * Automatically save opened files (optional).
;; * Address some byte-compilation warnings.

;; Deft was originally written by [Jason Blevins](http://jblevins.org/).
;; The initial version, 0.1, was released on August 6, 2011.

"]) (deferred . [(20130930 607) nil "Simple asynchronous functions for emacs lisp" single ";;; Commentary:

;; 'deferred.el' is a simple library for asynchronous tasks.
;; [https://github.com/kiwanami/emacs-deferred]

;; The API is almost the same as JSDeferred written by cho45. See the
;; JSDeferred and Mochikit.Async web sites for further documentations.
;; [https://github.com/cho45/jsdeferred]
;; [http://mochikit.com/doc/html/MochiKit/Async.html]

;; A good introduction document (JavaScript)
;; [http://cho45.stfuawsc.com/jsdeferred/doc/intro.en.html]

"]) (dedukti-mode . [(20140107 157) nil "Major mode for Dedukti files" single ";;; Commentary:
;; This file defines a major mode for editing Dedukti files.
;; Dedukti is a type checker for the lambda-Pi-calculus modulo.
;; It is a free software under the CeCILL-B license.
;; Dedukti is available at the following url:
;; <https://www.rocq.inria.fr/deducteam/Dedukti/>

;; This major mode is defined using the generic major mode mechanism.

"]) (dedicated . [(20090428 1231) nil "A very simple minor mode for dedicated buffers" single ";;; Commentary:

;; This minor mode allows you to toggle a window's \"dedicated\" flag.
;; When a window is \"dedicated\", Emacs will not select files into that
;; window. This can be quite handy since many commands will use
;; another window to show results (e.g., compilation mode, starting
;; info, etc.) A dedicated window won't be used for such a purpose.
;;
;; Dedicated buffers will have \"D\" shown in the mode line.

"]) (debug-print . [(20140114 344) ((emacs (24))) "a nice printf debugging environment by the way Gauche do" single ";;; Commentary:

;; This program provides a nice ``printf debugging'' environment by
;; the way Gauche do. Sometimes printf debugging with `message' bothers you.
;; For example, if you want to observe the variable `foo' in the expression
;;   (let ((foo (something-with-side-effect)
;;         (bar (something-depends-on foo))
;;     ...)
;; you have to use frustrating idiom:
;;   (let ((foo (progn
;;                (let ((tmp (something-with-side-effect)))
;;                  (message \"%s\" tmp)
;;                  tmp)))
;;         (bar (something-depends-on foo))
;;     ...)
;; (In this case one can use `let*' but it is an example.) This program
;; allows you to write as follows:
;;   (let ((foo ::?= (something-with-side-effect)
;;         (bar (something-depends-oidn foo))
;;     ...)
;; After rewrite, move point to the last of expression as usual, and do
;; `debug-print-eval-last-sexp'. It is the same as `eval-last-sexp' except rewrite
;; the read expression recursively as follows:
;;   ... ::?= expr ...
;;     => ... (debug-print expr) ...
;; Here `debug-print' is a macro, which does that the above frustrating idiom does.
;; (Note that this needs initialization.) For who kwons Gauche note that it is
;; not implemented by reader macro. So one have to use some settings to inform
;; emacs that the expression needs preprocessed.
;;
;; Initialization and configuration: To use the above feature, write as follows
;; in your .emacs.d/init.el (after setting of load-path):
;;   (require 'debug-print)
;;   (debug-print-init)
;;   (define-key global-map (kbd \"C-x C-e\") 'debug-print-eval-last-sexp)
;; debug-print.el use some variables:
;;   `debug-print-symbol'
;;   `debug-print-buffer-name'
;;   `debug-print-width'
;; (See definitions below.) You have to set these before calling of `debug-print-init'.
;;
;; Example of code:
;;   (debug-print-init)
;;   (eval-with-debug-print
;;    (defun fact (n)
;;      (if (zerop n)
;;          1
;;          (* n ::?= (fact (- n 1))))))
;;   (fact 5)
;; Result: <buffer *debug-print*>
;;   ::?=\"fact\"::(fact (- n 1))
;;   ::?=\"fact\"::(fact (- n 1))
;;   ::?=\"fact\"::(fact (- n 1))
;;   ::?=\"fact\"::(fact (- n 1))
;;   ::?=\"fact\"::(fact (- n 1))
;;   ::?-    1
;;   ::?-    1
;;   ::?-    2
;;   ::?-    6
;;   ::?-    24
;; For more detail, see debug-print-test.el .

"]) (debpaste . [(20131226 732) ((xml-rpc (1 6 7))) "Interface for getting/posting/deleting pastes from paste.debian.net" single ";;; Commentary:

;; This package provides an interface for receiving, posting and
;; deleting pastes from <http://paste.debian.net/>.

;; You can install the package from MELPA.  If you prefer the manual
;; installation, the easiest way is to put these lines into your
;; init-file:
;;   (add-to-list 'load-path \"/path/to/debpaste-dir\")
;;   (require 'debpaste)

;; Basic interactive commands:
;; - `debpaste-display-paste',
;; - `debpaste-paste-region',
;; - `debpaste-delete-paste'.

;; The package provides a keymap, that can be bound like this:
;;   (global-set-key (kbd \"M-D\") 'debpaste-command-map)

;; You will probably want to modify a default poster name:
;;   (setq debpaste-user-name user-login-name)

;; For full description, see <http://github.com/alezost/debpaste.el>.

;; For information about features provided by debian paste server,
;; read <http://paste.debian.net/rpc-interface.html>.

"]) (db-pg . [(20130131 1102) ((pg (0 12)) (db (0 0 6))) "A PostgreSQL adapter for emacs-db" single ";;; Commentary:

;; This is a PostgreSQL adapter for emacs-db. Emacs-DB can be found in
;; the Marmalade repository.

;; See the README for usage.

(require 'pg)
(require 'json)
(require 'db)

(defconst db-pg/table-query
  \"select c.relname
from pg_catalog.pg_class c
  left join pg_catalog.pg_namespace n on n.oid = c.relnamespace
where n.nspname = 'public'\"
  \"The query we use to find the list of tables.

This isn't ideal because it forces the use of 'public' as the
schema name but that could be fixed if we ever need non-public
schemas (we will).\")

(defun db-pg/list-tables (con)
  \"Get the list of tables from connection CON.\"
  (let ((res (pg:exec con db-pg/table-query)))
    (loop for row in (pg:result res :tuples)
       collect (car row))))

(defun db-pg/ref->spec (ref)
  \"Convert the `db' REF to `pg:connect' details.\"
  (let ((pg-spec (plist-get ref :pg-spec)))
    (list (plist-get pg-spec :db)
          (plist-get pg-spec :username)
          ;; FIXME - work out how to get defaults into here
          (or (plist-get pg-spec :password) \"\")
          (or (plist-get pg-spec :host) \"localhost\")
          (or (plist-get pg-spec :port) 5432))))

(defun db-pg/create-table (con table column)
  \"Create a suitable TABLE with COLUMN for db-pg use.\"
  (let ((result
         (pg:exec
          con
          (format
           \"create table %s (%s hstore);\"
           table
           column))))
    (pg:result result :status)))

(defun db-pg (reference)
  \"Make a Postgresql database utlizing Hstore types.

REFERENCE comes from the call to `db-make' and MUST include:

  `:username' key with a username to connect to the postgresql db
  `:db' key with a postgresql database name
  `:table' key with a table name to use
  `:column' key with a column name to use
  `:key' key with key name to use

And can also include:

  `:host' key with a postgresql server hostname
  `:port' key with the tcp port of the postgresql server

This function checks for the existance of `:table' and if it does
not exist it causes the table to be created with the necessary
HSTORE column by the function `db-pg/create-table'.\"
  (destructuring-bind (&key
                       db
                       username
                       (host \"localhost\")
                       (password \"\")
                       (port 5432)
                       table
                       column
                       key) (cdr reference)
    (let* ((db-spec
            (list
             :get 'db-pg/get
             :put 'db-pg/put
             :map 'db-pg/map
             :pg-spec
             (list :db db :username username
                   :host host :password password :port port
                   :table table :column column :key key))))
      ;; Check that the table exists
      (with-pg-connection
          con (db-pg/ref->spec db-spec)
        (let* ((tables (db-pg/list-tables con))
               (table-exists (member table tables)))
          (unless table-exists
            (db-pg/create-table con table column))))
      ;; Return the database
      db-spec)))


(defun db-pg/alist->hstore (alist)
  \"Convert ALIST to a potsgresql Hstore representation.

Hstore representation is like this: key-a=>value,key-b=>value.\"
  (loop for (key . val) in alist
     if (> (length result) 0)
     concat \",\" into result
     concat (format \"%s=>\\\"%s\\\"\" key val) into result
     finally return result))

(defun db-pg/select (column table &optional where-key where-val)
  (format
   \"select '{' ||
  (select array_to_string(array_agg('\\\"'
   || item.key || '\\\":\\\"'
   || item.value || '\\\"'), ',') as json from each(%s) item) || '}'
  from %s%s\"
   column table
   (if where-key
       (format
        \" where %s::hstore -> '%s' = '%s'\"
        column where-key
        ;; FIXME - this is ok for ints and such but not strings
        (cond
          ((stringp where-val) (format \"%s\" where-val))
          (t where-val))) \"\")))

(defun db-pg/insert (column table values)
  (format
   \"insert into %s (%s) values ('%s')\"
   table
   column
   (db-pg/alist->hstore values)))

(defun db-pg/update (column table values key key-value)
  (format
   \"update %s set %s = '%s' where %s::hstore -> '%s' = '%s'\"
   table
   column
   (db-pg/alist->hstore values)
   column
   key
   key-value))

(defun db-pg/json-decode (from-str)
  \"Do the JSON reading.\"
  (let* ((json-key-type 'string))
    (json-read-from-string from-str)))

(defconst db-pg-log-sql t)

(defun db-pg/get (keyval db)
  \"Postgresql key based retrieve.\"
  (let ((db-spec (db-pg/ref->spec db)))
    (with-pg-connection con db-spec
      (let* (collector
             (pg-spec (plist-get db :pg-spec))
             (column (plist-get pg-spec :column))
             (table (plist-get pg-spec :table))
             (key (plist-get pg-spec :key))
             (select-sql
              (db-pg/select column table key keyval)))
        (when db-pg-log-sql
          (with-current-buffer (get-buffer-create
                                ;; Fixme - want dbname in here as well
                                (format \"*db-pg-%s-%s*\" table column))
            (save-excursion
              (goto-char (point-max))
              (insert select-sql \"\\n\"))))
        (pg:for-each
         con select-sql
         (lambda (result)
           (setq
            collector
            (append
             collector
             (list (db-pg/json-decode (caar result)))))))
        ;; We only want the first one
        (car collector)))))

(defun db-pg/put (key value db)
  (let ((db-spec (db-pg/ref->spec db)))
    (with-pg-connection con db-spec
      ;; FIXME - what if the key is not in the value?
      (let* ((pg-spec (plist-get db :pg-spec))
             (column (plist-get pg-spec :column))
             (table (plist-get pg-spec :table))
             (key-name (plist-get pg-spec :key))
             (select-sql (db-pg/select column table key-name key))
             (result (pg:exec con select-sql))
             (row (pg:result result :tuples)))
        (if row
            (pg:exec
             con
             (db-pg/update column table value key-name key))
            ;; Else insert
            (pg:exec
             con (db-pg/insert column table value)))
        ;; Now something to return
        (db-pg/get key db)))))

(defun db-pg/map (func db &optional query filter)
  \"Call FUNC for every value in DB or just those matching QUERY.

FILTER causes it \"
  (let ((db-spec (db-pg/ref->spec db)))
    (with-pg-connection con db-spec
      ;; FIXME - what if the key is not in the value?
      (let* ((pg-spec (plist-get db :pg-spec))
             (column (plist-get pg-spec :column))
             (table (plist-get pg-spec :table))
             (key (plist-get pg-spec :key))
             (select-sql (db-pg/select column table))
             (result (pg:exec con select-sql)))
        (loop for (row . rest) in (pg:result result :tuples)
           append
             (let ((alist (db-pg/json-decode row)))
               (funcall func (aget alist key) alist)))))))


;; Ensure the pg stuff is included in the db config
(puthash 'db-pg 'db-pg db/types)

(provide 'db-pg)

;;; db-pg.el ends here
"]) (db . [(20130125 1029) ((kv (0 0 11))) "A database for EmacsLisp" single ";;; Commentary:

;; This is a simple database interface and implementation.
;;
;; It should be possible to specify any kind of key/value database
;; with this interface.
;;
;; The supplied implementation is an Emacs hash-table implementation
;; backed with serializing objects.  It is NOT intended for anything
;; other than very simple use cases and will not scale very well at
;; all.

;; However, other implementations (mongodb, redis or PostgreSQL
;; hstore) would be easy to implement and fit in here.


"]) (dayone . [(20131117 255) ((uuid (0 0 3)) (mustache (0 22)) (ht (1 5))) "Utility script for Day One" tar ";;; Commentary:

;; dayone.el is a simple emacs extension for placing the new post from
;; the emacs to Day One(http://dayoneapp.com).  It can post the
;; region when the concerned region is selected and M-x dayone-add-note.
;; When the region is not selected and M-x dayone-add-note is executed,
;; the all contents in the buffer are posted.
;; M-x dayone-add-note-with-tag shall be posted by attaching the tag.
;; When multiple tags are attached, use the space key for separating
;; each tag.
;; As for dayone-add-note() and dayone-add-note-with-tag,, it may be
;; convenient if you assign it to an appropriate key or add alias.
;; For the Day One, the data is managed by either the iCloud or the
;; Dropbox. This emacs extension is supported for storing data of
;; Dropbox only.

"]) (datomic-snippets . [(20130707 1315) ((s (1 4 0)) (dash (1 2 0)) (yasnippet (0 6 1))) "Yasnippets for Datomic" tar nil]) (dash-functional . [(20130831 1340) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single ";;; Commentary:

;; Collection of useful combinators for Emacs Lisp
;;
;; See documentation on https://github.com/magnars/dash.el#functions

"]) (dash-at-point . [(20140103 921) nil "Search the word at point with Dash" single ";;; Commentary:
;;
;; Dash ( http://kapeli.com/ ) is an API Documentation Browser and
;; Code Snippet Manager.  dash-at-point make it easy to search the word
;; at point with Dash.
;;
;; Add the following to your .emacs:
;;
;;   (add-to-list 'load-path \"/path/to/dash-at-point\")
;;   (autoload 'dash-at-point \"dash-at-point\"
;;             \"Search the word at point with Dash.\" t nil)
;;   (global-set-key \"\\C-cd\" 'dash-at-point)
;;
;; Run `dash-at-point' to search the word at point, then Dash is
;; launched and search the word. To edit the search term first,
;; use C-u to set the prefix argument for `dash-at-point'.
;;
;; Dash queries can be narrowed down with a docset prefix.  You can
;; customize the relations between docsets and major modes.
;;
;;   (add-to-list 'dash-at-point-mode-alist '(perl-mode . \"perl\"))
;;
;; Additionally, the buffer-local variable `dash-at-point-docset' can
;; be set in a specific mode hook (or file/directory local variables)
;; to programmatically override the guessed docset.  For example:
;;
;;   (add-hook 'rinari-minor-mode-hook
;;             (lambda () (setq dash-at-point-docset \"rails\")))

"]) (dash . [(20140114 1257) nil "A modern list library for Emacs" single ";;; Commentary:

;; A modern list api for Emacs.
;;
;; See documentation on https://github.com/magnars/dash.el#functions

"]) (dart-mode . [(20130906 1244) nil "Major mode for editing Dart files" single ";;; Commentary:

;; To install, save this on your load path and add the following to
;; your .emacs file:
;;
;; (require 'dart-mode)
;;
;; Known bugs:
;;
;; * Multiline strings using \"\"\" and ''' are not recognized. They fontify
;;   correctly, but only because they look like three strings in a row.
;; * In a map with identifier keys, the first key is fontified like a label.
;; * Return values for operator methods aren't fontified correctly.
;; * Untyped parameters aren't fontified correctly.
;; * Quotes immediately after string interpolation are marked as unclosed.
;; * Sexp movement doesn't properly ignore quotes in interpolation.
;; * Methods using \"=>\" can cause indentation woes.
;; * C and C++ modes seem to be hosed.

"]) (darcsum . [(20131103 1031) nil "a pcl-cvs like interface for managing darcs patches" tar]) (dakrone-theme . [(20131212 1159) nil "dakrone's custom dark theme" single ";;; Commentary:
;; A dark theme with lots of color
;;
;; To use, put the following in your Emacs config:
;;
;;   (load-theme 'dakrone t)
;;
;; Requires Emacs 24

"]) (d-mode . [(20130909 150) nil "D Programming Language mode for (X)Emacs" single nil]) (cython-mode . [(20131229 406) nil "Major mode for editing Cython files" single ";;; Commentary:

;; This should work with python-mode.el as well as either the new
;; python.el or the old.

"]) (cycbuf . [(20131203 1237) nil "Cycle buffers, inspired by swbuff.el, swbuff-x.el, and bs.el" single ";;; Commentary:

;; This is a combination of some features of swbuff-x (Kahlil (Kal)
;; HODGSON <dorge@tpg.com.au>), which is a modification to swbuff
;; (David Ponce) and bs (Olaf Sylvester <olaf@geekware.de>)
;;
;; I really liked the nicely layouted and composed buffer-selection
;; buffer of bs.  However, also fast switching buffers with one
;; key-stroke and showing a temporary buffer with a buffer list (with
;; hide timeout) a la swbuff is nice.  So I combined both's
;; advantages.
;;
;; Some current problems are documented in the code.

"]) (cyberpunk-theme . [(20131205 1256) nil "Cyberpunk Color Theme" single ";;; Commentary:

;; This theme is a port of the overtone/emacs-live theme of the same name
;; (https://github.com/overtone/emacs-live). The original theme was
;; designed for use with the color-theme package. This theme adopts the
;; new built-in theme support deftheme. Additionally, this
;; theme strives to offer as many mode-specific customizations as
;; possible, with further tweaks that suit my fancy.

(deftheme cyberpunk \"The Cyberpunk color theme\")

(let ((class '((class color) (min-colors 89)))
      ;; Cyberpunk palette
      (cyberpunk-fg \"#dcdccc\")
      (cyberpunk-bg-1 \"#2b2b2b\")
      (cyberpunk-bg-05 \"#383838\")
      (cyberpunk-bg \"#000000\")
      (cyberpunk-bg+1 \"#4f4f4f\")
      (cyberpunk-bg+2 \"#5f5f5f\")
      (cyberpunk-bg+3 \"#6f6f6f\")
      (cyberpunk-red+1 \"#dca3a3\")
      (cyberpunk-red \"#ff0000\")
      (cyberpunk-red-1 \"#8b0000\")
      (cyberpunk-red-2 \"#8b0000\")
      (cyberpunk-red-3 \"#9c6363\")
      (cyberpunk-red-4 \"#8c5353\")
      (cyberpunk-red-5 \"#7F073F\")
      (cyberpunk-pink \"#ff69b4\")
      (cyberpunk-pink-1 \"#ff1493\")
      (cyberpunk-pink-2 \"#cd1076\")
      (cyberpunk-orange-2 \"#FF6400\")
      (cyberpunk-orange-1 \"#ff8c00\") ;; DarkOrange
      (cyberpunk-orange \"#ffa500\")
      (cyberpunk-yellow \"#ffff00\")
      (cyberpunk-yellow-1 \"#FBDE2D\")
      (cyberpunk-yellow-2 \"#d0bf8f\")
      (cyberpunk-yellow-3 \"#D8FA3C\")
      (cyberpunk-yellow-4 \"#E9C062\")
      (cyberpunk-yellow-5 \"#ffd700\")
      (cyberpunk-green-2 \"#006400\")
      (cyberpunk-green-1 \"#2e8b57\")
      (cyberpunk-green \"#00ff00\")
      (cyberpunk-green+1 \"#61CE3C\")
      (cyberpunk-green+2 \"#9fc59f\")
      (cyberpunk-green+3 \"#afd8af\")
      (cyberpunk-green+4 \"#bfebbf\")
      (cyberpunk-cyan \"#93e0e3\")
      (cyberpunk-blue+1 \"#94bff3\")
      (cyberpunk-blue \"#0000ff\")    ;; blue
      (cyberpunk-blue-1 \"#7b68ee\")  ;; medium slate blue
      (cyberpunk-blue-2 \"#6a5acd\")  ;; slate blue
      (cyberpunk-blue-3 \"#add8e6\")  ;; light blue
      (cyberpunk-blue-4 \"#b2dfee\")  ;; LightBlue2
      (cyberpunk-blue-5 \"#4c83ff\")
      (cyberpunk-blue-6 \"#96CBFE\")
      (cyberpunk-blue-7 \"#00ffff\")
      (cyberpunk-blue-8 \"#4F94CD\")
      (cyberpunk-magenta \"#dc8cc3\")
      (cyberpunk-black \"#000000\")
      (cyberpunk-black-2 \"#0C1021\")
      (cyberpunk-black-3 \"#0A0A0A\")
      (cyberpunk-gray \"#d3d3d3\")
      (cyberpunk-gray-2 \"#8B8989\")
      (cyberpunk-gray-3 \"#919191\")
      (cyberpunk-gray-4 \"#999999\")
      (cyberpunk-gray-5 \"#333333\")
      (cyberpunk-gray-6 \"#1A1A1A\")
      (cyberpunk-gray-7 \"#4D4D4D\")
      (cyberpunk-gray-8 \"#262626\")
      (cyberpunk-white \"#ffffff\")
      (cyberpunk-white-2 \"#F8F8F8\")
      (cyberpunk-white-3 \"#fffafa\"))

 (custom-theme-set-faces
   'cyberpunk
   '(button ((t (:underline t))))
   `(link ((,class (:foreground ,cyberpunk-yellow :underline t :weight bold))))
   `(link-visited ((,class (:foreground ,cyberpunk-yellow-2 :underline t :weight normal))))
   `(blue ((,class (:foreground ,cyberpunk-blue))))
   `(bold ((,class (:bold t))))
   `(bold-italic ((,class (:bold t))))
   `(border-glyph ((,class (nil))))
   `(buffers-tab ((,class (:background ,cyberpunk-black-2 :foreground ,cyberpunk-white-2))))

   ;;; basic coloring
   `(default ((,class (:foreground ,cyberpunk-gray :background ,cyberpunk-black))))
   `(cursor ((,class (:background ,cyberpunk-fg))))
   `(escape-glyph-face ((,class (:foreground ,cyberpunk-red))))
   ;; `(fringe ((,class (:foreground ,cyberpunk-fg :background ,cyberpunk-bg+1))))
   `(header-line ((,class (:foreground ,cyberpunk-yellow
                                       :background ,cyberpunk-bg-1
                                       :box (:line-width -1 :style released-button)))))
   `(highlight ((,class (:background ,cyberpunk-gray-5))))

   ;;; compilation
   `(compilation-column-face ((,class (:foreground ,cyberpunk-yellow))))
   `(compilation-enter-directory-face ((,class (:foreground ,cyberpunk-green))))
   `(compilation-error-face ((,class (:foreground ,cyberpunk-red-1 :weight bold :underline t))))
   `(compilation-face ((,class (:foreground ,cyberpunk-fg))))
   `(compilation-info-face ((,class (:foreground ,cyberpunk-blue))))
   `(compilation-info ((,class (:foreground ,cyberpunk-green+4 :underline t))))
   `(compilation-leave-directory-face ((,class (:foreground ,cyberpunk-green))))
   `(compilation-line-face ((,class (:foreground ,cyberpunk-yellow))))
   `(compilation-line-number ((,class (:foreground ,cyberpunk-yellow))))
   `(compilation-message-face ((,class (:foreground ,cyberpunk-blue))))
   `(compilation-warning-face ((,class (:foreground ,cyberpunk-yellow-1 :weight bold :underline t))))

   ;;; grep
   `(grep-context-face ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-pink-1))))
   `(grep-error-face ((,class (:foreground ,cyberpunk-red :weight bold :underline t))))
   `(grep-hit-face ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-red))))
   `(grep-match-face ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-pink-1))))
   `(match ((,class (:background ,cyberpunk-black :foreground ,cyberpunk-pink-1))))

   ;; faces used by isearch
   `(isearch ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-pink-1))))
   `(isearch-fail ((,class (:background ,cyberpunk-red-1))))
   
   `(lazy-highlight ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-yellow))))
   `(query-replace ((,class (:background ,cyberpunk-gray-5))))
   `(Highline-face ((,class (:background ,cyberpunk-green-1))))
   `(italic ((,class (nil))))
   `(left-margin ((,class (nil))))
   `(toolbar ((,class (nil))))
   `(underline ((,class (:underline nil))))
   `(text-cursor ((,class (:background ,cyberpunk-yellow :foreground ,cyberpunk-black))))

   `(menu ((,class (:foreground ,cyberpunk-fg :background ,cyberpunk-bg))))
   `(minibuffer-prompt ((,class (:foreground ,cyberpunk-green+1 :background ,cyberpunk-black))))
   `(mode-line
     ((,class (:foreground ,cyberpunk-blue-5
                           :background ,cyberpunk-gray-5
                           :box (:line-width -1)))))
   ;; `(mode-line-buffer-id ((,class (:foreground ,cyberpunk-yellow :weight bold))))
   `(mode-line-inactive
     ((,class (:foreground ,cyberpunk-gray-7
                           :background ,cyberpunk-gray-6
                           :box (:line-width -1)))))
   `(region ((,class (:background ,cyberpunk-red-5))))
   `(secondary-selection ((,class (:background ,cyberpunk-bg+2))))
   `(trailing-whitespace ((,class (:background ,cyberpunk-red))))
   `(vertical-border ((,class (:foreground ,cyberpunk-gray-5 :background ,cyberpunk-black))))

   ;;; font lock
   `(font-lock-builtin-face ((,class (:foreground ,cyberpunk-orange-2))))
   `(font-lock-comment-face ((,class (:foreground ,cyberpunk-gray-2 :italic t))))
   ;; `(font-lock-comment-delimiter-face ((,class (:foreground ,cyberpunk-green)))) 
   `(font-lock-constant-face ((,class (:foreground ,cyberpunk-blue-5))))
   ;; `(font-lock-doc-face ((,class (:foreground ,cyberpunk-green+1))))
   `(font-lock-doc-string-face ((,class (:foreground ,cyberpunk-orange-1))))
   `(font-lock-function-name-face ((,class (:foreground ,cyberpunk-pink-1))))
   `(font-lock-keyword-face ((,class (:foreground ,cyberpunk-yellow-1))))
   ;; `(font-lock-negation-char-face ((,class (:foreground ,cyberpunk-fg))))
   `(font-lock-preprocessor-face ((,class (:foreground ,cyberpunk-gray-3))))
   `(font-lock-string-face ((,class (:foreground ,cyberpunk-green+1))))
   `(font-lock-type-face ((,class (:foreground ,cyberpunk-yellow-3))))
   `(font-lock-variable-name-face ((,class (:foreground ,cyberpunk-yellow-3))))
   `(font-lock-warning-face ((,class (:foreground ,cyberpunk-pink))))
   `(font-lock-reference-face ((,class (:foreground ,cyberpunk-gray))))
   `(font-lock-regexp-grouping-backslash ((,class (:foreground ,cyberpunk-yellow-4))))
   `(font-lock-regexp-grouping-construct ((,class (:foreground ,cyberpunk-red))))


   `(c-annotation-face ((,class (:inherit font-lock-constant-face))))

   `(gui-element ((,class (:background ,cyberpunk-gray-5 :foreground ,cyberpunk-blue-6))))
   


   ;;; newsticker
   ;; These are currently placeholders that probably look terrible.
   ;; Someone who uses newsticker is welcome to change these
   `(newsticker-date-face ((,class (:foreground ,cyberpunk-fg))))
   `(newsticker-default-face ((,class (:foreground ,cyberpunk-fg))))
   `(newsticker-enclosure-face ((,class (:foreground ,cyberpunk-green+3))))
   `(newsticker-extra-face ((,class (:foreground ,cyberpunk-bg+2 :height 0.8))))
   `(newsticker-feed-face ((,class (:foreground ,cyberpunk-fg))))
   `(newsticker-immortal-item-face ((,class (:foreground ,cyberpunk-green))))
   `(newsticker-new-item-face ((,class (:foreground ,cyberpunk-blue))))
   `(newsticker-obsolete-item-face ((,class (:foreground ,cyberpunk-red))))
   `(newsticker-old-item-face ((,class (:foreground ,cyberpunk-bg+3))))
   `(newsticker-statistics-face ((,class (:foreground ,cyberpunk-fg))))
   `(newsticker-treeview-face ((,class (:foreground ,cyberpunk-fg))))
   `(newsticker-treeview-immortal-face ((,class (:foreground ,cyberpunk-green))))
   `(newsticker-treeview-listwindow-face ((,class (:foreground ,cyberpunk-fg))))
   `(newsticker-treeview-new-face ((,class (:foreground ,cyberpunk-blue :weight bold))))
   `(newsticker-treeview-obsolete-face ((,class (:foreground ,cyberpunk-red))))
   `(newsticker-treeview-old-face ((,class (:foreground ,cyberpunk-bg+3))))
   `(newsticker-treeview-selection-face ((,class (:foreground ,cyberpunk-yellow))))

   ;;; external

   ;; full-ack
   `(ack-separator ((,class (:foreground ,cyberpunk-fg))))
   `(ack-file ((,class (:foreground ,cyberpunk-blue))))
   `(ack-line ((,class (:foreground ,cyberpunk-yellow))))
   `(ack-match ((,class (:foreground ,cyberpunk-orange :background ,cyberpunk-bg-1 :weigth bold))))

   ;; auctex
   `(font-latex-bold ((,class (:inherit bold))))
   `(font-latex-warning ((,class (:inherit font-lock-warning))))
   `(font-latex-sedate ((,class (:foreground ,cyberpunk-yellow :weight bold))))
   `(font-latex-string ((,class (:foreground ,cyberpunk-green))))
   `(font-latex-title-4 ((,class (:inherit variable-pitch :weight bold))))
   `(font-latex-sectioning-0 ((,class (:foreground ,cyberpunk-blue :background ,cyberpunk-black :scale 1.5))))
   `(font-latex-sectioning-1 ((,class (:foreground ,cyberpunk-blue :background ,cyberpunk-black :scale 1.5))))

   ;; auto-complete
   `(ac-completion-face ((,class (:background ,cyberpunk-gray-2 :underline t))))
   `(ac-candidate-face ((,class (:background ,cyberpunk-gray-4 :foreground ,cyberpunk-black))))
   `(ac-selection-face ((,class (:background ,cyberpunk-pink-1 :foreground ,cyberpunk-black))))
   `(popup-tip-face ((,class (:background ,cyberpunk-gray-5 :foreground ,cyberpunk-white))))
   `(popup-scroll-bar-foreground-face ((,class (:background ,cyberpunk-black-3))))
   `(popup-scroll-bar-background-face ((,class (:background ,cyberpunk-gray-5))))
   `(popup-isearch-match ((,class (:background ,cyberpunk-black :foreground ,cyberpunk-pink-1))))

   `(window-number-face ((,class (:background ,cyberpunk-gray-6 :foreground ,cyberpunk-blue-5))))

   ;; diff
   `(diff-added ((,class (:foreground ,cyberpunk-green))))
   `(diff-changed ((,class (:foreground ,cyberpunk-yellow))))
   `(diff-removed ((,class (:foreground ,cyberpunk-red))))
   `(diff-header ((,class (:background ,cyberpunk-bg+2))))
   `(diff-file-header ((,class (:background ,cyberpunk-bg+2 :foreground ,cyberpunk-fg :bold t))))

   ;; ediff
   `(ediff-current-diff-Ancestor ((,class (:foreground ,cyberpunk-fg :background ,cyberpunk-pink))))
   `(ediff-current-diff-A ((,class (:foreground ,cyberpunk-fg :background ,cyberpunk-bg-05))))
   `(ediff-current-diff-B ((,class (:foreground ,cyberpunk-fg :background ,cyberpunk-bg+1))))
   `(ediff-current-diff-C ((,class (:foreground ,cyberpunk-fg :background ,cyberpunk-bg+2))))
   `(ediff-even-diff-Ancestor ((,class (:foreground ,cyberpunk-white :background ,cyberpunk-bg-05))))
   `(ediff-even-diff-A ((,class (:foreground ,cyberpunk-white :background ,cyberpunk-bg+1))))
   `(ediff-even-diff-B ((,class (:foreground ,cyberpunk-white :background ,cyberpunk-bg+2))))
   `(ediff-even-diff-C ((,class (:foreground ,cyberpunk-white :background ,cyberpunk-bg+3))))
   `(ediff-fine-diff-Ancestor ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-pink))))
   `(ediff-fine-diff-A ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-blue-5))))
   `(ediff-fine-diff-B ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-blue-5))))
   `(ediff-fine-diff-C ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-blue-5))))
   `(ediff-odd-diff-Ancestor ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-gray-2))))
   `(ediff-odd-diff-A ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-gray-3))))
   `(ediff-odd-diff-B ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-gray-4))))
   `(ediff-odd-diff-C ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-gray))))

   ;; ert
   `(ert-test-result-expected ((,class (:foreground ,cyberpunk-green+4 :background ,cyberpunk-bg))))
   `(ert-test-result-unexpected ((,class (:foreground ,cyberpunk-red :background ,cyberpunk-bg))))

   ;; eshell
   `(eshell-prompt ((,class (:foreground ,cyberpunk-yellow :weight bold))))
   `(eshell-ls-archive ((,class (:foreground ,cyberpunk-red-1 :weight bold))))
   `(eshell-ls-backup ((,class (:inherit font-lock-comment))))
   `(eshell-ls-clutter ((,class (:inherit font-lock-comment))))
   `(eshell-ls-directory ((,class (:foreground ,cyberpunk-blue+1 :weight bold))))
   `(eshell-ls-executable ((,class (:foreground ,cyberpunk-red+1 :weight bold))))
   `(eshell-ls-unreadable ((,class (:foreground ,cyberpunk-fg))))
   `(eshell-ls-missing ((,class (:inherit font-lock-warning))))
   `(eshell-ls-product ((,class (:inherit font-lock-doc))))
   `(eshell-ls-special ((,class (:foreground ,cyberpunk-yellow :weight bold))))
   `(eshell-ls-symlink ((,class (:foreground ,cyberpunk-cyan :weight bold))))

   ;; flymake
   `(flymake-errline ((,class (:foreground ,cyberpunk-red-1 :weight bold :underline t))))
   `(flymake-warnline ((,class (:foreground ,cyberpunk-yellow-1 :weight bold :underline t))))

   ;; flyspell
   `(flyspell-duplicate ((,class (:foreground ,cyberpunk-yellow-1 :weight bold :underline t))))
   `(flyspell-incorrect ((,class (:foreground ,cyberpunk-orange-2 :weight bold :underline t))))

   ;; erc
   `(erc-action-face ((,class (:inherit erc-default-face))))
   `(erc-bold-face ((,class (:weight bold))))
   `(erc-current-nick-face ((,class (:foreground ,cyberpunk-blue :weight bold))))
   `(erc-dangerous-host-face ((,class (:inherit font-lock-warning))))
   `(erc-default-face ((,class (:foreground ,cyberpunk-fg))))
   `(erc-direct-msg-face ((,class (:inherit erc-default))))
   `(erc-error-face ((,class (:inherit font-lock-warning))))
   `(erc-fool-face ((,class (:inherit erc-default))))
   `(erc-highlight-face ((,class (:inherit hover-highlight))))
   `(erc-input-face ((,class (:foreground ,cyberpunk-yellow))))
   `(erc-keyword-face ((,class (:foreground ,cyberpunk-blue :weight bold))))
   `(erc-nick-default-face ((,class (:foreground ,cyberpunk-yellow :weight bold))))
   `(erc-my-nick-face ((,class (:foreground ,cyberpunk-red :weigth bold))))
   `(erc-nick-msg-face ((,class (:inherit erc-default))))
   `(erc-notice-face ((,class (:foreground ,cyberpunk-green))))
   `(erc-pal-face ((,class (:foreground ,cyberpunk-orange :weight bold))))
   `(erc-prompt-face ((,class (:foreground ,cyberpunk-orange :background ,cyberpunk-bg :weight bold))))
   `(erc-timestamp-face ((,class (:foreground ,cyberpunk-green+1))))
   `(erc-underline-face ((t (:underline t))))

   ;; gnus
   `(gnus-group-mail-1 ((,class (:bold t :inherit gnus-group-mail-1-empty))))
   `(gnus-group-mail-1-empty ((,class (:inherit gnus-group-news-1-empty))))
   `(gnus-group-mail-2 ((,class (:bold t :inherit gnus-group-mail-2-empty))))
   `(gnus-group-mail-2-empty ((,class (:inherit gnus-group-news-2-empty))))
   `(gnus-group-mail-3 ((,class (:bold t :inherit gnus-group-mail-3-empty))))
   `(gnus-group-mail-3-empty ((,class (:inherit gnus-group-news-3-empty))))
   `(gnus-group-mail-4 ((,class (:bold t :inherit gnus-group-mail-4-empty))))
   `(gnus-group-mail-4-empty ((,class (:inherit gnus-group-news-4-empty))))
   `(gnus-group-mail-5 ((,class (:bold t :inherit gnus-group-mail-5-empty))))
   `(gnus-group-mail-5-empty ((,class (:inherit gnus-group-news-5-empty))))
   `(gnus-group-mail-6 ((,class (:bold t :inherit gnus-group-mail-6-empty))))
   `(gnus-group-mail-6-empty ((,class (:inherit gnus-group-news-6-empty))))
   `(gnus-group-mail-low ((,class (:bold t :inherit gnus-group-mail-low-empty))))
   `(gnus-group-mail-low-empty ((,class (:inherit gnus-group-news-low-empty))))
   `(gnus-group-news-1 ((,class (:bold t :inherit gnus-group-news-1-empty))))
   `(gnus-group-news-2 ((,class (:bold t :inherit gnus-group-news-2-empty))))
   `(gnus-group-news-3 ((,class (:bold t :inherit gnus-group-news-3-empty))))
   `(gnus-group-news-4 ((,class (:bold t :inherit gnus-group-news-4-empty))))
   `(gnus-group-news-5 ((,class (:bold t :inherit gnus-group-news-5-empty))))
   `(gnus-group-news-6 ((,class (:bold t :inherit gnus-group-news-6-empty))))
   `(gnus-group-news-low ((,class (:bold t :inherit gnus-group-news-low-empty))))
   `(gnus-header-content ((,class (:inherit message-header-other))))
   `(gnus-header-from ((,class (:inherit message-header-from))))
   `(gnus-header-name ((,class (:inherit message-header-name))))
   `(gnus-header-newsgroups ((,class (:inherit message-header-other))))
   `(gnus-header-subject ((,class (:inherit message-header-subject))))
   `(gnus-summary-cancelled ((,class (:foreground ,cyberpunk-orange))))
   `(gnus-summary-high-ancient ((,class (:foreground ,cyberpunk-blue))))
   `(gnus-summary-high-read ((,class (:foreground ,cyberpunk-green :weight bold))))
   `(gnus-summary-high-ticked ((,class (:foreground ,cyberpunk-orange :weight bold))))
   `(gnus-summary-high-unread ((,class (:foreground ,cyberpunk-fg :weight bold))))
   `(gnus-summary-low-ancient ((,class (:foreground ,cyberpunk-blue))))
   `(gnus-summary-low-read ((t (:foreground ,cyberpunk-green))))
   `(gnus-summary-low-ticked ((,class (:foreground ,cyberpunk-orange :weight bold))))
   `(gnus-summary-low-unread ((,class (:foreground ,cyberpunk-fg))))
   `(gnus-summary-normal-ancient ((,class (:foreground ,cyberpunk-blue+1))))
   `(gnus-summary-normal-read ((,class (:foreground ,cyberpunk-green))))
   `(gnus-summary-normal-ticked ((,class (:foreground ,cyberpunk-orange :weight bold))))
   `(gnus-summary-normal-unread ((,class (:foreground ,cyberpunk-fg))))
   `(gnus-summary-selected ((,class (:foreground ,cyberpunk-yellow :weight bold))))
   `(gnus-cite-1 ((,class (:foreground ,cyberpunk-yellow-2))))
   `(gnus-cite-10 ((,class (:foreground ,cyberpunk-yellow-1))))
   `(gnus-cite-11 ((,class (:foreground ,cyberpunk-yellow))))
   `(gnus-cite-2 ((,class (:foreground ,cyberpunk-blue-1))))
   `(gnus-cite-3 ((,class (:foreground ,cyberpunk-blue-2))))
   `(gnus-cite-4 ((,class (:foreground ,cyberpunk-green+2))))
   `(gnus-cite-5 ((,class (:foreground ,cyberpunk-green+1))))
   `(gnus-cite-6 ((,class (:foreground ,cyberpunk-green))))
   `(gnus-cite-7 ((,class (:foreground ,cyberpunk-red))))
   `(gnus-cite-8 ((,class (:foreground ,cyberpunk-red-1))))
   `(gnus-cite-9 ((,class (:foreground ,cyberpunk-red-2))))
   `(gnus-group-news-1-empty ((,class (:foreground ,cyberpunk-yellow))))
   `(gnus-group-news-2-empty ((,class (:foreground ,cyberpunk-green+3))))
   `(gnus-group-news-3-empty ((,class (:foreground ,cyberpunk-green+1))))
   `(gnus-group-news-4-empty ((,class (:foreground ,cyberpunk-blue-2))))
   `(gnus-group-news-5-empty ((,class (:foreground ,cyberpunk-blue-3))))
   `(gnus-group-news-6-empty ((,class (:foreground ,cyberpunk-bg+2))))
   `(gnus-group-news-low-empty ((,class (:foreground ,cyberpunk-bg+2))))
   `(gnus-signature ((,class (:foreground ,cyberpunk-yellow))))
   `(gnus-x ((,class (:background ,cyberpunk-fg :foreground ,cyberpunk-bg))))

   ;; helm
   `(helm-header
     ((,class (:foreground ,cyberpunk-green
                           :background ,cyberpunk-bg
                           :underline nil
                           :box nil))))
   `(helm-source-header
     ((,class (:foreground ,cyberpunk-yellow
                           :background ,cyberpunk-bg-1
                           :underline nil
                           :weight bold
                           :box (:line-width -1 :style released-button)))))
   `(helm-selection ((,class (:background ,cyberpunk-bg+1 :underline nil))))
   `(helm-selection-line ((,class (:background ,cyberpunk-bg+1))))
   `(helm-visible-mark ((,class (:foreground ,cyberpunk-bg :background ,cyberpunk-yellow-2))))
   `(helm-candidate-number ((,class (:foreground ,cyberpunk-green+4 :background ,cyberpunk-bg-1))))

   ;; hl-line-mode
   `(hl-sexp-face ((,class (:background ,cyberpunk-gray-5))))
   `(hl-line-face ((,class (:background ,cyberpunk-gray-5))))

   ;; ido-mode
   `(ido-first-match ((,class (:foreground ,cyberpunk-pink-1 :background ,cyberpunk-black))))
   `(ido-only-match ((,class (:foreground ,cyberpunk-pink-1 :background ,cyberpunk-black))))
   `(ido-subdir ((,class (:foreground ,cyberpunk-gray-4 :backgroun ,cyberpunk-black))))
   `(ido-indicator ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-pink-1))))

   ;; js2-mode
   `(js2-warning-face ((,class (:underline ,cyberpunk-orange))))
   `(js2-error-face ((,class (:foreground ,cyberpunk-red :weight bold))))
   `(js2-jsdoc-tag-face ((,class (:foreground ,cyberpunk-green-1))))
   `(js2-jsdoc-type-face ((,class (:foreground ,cyberpunk-green+2))))
   `(js2-jsdoc-value-face ((,class (:foreground ,cyberpunk-green+3))))
   `(js2-function-param-face ((,class (:foreground, cyberpunk-green+3))))
   `(js2-external-variable-face ((,class (:foreground ,cyberpunk-orange))))

   ;; jabber-mode
   `(jabber-roster-user-away ((,class (:foreground ,cyberpunk-green+2))))
   `(jabber-roster-user-online ((,class (:foreground ,cyberpunk-blue-1))))
   `(jabber-roster-user-dnd ((,class (:foreground ,cyberpunk-red+1))))
   `(jabber-rare-time-face ((,class (:foreground ,cyberpunk-green+1))))
   `(jabber-chat-prompt-local ((,class (:foreground ,cyberpunk-blue-1))))
   `(jabber-chat-prompt-foreign ((,class (:foreground ,cyberpunk-red+1))))
   `(jabber-activity-face((,class (:foreground ,cyberpunk-red+1))))
   `(jabber-activity-personal-face ((,class (:foreground ,cyberpunk-blue+1))))
   `(jabber-title-small ((,class (:height 1.1 :weight bold))))
   `(jabber-title-medium ((,class (:height 1.2 :weight bold))))
   `(jabber-title-large ((,class (:height 1.3 :weight bold))))

   ;; linum-mode
   `(linum ((,class (:foreground ,cyberpunk-green+2 :background ,cyberpunk-bg))))

   ;; magit
   `(magit-section-title ((,class (:foreground ,cyberpunk-pink-1))))
   `(magit-branch ((,class (:foreground ,cyberpunk-yellow-5))))
   `(magit-item-highlight ((,class (:background ,cyberpunk-gray-8))))
   `(magit-diff-add ((,class (:foreground ,cyberpunk-green))))
   `(magit-diff-del ((,class (:foreground ,cyberpunk-red))))
   `(magit-diff-hunk-header ((,class (:foreground ,cyberpunk-orange))))

   `(eval-sexp-fu-flash ((,class (:background ,cyberpunk-gray-8 :foreground ,cyberpunk-pink-2))))

   ;; message-mode
   `(message-cited-text ((,class (:inherit font-lock-comment))))
   `(message-header-name ((,class (:foreground ,cyberpunk-blue-5))))
   `(message-header-other ((,class (:foreground ,cyberpunk-green))))
   `(message-header-to ((,class (:foreground ,cyberpunk-pink-1 :weight bold))))
   `(message-header-from ((,class (:foreground ,cyberpunk-yellow :weight bold))))
   `(message-header-cc ((,class (:foreground ,cyberpunk-yellow :weight bold))))
   `(message-header-newsgroups ((,class (:foreground ,cyberpunk-yellow :weight bold))))
   `(message-header-subject ((,class (:foreground ,cyberpunk-orange :weight bold))))
   `(message-header-xheader ((,class (:foreground ,cyberpunk-green))))
   `(message-mml ((,class (:foreground ,cyberpunk-yellow :weight bold))))
   `(message-separator ((,class (:inherit font-lock-comment))))

   ;; mew
   `(mew-face-header-subject ((,class (:foreground ,cyberpunk-orange))))
   `(mew-face-header-from ((,class (:foreground ,cyberpunk-yellow))))
   `(mew-face-header-date ((,class (:foreground ,cyberpunk-green))))
   `(mew-face-header-to ((,class (:foreground ,cyberpunk-red))))
   `(mew-face-header-key ((,class (:foreground ,cyberpunk-green))))
   `(mew-face-header-private ((,class (:foreground ,cyberpunk-green))))
   `(mew-face-header-important ((,class (:foreground ,cyberpunk-blue))))
   `(mew-face-header-marginal ((,class (:foreground ,cyberpunk-fg :weight bold))))
   `(mew-face-header-warning ((,class (:foreground ,cyberpunk-red))))
   `(mew-face-header-xmew ((,class (:foreground ,cyberpunk-green))))
   `(mew-face-header-xmew-bad ((,class (:foreground ,cyberpunk-red))))
   `(mew-face-body-url ((,class (:foreground ,cyberpunk-orange))))
   `(mew-face-body-comment ((,class (:foreground ,cyberpunk-fg :slant italic))))
   `(mew-face-body-cite1 ((,class (:foreground ,cyberpunk-green))))
   `(mew-face-body-cite2 ((,class (:foreground ,cyberpunk-blue))))
   `(mew-face-body-cite3 ((,class (:foreground ,cyberpunk-orange))))
   `(mew-face-body-cite4 ((,class (:foreground ,cyberpunk-yellow))))
   `(mew-face-body-cite5 ((,class (:foreground ,cyberpunk-red))))
   `(mew-face-mark-review ((,class (:foreground ,cyberpunk-blue))))
   `(mew-face-mark-escape ((,class (:foreground ,cyberpunk-green))))
   `(mew-face-mark-delete ((,class (:foreground ,cyberpunk-red))))
   `(mew-face-mark-unlink ((,class (:foreground ,cyberpunk-yellow))))
   `(mew-face-mark-refile ((,class (:foreground ,cyberpunk-green))))
   `(mew-face-mark-unread ((,class (:foreground ,cyberpunk-red-2))))
   `(mew-face-eof-message ((,class (:foreground ,cyberpunk-green))))
   `(mew-face-eof-part ((,class (:foreground ,cyberpunk-yellow))))

   ;; mic-paren
   `(paren-face-match ((,class (:foreground ,cyberpunk-cyan :background ,cyberpunk-bg :weight bold))))
   `(paren-face-mismatch ((,class (:foreground ,cyberpunk-bg :background ,cyberpunk-magenta :weight bold))))
   `(paren-face-no-match ((,class (:foreground ,cyberpunk-bg :background ,cyberpunk-red :weight bold))))

   ;; nav
   `(nav-face-heading ((,class (:foreground ,cyberpunk-yellow))))
   `(nav-face-button-num ((,class (:foreground ,cyberpunk-cyan))))
   `(nav-face-dir ((,class (:foreground ,cyberpunk-green))))
   `(nav-face-hdir ((,class (:foreground ,cyberpunk-red))))
   `(nav-face-file ((,class (:foreground ,cyberpunk-fg))))
   `(nav-face-hfile ((,class (:foreground ,cyberpunk-red-4))))

   ;; mumamo
   `(mumamo-background-chunk-major ((,class (:background ,cyberpunk-black))))
   `(mumamo-background-chunk-submode1 ((,class (:background ,cyberpunk-black))))
   `(mumamo-background-chunk-submode2 ((,class (:background ,cyberpunk-bg+2))))
   `(mumamo-background-chunk-submode3 ((,class (:background ,cyberpunk-bg+3))))
   `(mumamo-background-chunk-submode4 ((,class (:background ,cyberpunk-bg+1))))

   ;; org-mode
   `(org-document-title ((,class (:foreground ,cyberpunk-blue-3 :background ,cyberpunk-black :weight bold :height 1.5))))
   `(org-document-info ((,class (:foreground ,cyberpunk-blue-3 :background ,cyberpunk-black :weight bold))))
   `(org-document-info-keyword ((,class (:foreground ,cyberpunk-gray-2 :background ,cyberpunk-black))))
   `(org-agenda-date-today
     ((,class (:foreground ,cyberpunk-orange-2 :slant italic :weight bold))) t)
   `(org-agenda-structure
     ((,class (:inherit font-lock-comment-face))))
   `(org-archived ((,class (:slant italic))))
   `(org-checkbox ((,class (:background ,cyberpunk-gray-2 :foreground ,cyberpunk-black
                                   :box (:line-width 1 :style released-button)))))
   `(org-date ((,class (:foreground ,cyberpunk-blue-7 :underline t))))
   `(org-done ((,class (:bold t :weight bold :foreground ,cyberpunk-green
                              :box (:line-width 1 :style none)))))
   `(org-todo ((,class (:bold t :foreground ,cyberpunk-orange :weight bold
                              :box (:line-width 1 :style none)))))
   `(org-level-1 ((,class (:foreground ,cyberpunk-pink-1 :height 1.3))))
   `(org-level-2 ((,class (:foreground ,cyberpunk-yellow :height 1.2))))
   `(org-level-3 ((,class (:foreground ,cyberpunk-blue-5 :height 1.1))))
   `(org-level-4 ((,class (:foreground ,cyberpunk-green))))
   `(org-level-5 ((,class (:foreground ,cyberpunk-orange))))
   `(org-level-6 ((,class (:foreground ,cyberpunk-pink))))
   `(org-level-7 ((,class (:foreground ,cyberpunk-green+3))))
   `(org-level-8 ((,class (:foreground ,cyberpunk-blue-1))))
   `(org-link ((,class (:foreground ,cyberpunk-blue-6 :underline t))))
   `(org-tag ((,class (:bold t :weight bold))))
   `(org-column ((,class (:background ,cyberpunk-yellow-3 :foreground ,cyberpunk-black))))
   `(org-column-title ((,class (:background ,cyberpunk-bg-1 :underline t :weight bold))))
   `(org-block ((,class (:foreground ,cyberpunk-fg :background ,cyberpunk-bg-05))))
   `(org-block-begin-line 
     ((,class (:foreground \"#008ED1\" :background ,cyberpunk-bg-1))))
   `(org-block-background ((,class (:background ,cyberpunk-bg-05))))
   `(org-block-end-line 
     ((,class (:foreground \"#008ED1\" :background ,cyberpunk-bg-1))))

   ;; `(org-deadline-announce ((,class (:foreground ,cyberpunk-red-1))))
   ;; `(org-scheduled ((,class (:foreground ,cyberpunk-green+4))))
   ;; `(org-scheduled-previously ((,class (:foreground ,cyberpunk-red-4))))
   ;; `(org-scheduled-today ((,class (:foreground ,cyberpunk-blue+1))))
   ;; `(org-special-keyword ((,class (:foreground ,cyberpunk-yellow-1))))
   ;; `(org-table ((,class (:foreground ,cyberpunk-green+2))))
   ;; `(org-time-grid ((,class (:foreground ,cyberpunk-orange))))
   ;; `(org-upcoming-deadline ((,class (:inherit font-lock-keyword-face))))
   ;; `(org-warning ((,class (:bold t :foreground ,cyberpunk-red :weight bold :underline nil))))
   ;; `(org-formula ((,class (:foreground ,cyberpunk-yellow-2))))
   ;; `(org-headline-done ((,class (:foreground ,cyberpunk-green+3))))
   ;; `(org-hide ((,class (:foreground ,cyberpunk-bg-1))))

   ;; outline
   `(outline-8 ((,class (:inherit default))))
   `(outline-7 ((,class (:inherit outline-8 :height 1.0))))
   `(outline-6 ((,class (:inherit outline-7 :height 1.0))))
   `(outline-5 ((,class (:inherit outline-6 :height 1.0))))
   `(outline-4 ((,class (:inherit outline-5 :height 1.0))))
   `(outline-3 ((,class (:inherit outline-4 :height 1.0))))
   `(outline-2 ((,class (:inherit outline-3 :height 1.0))))
   `(outline-1 ((,class (:inherit outline-2 :height 1.0))))

   ;; rainbow-delimiters
   `(rainbow-delimiters-depth-1-face ((,class (:foreground ,cyberpunk-red-1))))
   `(rainbow-delimiters-depth-2-face ((,class (:foreground ,cyberpunk-green-2))))
   `(rainbow-delimiters-depth-3-face ((,class (:foreground ,cyberpunk-pink-1))))
   `(rainbow-delimiters-depth-4-face ((,class (:foreground ,cyberpunk-yellow))))
   `(rainbow-delimiters-depth-5-face ((,class (:foreground ,cyberpunk-green))))
   `(rainbow-delimiters-depth-6-face ((,class (:foreground ,cyberpunk-blue-3))))
   `(rainbow-delimiters-depth-7-face ((,class (:foreground ,cyberpunk-orange))))
   `(rainbow-delimiters-depth-8-face ((,class (:foreground ,cyberpunk-blue-2))))
   `(rainbow-delimiters-depth-9-face ((,class (:foreground ,cyberpunk-gray))))
   `(rainbow-delimiters-depth-10-face ((,class (:foreground ,cyberpunk-white))))
   `(rainbow-delimiters-depth-11-face ((,class (:foreground ,cyberpunk-blue+1))))
   `(rainbow-delimiters-depth-12-face ((,class (:foreground ,cyberpunk-red-4))))

   ;; rpm-mode
   `(rpm-spec-dir-face ((,class (:foreground ,cyberpunk-green))))
   `(rpm-spec-doc-face ((,class (:foreground ,cyberpunk-green))))
   `(rpm-spec-ghost-face ((,class (:foreground ,cyberpunk-red))))
   `(rpm-spec-macro-face ((,class (:foreground ,cyberpunk-yellow))))
   `(rpm-spec-obsolete-tag-face ((,class (:foreground ,cyberpunk-red))))
   `(rpm-spec-package-face ((,class (:foreground ,cyberpunk-red))))
   `(rpm-spec-section-face ((,class (:foreground ,cyberpunk-yellow))))
   `(rpm-spec-tag-face ((,class (:foreground ,cyberpunk-blue))))
   `(rpm-spec-var-face ((,class (:foreground ,cyberpunk-red))))

   ;; rst-mode
   `(rst-level-1-face ((,class (:foreground ,cyberpunk-orange))))
   `(rst-level-2-face ((,class (:foreground ,cyberpunk-green+1))))
   `(rst-level-3-face ((,class (:foreground ,cyberpunk-blue-1))))
   `(rst-level-4-face ((,class (:foreground ,cyberpunk-yellow-2))))
   `(rst-level-5-face ((,class (:foreground ,cyberpunk-cyan))))
   `(rst-level-6-face ((,class (:foreground ,cyberpunk-green-1))))

   ;; show-paren
   `(show-paren-mismatch ((,class (:foreground ,cyberpunk-red-3 :background ,cyberpunk-black))))
   `(show-paren-match ((,class (:foreground ,cyberpunk-black :background ,cyberpunk-pink-1))))

   `(naeu-green-face ((,class (:foreground ,cyberpunk-green :background ,cyberpunk-black))))
   `(naeu-pink-face ((,class (:foreground ,cyberpunk-pink-1 :background ,cyberpunk-black))))
   `(naeu-blue-face ((,class (:foreground ,cyberpunk-blue-1 :background ,cyberpunk-black))))
   `(naeu-orange-face ((,class (:foreground ,cyberpunk-yellow-1 :background ,cyberpunk-black))))
   `(naeu-red-face ((,class (:foreground ,cyberpunk-orange :background ,cyberpunk-black))))
   `(naeu-grey-face ((,class (:foreground ,cyberpunk-gray-7 :background ,cyberpunk-black))))

   ;; SLIME
   `(slime-repl-inputed-output-face ((,class (:foreground ,cyberpunk-red))))

  ;;; ansi-term
   `(term-color-black ((,class (:foreground ,cyberpunk-bg
                                            :background ,cyberpunk-bg-1))))
   `(term-color-red ((,class (:foreground ,cyberpunk-red-2
                                          :background ,cyberpunk-red-4))))
   `(term-color-green ((,class (:foreground ,cyberpunk-green
                                            :background ,cyberpunk-green+2))))
   `(term-color-yellow ((,class (:foreground ,cyberpunk-orange
                                             :background ,cyberpunk-yellow))))
   `(term-color-blue ((,class (:foreground ,cyberpunk-blue-1
                                           :background ,cyberpunk-blue-4))))
   `(term-color-magenta ((,class (:foreground ,cyberpunk-magenta
                                              :background ,cyberpunk-red))))
   `(term-color-cyan ((,class (:foreground ,cyberpunk-cyan
                                           :background ,cyberpunk-blue))))
   `(term-color-white ((,class (:foreground ,cyberpunk-fg
                                            :background ,cyberpunk-bg-1))))
   `(term-default-fg-color ((,class (:inherit term-color-white))))
   `(term-default-bg-color ((,class (:inherit term-color-black))))

   ;; volatile-highlights
   `(vhl/default-face ((,class (:background ,cyberpunk-gray-5))))

   `(undo-tree-visualizer-active-branch-face ((,class (:foreground ,cyberpunk-pink-1 :background ,cyberpunk-black))))

   ;; whitespace-mode
   `(whitespace-space ((,class (:background ,cyberpunk-bg :foreground ,cyberpunk-bg+1))))
   `(whitespace-hspace ((,class (:background ,cyberpunk-bg :foreground ,cyberpunk-bg+1))))
   `(whitespace-tab ((,class (:background ,cyberpunk-bg :foreground ,cyberpunk-red))))
   `(whitespace-newline ((,class (:foreground ,cyberpunk-bg+1))))
   `(whitespace-trailing ((,class (:foreground ,cyberpunk-red :background ,cyberpunk-bg))))
   `(whitespace-line ((,class (:background ,cyberpunk-bg-05 :foreground ,cyberpunk-magenta))))
   `(whitespace-space-before-tab ((,class (:background ,cyberpunk-orange :foreground ,cyberpunk-orange))))
   `(whitespace-indentation ((,class (:background ,cyberpunk-yellow :foreground ,cyberpunk-red))))
   `(whitespace-empty ((,class (:background ,cyberpunk-yellow :foreground ,cyberpunk-red))))
   `(whitespace-space-after-tab ((,class (:background ,cyberpunk-yellow :foreground ,cyberpunk-red))))

   ;; wanderlust
   `(wl-highlight-folder-few-face ((,class (:foreground ,cyberpunk-red-2))))
   `(wl-highlight-folder-many-face ((,class (:foreground ,cyberpunk-red-1))))
   `(wl-highlight-folder-path-face ((,class (:foreground ,cyberpunk-orange))))
   `(wl-highlight-folder-unread-face ((,class (:foreground ,cyberpunk-blue))))
   `(wl-highlight-folder-zero-face ((,class (:foreground ,cyberpunk-fg))))
   `(wl-highlight-folder-unknown-face ((,class (:foreground ,cyberpunk-blue))))
   `(wl-highlight-message-citation-header ((,class (:foreground ,cyberpunk-red-1))))
   `(wl-highlight-message-cited-text-1 ((,class (:foreground ,cyberpunk-red))))
   `(wl-highlight-message-cited-text-2 ((,class (:foreground ,cyberpunk-green+2))))
   `(wl-highlight-message-cited-text-3 ((,class (:foreground ,cyberpunk-blue))))
   `(wl-highlight-message-cited-text-4 ((,class (:foreground ,cyberpunk-blue+1))))
   `(wl-highlight-message-header-contents-face ((,class (:foreground ,cyberpunk-green))))
   `(wl-highlight-message-headers-face ((,class (:foreground ,cyberpunk-red+1))))
   `(wl-highlight-message-important-header-contents ((,class (:foreground ,cyberpunk-green+2))))
   `(wl-highlight-message-header-contents ((,class (:foreground ,cyberpunk-green+1))))
   `(wl-highlight-message-important-header-contents2 ((,class (:foreground ,cyberpunk-green+2))))
   `(wl-highlight-message-signature ((,class (:foreground ,cyberpunk-green))))
   `(wl-highlight-message-unimportant-header-contents ((,class (:foreground ,cyberpunk-fg))))
   `(wl-highlight-summary-answered-face ((,class (:foreground ,cyberpunk-blue))))
   `(wl-highlight-summary-disposed-face ((,class (:foreground ,cyberpunk-fg
                                                         :slant italic))))
   `(wl-highlight-summary-new-face ((,class (:foreground ,cyberpunk-blue))))
   `(wl-highlight-summary-normal-face ((,class (:foreground ,cyberpunk-fg))))
   `(wl-highlight-summary-thread-top-face ((,class (:foreground ,cyberpunk-yellow))))
   `(wl-highlight-thread-indent-face ((,class (:foreground ,cyberpunk-magenta))))
   `(wl-highlight-summary-refiled-face ((,class (:foreground ,cyberpunk-fg))))
   `(wl-highlight-summary-displaying-face ((,class (:underline t :weight bold))))

   ;; which-func-mode
   `(which-func ((,class (:foreground ,cyberpunk-green+4))))

   ;; yasnippet
   `(yas/field-highlight-face ((,class (:background ,cyberpunk-pink-1 :foreground ,cyberpunk-black))))

   ;; yascroll
   `(yascroll:thumb-text-area ((,class (:background ,cyberpunk-bg-1))))
   `(yascroll:thumb-fringe ((,class (:background ,cyberpunk-bg-1 :foreground ,cyberpunk-bg-1))))
   )

  ;;; custom theme variables
  (custom-theme-set-variables
   'cyberpunk
   `(ansi-color-names-vector [,cyberpunk-bg ,cyberpunk-red-2 ,cyberpunk-green ,cyberpunk-orange
                                          ,cyberpunk-blue-1 ,cyberpunk-magenta ,cyberpunk-cyan ,cyberpunk-fg])
   ;; fill-column-indicator
   `(fci-rule-color ,cyberpunk-bg-05)))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'cyberpunk)

;; Local Variables:
;; no-byte-compile: t
;; indent-tabs-mode: nil
;; eval: (when (fboundp 'rainbow-mode) (rainbow-mode +1))
;; End:

;;; cyberpunk-theme.el ends here.
"]) (cus-edit+ . [(20140101 1842) nil "Enhancements to `cus-edit.el'." single ";;; Commentary:
;;
;; Enhancements to `cus-edit.el'.
;;
;;  Terminology
;;  -----------
;;
;;  Most of the enhancements here basically try to make Customize play
;;  a little better with Emacs.  Customize deals with user
;;  preferences, which are faces and variables.  User variables are
;;  also called \"user options\"; they are defined by `user-variable-p'.
;;  All faces are user preferences.
;;
;;  Note: The Customize source code sometimes refers to both faces and
;;  user variables (what I am calling \"user preferences\") as \"user
;;  options\".  The latter term has traditionally been used in Emacs for
;;  user variables only.
;;
;;  Contents
;;  --------
;;
;;  The enhancements to standard library `cus-edit.el' provided by
;;  `cus-edit+.el' include miscellaneous enhancements, such as
;;  formatting the Customize buffer better, and enhancements to make
;;  Customize play better with the rest of Emacs.  Most of the
;;  description here is about the latter.
;;
;;  Customizing Options of a Particular Type
;;  ----------------------------------------
;;
;;  Command `customize-apropos-options-of-type' is similar to the
;;  standard command `customize-apropos-options', but it also lets you
;;  specify the type of the options to find.
;;
;;  To use `customize-apropos-options-of-type', you specify a
;;  `defcustom' type and a regexp.  The command opens a Customize
;;  buffer for all options that are defined with the specified type
;;  and whose names match the specified regexp.
;;
;;  With a prefix argument, the matching options need not be defined
;;  with exactly the same `defcustom' type.  They need only have their
;;  current value be compatible with the type you specify.
;;
;;  Enhancements to Make Customize Play Better with Emacs
;;  -----------------------------------------------------
;;
;;  There are various ways to change preferences outside of Customize,
;;  and Customize unfortunately doesn't recognize these changes as
;;  preference settings - it considers them to be \"changed outside the
;;  customize buffer\", which really means that it just throws up its
;;  hands.
;;
;;  The main idea here is to let Customize know about changes made
;;  outside it, to make Customize think that they were made inside
;;  Customize.  In this way, there is no such outside/inside
;;  distinction (for user preferences), and it doesn't matter where or
;;  how a preference is changed.
;;
;;  When this is the case, you can use command `customize-unsaved' to
;;  check all preferences that have been changed from their standard
;;  or saved settings, and it will take all changes into account, no
;;  matter how or where the changes were made.
;;
;;  Because this is useful, `customize-unsaved' has been modified to
;;  be used as a hook in `kill-emacs-query-functions'.  That way,
;;  before you quit Emacs, you are notified of all preference changes
;;  you have made and given a chance to save them (individually or
;;  collectively).  This is analogous to Emacs asking you about files
;;  you've changed but not saved, before letting you exit. (If you
;;  also use another hook to confirm exit from Emacs, then `C-x C-c'
;;  becomes, in effect, a key binding for `customize-unsaved' - just
;;  say `n' to exiting Emacs.)
;;
;;  Updating Customize with External Changes
;;  ----------------------------------------
;;
;;  In order to keep Customize synched with changes made outside it,
;;  command `customize-update-all' can be used automatically during
;;  idle moments to tell Customize that all user options and faces
;;  that have been changed outside it are now set - just as if they
;;  were set in Customize.  You can turn this automatic updating on
;;  and off with command `customize-toggle-outside-change-updates'.
;;
;;  Read This If You Use Frame-Specific Faces
;;  -----------------------------------------
;;
;;  The automatic updating that you turn on (or off) with
;;  `customize-toggle-outside-change-updates' uses internal variable
;;  `custom-update-timer' to periodically run command
;;  `customize-update-all'.  That command in turn uses commands
;;  `customize-update-all-vars' to update variables and
;;  `customize-update-all-faces' to updated faces.  It thus updates
;;  Customize with respect to face changes as well as variable
;;  changes.
;;
;;  Unlike user options (variables), faces can be specific to
;;  individual frames.  The face updating code used here assumes that
;;  you do not use different versions of a face on different frames,
;;  that, for example, face `foo' has the same attributes on all
;;  frames.  If that is not the way you use faces and frames, then you
;;  might not want to automatically update Customize to recognize face
;;  changes made outside Customize.  In that case, change the value of
;;  `custom-update-timer' in your init file (~/.emacs) to use
;;  `customize-update-all-vars' instead of `customize-update-all':
;;
;;  (defvar custom-update-timer
;;    (run-with-idle-timer custom-check-for-changes-interval
;;                         t 'customize-update-all-vars) ; <======
;;    \"Timer used to automatically tell Customize of outside changes
;;  to preferences when idle.\")
;;
;;  The automatic face updating works like this: The current-frame
;;  definition of each face is compared with the face's definition
;;  according to Customize.  If these are different, then the
;;  Customize definition is updated to the current-frame definition.
;;  Since there is no way to know which frame will be current when
;;  updating takes place, if you 1) use automatic updating and 2) use
;;  different definitions of a given face on different frames, then
;;  you probably do not want to update faces automatically.
;;
;;  Dealing with Spurious Changes, 1: Save
;;  --------------------------------------
;;
;;  Even if you don't change any preferences yourself, when you quit
;;  Emacs the first time you are informed that there are lots of
;;  changed preferences, and you are given a chance to save those
;;  changes.  What are those changes? They represent all of the user
;;  preferences that Emacs and various Emacs libraries have changed
;;  behind Customize's back - even before you did anything.
;;
;;  You'll see user options like `baud-rate' that are set in Emacs C
;;  code without informing Customize to mark their settings as
;;  `standard' (= installed).  There shouldn't be any such apparent
;;  \"changes\", since this is part of standard Emacs, but that's the
;;  way it is, for now.  Customize is still fairly new, and lots of
;;  Emacs libraries still define and change user preferences without
;;  going through Customize and, in effect, telling it not to consider
;;  such preference changes as changes.
;;
;;  If you choose to save these preference changes, you will never
;;  again be bothered by being informed that they have changed (unless
;;  you change them).  So, that's one solution to this bother, which
;;  makes it a one-time only nuisance: just say \"save all\".
;;
;;  Dealing with Spurious Changes, 2: Ignore
;;  ----------------------------------------
;;
;;  Another solution is also possible.  Some user preferences, like
;;  `case-fold-search' and `debug-on-error' are really the kind of
;;  thing that you change often and temporarily - you don't really
;;  care about saving their changes, and you certainly don't want to
;;  be asked whether or not you want to save them each you quit Emacs.
;;
;;  To deal with that, a list of ignored preferences,
;;  `customize-customized-ignore', is defined here.  Its preferences
;;  (symbols) are not used by `customize-unsaved' at all (you can
;;  override that interactively with a prefix arg).  So, the other way
;;  to deal with the legacy Emacs preferences, besides just saving
;;  them in your custom file, is to add them to
;;  `customize-customized-ignore' so `customize-unsaved' will ignore
;;  them.
;;
;;  To make it easy for you to add preferences to this ignore list,
;;  `Ignore Unsaved Changes' menu items and buttons have been added.
;;  You can choose to ignore specific preferences or all preferences
;;  in a Customize buffer - in particular, all preferences in the
;;  Customize buffer from `customize-unsaved' (all changed
;;  preferences).
;;
;;  Dealing with Spurious Changes, 3: Consider Unchanged
;;  ----------------------------------------------------
;;
;;  There is also a third way to treat preference changes that you are
;;  not responsible for, as an alternative to saving them to your
;;  custom file or having Customize always ignore them: tell Customize
;;  to consider the current changes as unchanged.  This essentially
;;  treats them as having been saved, but without saving them.  You can
;;  do this using the `Consider Unchanged' menu items and buttons
;;  added here.
;;
;;  For instance, after starting Emacs, you can examine the current
;;  preference changes (using `customize-unsaved') from Emacs itself
;;  and loaded libraries, and choose `Consider Unchanged' to let
;;  Customize know that the current values are to be treated as if
;;  they were saved, but without actually saving them to your custom
;;  file.  That way, your custom file is not polluted with things that
;;  you are not really concerned with, yet you are not bothered by
;;  seeing such fictitious changes show up each time you check for
;;  changes.
;;
;;  However, unlike ignoring changes to certain preferences, and
;;  really saving current preference values, `Consider Unchanged' is
;;  not a persistent change.  You can use it at any time to \"reset\"
;;  the change counter for given preferences, so that the current
;;  change is considered the new base value (as if it were saved), and
;;  any further changes you make to them will show up as changes,
;;  using `customize-unsaved'.
;;
;;  Updating, Revisited
;;  -------------------
;;
;;  Finally, there is one more additional menu item and button
;;  provided here, `Set from External Changes', which just executes
;;  the appropriate `customize-update-all*' command (depending on the
;;  menu/button location).  It is useful if you do not choose to use
;;  automatic updating of preferences that are changed outside of
;;  Customize.
;;
;;  Conclusion & Future
;;  -------------------
;;
;;  The changes in Customize behavior provided by this library are
;;  important, because they can encourage library authors to explore
;;  other ways of changing preference values, and still let users save
;;  the changes using Customize.  For instance in my library
;;  `doremi-frm.el' I have defined several commands that let you
;;  directly manipulate frame and face properties (e.g. incremental
;;  color changes).
;;
;;  By making Customize aware of such \"outside\" changes, you can
;;  easily save them in Customize.  There are lots of preferences that
;;  would be amenable to such \"direct-manipulation\", which I think
;;  would be an improvement in ease of customization.
;;
;;  In sum, this library in effect gets rid of the useless \"changed
;;  outside Customize\" state.  User preferences have only the
;;  `standard', `saved', or `set' (= unsaved) state, regardless of how
;;  they are set.  Someday, Customize will be more integrated with the
;;  rest of Emacs, and \"changed outside Customize\" will make no more
;;  sense than \"changed outside of Emacs\".  Customize will then be
;;  just one possible way to access the space of user preferences, the
;;  same preference space that other parts of Emacs can access
;;  differently.  If we're writing on the same blackboard, you can see
;;  what I erase, and I can see what you write.
;;
;;  That's the goal.  This tries to be a step on the way.
;;
;;  How To Use
;;  ----------
;;
;;  To use this library, put this in your init file (.emacs):
;;
;;    (require cus-edit+)
;;
;;  To update Customize once, manually, so that it learns about stuff
;;  that was customized outside it, use any of these commands:
;;  `customize-update-all-faces', `customize-update-all-vars',
;;  `customize-update-all' (which is both faces and variables).
;;
;;  To do the same updating automatically, add this to your init file
;;  (automatic updating is off by default):
;;
;;    (customize-toggle-outside-change-updates 99)
;;
;;  To turn automatic updating on/off, use command
;;  `customize-toggle-outside-change-updates'.
;;
;;  To change the number of idle seconds before automatically updating
;;  Customize, use command `customize-set-auto-update-timer-period'.
;;
;;  To *not* have `customize-unsaved' check for unsaved preference
;;  changes when you quit Emacs, add this also:
;;
;;    (remove-hook 'kill-emacs-query-functions 'customize-unsaved)
;;
;;
;;
;;  Options (variables) defined here:
;;
;;    `customp-buffer-create-hook', `custom-buffer-verbose-help'
;;    (Emacs 20, 21 only), `customize-customized-ignore'.
;;
;;
;;  Commands defined here:
;;
;;    `Custom-consider-unchanged', `Custom-ignore-unsaved',
;;    `customize-apropos-options-of-type',
;;    `customize-consider-all-faces-unchanged',
;;    `customize-consider-all-unchanged',
;;    `customize-consider-all-vars-unchanged',
;;    `customize-other-window',
;;    `customize-set-auto-update-timer-period',
;;    `customize-toggle-outside-change-updates',
;;    `customize-update-all', `customize-update-all-faces',
;;    `customize-update-all-vars'.
;;
;;  Functions defined here:
;;
;;    `custom-consider-face-unchanged',
;;    `custom-consider-variable-unchanged',
;;    `custom-ignore-unsaved-preference', `custom-type',
;;    `custom-update-face', `custom-update-variable',
;;    `custom-value-satisfies-type-p', `custom-var-inherits-type-p',
;;    `custom-var-is-of-type-p', `custom-var-matches-type-p',
;;    `custom-var-val-satisfies-type-p'.
;;
;;  Internal variables defined here:
;;
;;    `custom-check-for-changes-interval',
;;    `custom-check-for-changes-when-idle-p', `custom-update-timer'.
;;
;;
;;  ***** NOTE: The following variables defined in `cus-edit.el' have
;;              been REDEFINED HERE:
;;
;;    `custom-commands', `custom-face-menu', `Custom-mode-menu',
;;    `custom-variable-menu'.
;;
;;
;;  ***** NOTE: The following functions defined in `cus-edit.el' have
;;              been REDEFINED HERE:
;;
;;    `custom-add-parent-links', `custom-buffer-create-internal',
;;    `customize-group-other-window', `customize-mode',
;;    `customize-unsaved'.
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (cursor-test . [(20131207 932) ((emacs (24))) "testing library for cursor position in emacs." single ";;; Commentary:
;;;
;;; see: https://github.com/ainame/cursor-test.el
;;;

"]) (cursor-chg . [(20131226 1824) nil "Change cursor dynamically, depending on the context." single ";;; Commentary:
;;
;;  This library provides three kinds of changes to the text cursor:
;;
;;  1. When a buffer is read-only or is in overwrite mode, the cursor
;;     type changes to `curchg-overwrite/read-only-cursor-type'.  This
;;     is controlled by command `change-cursor-mode' and user option
;;     `curchg-change-cursor-on-overwrite/read-only-flag'.
;;
;;  2. When an input method is in use, the cursor color changes to
;;     `curchg-input-method-cursor-color'.  This is controlled by
;;     command `change-cursor-mode' and user option
;;     `curchg-change-cursor-on-input-method-flag'.
;;
;;  3. When Emacs is idle, the cursor type changes to
;;     `curchg-idle-cursor-type'.  This is controlled by command
;;     `toggle-cursor-type-when-idle'.
;;
;;  To turn on all three types of cursor change by default, put the
;;  following in your Emacs init file (~/.emacs):
;;
;;    (require 'cursor-chg)  ; Load this library
;;    (change-cursor-mode 1) ; On for overwrite/read-only/input mode
;;    (toggle-cursor-type-when-idle 1) ; On when idle
;;
;;  Note: Library `oneonone.el' provides the same functionality as
;;  library `cursor-chg.el', and more.  If you use library
;;  `oneonone.el', then do NOT also use library `cursor-chg.el'.
;;
;;  Note for Emacs 20: There is a bug in Emacs 20 which can lead to a
;;  fatal error (Emacs crash) when using `query-replace' with
;;  idle-cursor change enabled.  If you use Emacs 20, then consider
;;  using `toggle-cursor-type-when-idle' to disable idle-cursor change
;;  while you use `query-replace'.
;;
;;  User options defined here:
;;
;;    `curchg-change-cursor-on-input-method-flag',
;;    `curchg-change-cursor-on-overwrite/read-only-flag',
;;    `curchg-default-cursor-color', `curchg-default-cursor-type',
;;    `curchg-idle-cursor-type', `curchg-input-method-cursor-color',
;;    `curchg-overwrite/read-only-cursor-type'.
;;
;;  Commands defined here:
;;
;;    `change-cursor-mode', `curchg-change-cursor-when-idle-interval',
;;    `curchg-set-cursor-type', `curchg-toggle-cursor-type-when-idle',
;;    `set-cursor-type', `toggle-cursor-type-when-idle'.
;;
;;  Internal variables defined here:
;;
;;    `curchg-change-cursor-when-idle-p', `curchg-idle-interval',
;;    `curchg-idle-timer', `curchg-last-cursor-type'.
;;
;;  Non-interactive functions defined here:
;;
;;    `curchg-change-cursor-on-input-method',
;;    `curchg-change-cursor-on-overwrite/read-only',
;;    `curchg-change-cursor-to-idle-type',
;;    `curchg-change-cursor-to-idle-type-off'.
;;
;;  Acknowledgements:
;;
;;  The cursor-changing on input method and read-only was inspired by
;;  Juri Linkov <juri@jurta.org>.  Joe Casadonte <joc@netaxs.com>
;;  wrote a similar hook (`joc-cursor-type-set-hook'), which he got
;;  from Steve Kemp...
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (cucumber-goto-step . [(20131209 2119) ((pcre2el (1 5))) "Jump to cucumber step definition" single ";;; Commentary:
;;
;; cucumber-goto-step.el is a simple helper package that navigates
;; from a step in a feature file to the step definition.  While this
;; functionality exists in cucumber.el is requires external tools.
;; This package allows the user to go directly to the step definition
;; without the use of any external tools.  It does this by finding the
;; project root then searching \"/features/**/*_steps.rb\" for
;; potentially matching candidates.  It relies on pcre2el to convert
;; perl style regular expressions to Emacs regular expressions.
;;
;; The easiest way to install cucumber-goto-step.el is to use a package
;; manager.  To install it manually simply add it to your load path
;; then require it.
;;
;;     (add-to-list 'load-path \"/path/to/ack-and-a-half\")
;;     (require 'ack-and-a-half)
;;
;; Once installed cucumber-goto-step can be invoked using:
;;
;;     M-x jump-to-cucumber-step
;;
;; There are a few variables you may wish to customize depending on
;; your environment.  To do this enter:
;;
;;     M-x customize-group cucumber-goto-step
;;
;; These variables include:
;; - cgs-root-markers: a list of files/directories that are found
;;   at the root of your project.
;; - cgs-step-search-path: a file global that cucumber-goto-step
;;   will search for step files.  This defaults to \"/features/**/*_steps.rb\".
;; - cgs-find-project-functions: a list of functions used to locate the
;;   project root.  A default function is provided however you may
;;   optionally override this is you have any special requirements.
;;

"]) (ctl-mode . [(20131229 2316) nil "Major mode for editing GrADS script files" single ";;; Commentary:
;;
;; Based on wpdl-mode-el, a major mode for editing WPDL files
;; by Scott Andrew Borton <scott@pp.htv.fi>,
;; which is an example used in a tutorial about Emacs
;; mode creation. The tutorial can be found here:
;; http://two-wugs.net/emacs/mode-tutorial.html

"]) (ctags-update . [(20131125 743) nil "(auto) update TAGS in parent directory using exuberant-ctags" single ";;; Commentary:

;; Just put ctags-update.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;;
;; And the following to your ~/.emacs startup file.
;;
;;(autoload 'turn-on-ctags-auto-update-mode \"ctags-update\" \"turn on `ctags-auto-update-mode'.\" t)
;;(add-hook 'c-mode-common-hook  'turn-on-ctags-auto-update-mode)
;; ...
;;(add-hook 'emacs-lisp-mode-hook  'turn-on-ctags-auto-update-mode)
;;
;; then when you save a file ,`ctags-auto-update-mode' will recursively searches each
;; parent directory for a file named 'TAGS'. if found ,it will use
;; `exuberant-ctags' update TAGS,
;; it would not be updated if last time calling `ctags-update' is not 5 minute age(default).
;; if no 'TAGS' found ,it will check `tags-table-list' and `tags-file-name'
;; if current buffer shares the same parent directory with `tags-file-name' or one element of
;; `tags-table-list' , it will auto create 'TAGS' file
;; eq:
;;    (setq tags-file-name \"/tmp/TAGS\")
;;  or
;;    (setq tags-table-list '(\"/tmp/TAGS\"))
;;
;; if you want to update (create) TAGS manually
;; you can
;;     (autoload 'ctags-update \"ctags-update\" \"update TAGS using ctags\" t)
;;     (global-set-key \"\\C-cE\" 'ctags-update)
;; with prefix `C-u' ,then you can generate a new TAGS file in your selected directory,
;; with prefix `C-uC-u' same to prefix `C-u',but save it to kill-ring instead of execute it.\"

;;
;; on windows ,you can custom `ctags-update-command' like this:
;; (when (equal system-type 'windows-nt)
;;   (setq ctags-update-command (expand-file-name  \"~/.emacs.d/bin/ctags.exe\")))

"]) (ctags . [(20110911 304) nil "Exuberant Ctags utilities for Emacs" single ";;; Commentary:

;; Configuration example:

;; (setq tags-revert-without-query t)
;; (global-set-key (kbd \"<f7>\") 'ctags-create-or-update-tags-table)

;; Then just press <f7> to update or create your TAGS file. That function look
;; for a file TAGS in the current and its parent directories, if a TAG file is
;; not found it ask you where create a new one.

;; Optionally you can use the function `ctags-search', a little wrapper for
;; `tags-search' that provides a default input like in `find-tag', to search
;; through all files listed in tags table.

;; Also, if you prefer, you can override the key binding M-. for `find-tag' to
;; use `ctags-search':

;; (global-set-key (kbd \"M-.\")  'ctags-search)

;;; Installation:

;; Add this to your Emacs configuration:

;; (add-to-list 'load-path \"/folder/containing/file\")
;; (require 'ctags)

;; Alternatively, you can install it using the Marmalade ELPA repository.

"]) (ctable . [(20131202 2114) nil "Table component for Emacs Lisp" single ";;; Commentary:

;; This program is a table component for Emacs Lisp.
;; Other programs can use this table component for the application UI.

;;; Installation:

;; Place this program in your load path and add following code.

;; (require 'ctable)

"]) (csv-nav . [(20130407 1820) nil "navigate and edit CSV files" single ";;; Commentary:

;; Use `csv-nav-mode' to edit CSV files such as contacts exported from
;; other applications.

"]) (cssh . [(20120823 1241) nil "clusterssh implementation for emacs" single nil]) (css-eldoc . [(20130902 135) nil "an eldoc-mode plugin for CSS source code" tar ";;; Commentary:
;;; To turn on css-eldoc call the function `css-eldoc-enable'
;;

"]) (csharp-mode . [(20130824 1200) nil "C# mode derived mode" single ";;; Commentary:
;;
;;    This is a major mode for editing C# code. It performs automatic
;;    indentation of C# syntax; font locking; and integration with compile.el;
;;    flymake.el; yasnippet.el; and imenu.el.
;;
;;    csharp-mode requires CC Mode 5.30 or later.  It works with
;;    cc-mode 5.31.3, which is current at this time.
;;
;; Features:
;;
;;   - font-lock and indent of C# syntax including:
;;       all c# keywords and major syntax
;;       attributes that decorate methods, classes, fields, properties
;;       enum types
;;       #if/#endif  #region/#endregion
;;       instance initializers
;;       anonymous functions and methods
;;       verbatim literal strings (those that begin with @)
;;       generics
;;
;;   - automagic code-doc generation when you type three slashes.
;;
;;   - intelligent insertion of matched pairs of curly braces.
;;
;;   - compile tweaks. Infers the compile command from special comments
;;     in the file header.  Also, sets the regex for next-error, so that
;;     compile.el can handle csc.exe output.
;;
;;   - flymake integration
;;       - select flymake command from code comments
;;       - infer flymake command otherwise (presence of makefile, etc)
;;       - Turn off query-on-exit-flag for the flymake process.
;;       - define advice to flymake-goto-line , to allow it to goto the
;;         appropriate column for the error on a given line. This works
;;         with `flymake-goto-next-error' etc.
;;
;;   - yasnippet integration
;;       - preloaded snippets
;;
;;   - imenu integration - generates an index of namespaces, classes,
;;     interfaces, methods, and properties for easy navigation within
;;     the buffer.
;;


;; Installation instructions
;; --------------------------------
;;
;; Put csharp-mode.el somewhere in your load path, optionally byte-compile
;; it, and add the following to your .emacs file:
;;
;;   (autoload 'csharp-mode \"csharp-mode\" \"Major mode for editing C# code.\" t)
;;   (setq auto-mode-alist
;;      (append '((\"\\\\.cs$\" . csharp-mode)) auto-mode-alist))
;;
;;
;; Optionally, define and register a mode-hook function. To do so, use
;; something like this in your .emacs file:
;;
;;   (defun my-csharp-mode-fn ()
;;      \"function that runs when csharp-mode is initialized for a buffer.\"
;;      (turn-on-auto-revert-mode)
;;      (setq indent-tabs-mode nil)
;;      (require 'flymake)
;;      (flymake-mode 1)
;;      (require 'yasnippet)
;;      (yas/minor-mode-on)
;;      (require 'rfringe)
;;      ...insert more code here...
;;      ...including any custom key bindings you might want ...
;;   )
;;   (add-hook  'csharp-mode-hook 'my-csharp-mode-fn t)
;;
;;
;;  General
;;  ----------------------------
;;
;;  Mostly C# mode will \"just work.\"  Use `describe-mode' to see the
;;  default keybindings and the highlights of the mode.
;;
;;
;;  Flymake Integration
;;  ----------------------------
;;
;;  You can use flymake with csharp mode to automatically check the
;;  syntax of your csharp code, and highlight errors.  To do so, add a
;;  comment line like this to each .cs file that you use flymake with:
;;
;;   //  flymake: c:\\.net3.5\\csc.exe /t:module /nologo /R:Foo.dll @@FILE@@
;;
;;  That lines specifies a command \"stub\".  Flymake appends the name of
;;  the file to compile, and then runs the command to check
;;  syntax. Flymake assumes that syntax errors will be noted in the
;;  output of the command in a form that fits one of the regexs in the
;;  `compilation-error-regexp-alist-alist'. Check the flymake module for
;;  more information on that.
;;
;;  Some rules for the command:
;;
;;    1. it must appear all on a single line.
;;
;;    2. csharp-mode generally looks for the marker line in the first N
;;       lines of the file, where N is set in
;;       `csharp-cmd-line-limit'.  See the documentation on that
;;       variable for more information.
;;
;;    3. the command SHOULD use @@FILE@@ in place of the name of the
;;       source file to be compiled, normally the file being edited.
;;       This is because normally flymake saves a copy of the buffer
;;       into a temporary file with a unique name, and then compiles
;;       that temporary file. The token @@FILE@@ is replaced by
;;       csharp-mode with the name of the temporary file created by
;;       flymake, before invoking the command.
;;
;;    4. The command should include /R options specifying external
;;       libraries that the code depends on.
;;
;;  If you have no external dependencies, then you need not specify any
;;  flymake command at all. csharp-mode will implicitly act as if you had
;;  specified the command:
;;
;;      // flymake: c:\\.net3.5\\csc.exe /t:module /nologo @@FILE@@
;;
;;
;;  If you use csc.exe as the syntax check tool (as almost everyone
;;  will), the /t:module is important. csharp-mode assumes that the
;;  syntax-check compile command will produce a file named
;;  NAME.netmodule, which is the default when using /t:module. (Remember
;;  than NAME is dynamically generated).  csharp-mode will remove the
;;  generated netmodule file after the syntax check is complete. If you
;;  don't specify /t:module, then csharp-mode won't know what file to
;;  delete.
;;
;;  csharp-mode also fiddles with some other flymake things.  In
;;  particular it: adds .cs to the flymake \"allowed filename masks\";
;;  adds parsing for csc error messages; and adds advice to the error
;;  parsing logic. This all should be pretty benign for all other
;;  flymake buffers.  But it might not be.
;;
;;  You can explicitly turn the flymake integration for C# off by
;;  setting `csharp-want-flymake-fixup' to nil.
;;
;;
;;  Compile Integration
;;  ----------------------------
;;
;;  csharp-mode binds the function `csharp-invoke-compile-interactively'
;;  to \"\\C-x\\C-e\" .  This function attempts to intellgently guess the
;;  format of the compile command to use for a buffer.  It looks in the
;;  comments at the head of the buffer for a line that begins with
;;  compile: .  If found, csharp-mode suggests the text that follows as
;;  the compilation command when running `compile' .  If such a line is
;;  not found, csharp-mode falls back to a msbuild or nmake command.
;;  See the documentation on `csharp-cmd-line-limit' for further
;;  information.
;;
;;  Also, csharp-mode installs an error regexp for csc.exe into
;;  `compilation-error-regexp-alist-alist', which allows `next-error'
;;  and `previous-error' (defined in compile.el) to navigate to the next
;;  and previous compile errors in the cs buffer, after you've run `compile'.
;;
;;
;;  YASnippet integration
;;  -----------------------------
;;
;;  csharp-mode defines some built-in snippets for
;;  convenience.  For example, if statements, for, foreach, and
;;  so on.  You can see them on the YASnippet menu that is displayed
;;  when a csharp-mode buffer is opened.  csharp-mode defines this
;;  snippets happens only if ya-snippet is available. (It is done in an
;;  `eval-after-load' clause.)  The builtin snippets will not overwrite
;;  snippets that use the same name, if they are defined in the normal
;;  way (in a compiled bundle) with ya-snippet.
;;
;;  You can explicitly turn off ya-snippet integration. See the var,
;;  `csharp-want-yasnippet-fixup'.
;;
;;
;;  imenu integration
;;  -----------------------------
;;
;;  This should just work. For those who don't know what imenu is, it
;;  allows navigation to different points within the file from an
;;  \"Index\" menu, in the window's menubar.  csharp-mode computes the
;;  menu containing the namespaces, classes, methods, and so on, in the
;;  buffer.  This happens at the time the file is loaded; for large
;;  files it takes a bit of time to complete the scan.  If you don't
;;  want this capability, set `csharp-want-imenu' to nil.
;;
;;


"]) (cryptol-mode . [(20131010 1354) nil "Cryptol major mode for Emacs" single ";;; Commentary:

;; This package provides a major mode for editing, compiling and
;; running Cryptol code.
;;
;; For more information about Cryptol, check out the homepage and
;; documentation: http://corp.galois.com/cryptol/
;;
;; For usage info, release notes and bugs, check the homepage.

"]) (crosshairs . [(20131226 1823) ((hl-line+ (0)) (col-highlight (0)) (vline (0))) "Highlight the current line and column." single ";;; Commentary:
;;
;;  This library highlights the current line and the current column.
;;  It combines the features of libraries `hl-line.el', `hl-line+.el',
;;  and `col-highlight.el', which let you highlight the line or column
;;  individually.  See those libraries for more information, in
;;  particular for user options that affect the behavior.
;;
;;  If you want the horizontal and vertical highlighting to look the
;;  same, then:
;;
;;  1. Set option `col-highlight-vline-face-flag' to non-nil.
;;  2. Customize faces `col-highlight' and `hl-line' to look the same.
;;
;;  Command `crosshairs-mode' toggles this highlighting on and off.
;;  You can do this twice in succession to flash the crosshairs to
;;  show you where the cursor is.  An alternative way to
;;  flash-highlight is to use command `flash-crosshairs' (once).
;;
;;  Command `crosshairs-highlight' shows crosshairs highlighting until
;;  your next action (next command, technically).  Command
;;  `crosshairs-unhighlight' turns off crosshairs highlighting due to
;;  `crosshairs-highlight'.
;;
;;  With no prefix arg, command `crosshairs' is
;;  `crosshairs-highlight'.  With a prefix arg, it is
;;  `crosshairs-mode'.
;;
;;  You can also have crosshairs highlighting come on automatically,
;;  when Emacs is idle.  Command `toggle-crosshairs-when-idle' toggles
;;  this mode.
;;
;;  You can use command `flash-crosshairs' to do what its name says
;;  when you switch buffers or windows.  Here is how one user did it
;;  (rejoin the split URL):
;;  http://unix.stackexchange.com/questions/83167/emacs-finding-the-
;;  cursor-in-multiple-windows
;;
;;
;;  See also:
;;
;;  * Library `hl-line+.el', which highlights the current line.
;;
;;  * Library `col-highlight.el', which highlights the current column.
;;
;;  * Library `cursor-chg.el' or library `oneonone.el', to change the
;;    cursor type when Emacs is idle.
;;
;;
;;  User options defined here:
;;
;;    `crosshairs-mode'.
;;
;;  Commands defined here:
;;
;;    `crosshairs', `crosshairs-flash', `crosshairs-highlight',
;;    `crosshairs-mode', `crosshairs-toggle-when-idle',
;;    `crosshairs-unhighlight', `flash-crosshairs',
;;    `toggle-crosshairs-when-idle'.
;;
;;  Internal variables defined here:
;;
;;    `crosshairs-flash-col-timer', `crosshairs-flash-line-timer',
;;    `crosshairs-highlight-when-idle-p'.
;;
;;  Suggested alternative key bindings:
;;
;;      (global-set-key [(control ?+)] 'crosshairs)
;;   or (global-set-key [(control ?+)] 'crosshairs-mode)
;;   or (global-set-key [(control ?+)] 'crosshairs-flash)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (crontab-mode . [(20090510 1355) nil "Mode for editing crontab files" single ";;; Commentary:
;; * I want to keep my crontabs under rcs to keep a history of
;;   the file.  Editing them with 'crontab -e' is rather
;;   cumbersome.  My method is to keep the crontab as a file,
;;   under rcs, and check in the changes with 'C-c C-c' after
;;   editing.
;; 
;; * The remote systems are expected to share a filesystem.
;;   If they dont, modify crontab-shell or crontab-apply to
;;   suit your needs.
;;
;; * You may want to add one of these to your startup:
;;   (add-to-list 'auto-mode-alist '(\"\\\\.cron\\\\(tab\\\\)?\\\\'\" . crontab-mode))
;;   (add-to-list 'auto-mode-alist '(\"cron\\\\(tab\\\\)?\\\\.\"    . crontab-mode))

"]) (creole-mode . [(20130721 1750) nil "a markup mode for creole" single ";;; Commentary:

;; Assist in the creation of WikiCreole files.
;;
;; Does auto-filling properly, has some fontification for WikiCreole
;; elements.
;;
;; Should allow urls to be opened, but that's a bug right now.


"]) (creole . [(20130802 122) ((noflet (0 0 3)) (kv (0 0 17))) "A parser for the Creole Wiki language" single ";;; Commentary:

;; This is a WikiCreole wiki parser. WikiCreole is something like the
;; Wiki language used by OddMuse, which is the EmacsWiki wiki
;; language.

;; This parser now includes extra support to help deal with OddMuse
;; files.

;; This code was originally written to mark the death of John McCarthy
;; - http://news.ycombinator.com/item?id=3151988

;; WikiCreole is an emerging standard documented at:
;; http://www.wikicreole.org/wiki/Creole1.0

"]) (crappy-jsp-mode . [(20121117 956) nil "A pretty crappy major-mode for jsp." single ";;; Commentary:

;; An exceedingly basic jsp-mode, inheriting from html-mode.
;;
;; This crappy mode for jsp makes sure indentation sorta works.
;;
;; ## Indentation
;;
;; It gives you proper indentation when you need to comment out
;; whitespace with jsp-comments:
;;
;;     <div class=\"no-whitespace\"><%--
;;       --%><div class=\"please\"><%--
;;       --%></div><%--
;;     --%></div><%--
;;
;; or maybe not even properly, just nicer than html-mode.
;;
;; It also indents JavaScript inside `<script>`-tags.
;;
;; ## Highlighting
;;
;; In addition to that it highlights these `${}` in a horrible yellow
;; color.

"]) (crab . [(20130609 958) ((websocket (1 0)) (json (1 2))) "WebSocket server to remotely control a browser" single nil]) (cperl-mode . [(20131022 1349) nil "Perl code editing commands for Emacs" single ";;; Commentary:

;; This version of the file contains support for the syntax added by
;; the MooseX::Declare CPAN module, as well as Perl 5.10 keyword
;; support.

;; The latest version is available from
;; http://github.com/jrockway/cperl-mode
;;
;; (perhaps in the moosex-declare branch)

;; You can either fine-tune the bells and whistles of this mode or
;; bulk enable them by putting

;; (setq cperl-hairy t)

;; in your .emacs file.  (Emacs rulers do not consider it politically
;; correct to make whistles enabled by default.)

;; DO NOT FORGET to read micro-docs (available from `Perl' menu)   <<<<<<
;; or as help on variables `cperl-tips', `cperl-problems',         <<<<<<
;; `cperl-praise', `cperl-speed'.				   <<<<<<

;; The mode information (on C-h m) provides some customization help.
;; If you use font-lock feature of this mode, it is advisable to use
;; either lazy-lock-mode or fast-lock-mode.  I prefer lazy-lock.

;; Faces used now: three faces for first-class and second-class keywords
;; and control flow words, one for each: comments, string, labels,
;; functions definitions and packages, arrays, hashes, and variable
;; definitions.  If you do not see all these faces, your font-lock does
;; not define them, so you need to define them manually.

;; This mode supports font-lock, imenu and mode-compile.  In the
;; hairy version font-lock is on, but you should activate imenu
;; yourself (note that mode-compile is not standard yet).  Well, you
;; can use imenu from keyboard anyway (M-x imenu), but it is better
;; to bind it like that:

;; (define-key global-map [M-S-down-mouse-3] 'imenu)

;;; Font lock bugs as of v4.32:

;; The following kinds of Perl code erroneously start strings:
;; \\$`  \\$'  \\$\"
;; $opt::s  $opt_s  $opt{s}  (s => ...)  /\\s+.../
;; likewise with m, tr, y, q, qX instead of s

"]) (control-mode . [(20131010 2052) nil "A \"control\" mode, similar to vim's \"normal\" mode" single ";;; Commentary:

;; Control mode is a minor mode for Emacs that provides a
;; \"control\" mode, similar in purpose to vim's \"normal\" mode. Unlike
;; the various vim emulation modes, the key bindings in Control mode
;; are derived from the key bindings already setup, usually by making
;; the control key unnecessary, e.g. \"Ctrl-f\" becomes \"f\". This
;; provides the power of a mode dedicated to controlling the editor
;; without needing to learn or maintain new key bindings. See
;; https://github.com/stephendavidmarsh/control-mode for complete
;; documentation.

"]) (connection . [(20131005 526) nil "TCP-based client connection" single ";;; Commentary:

;; connection allows to handle TCP-based connections in client mode
;; where text-based information are exchanged. There is special
;; support for handling CR LF (and the usual CR LF . CR LF
;; terminater).

"]) (conkeror-minor-mode . [(20131218 334) nil "Mode for editing conkeror javascript files." single ";;; Commentary:
;;
;; **Mode for editing conkeror javascript files.**
;; -----------------------------------------------
;; 
;; Currently, this minor-mode defines:
;; 
;; 1. A function for sending current javascript statement to be
;; evaluated by conkeror. This function is
;; `eval-in-conkeror' bound to **C-c C-c**.
;; 2. Syntax coloring.
;; 3. Indentation according to
;; [Conkeror Guidelines](http://conkeror.org/DevelopmentGuidelines).
;; 4. Warning colors when anything in your code is not compliant with
;; [Conkeror Guidelines](http://conkeror.org/DevelopmentGuidelines). If
;; you find this one excessive, you can set
;; `conkeror-warn-about-guidelines' to `nil'.
;; 
;; Installation:
;; =============
;; 
;; If you install from Melpa just skip to the activation instructions below.
;; 
;; If you install manually, make sure it's loaded
;; 
;;     (add-to-list 'load-path \"/PATH/TO/CONKEROR-MINOR-MODE.EL/\")
;;     (autoload 'conkeror-minor-mode \"conkeror-minor-mode\")
;;     
;; then follow activation instructions below.
;; 
;; Activation
;; ==========
;; 
;; It is up to you to define when `conkeror-minor-mode' should be
;; activated. If you want it on every javascript file, just do
;; 
;;     (add-hook 'js-mode-hook 'conkeror-minor-mode)
;; 
;; If you want it only on some files, you can have it activate only on
;; your `.conkerorrc' file:
;; 
;;     (add-hook 'js-mode-hook (lambda ()
;;                               (when (string= \".conkerorrc\" (buffer-name))
;;                                 (conkeror-minor-mode 1))))
;; 
;; or, alternatively, only on files with \"conkeror\" somewhere in the path:
;; 
;;     (add-hook 'js-mode-hook (lambda ()
;;                               (when (string-match \"conkeror\" (buffer-file-name))
;;                                 (conkeror-minor-mode 1))))

"]) (confluence . [(20130814 535) ((xml-rpc (1 6 4))) "Emacs mode for interacting with confluence wikis" tar ";;; Commentary:

;;
;; DOWNLOADING
;;
;; This module is available at Google Code:
;;
;;   http://code.google.com/p/confluence-el/
;;
;; INSTALLATION 
;;
;; You must set confluence-url in your .emacs file before using the functions
;; in this module.  It's best to place confluence.el and confluence-edit.el
;; and xml-rpc.el on your load path; often ~/.emacs.d or ~/elisp.
;;
;; Some examples:
;;
;;   ;; loading xml-rpc.el may not be necessary, it depends on your
;;   ;; installed version of Emacs, it was necessary on 22.1.1.
;;   ;; Both xml-rpc.el and confluence.el should be on your load-path.
;;
;;   (require 'confluence)
;;   (setq confluence-url \"http://intranet/confluence/rpc/xmlrpc\")
;;
;; There are various additional customzation options.  These can be explored
;; by executing M-x customize-group and then entering the group \"confluence\"
;; (or by browsing the file below).
;;
;; USING CONFLUENCE MODE
;;
;; To open a page, M-x confluence-get-page and enter the path to the
;; page, for example, to open a page in your home space: ~username/Tasks
;;
;; It is often convienient to bind this to a global key \\C-xwf in your .emacs file:
;;   
;;    (global-set-key \"\\C-xwf\" 'confluence-get-page)
;;
;; Once you have opened a page, made changes, simply saving the page
;; (\"\\C-x\\C-s\") will push the changes back to the wiki.
;;
;; To view the changes in your page versus what is in the wiki, type
;; \\C-xw=, or run M-x confluence-ediff-current-page.
;;
;; Also, if you want keybindings for confluence-mode, you can put the
;; following in your .emacs file:
;;
;; (add-hook 'confluence-edit-mode-hook
;;   (local-set-key \"\\C-xw\" confluence-prefix-map)
;;   (local-set-key \"\\M-j\" 'confluence-newline-and-indent)
;;   (local-set-key \"\\M-;\" 'confluence-list-indent-dwim))
;;
;; CONFLUENCE 4.0+
;;
;; In confluence version 4.0, Atlassian decided to change the wiki format.
;; They did away with the \"wiki\" format and changed the internal document
;; format to xml.  This makes editing confluence pages via emacs much less
;; enjoyable.  However, as of version 1.6 of this library, it is possible.
;; The somewhat simplistic confluence-xml-mode (simplistic compared to
;; confluence-mode) is an extension of nxml-mode.  It adds some minor
;; font-lock support, but otherwise leaves you with standard xml editing
;; support.  Confluence still has built in support for translating wiki format
;; pages to xml format pages, however, the reverse translation is more
;; problematic.
;;
;; Leveraging the excellent work of Graham Hannington
;; (http://www.amnet.net.au/~ghannington/confluence/readme.html), this package
;; provides a \"basic\" converter from xml to wiki format, however it can be
;; \"lossy\" depending on what advanced features a page contains.  A confluence
;; xml page can be converted to the wiki format using M-x
;; confluence-toggle-page-content-type.  This page can be saved as wiki format
;; (allowing confluence to do the reverse conversion on save) or can be
;; converted back to xml format (using the same command) and then saved
;; (allowing you to check the final content).  Note that the conversion from
;; xml to wiki format requires the external \"xsltproc\" program, which is
;; available on most unices and cygwin.
;;
;; For the truly brave, you can set the custom variable
;; confluence-xml-convert-to-wiki-on-load to t in order to automatically
;; convert xml content to wiki content on page load.
;;
;; LONGLINES
;;
;;   http://www.emacswiki.org/emacs-en/LongLines
;;
;; Confluence uses a wiki-markup that treats linebreask as <p> HTML
;; tags.  Since this is the case, it is very common for paragraphs in
;; the Confluence markup to wrap around your buffer multiple times.
;; The LongLines mode allows those lines to be viewed within Emacs
;; with 'soft' linebreaks - which are inserted automatically, or via
;; M-q.  This makes it much more pleasant to work with large
;; paragraphs of text in the Confluence markup without introducing
;; unwanted paragraphs.
;;
;; See below for more advice on using LongLines and confluence-mode.
;;
;;
;; EXAMPLE .emacs CONFIGURATION
;;
;; (require 'confluence)
;;
;; ;; note, all customization must be in *one* custom-set-variables block
;; (custom-set-variables
;;  ;; ... other custimization
;;
;;  ;; confluence customization
;;  '(confluence-url \"http://intranet/confluence/rpc/xmlrpc\")
;;  '(confluence-default-space-alist (list (cons confluence-url \"your-default-space-name\"))))
;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; confluence editing support (with longlines mode)
;;
;; (autoload 'confluence-get-page \"confluence\" nil t)
;;
;; (eval-after-load \"confluence\"
;;   '(progn
;;      (require 'longlines)
;;      (progn
;;        (add-hook 'confluence-mode-hook 'longlines-mode)
;;        (add-hook 'confluence-before-save-hook 'longlines-before-revert-hook)
;;        (add-hook 'confluence-before-revert-hook 'longlines-before-revert-hook)
;;        (add-hook 'confluence-mode-hook (lambda () (local-set-key \"\\C-j\" 'confluence-newline-and-indent))))))
;;
;; ;; LongLines mode: http://www.emacswiki.org/emacs-en/LongLines
;; (autoload 'longlines-mode \"longlines\" \"LongLines Mode.\" t)
;;
;; (eval-after-load \"longlines\"
;;   '(progn
;;      (defvar longlines-mode-was-active nil)
;;      (make-variable-buffer-local 'longlines-mode-was-active)
;;
;;      (defun longlines-suspend ()
;;        (if longlines-mode
;;            (progn
;;              (setq longlines-mode-was-active t)
;;              (longlines-mode 0))))
;;
;;      (defun longlines-restore ()
;;        (if longlines-mode-was-active
;;            (progn
;;              (setq longlines-mode-was-active nil)
;;              (longlines-mode 1))))
;;
;;      ;; longlines doesn't play well with ediff, so suspend it during diffs
;;      (defadvice ediff-make-temp-file (before make-temp-file-suspend-ll
;;                                              activate compile preactivate)
;;        \"Suspend longlines when running ediff.\"
;;        (with-current-buffer (ad-get-arg 0)
;;          (longlines-suspend)))
;;
;;     
;;      (add-hook 'ediff-cleanup-hook 
;;                (lambda ()
;;                   (dolist (tmp-buf (list ediff-buffer-A
;;                                          ediff-buffer-B
;;                                          ediff-buffer-C))
;;                     (if (buffer-live-p tmp-buf)
;;                         (with-current-buffer tmp-buf
;;                           (longlines-restore))))))))
;;
;; 

"]) (concurrent . [(20130914 536) ((deferred (0 3 1))) "Concurrent utility functions for emacs lisp" single ";;; Commentary:

;; 'concurrent.el' is a higher level library for concurrent tasks
;; based on 'deferred.el'. This library has following features:
;; 
;; - Generator
;; - Green thread
;; - Semaphore
;; - Dataflow
;; - Signal/Channel

(require 'cl)

(require 'deferred)

(defvar cc:version nil \"version number\")
(setq cc:version \"0.3\")

"]) (company-tern . [(20131230 2226) ((company (0 6 12)) (tern (0 0 1))) "Tern backend for company-mode" single ";;; Commentary:

"]) (company-jedi . [(20131224 405) ((company (0 6 12))) "Jedi backend for company-mode" tar ";;; Commentary:

"]) (company-inf-ruby . [(20130630 1130) ((company (0 6 10)) (inf-ruby (2 2 7))) "company-mode completion back-end for inf-ruby" single ";;; Commentary:
;;
;; Uses inf-ruby's built-in completion mechanism.
;;

"]) (company-go . [(20140102 1925) ((company (0 6 12))) "company-mode backend for Go (using gocode)" single nil]) (company . [(20140114 1945) nil "Modular in-buffer completion framework" tar ";;; Commentary:
;;
;; Company is a modular completion mechanism.  Modules for retrieving completion
;; candidates are called back-ends, modules for displaying them are front-ends.
;;
;; Company comes with many back-ends, e.g. `company-elisp'.  These are
;; distributed in separate files and can be used individually.
;;
;; Place company.el and the back-ends you want to use in a directory and add the
;; following to your .emacs:
;; (add-to-list 'load-path \"/path/to/company\")
;; (autoload 'company-mode \"company\" nil t)
;;
;; Enable company-mode with M-x company-mode.  For further information look at
;; the documentation for `company-mode' (C-h f company-mode RET)
;;
;; If you want to start a specific back-end, call it interactively or use
;; `company-begin-backend'.  For example:
;; M-x company-abbrev will prompt for and insert an abbrev.
;;
;; To write your own back-end, look at the documentation for `company-backends'.
;; Here is a simple example completing \"foo\":
;;
;; (defun company-my-backend (command &optional arg &rest ignored)
;;   (case command
;;     (prefix (when (looking-back \"foo\\\\>\")
;;               (match-string 0)))
;;     (candidates (list \"foobar\" \"foobaz\" \"foobarbaz\"))
;;     (meta (format \"This value is named %s\" arg))))
;;
;; Sometimes it is a good idea to mix several back-ends together, for example to
;; enrich gtags with dabbrev-code results (to emulate local variables).
;; To do this, add a list with both back-ends as an element in company-backends.
;;
;; Known Issues:
;; When point is at the very end of the buffer, the pseudo-tooltip appears very
;; wrong, unless company is allowed to temporarily insert a fake newline.
;; This behavior is enabled by `company-end-of-buffer-workaround'.
;;
"]) (commander . [(20131229 244) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single nil]) (command-log-mode . [(20120329 629) nil "log keyboard commands to buffer" single ";;; Commentary:

;; This add-on can be used to demo Emacs to an audience.  When
;; activated, keystrokes get logged into a designated buffer, along
;; with the command bound to them.

;; To enable, use e.g.:
;;
;; (require 'command-log-mode)
;; (add-hook 'LaTeX-mode-hook 'command-log-mode)
;;
;; To see the log buffer, call M-x clm/open-command-log-buffer.

"]) (column-marker . [(20121128 843) nil "Highlight certain character columns" single ";;; Commentary: 
;; 
;; Highlights the background at a given character column.
;; 
;; Commands `column-marker-1', `column-marker-2', and
;; `column-marker-3' each highlight a given column (using different
;; background colors, by default).
;;
;; - With no prefix argument, each highlights the current column
;;   (where the cursor is).
;;
;; - With a non-negative numeric prefix argument, each highlights that
;;   column.
;;
;; - With plain `C-u' (no number), each turns off its highlighting.
;;
;; - With `C-u C-u', each turns off all column highlighting.
;;
;; If two commands highlight the same column, the last-issued
;; highlighting command shadows the other - only the last-issued
;; highlighting is seen.  If that \"topmost\" highlighting is then
;; turned off, the other highlighting for that column then shows
;; through.
;;
;; Examples:
;;
;; M-x column-marker-1 highlights the column where the cursor is, in
;; face `column-marker-1'.
;;
;; C-u 70 M-x column-marker-2 highlights column 70 in face
;; `column-marker-2'.
;;
;; C-u 70 M-x column-marker-3 highlights column 70 in face
;; `column-marker-3'.  The face `column-marker-2' highlighting no
;; longer shows.
;;
;; C-u M-x column-marker-3 turns off highlighting for column-marker-3,
;; so face `column-marker-2' highlighting shows again for column 70.
;;
;; C-u C-u M-x column-marker-1 (or -2 or -3) erases all column
;; highlighting.
;;
;; These commands use `font-lock-fontify-buffer', so syntax
;; highlighting (`font-lock-mode') must be turned on.  There might be
;; a performance impact during refontification.
;;
;;
;; Installation: Place this file on your load path, and put this in
;; your init file (`.emacs'):
;;
;; (require 'column-marker)
;;
;; Other init file suggestions (examples):
;;
;; ;; Highlight column 80 in foo mode.
;; (add-hook 'foo-mode-hook (lambda () (interactive) (column-marker-1 80)))
;;
;; ;; Use `C-c m' interactively to highlight with face `column-marker-1'.
;; (global-set-key [?\\C-c ?m] 'column-marker-1)
;;
;;
;; Please report any bugs!
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
"]) (column-enforce-mode . [(20131209 956) nil "Highlight text that extends beyond a  column" single ";;; Commentary:
;;
;;  Highlight text that extends beyond a certain column (80 column rule)
;;
;;  By default, text after 80 columns will be highlighted in red
;;
;;  To customize behavior, see `column-enforce-column' and `column-enforce-face'
;;
;;  To enable: M-x column-enforce-mode
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (colorsarenice-theme . [(20131128 1106) ((emacs (24))) "A color theme." tar nil]) (color-theme-solarized . [(20130307 1350) ((color-theme (6 5 5))) "Solarized themes for Emacs" tar nil]) (color-theme-sanityinc-tomorrow . [(20131204 1113) nil "A version of Chris Kempson's various Tomorrow themes" tar nil]) (color-theme-sanityinc-solarized . [(20131204 1112) nil "A version of Ethan Schoonover's Solarized themes" tar nil]) (color-theme-buffer-local . [(20120702 1336) nil "Install color-themes by buffer." single nil]) (color-theme-approximate . [(20130328 1933) nil "Makes Emacs theme works on terminal transparently" single ";;; Commentary:
;;
;; This package advises the `load-theme' function and convert non terminal colors
;; to their closest approximation. Inspired by VIM's CSApprox plugin
;; http://www.vim.org/scripts/script.php?script_id=2390
;;
;;; Installation:
;; Add the to your .emacs or similar:
;;
;; (autoload 'color-theme-approximate-on \"color-theme-approximate\")
;; (color-theme-approximate-on)
;;
;;; Changelog
;;
;; v0.2, Mar 29 2013
;; - Fix error that degrades colors on graphical frame running the same Emacs server
;; - Fix error that `ca-defined-rgb-map' is wrong when start Emacs with graphical frame
;;
;; v0.1, Jan 14 2013
;; - Initial version
;;

(require 'color)

(defvar ca-defined-rgb-map nil
  \"Map of defined colors and it's RGB value. To speed things up.\")

(defvar ca-closest-map
  (make-hash-table :test 'equal :size 256)
  \"Approximation cache.\")

(defun ca-make-defined-rgb-map ()
  (let ((rgb-map (make-hash-table :test 'equal :size 256)))
    (dolist (name (defined-colors) rgb-map)
      (puthash name (color-name-to-rgb name) rgb-map))))

(defun ca-color-to-rgb (color)
  \"Convert color to RGB without implied approximation.
Fallback to `color-name-to-rgb' for named colors.\"
  (if (not (string-match \"#[a-fA-F0-9]\\\\{6\\\\}\" color))
      (color-name-to-rgb color)
    (mapcar (lambda (component)
              (/ (string-to-number component 16) 255.0))
            (list (substring color 1 3)
                  (substring color 3 5)
                  (substring color 5 7)))))

(defun ca-distance (red green blue)
  (sqrt (+ (* red red) (* green green) (* blue blue))))

(defun ca-rgb-diff (rgb1 rgb2)
  \"Distance in RGB colorspace.\"
  (ca-distance
   (- (nth 0 rgb1) (nth 0 rgb2))
   (- (nth 1 rgb1) (nth 1 rgb2))
   (- (nth 2 rgb1) (nth 2 rgb2))))

(defun ca-rgb-diff-real (rgb1 rgb2)
  \"Like `ca-rgb-diff' but scale the components according to eye sensitivity.\"
  (ca-distance
   (* 0.3 (- (nth 0 rgb1) (nth 0 rgb2)))
   (* 0.59 (- (nth 1 rgb1) (nth 1 rgb2)))
   (* 0.11 (- (nth 2 rgb1) (nth 2 rgb2)))))

(defvar ca-approximator #'ca-rgb-diff-real
  \"Function used to calculate the different between colors.
The approximator is called with two lists of RGB values, for
the pre-defined color and the current processed respectly.\")

(defun ca--approximate (color)
  \"Find the closest defined color. Use our custom `ca-color-to-rgb'
because `color-name-to-rgb' is already return the wrong approximation.\"
  (let ((diff nil)
        (min nil)
        (min-diff 3)
        (rgb (ca-color-to-rgb color)))
    (dolist (defined (defined-colors) min)
      (setq diff (funcall ca-approximator rgb (gethash defined ca-defined-rgb-map)))
      (when (< diff min-diff)
        (setq min-diff diff
              min defined)))))

(defun ca-approximate (color)
  \"See `ca--approximate'.\"
  (or (gethash color ca-closest-map)
      (puthash color (ca--approximate color) ca-closest-map)))

(defun ca-process-face (face)
  (let ((background (face-background face))
        (foreground (face-foreground face))
        (frame (selected-frame)))
    (when background
      (set-face-attribute face frame :background (ca-approximate background)))
    (when foreground
      (set-face-attribute face frame :foreground (ca-approximate foreground)))))

(defadvice load-theme (after ca-apply-approximation)
  (unless (display-graphic-p (selected-frame))
    (setq ca-defined-rgb-map (ca-make-defined-rgb-map))
    (mapc #'ca-process-face (face-list))))

;;;###autoload
(defun color-theme-approximate-on ()
  (interactive)
  (ad-enable-advice 'load-theme 'after 'ca-apply-approximation)
  (ad-activate 'load-theme))

;;;###autoload
(defun color-theme-approximate-off ()
  (interactive)
  (ad-disable-advice 'load-theme 'after 'ca-apply-approximation)
  (ad-activate 'load-theme))

(provide 'color-theme-approximate)

;;; color-theme-approximate.el ends here
"]) (color-theme . [(20080305 34) nil "install color themes" tar ";;; Commentary:

;; Please read README and BUGS files for any relevant help.
;; Contributors (not themers) should also read HACKING file.

;;; Thanks

;; Deepak Goel  <deego@glue.umd.edu>
;; S. Pokrovsky <pok@nbsp.nsk.su> for ideas and discussion.
;; Gordon Messmer <gordon@dragonsdawn.net> for ideas and discussion.
;; Sriram Karra <karra@cs.utah.edu> for the color-theme-submit stuff.
;; Olgierd `Kingsajz' Ziolko <kingsajz@rpg.pl> for the spec-filter idea.
;; Brian Palmer for color-theme-library ideas and code
;; All the users that contributed their color themes.



"]) (color-moccur . [(20120811 527) nil "multi-buffer occur (grep) mode" single ";;; Commentary:
;;
;; If this program doesn't run, I might change the program for the
;; worse.  So please send mail to akihisa@mail.ne.jp .
;; This elisp is the extention of moccur.el.
;; Thanks to the authors for writing moccur.el
;; With color-moccur, you can search a regexp in all buffers. And you
;; can search files like grep(-find) without grep (and find) command.

;; $Id: color-moccur.el,v 2.71 2010-05-06 13:40:54 Akihisa Exp $

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or (at
;; your option) any later version.

;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;;; for hi-lock
;; Hi-lock: ((\"^;;; .*\" (0 (quote hi-black-hb) t)))
;; Hi-lock: ((\"^;;;; .*\" (0 (quote hi-black-b) t)))
;; Hi-lock: ((\"make-variable-buffer-\\\\(local\\\\)\" (0 font-lock-keyword-face)(1 'italic append)))
;; Hi-lock: end

"]) (col-highlight . [(20131226 1817) ((vline (0))) "Highlight the current column." single ";;; Commentary:
;;
;;  This library highlights the current column.  When you move the
;;  cursor, the highlighting follows (tracks the cursor), as long as
;;  the highlighting stays on.
;;
;;  Command `column-highlight-mode' toggles this highlighting on and
;;  off.
;;
;;  If you use `column-highlight-mode' twice in succession (I bind it
;;  to `C-+'), you can flash the highlighting to show you the current
;;  column temporarily.  An alternative way to flash-highlight is to
;;  use command `flash-column-highlight' (once).  It shows the
;;  highlighting for just a second or two (see option
;;  `col-highlight-period').
;;
;;  You can also have current-column highlighting come on
;;  automatically, when Emacs is idle.  Command
;;  `toggle-highlight-column-when-idle' toggles this mode.  Command
;;  `col-highlight-set-interval' changes the number of idle seconds to
;;  wait before highlighting.
;;
;;  You can use option `col-highlight-overlay-priority' to make the
;;  vline (i.e., column) highlighting appear on top of other overlay
;;  highlighting that might exist.
;;
;;  You can use option `col-highlight-show-only' to restrict
;;  current-column highlighting to a section of text of a particular
;;  kind: paragaph, sentence, page, defun, etc.
;;
;;
;;  To use this file, you must also have library `vline.el'.
;;  Put this in your Emacs init file (~/.emacs):
;;
;;    (require 'col-highlight) ; Load this file (and `vline')
;;
;;  If you want to turn on continual current-column highlighting by
;;  default, then add this to your init file:
;;
;;    (column-highlight-mode 1)
;;
;;  If you want to turn on automatic idle highlighting of the current
;;  column, then add this to your init file:
;;
;;    (toggle-highlight-column-when-idle 1)
;;
;;  If you want to use a different wait interval, before idle
;;  highlighting begins, then set it in your init file using
;;  `col-highlight-set-interval':
;;
;;    (col-highlight-set-interval 6) ; Wait 6 idle secs.
;;
;;  Note that `column-highlight-mode' is intentionally a global minor
;;  mode.  If you want a local minor mode, so that highlighting
;;  affects only a particular buffer, you can use `vline-mode' (in
;;  `vline.el').
;;
;;
;;  See also:
;;
;;  * Library `hl-line+.el', which offers the same functionality, but
;;    for the current line instead of the current column.
;;
;;  * Library `crosshairs.el', which combines the features of
;;    `col-highlight.el' and `hl-line+.el', providing a crosshair
;;    highlighting effect.  It requires `col-highlight.el' and
;;    `hl-line+.el'.
;;
;;  * Library `cursor-chg.el' or library `oneonone.el', to change the
;;    cursor type when Emacs is idle.
;;
;;  User options defined here:
;;
;;    `col-highlight-period', `column-highlight-mode',
;;    `col-highlight-overlay-priority', `col-highlight-show-only',
;;    `col-highlight-vline-face-flag'.
;;
;;  Faces defined here:
;;
;;    `col-highlight'.
;;
;;  Commands defined here:
;;
;;    `col-highlight-flash', `col-highlight-set-interval',
;;    `col-highlight-toggle-when-idle', `column-highlight-mode',
;;    `flash-column-highlight', `toggle-highlight-column-when-idle'.
;;
;;  Non-interactive functions defined here:
;;
;;    `col-highlight-highlight', `col-highlight-unhighlight'.
;;
;;  Internal variables defined here:
;;
;;    `col-highlight-face', `col-highlight-idle-interval',
;;    `col-highlight-idle-timer', `col-highlight-when-idle-p'.
;;
;;
;;  ***** NOTE: The following function defined in `vline.el' has
;;              been REDEFINED HERE:
;;
;;    `vline-show' - Respect options `col-highlight-overlay-priority'
;;                   and `col-highlight-show-only'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (coffee-mode . [(20140107 2338) ((emacs (24 1))) "Major mode to edit CoffeeScript files in Emacs" single nil]) (coffee-fof . [(20131012 530) ((coffee-mode (0 4 1))) "A coffee-mode configuration for `ff-find-other-file'." single ";;; Commentary:
;;
;; Introduction:
;;
;; A coffee-mode configuration for `ff-find-other-file'.
;;
;; * You can find the CoffeeScript or JavaScript file corresponding to
;;   this file.
;; * You can find the CoffeeScrpt/JavaScript or test/spec file
;;   corresponding to this file.
;;
;;
;; Requirements:
;;
;; * `coffee-mode'
;; * `js-mode', `js2-mode' or `js3-mode'
;;
;;
;; Usage:
;;
;; * coffee-find-other-file: `C-c f'
;;
;;   Find the CoffeeScript or JavaScript file corresponding to this
;;   file.  This command is enabled in `coffee-mode', `js-mode',
;;   `js2-mode', `js3-mode'.
;;
;; * coffee-find-test-file: `C-c s'
;;
;;   Find the CoffeeScript/JavaScript or test/spec file corresponding
;;   to this file.  This command is enabled in `coffee-mode`,
;;   `js-mode`, `js2-mode`, `js3-mode`.
;;
;;
;; Configuration:
;;
;; Add the following to your Emacs init file:
;;
;;     (require 'coffee-fof) ;; Not necessary if using ELPA package
;;     (coffee-fof-setup)
;;
;; If the .coffee files and .js files are in the same directory, a
;; configuration is not necessary as default value of
;; coffee-fof-search-directories is '(\".\").
;;
;; If the .coffee and .js files are in different directories, for
;; example, .js files are in `js` directory and .coffee files are in
;; `coffee` directory as below, customize
;; `coffee-fof-search-directories`.
;;
;;     .
;;     \342\224\234\342\224\200\342\224\200 coffee
;;     \342\224\202   \342\224\224\342\224\200\342\224\200 example.coffee
;;     \342\224\224\342\224\200\342\224\200 js
;;         \342\224\224\342\224\200\342\224\200 example.js
;;
;;
;;     (custom-set-variables
;;      '(coffee-fof-search-directories
;;       '(\".\" \"../*\")))
;;
;; If you want to set another key binding, configure as follow.
;;
;;     (coffee-fof-setup :other-key \"C-c C-f\" :test-key \"C-c t\")
;;
;;

"]) (cn-outline . [(20100321 914) nil "No description available." single nil]) (cmds-menu . [(20131226 1816) nil "`Recent Commands' submenu for the menu-bar `Tools' menu." single ";;; Commentary:
;;
;; Adds a `Recent Commands' submenu to the menu-bar `Tools' menu.  It
;; holds the most recent commands you have invoked using `M-x'.
;;
;; Put this in your init file (~/.emacs):
;;
;;   (require 'cmds-menu)
;;
;; Loading this file adds submenu `Recent Commands' and updates
;; `menu-bar-update-hook' so that this menu is automatically updated.
;;
;;
;; User options defined here:
;;
;;    `recent-cmds-menu-max-size', `recent-cmds-name-length'.
;;
;; Non-interactive functions defined here:
;;
;;    `recent-cmds-menu-bar-update'.
;;
;; Internal variables defined here:
;;
;;    `recent-cmds-menu'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (cmake-mode . [(20140102 1124) nil "major-mode for editing CMake sources" single ";;; Commentary:

;; Provides syntax highlighting and indentation for CMakeLists.txt and
;; *.cmake source files.
;;
;; Add this code to your .emacs file to use the mode:
;;
;;  (setq load-path (cons (expand-file-name \"/dir/with/cmake-mode\") load-path))
;;  (require 'cmake-mode)

;------------------------------------------------------------------------------

"]) (cm-mode . [(20130306 6) nil "Minor mode for CriticMarkup" single ";;; Commentary:

;; CriticMarkup for Emacs
;; ======================
;;
;; `cm-mode' is a minor mode that provides support for CriticMarkup in Emacs.
;;
;; CriticMarkup is a way for authors and editors to track changes to
;; documents in plain text. It defines the following patterns for marking
;; changes:
;;
;; - Addition {++ ++}
;; - Deletion {-- --}
;; - Substitution {~~ ~> ~~}
;; - Comment {>> <<}
;; - Highlight {== ==}{>> <<}
;;
;; `cm-mode' provides the following functionality:
;;
;; - font lock support
;; - key bindings to insert CriticMarkup.
;; - 'follow changes' mode: automatically record changes to the buffer.
;; - accept/reject changes interactively.
;; - automatically add author tag.
;; - navigation to move between changes.
;;
;;
;; Key bindings
;; ------------
;;
;; `C-c * a' : add text
;; `C-c * d' : delete text
;; `C-c * s' : make a substitution
;; `C-c * c' : add a comment
;; `C-c * i' : accept/reject change at point
;; `C-c * I' : accept/reject all changes interactively
;; `C-c * *' : move forward out of a change
;; `C-c * f' : move forward to the next change
;; `C-c * b' : move backward to the previous change
;; `C-c * C' : set author
;; `C-c * F' : activate follow changes mode
;;
;;
;; Usage
;; -----
;;
;; See README.md for details.

"]) (clues-theme . [(20130908 101) ((emacs (24 0))) "an Emacs 24 theme which may well be fully awesome..." single ";;; Commentary:
;;
;; Clues was initially based on a Visual Studio theme called 'Blues 'n
;; Roots' however it's a long way from looking much like it, aside
;; from the occasional color accent, Blues (despite it's name) has a
;; more toasted caramel flavor. Clues on the other hand is made up of
;; cooling colors with a couple of flecks of light cream/brown/orange
;; to break up any monotony, with yellow/gold rainbow-delimiters.
;;
;; Clues has become my working theme of choice since about 7/20, and
;; with xterm-frobs.el, looks really excellent in the terminal as well
;; as the GUI.
;;

(deftheme clues
  \"clues theme - an Emacs 24 theme which may well be fully awesome...\")

(custom-theme-set-variables
 'clues
 '(fringe-mode 10 nil (fringe))
 '(linum-format     \" %6d \"  )
 '(main-line-color1 \"#222232\")
 '(main-line-color2 \"#333343\")
 '(powerline-color1 \"#222232\")
 '(powerline-color2 \"#333343\"))

(custom-theme-set-faces
 'clues
 '(cursor                              ((t (                       :background \"orange\"                                                ))))
 '(default
   (
    (((class color) (min-colors 16777216)) (:foreground \"#C0E9F6\" :background \"#110B14\"))
    (((class color) (min-colors 88))       (:foreground \"#fff\" :background \"#000\"))
    (((class color) (min-colors 16))       (:foreground \"#fff\" :background \"#000\"))
    (((class color) (min-colors 8))        (:foreground \"#fff\" :background \"#000\")))
   )
 '(linum                               ((t (:foreground \"#434844\"  :background \"#110B14\" :height 70                                    ))))
 '(minibuffer-prompt                   ((t (:foreground \"#1278A8\"  :background nil       :weight bold                                  ))))
 '(escape-glyph                        ((t (:foreground \"orange\"   :background nil                                                     ))))
 '(highlight                           ((t (:foreground \"orange\"   :background nil                                                     ))))
 '(region                              ((t (                       :background \"#131D26\"                                               ))))
 '(shadow                              ((t (:foreground \"#777777\"  :background nil                                                     ))))
 '(secondary-selection                 ((t (                       :background \"#132125\"                                               ))))
 '(trailing-whitespace                 ((t (:foreground \"#FFFFFF\"  :background \"#C74000\"                                               ))))
 '(font-lock-builtin-face              ((t (:foreground \"#55B1E2\"  :background nil                                                     ))))
 '(font-lock-comment-face              ((t (:foreground \"#90A0A0\"  :background nil       :slant italic                                 ))))
 '(font-lock-constant-face             ((t (:foreground \"#CFC5A9\"  :background nil                                                     ))))
 `(font-lock-doc-string-face           ((t (:foreground \"#DFD3E9\"  :background nil                                                     ))))
 '(font-lock-function-name-face        ((t (:foreground \"#BFC3A9\"  :background nil                                                     ))))
 '(font-lock-keyword-face              ((t (:foreground \"#55C0D2\"  :background nil                                                     ))))
 '(font-lock-negation-char-face        ((t (:foreground \"#C75311\"  :background nil                                                     ))))
 '(font-lock-string-face               ((t (:foreground \"#94D4D9\"  :background nil                                                     ))))
 '(font-lock-variable-name-face        ((t (:foreground \"#BDBA9F\"  :background nil                                                     ))))
 '(font-lock-comment-delimiter-face    ((t (:foreground \"#3499aa\"  :background nil       :inherit (font-lock-comment-face)             ))))
 '(font-lock-preprocessor-face         ((t (:foreground \"#A16C26\"  :background nil       :inherit (font-lock-builtin-face)             ))))
 '(font-lock-regexp-grouping-backslash ((t (:foreground \"#f66500\"  :background nil       :inherit (bold)                               ))))
 '(font-lock-regexp-grouping-construct ((t (:foreground \"red\"      :background nil       :inherit (bold)                               ))))
 '(font-lock-doc-face                  ((t (:foreground \"#90A0A0\"  :background nil       :inherit (font-lock-string-face)              ))))
 '(font-lock-warning-face              ((t (:foreground \"#008000\"  :background nil       :inherit (error)                              ))))
 '(font-lock-type-face                 ((t (:foreground \"#55aadd\"  :background nil       :inherit (default)                            ))))
 '(link                                ((t (:foreground \"#00b7f0\"  :background nil       :underline t                                  ))))
 '(link-visited                        ((t (:foreground \"#4488cc\"                       :underline t :inherit (link)                  ))))
 '(button                              ((t (:foreground \"#FFFFFF\"  :background \"#444444\" :underline t :inherit (link)                  ))))
 '(fringe                              ((t (                       :background \"#1B0F1f\"                                               ))))
 '(next-error                          ((t (                                             :inherit (region)                             ))))
 '(query-replace                       ((t (                                             :inherit (isearch)                            ))))
 '(header-line                         ((t (:foreground \"#222222\"  :background \"#bbbbbb\" :box nil :inherit (mode-line)                 ))))
 '(mode-line-highlight                 ((t (                                             :box nil                                      ))))
 '(mode-line-emphasis                  ((t (                                             :weight bold                                  ))))
 '(mode-line-buffer-id                 ((t (                                             :box nil :weight bold                         ))))
 '(mode-line-inactive                  ((t (:foreground \"#555555\"  :background \"#111111\" :box nil :weight light :inherit (mode-line)   ))))
 '(mode-line                           ((t (:foreground \"#777777\"  :background \"#111111\" :box nil :height 85 :inherit (variable-pitch) ))))
 '(isearch                             ((t (:foreground \"#99ccee\"  :background \"#444444\"                                               ))))
 '(isearch-fail                        ((t (                       :background \"#ffaaaa\"                                               ))))
 '(lazy-highlight                      ((t (                       :background \"#77bbdd\"                                               ))))
 '(match                               ((t (                       :background \"#3388cc\"                                               ))))
 '(tooltip                             ((t (:foreground \"black\"    :background \"LightYellow\" :inherit (variable-pitch)                 ))))
 '(js3-function-param-face             ((t (:foreground \"#BFC3A9\"                                                                      ))))
 '(js3-external-variable-face          ((t (:foreground \"#F0B090\"  :bold t                                                             ))))
 '(cua-rectangle                       ((t (:foreground \"#E0E4CC\"  :background \"#342858\" ))))
 ;; flyspell-mode
 `(flyspell-incorrect                  ((t (:underline \"#AA0000\" :background nil :inherit nil ))))
 `(flyspell-duplicate                  ((t (:underline \"#009945\" :background nil :inherit nil ))))
  ;; flymake-mode
 `(flymake-errline                     ((t (:underline \"#AA0000\" :background nil :inherit nil ))))
 `(flymake-warnline                    ((t (:underline \"#009945\" :background nil :inherit nil ))))
 ;; Magit hightlight
 `(magit-item-highlight                ((t (:foreground \"white\" :background \"#1278A8\" :inherit nil ))))
 ;;git-gutter
 '(git-gutter:added                    ((t (:foreground \"#609f60\" :bold t))))
 '(git-gutter:modified                 ((t (:foreground \"#3388cc\" :bold t))))
 '(git-gutter:deleted                  ((t (:foreground \"#cc3333\" :bold t))))
 '(diff-added                          ((t (:background \"#132013\"))))
 '(diff-removed                        ((t (:background \"#290a0a\"))))
 '(diff-file-header                    ((t (:background \"#362145\"))))
 '(diff-context                        ((t (:foreground \"#E0E4CC\"))))
 '(diff-hunk-header                    ((t (:background \"#242130\"))))

 )

;; Rainbow delimiters
(defun clues-rainbow-delim-set-face ()
  (set-face-attribute 'rainbow-delimiters-depth-1-face   nil :foreground \"#99998A\")
  (set-face-attribute 'rainbow-delimiters-depth-2-face   nil :foreground \"#776644\")
  (set-face-attribute 'rainbow-delimiters-depth-3-face   nil :foreground \"#888866\")
  (set-face-attribute 'rainbow-delimiters-depth-4-face   nil :foreground \"#AAAA88\")
  (set-face-attribute 'rainbow-delimiters-depth-5-face   nil :foreground \"#CCCCAA\")
  (set-face-attribute 'rainbow-delimiters-depth-6-face   nil :foreground \"#DEDEAA\")
  (set-face-attribute 'rainbow-delimiters-depth-7-face   nil :foreground \"#EFEFBB\")
  (set-face-attribute 'rainbow-delimiters-depth-8-face   nil :foreground \"#FFFFCC\")
  (set-face-attribute 'rainbow-delimiters-depth-9-face   nil :foreground \"#FFFFEE\")
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil :foreground \"#AA0000\"))

(eval-after-load \"rainbow-delimiters\" '(clues-rainbow-delim-set-face))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'clues)

;; Local Variables:
;; eval: (when (fboundp 'rainbow-mode) (rainbow-mode +1))
;; End:

;;; clues-theme.el ends here
"]) (cloud-to-butt-erc . [(20130627 1608) nil "Replace 'the cloud' with 'my butt'" single ";;; Commentary:

;; Inspired by https://github.com/panicsteve/cloud-to-butt.  I wanted
;; to have the same laughs in IRC as I do while browsing the web so I
;; put this together.  I hope you enjoy it, too.

;; History

;; 1.0.0 - Initial release

"]) (closure-lint-mode . [(20101118 1324) nil "minor mode for the Closure Linter" single ";;; Commentary:

;; An Emacs minor mode to check and fix the syntax of Javascript
;; buffers with the Closure Linter.
;;
;; The mode uses flymake to check the syntax of Javascript buffers
;; with the \"gjslint\" program. Errors will be highlighted via flymake
;; and some of them can be resolved by calling the \"fixjsstyle\"
;; program.
;;
;; Key bindings:
;;
;; C-c C-e  -  Show the error message of a line with errors.
;; C-c C-f  -  Fix the current buffer by calling fixjsstyle.

"]) (clojure-test-mode . [(20131227 805) ((clojure-mode (1 7)) (cider (0 4 0))) "Minor mode for Clojure tests" single ";;; Commentary:

;; This file provides support for running Clojure tests (using the
;; clojure.test framework) via nrepl.el and seeing feedback in the test
;; buffer about which tests failed or errored.

"]) (clojure-snippets . [(20130403 1146) ((yasnippet (0 8 0))) "Yasnippets for clojure" tar nil]) (clojure-mode . [(20140105 1328) nil "Major mode for Clojure code" single ";;; Commentary:

;; Provides font-lock, indentation, and navigation for the Clojure
;; programming language (http://clojure.org).

;; Users of older Emacs (pre-22) should get version 1.4:
;; http://github.com/clojure-emacs/clojure-mode/tree/1.4

;; Slime integration has been removed; see the 1.x releases if you need it.

;; Using clojure-mode with paredit is highly recommended.  Use paredit
;; as you would with any other minor mode; for instance:
;;
;;   ;; require or autoload paredit-mode
;;   (add-hook 'clojure-mode-hook 'paredit-mode)

;; See CIDER (http://github.com/clojure-emacs/cider) for
;; better interaction with subprocesses via nREPL.

"]) (clojure-cheatsheet . [(20140106 154) ((helm (1 5 3)) (cider (0 1 8))) "The Clojure Cheatsheet for Emacs" single ";;; Commentary:
;;
;; A quick reference system for Clojure. Fast, searchable & available offline.

"]) (cljsbuild-mode . [(20130110 732) nil "A minor mode for the ClojureScript 'lein cljsbuild' command" single ";;; Commentary:
;;
;; An Emacs minor mode for the ClojureScript 'lein cljsbuild' command
;; that will automatically watch the compilation buffer, pops it when the
;; compilation failed and (optionally) hides it when the compilation
;; succeed.

;; Installation:
;;
;; Packages are available in the Marmalade and MELPA repositories.
;; Install the mode with \"M-x package-install RET cljsbuild-mode\".
;;
;; Usage:
;;
;; 1. M-x cljsbuild-auto
;; 2. Enjoy!
;;
;; Alternatively, if you prefer to work from a terminal:
;;
;; 1. Start a terminal with M-x term or M-x multi-term
;; 2. Run 'lein cljsbuild auto' in it
;; 3. Start cljsbuild-mode in the terminal buffer with M-x cljsbuild-mode

(require 'ansi-color)

(defgroup cljsbuild-mode nil
  \"A helper mode for running 'lein cljsbuild' within Emacs.\"
  :prefix \"cljsbuild-\"
  :group 'applications)

;;;###autoload
(define-minor-mode cljsbuild-mode
  \"ClojureScript Build mode\"
  :init-value nil
  :lighter \" Cljs-Build\"
  :group 'cljsbuild-mode
  :after-hook (cljsbuild-init-mode))

(defcustom cljsbuild-verbose t
  \"When non-nil, provide progress feedback in the minibuffer.\"
  :type 'boolean
  :group 'cljsbuild-mode)

(defcustom cljsbuild-show-buffer-on-failure t
  \"When non-nil, pop up the build buffer when failures are seen.\"
  :type 'boolean
  :group 'cljsbuild-mode)

(defcustom cljsbuild-hide-buffer-on-success nil
  \"When non-nil, hide the build buffer when a build succeeds.\"
  :type 'boolean
  :group 'cljsbuild-mode)

(defcustom cljsbuild-show-buffer-on-warnings t
  \"When non-nil, pop up the build buffer when warnings are seen.\"
  :type 'boolean
  :group 'cljsbuild-mode)

(defun cljsbuild-message (format-string &rest args)
  \"Pass FORMAT-STRING and ARGS through to `message' if `cljsbuild-verbose' is non-nil.\"
  (when cljsbuild-verbose
    (apply #'message format-string args)))

(defun cljsbuild-on-buffer-change
  (beginning end len)
  (let ((inserted (buffer-substring-no-properties beginning end))
        (buffer-visible (get-buffer-window (buffer-name) 'visible)))
    (cond ((string-match \"^Successfully compiled\" inserted)
           (cljsbuild-message \"Cljsbuild compilation success\")
           (when cljsbuild-hide-buffer-on-success
             ;; hides the compilation buffer
             (delete-windows-on (buffer-name))))
          ((string-match \"^Compiling.+failed.$\" inserted)
           (cljsbuild-message \"Cljsbuild compilation failure\")
           (when (and (not buffer-visible) cljsbuild-show-buffer-on-failure)
             ;; if the compilation buffer is not visible, shows it
             (switch-to-buffer-other-window (buffer-name) t)))
          ((string-match \"^WARNING:\" inserted)
           (cljsbuild-message \"Cljsbuild compilation warning\")
           (when (and (not buffer-visible) cljsbuild-show-buffer-on-warnings)
             (switch-to-buffer-other-window (buffer-name) t))))))

(defun cljsbuild-init-mode
  ()
    \"Initializes the minor mode and registers a change hook on the
compilation buffer\"
  (remove-hook 'after-change-functions 'cljsbuild-on-buffer-change)
  (add-hook 'after-change-functions 'cljsbuild-on-buffer-change nil t))

(defun cljsbuild--insertion-filter (proc string)
  \"When PROC sends STRING, apply ansi color codes and insert into buffer.\"
  (with-current-buffer (process-buffer proc)
    (let ((moving (= (point) (process-mark proc))))
      (save-excursion
	(goto-char (process-mark proc))
	(insert (ansi-color-apply string))
	(set-marker (process-mark proc) (point)))
      (when moving
        (goto-char (process-mark proc))))))

;;;###autoload
(defun cljsbuild-auto ()
  \"Run \\\"lein cljsbuild auto\\\" in a background buffer.\"
  (interactive)
  (unless (locate-dominating-file default-directory \"project.clj\")
    (error \"Not inside a leiningen project\"))
  (with-current-buffer (get-buffer-create \"*cljsbuild*\")
    (when (get-buffer-process (current-buffer))
      (error \"Lein cljsbuild is already running\"))
    (buffer-disable-undo)
    (let* ((proc (start-process \"cljsbuild\"
                                (current-buffer)
                                \"lein\" \"cljsbuild\" \"auto\")))
      (cljsbuild-mode)
      ;; Colorize output
      (set-process-filter proc 'cljsbuild--insertion-filter)
      (font-lock-mode)
      (message \"Started cljsbuild.\"))))


(provide 'cljsbuild-mode)

;;; cljsbuild-mode.el ends here
"]) (clj-refactor . [(20140111 140) ((s (1 8 0)) (dash (2 4 0)) (yasnippet (0 6 1)) (paredit (22)) (multiple-cursors (1 2 2))) "A collection of clojure refactoring functions" single ";;; Commentary:

;; ## Installation
;;
;; I highly recommended installing clj-refactor through elpa.
;;
;; It's available on [marmalade](http://marmalade-repo.org/) and
;; [melpa](http://melpa.milkbox.net/):
;;
;;     M-x package-install clj-refactor
;;
;; You can also install the dependencies on your own, and just dump
;; clj-refactor in your path somewhere:
;;
;;  - <a href=\"https://github.com/magnars/s.el\">s.el</a>
;;  - <a href=\"https://github.com/magnars/dash.el\">dash.el</a>
;;

;; ## Setup
;;
;;     (require 'clj-refactor)
;;     (add-hook 'clojure-mode-hook (lambda ()
;;                                    (clj-refactor-mode 1)
;;                                    ;; insert keybinding setup here
;;                                    ))
;;
;; You'll also have to set up the keybindings in the lambda. Read on.

;; ## Setup keybindings
;;
;; All functions in clj-refactor have a two-letter mnemonic shortcut. You
;; get to choose how those are bound. Here's how:
;;
;;     (cljr-add-keybindings-with-prefix \"C-c C-m\")
;;     ;; eg. rename files with `C-c C-m rf`.
;;
;; If you would rather have a modifier key, instead of a prefix, do:
;;
;;     (cljr-add-keybindings-with-modifier \"C-s-\")
;;     ;; eg. rename files with `C-s-r C-s-f`.
;;
;; If neither of these appeal to your sense of keyboard layout aesthetics, feel free
;; to pick and choose your own keybindings with a smattering of:
;;
;;     (define-key clj-refactor-map (kbd \"C-x C-r\") 'cljr-rename-file)

;; ## Use
;;
;; This is it so far:
;;
;;  - `rf`: rename file, update ns-declaration, and then query-replace new ns in project.
;;  - `ar`: add :require to namespace declaration, then jump back
;;  - `au`: add :use to namespace declaration, then jump back
;;  - `ai`: add :import to namespace declaration, then jump back
;;  - `th`: thread another expression
;;  - `uw`: unwind a threaded expression
;;
;; Combine with your keybinding prefix/modifier.

;; ## Automatic insertion of namespace declaration
;;
;; When you open a blank `.clj`-file, clj-refactor inserts the namespace
;; declaration for you.
;;
;; It will also add the relevant `:use` clauses in test files, normally
;; using `clojure.test`, but if you're depending on midje in your
;; `project.clj` it uses that instead.
;;
;; Like clojure-mode, clj-refactor presumes that you are postfixing your
;; test files with `_test`.
;;
;; Prefer to insert your own ns-declarations? Then:
;;
;; (setq clj-add-ns-to-blank-clj-files nil)

"]) (clips-mode . [(20131012 1401) nil "Major mode for editing CLIPS code and REPL" tar nil]) (clippy . [(20131210 258) ((pos-tip (1 0))) "Show tooltip with function documentation at point" single ";;; Commentary:

;; This library implements rendering of pop-up box with \"Clippy, the
;; paper clip\".  You can make him say various things by calling
;; `clippy-say' function.  To hide the pop-up, simply invoke any
;; command (move forward/backward, type, `C-g` etc., any event is
;; recognized).

;; As inspiration, two functions are provided:
;; `clippy-describe-function' and `clippy-describe-variable'.  Bind
;; any of these functions to a key, then while point is over a
;; function/variable, call it.  A popup with helpfull clippy will
;; appear, telling you about the function/variable (using
;; `describe-function' and `describe-variable' respectively).

"]) (clevercss . [(20131228 1755) nil "A major mode for editing CleverCSS files" single ";;; Commentary:

;; This is a major mode for editing CleverCSS files.  Much of the
;; functionality imitates that of `clevercss-mode'.  `clevercss-mode'
;; provides support for imenu and hideshow.

;;; Installation:

;; - Put `clevercss.el' somewhere in your emacs load path
;; - Add these lines to your .emacs file:
;;   (autoload 'clevercss-mode \"clevercss nil t)
;;   (add-to-list auto-mode-alist '(\"\\\\.pcss\\\\'\" . clevercss-mode))
;;  
;; This mode assumes that CleverCSS files have the suffix \".pcss\".
;; You may use additional suffixes by adding them to
;; `auto-mode-alist'.  For example, to add the suffix \".ccss\" you
;; would write the following in your .emacs file:
;; 
;; (add-to-list auto-mode-alist '(\"\\\\.ccss\\\\'\" . clevercss-mode))
;;
;; To customize how it works:
;;  M-x customize-group RET clevercss-mode RET
;;

;;; Bug Reporting:

;; Patches welcome.

"]) (cl-lib-highlight . [(20131019 751) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single ";;; Commentary:

;; After load, run `cl-lib-highlight-initialize'.

;; Run `cl-lib-highlight-warn-cl-initialize' to mark depreciated cl
;; function/macro usage with with the `cl-lib-highlight-depreciated'
;; face.

"]) (circe . [(20131210 409) ((lui (0)) (lcs (0))) "Client for IRC in Emacs" tar nil]) (cider-tracing . [(20131018 738) ((cider (0 3 0)) (clojure-mode (2 1 0))) "Tracing extension for CIDER" single ";;; Commentary:

;; Provides an `cider-toggle-trace' command.

;;; Installation:

;; Available as a package in marmalade-repo.org and melpa.milkbox.net.

;; (add-to-list 'package-archives
;;              '(\"marmalade\" . \"http://marmalade-repo.org/packages/\"))
;;
;; or
;;
;; (add-to-list 'package-archives
;;              '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)
;;
;; M-x package-install cider-tracing

"]) (cider-decompile . [(20131116 1002) ((cider (0 3 0)) (javap-mode (9))) "decompilation extension for cider" single ";;; Commentary:

;; Provides an `cider-decompile' command.

;;; Installation:

;; Available as a package in marmalade-repo.org and melpa.milkbox.net.

;; (add-to-list 'package-archives
;;              '(\"marmalade\" . \"http://marmalade-repo.org/packages/\"))
;;
;; or
;;
;; (add-to-list 'package-archives
;;              '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)
;;
;; M-x package-install cider-decompile

"]) (cider . [(20140114 202) ((clojure-mode (2 0 0)) (cl-lib (0 3)) (dash (2 4 1)) (pkg-info (0 4))) "Clojure Integrated Development Environment and REPL" tar ";;; Commentary:

;; Provides a Clojure IDE and REPL for Emacs, built on top of nREPL.

;;; Installation:

;; Available as a package in marmalade-repo.org and melpa.milkbox.net.

;; (add-to-list 'package-archives
;;              '(\"marmalade\" . \"http://marmalade-repo.org/packages/\"))
;;
;; or
;;
;; (add-to-list 'package-archives
;;              '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)
;;
;; M-x package-install cider

"]) (chruby . [(20131212 556) nil "Emacs integration for chruby" single nil]) (chm-view . [(20110616 1719) nil "View CHM file." single ";;; Commentary:
;;
;; View CHM file.
;;
;; This package is view CHM file in Emacs.
;; This package use `archmage' decompress
;; CHM file and view in browser.
;;
;; Below are commands you can use:
;;
;;      `chm-view-file'         View CHM file.
;;      `chm-view-dired'        View dired marked CHM files.
;;

;;; Installation:
;;
;; This package is base on `archmage', so make sure
;; `archmage' have install in your system, like me
;; (I use Debian), install `archmage':
;;
;;      sudo aptitude install archmage -y
;;
;; And then put chm-view.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'chm-view)
;;
;; That's all, enjoy! :)
;;

"]) (chicken-scheme . [(20131116 1228) nil "Scheme-mode extensions for Chicken Scheme" single ";;; Commentary:
;; A suite of extensions for scheme-mode that grew out of necessity.
;;
;; Chicken Scheme does play well with SLIME (See also: chicken-slime.el), but
;; I often find myself working on software that is slow-level and unstable
;; enough to make such dependence on REPL reliability rather frustrating.
;;
;; Thus chicken-scheme.el was born. It does not rely on a running Scheme to
;; provide auto-complete support for your application. A suite of customization
;; variables are available to configure from which modules symbols should be
;; loaded and what sort of package prefixes can be expected.
;;
;; Auto-complete is configured to support prefixed symbols, to allow for
;; full recognition of symbols in modules that may have been imported with a
;; prefix modifier. The `chicken-prefix` variable may be customized to declare
;; what characters can be used as prefix delimiters.
;;
;; C-? is bound in Scheme Modes to fetch documentation for the symbol at the
;; current point. This obeys the prefix rules used for auto-complete.
;;
;; Further customization is available in the chicken-scheme customization group.
;;
;; Loading of the first scheme file may take some time as the Chicken Modules
;; are parsed for symbols on first-load. All subsequent scheme files do not
;; incur this load hitch. Consider running an Emacs daemon.
;;
;; Tags are also supported. 
;;
;; Installation:
;; Place in your load path. Add the following to your .emacs:
;;
;; (require 'chicken-scheme)
;;
;; Two Auto-Complete sources are available:
;;   ac-source-chicken-symbols
;;   ac-source-chicken-symbols-prefixed
;;
;; Prefixed symbols are those which have been mutated after importing a library.
;; See the chicken-prefix custom variable for customization options.
;;
;; I recommend you also add the following:
;;
;; (add-hook 'scheme-mode-hook 'enable-paredit-mode)
;; (add-hook 'scheme-mode-hook 'rainbow-delimiters-mode-enable)


(require 'scheme)

"]) (charmap . [(20131019 2158) nil "Unicode table for Emacs" single nil]) (change-inner . [(20130208 1130) ((expand-region (0 7))) "Change contents based on semantic units" single ";;; Commentary:

;; # change-inner.el
;;
;; change-inner gives you vim's `ci` command, building on
;; [expand-region](https://github.com/magnars/expand-region.el). It is most easily
;; explained by example:
;;
;;     function test() {
;;       return \"semantic kill\";
;;     }
;;
;; With point after the word `semantic`
;;
;;  * `change-inner \"` would kill the contents of the string
;;  * `change-outer \"` would kill the entire string
;;  * `change-inner {` would kill the return-statement
;;  * `change-outer {` would kill the entire block
;;
;; I use `M-i` and `M-o` for this.
;;
;; Giving these commands a prefix argument `C-u` means copy instead of kill.
;;
;; ## Installation
;;
;; Start by installing
;; [expand-region](https://github.com/magnars/expand-region.el).
;;
;;     (require 'change-inner)
;;     (global-set-key (kbd \"M-i\") 'change-inner)
;;     (global-set-key (kbd \"M-o\") 'change-outer)
;;
;; ## It's not working in my favorite mode
;;
;; That may just be because expand-region needs some love for your mode. Please
;; open a ticket there: https://github.com/magnars/expand-region.el

"]) (cg . [(20131210 455) nil "major mode for editing Constraint Grammar files" single ";;; Commentary:

;; Usage:
;;
;; (autoload 'cg-mode \"/path/to/cg.el\"
;;  \"cg-mode is a major mode for editing Constraint Grammar files.\"  t)
;; (add-to-list 'auto-mode-alist '(\"\\\\.cg3\\\\'\" . cg-mode))
;; ; Or if you use a non-standard file suffix, e.g. .rlx:
;; (add-to-list 'auto-mode-alist '(\"\\\\.rlx\\\\'\" . cg-mode))

;; I recommend using autocomplete-mode for tab-completion, and
;; smartparens-mode if you're used to it (paredit-mode does not work
;; well if you have set names with the # character in them). Both are
;; available from MELPA (see http://melpa.milkbox.net/).

;; TODO:
;; - different syntax highlighting for sets and tags (difficult)
;; - use something like prolog-clause-start to define M-a/e etc.
;; - run vislcg3 --show-unused-sets and buttonise with line numbers (like Occur does)
;; - indentation function (based on prolog again?)
;; - the rest of the keywords
;; - keyword tab-completion
;; - the quotes-within-quotes thing plays merry hell with
;;   paredit-doublequote, write a new doublequote function?
;; - font-lock-syntactic-keywords is obsolete since 24.1
;; - derive cg-mode from prog-mode?
;; - goto-set/list
;; - show definition of set/list-at-point in modeline
;; - send dictionary to auto-complete

"]) (cfengine-code-style . [(20131209 411) nil "C code style for CFEngine project." single ";;; Commentary:

;; Usage:
;;
;; To enable coding style for the current buffer:
;;
;;     M-x c-set-style cfengine
;;
;; To enable coding style permanently, create file .dir-locals.el with the
;; following contents in the directory with the source code:
;;
;;     ((c-mode . ((c-file-style . \"cfengine\"))))
;;

;;
;; TODO: special rule for C99 (Foo) { 1, 2, 3 } initializers.
;; TODO: special rule for whitespace between if/while/for and paren.
;;

"]) (centered-cursor-mode . [(20131121 1237) nil "cursor stays vertically centered" single ";;; Commentary:

;; Makes the cursor stay vertically in a defined position (usually
;; centered). The vertical position can be altered, see key definition
;; below.

;; To load put that in .emacs:
;;     (require 'centered-cursor-mode)
;; To activate do:
;;     M-x centered-cursor-mode
;; for buffer local or
;;     M-x global-centered-cursor-mode
;; for global minor mode.
;; Also possible: put that in .emacs
;;     (and
;;      (require 'centered-cursor-mode)
;;      (global-centered-cursor-mode +1))
;; to always have centered-cursor-mode on in all buffers.

"]) (cedit . [(20131224 1929) nil "paredit-like commands for c-like languages" single ";;; Commentary:

;; Following commands are defined. Call them with \"M-x foo\", or bind some keys.

;; o cedit-forward-char / cedit-backward-char
;;   (in following examples, \"|\" are cursors)
;;
;;       fo|o; {bar;} baz;
;;   =>  foo|; {bar;} baz;
;;   =>  foo;| {bar;} baz;
;;   =>  foo; {bar;}| baz;
;;   =>  foo; {bar;} b|az;

;; o cedit-beginning-of-statement / cedit-end-of-statement
;;
;;       else{f|oo;}
;;   =>  else{|foo;} / else{foo;|}
;;
;;       els|e{bar;}
;;   =>  |else{bar;} / else{bar;}|

;; o cedit-down-block
;;
;;       wh|ile(cond){foo;}
;;   =>  while(cond){|foo;}

;; o cedit-up-block-forward / cedit-up-block-backward
;;
;;       if(cond){fo|o;}
;;   =>  |if(cond){foo;} / if(cond){foo;}|

;; o cedit-slurp
;;
;;       fo|o; bar;
;;   =>  fo|o, bar;
;;
;;       {fo|o;} bar;
;;   =>  {fo|o; bar;}

;; o cedit-wrap-brace
;;
;;       fo|o;
;;   =>  {fo|o;}

;; o cedit-barf
;;
;;       fo|o, bar;
;;   =>  fo|o; bar;
;;
;;       {fo|o; bar;}
;;   =>  {fo|o;} bar;

;; o cedit-splice-killing-backward
;;
;;       foo, ba|r, baz;
;;   =>  |bar, baz;
;;
;;       {foo; ba|r; baz;}
;;   =>  |bar; baz;

;; o cedit-raise
;;
;;       foo, ba|r, baz;
;;   =>  |bar;
;;
;;       {foo; ba|r; baz;}
;;   =>  |bar;

;; In addition, if \"paredit.el\" is installed on your emacs, following
;; commands are also defined.

;; o cedit-or-paredit-slurp
;; o cedit-or-paredit-barf
;; o cedit-or-paredit-splice-killing-backward
;; o cedit-or-paredit-raise

;; They are \"dwim\" commands that call one of cedit-xxx or paredit-xxx.

"]) (cask . [(20131225 628) ((s (1 8 0)) (dash (2 2 0)) (f (0 10 0)) (epl (0 0 1))) "Cask: Emacs dependency management made easy" tar ";;; Commentary:

;; Easy dependency management for Emacs!

"]) (capture . [(20130828 944) nil "screencasting with \"avconv\" or \"ffmpeg\"" tar ";;; Commentary:
;;
;; Capture is an Emacs mode to make screencasts on Linux easier.
;; (Well, maybe for some of you who use Emacs)
;;
;; Configuration
;; ------------------------
;;
;; (require 'capture)
;;
;; (setq capture-video-dest-dir \"~/screencasts/SORT/\")
;; (global-set-key (kbd \"<s-f12>\") 'capture-run-mode)
;;
;; (defun my-capture-presets ()
;;   \"Make my presets for capturing.\"
;;   (interactive)
;;   (capture-presets-clear)
;;   (capture-add-preset 524 333 854 480 15 \"webm\" \"854px (webcam mic)\"
;;                       (list \"Webcam C270 Analog Mono\")
;;                       (concat capture-background-path my-854-wallpaper)))
;; (my-capture-presets)
;;
;; See more at https://github.com/pashinin/capture.el
;;
"]) (caml . [(20130904 812) nil "No description available." tar nil]) (calmer-forest-theme . [(20130925 2210) nil "Darkish theme with green/orange tint" single ";;; Commentary:

;; A nice semi dark theme. The orange and green hues give it a distinctly
;; old-school flavor, referencing the green and amber terminals of ancient
;; computer lore.

;; This theme is based on the old color-theme.el theme \"calm forest\", by
;; Artur Hefczyc.

"]) (calfw-gcal . [(20120111 200) nil "edit Google calendar for calfw.el." tar ";;; Commentary:
;;
;; It is necessary to calfw.el Configurations
;;
;; Installation:

;; ============================================= 

;; Put the calfw-gcal.el to your
;; load-path.

;; Add to .emacs:
;; (require 'calfw-gcal)
;;

"]) (calfw . [(20131026 400) nil "Calendar view framework on Emacs" tar ";;; Commentary:

;; This program is a framework for the Calendar component. In the
;; Emacs, uses can show schedules in the calendar views, like iCal,
;; Outlook and Google Calendar.

;;; Installation:

;; Place this program in your load path and add following code.

;; (require 'calfw)

"]) (cacoo . [(20120319 1659) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar nil]) (cache . [(20111019 1600) nil "implementation of a hash table whose key-value pairs expire" single nil]) (c-eldoc . [(20130821 1146) nil "helpful description of the arguments to C functions" single ";;; Commentary:

;; To enable: put the following in your .emacs file:
;;
;; (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)

;; Chinmay Kamat -- made changes to the regular expression to make sure that function calls in macros do not
;; override actual function definitions while searching
;; v0.6 20/05/2010

;; Nathaniel has submitted a caching patch to make this workable on large projects \"like the emacs
;; codebase\"
;; v0.5 01/02/2010

;; Provides helpful description of the arguments to C functions.
;; Uses child process grep and preprocessor commands for speed.
;; v0.4 01/16/2005

;; Your improvements are appreciated: I am no longer maintaining this code
;; m_strange at mail dot utexas dot edu.  Instead, direct all requests to
;; flat0103@gmail.com

"]) (button-lock . [(20131106 706) nil "Clickable text defined by regular expression" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'button-lock)
;;
;;     (global-button-lock-mode 1)
;;
;;     (setq url-button (button-lock-set-button
;;                       \"\\\\<http://[^[:space:]\\n]+\"
;;                       'browse-url-at-mouse
;;                       :face 'link :face-policy 'prepend))
;;
;; Explanation
;;
;; Button-lock is a minor mode which provides simple facilities to
;; define clickable text based on regular expressions.  Button-lock.el
;; piggybacks on font-lock.el, and is efficient.  Overlays are not
;; used.
;;
;; Button-lock buttons (links) can execute any function.
;;
;; There is little user-level interface for button-lock.el, which is
;; intended to be used from Emacs Lisp.  For a user-friendly library
;; built on top of button-lock.el, see wiki-nav.el or fixmee.el
;;
;;     http://github.com/rolandwalker/button-lock/blob/master/wiki-nav.el
;;     http://github.com/rolandwalker/fixmee
;;
;; Example usage
;;
;;     (require 'button-lock)
;;     (global-button-lock-mode 1)
;;
;;     ;; add a mouseable button to all occurrences of a word
;;     (button-lock-set-button \"hello\" 'beginning-of-line)
;;
;;     ;; to remove that button later, pass all the same arguments to
;;     ;; button-lock-unset-button
;;     (button-lock-unset-button \"hello\" 'beginning-of-line)
;;
;;     ;; or, save the result and pass it back to the unset function
;;     (setq mybutton (button-lock-set-button \"hello\" 'beginning-of-line))
;;     (button-lock-unset-button mybutton)
;;
;;     ;; create a fancy raised button
;;     (require 'cus-edit)
;;     (button-lock-set-button \"hello\" #'(lambda ()
;;                                               (interactive)
;;                                               (save-match-data
;;                                                 (deactivate-mark)
;;                                                 (if (re-search-forward \"hello\" nil t)
;;                                                     (goto-char (match-beginning 0))
;;                                                   (goto-char (point-min))
;;                                                   (deactivate-mark)
;;                                                   (if (re-search-forward \"hello\" nil t)
;;                                                       (goto-char (match-beginning 0))))))
;;                             :face 'custom-button-face :mouse-face 'custom-button-mouse)
;;
;;     ;; activate hyperlinks
;;     (button-lock-set-button \"\\\\<http://[^[:space:]\\n]+\"
;;                             'browse-url-at-mouse
;;                             :face 'link :face-policy 'prepend)
;;
;;     ;; activate hyperlinks only in lines that begin with a comment character
;;     (button-lock-set-button \"^\\\\s-*\\\\s<.*?\\\\<\\\\(http://[^[:space:]\\n]+\\\\)\"
;;                             'browse-url-at-mouse
;;                             :face 'link :face-policy 'prepend :grouping 1)
;;
;;     ;; turn folding-mode delimiters into mouseable buttons
;;     (add-hook 'folding-mode-hook  #'(lambda ()
;;                                       (button-lock-mode 1)
;;                                       (button-lock-set-button
;;                                        (concat \"^\" (regexp-quote (car (folding-get-mode-marks))))
;;                                        'folding-toggle-show-hide)
;;                                       (button-lock-set-button
;;                                        (concat \"^\" (regexp-quote (cadr (folding-get-mode-marks))))
;;                                        'folding-toggle-show-hide)))
;;
;;     ;; create a button that responds to the keyboard, but not the mouse
;;     (button-lock-set-button \"\\\\<http://[^[:space:]\\n]+\"
;;                             'browse-url-at-point
;;                             :mouse-binding     nil
;;                             :mouse-face        nil
;;                             :face             'link
;;                             :face-policy      'prepend
;;                             :keyboard-binding \"RET\")
;;
;;     ;; define a global button, to be set whenever the minor mode is activated
;;     (button-lock-register-global-button \"hello\" 'beginning-of-line)
;;
;; Interface
;;
;; Button-lock is intended to be used via the following functions
;;
;;     `button-lock-set-button'
;;     `button-lock-unset-button'
;;     `button-lock-extend-binding'
;;     `button-lock-clear-all-buttons'
;;     `button-lock-register-global-button'
;;     `button-lock-unregister-global-button'
;;     `button-lock-unregister-all-global-buttons'
;;
;; See Also
;;
;;     M-x customize-group RET button-lock RET
;;
;; Prior Art
;;
;;     hi-lock.el
;;     David M. Koppelman <koppel@ece.lsu.edu>
;;
;;     buttons.el
;;     Miles Bader <miles@gnu.org>
;;
;; Notes
;;
;;     By default, button-lock uses newfangled left-clicks rather than
;;     Emacs-traditional middle clicks.
;;
;;     Font lock is very efficient, but it is still possible to bog
;;     things down if you feed it expensive regular expressions.  Use
;;     anchored expressions, and be careful about backtracking.  See
;;     `regexp-opt'.
;;
;;     Some differences between button-lock.el and hi-lock.el:
;;
;;         * The purpose of hi-lock.el is to change the _appearance_
;;           of keywords.  The purpose of button-lock is to change the
;;           _bindings_ on keywords.
;;
;;         * Hi-lock also supports embedding new keywords in files,
;;           which is too risky of an approach for button-lock.
;;
;;         * Hi-lock supports overlays and can work without font-lock.
;;
;;     Some differences between button-lock.el and buttons.el
;;
;;         * Buttons.el is for inserting individually defined
;;           buttons.  Button-lock.el is for changing all matching text
;;           into a button.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     No external dependencies
;;
;; Bugs
;;
;;     Case-sensitivity of matches depends on how font-lock-defaults
;;     was called for the current mode (setting
;;     font-lock-keywords-case-fold-search).  So, it is safest to
;;     assume that button-lock pattern matches are case-sensitive --
;;     though they might not be.
;;
;;     Return value for button-lock-register-global-button is inconsistent
;;     with button-lock-set-button.  The global function does not
;;     return a button which could be later passed to
;;     button-lock-extend-binding, nor are the arguments parsed and
;;     checked for validity.  Any errors for global buttons are also
;;     deferred until the mode is activated.
;;
;; TODO
;;
;;     Validate arguments to button-lock-register-global-button.
;;     maybe split set-button into create/set functions, where
;;     the create function does all validation and returns a
;;     button object.  Pass in button object to unset as well.
;;
;;     Why are mouse and keyboard separate, can't mouse be passed
;;     through kbd macro?  The issue may have been just surrounding
;;     mouse events with \"<>\" before passing to kbd.
;;
;;     Look into new syntax-propertize-function variable (Emacs 24.x).
;;
;;     A refresh function to toggle every buffer?
;;
;;     Peek into font-lock-keywords and deduplicate based on the
;;     stored patterns.
;;
;;     Substitute a function for regexp to make properties invisible
;;     unless button-lock mode is on - esp for keymaps.
;;
;;     Add predicate argument to button-set where predicate is
;;     evaluated during matcher.  This could be used to test for
;;     comment-only.
;;
;;     Consider defining mode-wide button locks (pass the mode as the
;;     first argument of font-lock-add-keywords).  Could use functions
;;     named eg button-lock-set-modal-button.
;;
;;     Add a language-specific navigation library (header files in C,
;;     etc).
;;
;;     Example of exchanging text values on wheel event.
;;
;;     Convenience parameters for right-click menus.
;;
;;     Button-down visual effects as with Emacs widgets.
;;
;; License
;;
;; Simplified BSD License
;;
;; Copyright (c) 2011-12, Roland Walker
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; Ths software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (butler . [(20131221 946) ((deferred (3 1)) (json (1 2))) "Emacs client for Jenkins" tar nil]) (busybee-theme . [(20130920 942) nil "port of vim's mustang theme" single nil]) (buster-snippets . [(20130714 540) nil "Yasnippets for the Buster javascript testing framework" tar ";;; Commentary:

;; Yasnippets for the Buster javascript testing framework
;;
;; Common snippets
;;
;;     tc => new testCase (one for node, browser and node+browser)
;;     tt => additional test
;;     cx => nested context
;;     su => setup method
;;     td => teardown method
;;
;; Assert and refute snippets follow a common pattern. They start with `as` or `re`
;; followed by a mnemonic shortcut. Most are simply the 'initials' of the method name, but
;; the best shortcuts are saved for the most common assertions.
;;
;;     ase - assert.equals
;;     asm - assert.match
;;     ass - assert.same
;;     asx - assert.exception
;;     asd - assert.defined
;;     ast - assert.threw
;;     asat - assert.alwaysThrew
;;     asin - assert.isNull
;;     asio - assert.isObject
;;     asto - assert.typeOf
;;     ascn - assert.className
;;     astn - assert.tagName
;;
;; Buster also includes Sinon and its assertions:
;;
;;     asc - assert.called
;;     asc1 - assert.calledOnce
;;     asc1w - assert.calledOnceWith
;;     asc2 - assert.calledTwice
;;     asc3 - assert.calledThrice
;;     ascw - assert.calledWith
;;     ascc - assert.callCount
;;     asco - assert.callOrder
;;     asco - assert.calledOn
;;     asaco - assert.alwaysCalledOn
;;     asacw - assert.alwaysCalledWith
;;     asacwe - assert.alwaysCalledWithExactly
;;     ascwe - assert.calledWithExactly
;;
;; Refutations mirrors assertions exactly, except that they start with `re` instead of
;; `as`. It is the beautiful symmetry of the buster assertions package.

;; Installation

;; If you haven't, install [yasnippet](http://capitaomorte.github.com/yasnippet/)
;; then install buster-snippets like so:
;;
;;     git submodule add https://github.com/magnars/buster-snippets.el.git site-lisp/buster-snippets
;;
;; Then require buster-snippets at some point after yasnippet.
;;
;;     (require 'buster-snippets)

;; Customization

;; Add `\"use strict\"`-declarations to the test cases:
;;
;;     (setq buster-use-strict t)
;;
;; Declare `assert` and `refute` if you've disabled additional globals:
;;
;;     (setq buster-exposed-asserts nil)
;;
;; Set the default global namespace-object on a per-project basis:
;;
;;     (add-hook 'js2-mode-hook
;;           (lambda ()
;;             (when (string-match-p \"projects/zombietdd\" (buffer-file-name))
;;               (setq js2-additional-externs '(\"ZOMBIE\"))
;;               (setq buster-default-global \"ZOMBIE\"))))
;;
;;     ;; example from one of my projects
;;
;; Add the default global to the IIFE (immediately invoked function expression)
;;
;;     (setq buster-add-default-global-to-iife t)
;;
;; The global will by default be shortened to a one-letter var, like this:
;;
;;     (function (Z) {
;;
;;        // use Z instead of ZOMBIE inside the namespace
;;
;;     }(ZOMBIE));

"]) (buster-mode . [(20121219 522) nil "Minor mode to speed up development when writing tests with Buster.js" single ";;; Commentary:

;; A work in progress. You can watch us livecode it on http://emacsrocks.com

;; All keybindings in buster-mode start with `C-c C-b` and then a two-letter mnemonic shortcut.

;; * `td`: toggle-deferred will toggle // in the name of the current test.
;; * `tf`: toggle-focus-rocket will toggle => in the name of the current test.
;; * `ra`: run-all-tests

"]) (bundler . [(20131213 357) ((inf-ruby (2 1))) "Interact with Bundler from Emacs" single ";;; Commentary:

;; Interact with Bundler from Emacs.
;;
;; 1) bundle-open
;;
;;    Wraps 'bundle open' which, if the given gem is installed and has been
;;    required correctly, will open the gem's source directory with dired.
;;
;; 2) bundle-console
;;
;;    Starts an inferior ruby process in the context of the current bundle
;;    using 'bundle console' (requires inf-ruby to be installed).
;;
;; 3) bundle-install, bundle-update, bundle-check
;;
;;    Runs the corresponding Bundler command with async-shell-command and
;;    *Bundler* as the target buffer. This exists so the output won't mess
;;    with the default buffer used by M-& and async-shell-command.

;;; Install

;; $ cd ~/.emacs.d/vendor
;; $ git clone git://github.com/tobiassvn/bundler.el.git
;;
;; In your emacs config:
;;
;; (add-to-list 'load-path \"~/.emacs.d/vendor/bundler.el\")
;; (require 'bundler)

"]) (bug-reference-github . [(20131202 1303) nil "Automatically set `bug-reference-url-format' in Github repositories." tar ";;; Commentary:

;; Automatically set `bug-reference-url-format' and enable
;; `bug-reference-prog-mode' buffers from Github repositories.

;; What it does is:

;; 1. If `bug-reference-url-format' is not set and this appears to be
;;     part of a git working copy (we can locate a .git/config).

;; 2. Find the git remote repository (run 'git ls-remote --get-url').

;; 3. If the remote matches github.com set `bug-reference-url-format' to
;;     the correct Github issue URL (we set it buffer locally).

;; 4. Enable `bug-reference-prog-mode'.

;; To have `bug-reference-github' check every opened file:

;; (add-hook 'find-file-hook 'bug-reference-github-set-url-format)

;; or to check just `prog-mode' buffers (i.e. most programming major modes):

;; (add-hook 'prog-mode-hook 'bug-reference-github-set-url-format)

"]) (bufshow . [(20130711 1039) ((emacs (24 1))) "A simple presentation tool for Emacs." single ";;; Commentary:
;;
;; A very simple minor mode for moving forward and backward through an
;; ordered set of buffers, possibly narrowing the buffer in the
;; process.
;;
;; For more information see `bufshow-mode' and `bufshow-start'.
;;
"]) (buffer-utils . [(20131106 706) nil "Buffer-manipulation utility functions" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'buffer-utils)
;;
;;     (buffer-utils-save-order
;;       (bury-buffer \"*scratch*\"))
;;
;;     ;; buffer order is now restored
;;
;; Explanation
;;
;; Buffer-utils.el is a collection of functions for buffer manipulation.
;;
;; This library exposes very little user-level interface; it is
;; generally useful only for programming in Emacs Lisp.
;;
;; To use buffer-utils, place the buffer-utils.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'buffer-utils)
;;
;; The following functions and macros are provided:
;;
;;     `buffer-utils-all-in-mode'
;;     `buffer-utils-all-matching'
;;     `buffer-utils-bury-and-forget'   ; can be called interactively
;;     `buffer-utils-first-matching'
;;     `buffer-utils-huge-p'
;;     `buffer-utils-in-mode'
;;     `buffer-utils-most-recent-file-associated'
;;     `buffer-utils-narrowed-p'
;;     `buffer-utils-save-order'
;;     `buffer-utils-set-order'
;;
;; of which `buffer-utils-save-order' is the most notable.
;;
;; `buffer-utils-save-order' is a macro, similar to `save-current-buffer',
;; which saves and restores the order of the buffer list.
;;
;; Notes
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;    No external dependencies
;;
;; Bugs
;;
;; TODO
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (buffer-stack . [(20101223 1020) nil "Enhanced intelligent switch-to-other-buffer replacement." single nil]) (buffer-move . [(20130923 1653) nil "Swap buffers without typing C-x b on each window" single ";;; Commentary:

;; This file is for lazy people wanting to swap buffers without
;; typing C-x b on each window. This is useful when you have :

;; +--------------+-------------+
;; |              |             |
;; |    #emacs    |    #gnus    |
;; |              |             |
;; +--------------+-------------+
;; |                            |
;; |           .emacs           |
;; |                            |
;; +----------------------------+

;; and you want to have :

;; +--------------+-------------+
;; |              |             |
;; |    #gnus     |   .emacs    |
;; |              |             |
;; +--------------+-------------+
;; |                            |
;; |           #emacs           |
;; |                            |
;; +----------------------------+

;; With buffer-move, just go in #gnus, do buf-move-left, go to #emacs
;; (which now should be on top right) and do buf-move-down.

;; To use it, simply put a (require 'buffer-move) in your ~/.emacs and
;; define some keybindings. For example, i use :

;; (global-set-key (kbd \"<C-S-up>\")     'buf-move-up)
;; (global-set-key (kbd \"<C-S-down>\")   'buf-move-down)
;; (global-set-key (kbd \"<C-S-left>\")   'buf-move-left)
;; (global-set-key (kbd \"<C-S-right>\")  'buf-move-right)


"]) (buffer-buttons . [(20131127 946) nil "Define, save, and load code-safe buttons in files for emacs" single ";;; Commentary:
;;
;; This makes defining, saving, and loading \"code-safe\" emacs buttons
;; fairly simple.
;;
;; You can use `M-x buffer-button-insert` to insert a predefined
;; button, which can be saved and automatically restored when the file
;; is loaded.
;;
;; To define new buttons, use the macro `define-buffer-button`.  See
;; https://github.com/rpav/buffer-buttons for more information.

"]) (bubbleberry-theme . [(20131223 349) ((emacs (24 1))) "A theme based on LightTable for Emacs24" single ";;; Commentary:
;;
;;  A theme inspired by the default LightTable theme, by Chris Granger

(unless (>= 24 emacs-major-version)
  (error \"bubbleberry-theme requires Emacs 24 or later.\"))

(deftheme bubbleberry \"Light Table like theme\")

(custom-theme-set-variables
 'bubbleberry
 '(linum-format \"%3i\")
 '(powerline-color1 \"#3d3d68\")
 '(powerline-color2 \"#292945\")
 )

(custom-theme-set-faces
 'bubbleberry

 ;; basic theming.
 '(default                          ((t (:foreground \"#CCCCCC\" :background \"#202020\" ))))
 '(region                           ((t (:background \"#151515\" ))))
 '(cursor                           ((t (:background \"#EEEEEE\" ))))
 '(fringe                           ((t (:background \"#2F2F2F\" :foreground \"#FFFFFF\" ))))
 '(linum                            ((t (:background \"#202020\" :foreground \"#777777\" :box nil :height 100 ))))
 '(minibuffer-prompt                ((t (:foreground \"#9489C4\" :weight bold ))))
 '(minibuffer-message               ((t (:foreground \"#FFFFFF\" ))))
 '(mode-line                        ((t (:foreground \"#BBBBBB\" :background \"#191919\" ))))
 '(mode-line-inactive               ((t (:foreground \"#777777\" :background \"#303030\" :weight light :box nil :inherit (mode-line )))))

 '(font-lock-keyword-face           ((t (:foreground \"#B8E9CB\"))))
 '(font-lock-type-face              ((t (:foreground \"#C5B3FD\"))))
 '(font-lock-constant-face          ((t (:foreground \"#C5B3FD\"))))
 '(font-lock-variable-name-face     ((t (:foreground \"#ADCEFD\"))))
 '(font-lock-builtin-face           ((t (:foreground \"#6767AE\"))))
 '(font-lock-string-face            ((t (:foreground \"#B3DADC\"))))
 '(font-lock-comment-face           ((t (:foreground \"#9AACCB\"))))
 '(font-lock-comment-delimiter-face ((t (:foreground \"#9AACCB\"))))
 '(font-lock-warning-face           ((t (:background \"#9AACCB\"))))
 '(font-lock-preprocessor-face      ((t (:foreground \"#B8E9CB\"))))
 '(font-lock-reference-face         ((t (:foreground \"#000000\"))))
 '(font-lock-negation-char-face     ((t (:foreground \"#000000\"))))

 '(font-lock-function-name-face     ((t (:foreground \"#ADCEFD\"))))
 '(font-lock-doc-face               ((t (:foreground \"#AAAAAA\"))))
 '(font-lock-doc-string-face        ((t (:foreground \"#496B83\"))))

 '(flymake-errline               ((t (:foreground \"#EE8888\" :background nil :underline nil))))
 '(flymake-warnline              ((t (:foreground \"#8888FF\" :background \"#303030\" :underline nil))))

  ;; easy defaults...
 '(tooltip ((default nil) (nil nil)))
 '(next-error ((t          (:inherit (region)))))
 '(query-replace ((t       (:inherit (isearch)))))
 '(button ((t              (:inherit (link)))))
 '(fixed-pitch ((t         (:family \"Monospace\"))))
 '(variable-pitch ((t      (:family \"Sans Serif\"))))
 '(escape-glyph ((t        (:foreground \"#FF6600\"))))
 '(mode-line-emphasis ((t  (:weight bold))))
 '(mode-line-highlight ((t (:box nil (t (:inherit (highlight)))))))

 '(highlight
   ((((class color) (min-colors 88) (background light)) (:background \"#003453\"))
    (((class color) (min-colors 88) (background dark))  (:background \"#003450\"))
    (((class color) (min-colors 16) (background light)) (:background \"#003450\"))
    (((class color) (min-colors 16) (background dark))  (:background \"#004560\"))
    (((class color) (min-colors 8))                     (:foreground \"#000000\" :background \"#00FF00\")) (t (:inverse-video t))))

 '(shadow
   ((((class color grayscale) (min-colors 88) (background light)) (:foreground \"#999999\"))
    (((class color grayscale) (min-colors 88) (background dark))  (:foreground \"#999999\"))
    (((class color) (min-colors 8) (background light))            (:foreground \"#00ff00\"))
    (((class color) (min-colors 8) (background dark))             (:foreground \"#ffff00\"))))

 '(trailing-whitespace
   ((((class color) (background light)) (:background \"#ff0000\"))
    (((class color) (background dark))  (:background \"#ff0000\")) (t (:inverse-video t)))))

'(link
  ((((class color) (min-colors 88) (background light)) (:underline t :foreground \"#00b7f0\"))
   (((class color) (background light))                 (:underline t :foreground \"#0044FF\"))
   (((class color) (min-colors 88) (background dark))  (:underline t :foreground \"#0099aa\"))
   (((class color) (background dark))                  (:underline t :foreground \"#0099aa\")) (t (:inherit (underline)))))

'(link-visited
  ((default                            (:inherit (link)))
   (((class color) (background light)) (:inherit (link)))
   (((class color) (background dark))  (:inherit (link)))))

'(header-line
  ((default                                      (:inherit (mode-line))) (((type tty)) (:underline t :inverse-video nil))
   (((class color grayscale) (background light)) (:box nil :foreground \"#222222\" :background \"#bbbbbb\"))
   (((class color grayscale) (background dark))  (:box nil :foreground \"#bbbbbb\" :background \"#222222\"))
   (((class mono) (background light))            (:underline t :box nil :inverse-video nil :foreground \"#000000\" :background \"#ffffff\"))
   (((class mono) (background dark))             (:underline t :box nil :inverse-video nil :foreground \"#ffffff\" :background \"#000000\"))))

'(isearch
  ((((class color) (min-colors 88) (background light)) (:foreground \"#99ccee\" :background \"#444444\"))
   (((class color) (min-colors 88) (background dark))  (:foreground \"#bb3311\" :background \"#444444\"))
   (((class color) (min-colors 16))                    (:foreground \"#0088cc\" :background \"#444444\"))
   (((class color) (min-colors 8))                     (:foreground \"#0088cc\" :background \"#444444\")) (t (:inverse-video t))))

'(isearch-fail
  ((((class color) (min-colors 88) (background light)) (:background \"#ffaaaa\"))
   (((class color) (min-colors 88) (background dark))  (:background \"#880000\"))
   (((class color) (min-colors 16))                    (:background \"#FF0000\"))
   (((class color) (min-colors 8))                     (:background \"#FF0000\"))
   (((class color grayscale))                          (:foreground \"#888888\")) (t (:inverse-video t))))

'(lazy-highlight
  ((((class color) (min-colors 88)  (background light)) (:background \"#77bbdd\"))
   (((class color) (min-colors 88)  (background dark)) (:background \"#77bbdd\"))
   (((class color) (min-colors 16)) (:background \"#4499ee\"))
   (((class color) (min-colors 8))  (:background \"#4499ee\")) (t (:underline t))))

'(match
  ((((class color) (min-colors 88) (background light)) (:background \"#3388cc\"))
   (((class color) (min-colors 88) (background dark))  (:background \"#3388cc\"))
   (((class color) (min-colors 8)  (background light)) (:foreground \"#000000\" :background \"#FFFF00\"))
   (((class color) (min-colors 8)  (background dark))  (:foreground \"#ffffff\" :background \"#0000FF\"))
   (((type tty) (class mono))  (:inverse-video t))  (t (:background \"#888888\"))))

;; TODO - rainbow-delimiters support
;; TODO - additional mode support
;; TODO - review and expand terminal support

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'bubbleberry)

;;; bubbleberry-theme.el ends here
"]) (bs-ext . [(20130824 1159) nil "Extensions to emacs buffer-selection library (bs.el)" single ";;; Commentary: 
;; 
;; Bitcoin donations gratefully accepted: 13NyoPq3iusGsCtHNRT9xfA9jsqPjYtyyE
;;
;; Extensions to emacs buffer-selection library (bs.el)
;; This extension allows you to bind keys to buffer selection configurations (using `bs-ext-config-keys'),
;; and optionally displays the configuration names and associated keybindings in the header line of the
;; *buffer-selection* buffer.
;; It also creates a new config called \"regexp\". When the \"/\" key is pressed the user is prompted for a regular
;; expression and any buffers with matching names are added to the \"regexp\" config.
;;
;; The following new keybindings are defined:
;;
;; /        : prompt user for regular expression, place matching buffers in \"regexp\" config, and change to that config
;; <left>   : select previous config using `bs-ext-select-previous-configuration'
;; <right>  : select next config using `bs-ext-select-next-configuration'
;; x        : kill buffer on current line using `bs-delete'
;;
;; Also if you have color-moccur installed you can use M-O to find regexp matches in marked buffers.


;;; Installation:
;;
;; Put bs-ext.el in a directory in your load-path, e.g. ~/.emacs.d/
;; You can add a directory to your load-path with the following line in ~/.emacs
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;; where ~/elisp is the directory you want to add 
;; (you don't need to do this for ~/.emacs.d - it's added by default).
;;
;; Add the following to your ~/.emacs startup file.
;;
;; (require 'bs-ext)

"]) (browse-url-dwim . [(20131106 706) ((string-utils (0 3 2))) "Context-sensitive external browse URL or Internet search" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'browse-url-dwim)
;;
;;     (browse-url-dwim-mode 1)
;;
;;     place the cursor on a URL
;;     press \"C-c b\"
;;
;;     select some text
;;     press \"C-c g\"
;;
;;     ;; to turn off confirmations
;;     (setq browse-url-dwim-always-confirm-extraction nil)
;;
;; Explanation
;;
;; This small library for calling external browsers combines some of
;; the functionality of `browse-url' and `thingatpt'.
;;
;; Three interactive commands are provided:
;;
;;     `browse-url-dwim'
;;     `browse-url-dwim-search'
;;     `browse-url-dwim-guess'
;;
;; each of which tries to extract URLs or meaningful terms from
;; context in the current buffer, and prompts for input when unable
;; to do so.
;;
;; The context-sensitive matching of `browse-url-dwim' tries to do
;; _less_ overall than the default behavior of `thingatpt', on the
;; theory that `thingatpt' matches too liberally.  However,
;; `browse-url-dwim' does recognize some URLs that the default
;; `browse-url' ignores, such as \"www.yahoo.com\" without the
;; leading \"http://\".
;;
;; To use `browse-url-dwim', add the following to your ~/.emacs file
;;
;;     (require 'browse-url-dwim)      ; load library
;;     (browse-url-dwim-mode 1)        ; install aliases and keybindings
;;
;; Then place the cursor on a URL and press
;;
;;     C-c b                           ; b for browse
;;
;; or select some text and press
;;
;;     C-c g                           ; g for Google
;;
;; or (equivalently)
;;
;;     M-x browse RET
;;     M-x google RET
;;
;; Outside the USA
;;
;; If you are outside the USA, you will want to customize
;; `browse-url-dwim-permitted-tlds' so that your favorite
;; top-level domains will be recognized in context.  You
;; may also wish to customize `browse-url-dwim-search-url'
;; to point at an appropriate search engine.
;;
;; See Also
;;
;;     M-x customize-group RET browse-url-dwim RET
;;     M-x customize-group RET browse-url RET
;;
;; Notes
;;
;; To control which browser is invoked, see the underlying library
;; `browse-url'.
;;
;; By default, the minor mode binds and aliases `browse-url-dwim-guess'
;; for Internet search, but the user might prefer to bind
;; `browse-url-dwim-search', which has less DWIM:
;;
;;     (define-key browse-url-dwim-map (kbd \"C-c g\") 'browse-url-dwim-search)
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     Uses if present: string-utils.el
;;
;; Bugs
;;
;;     `thing-at-point-short-url-regexp' requires at least two dots in the hostname,
;;     so \"domain.com\" cannot be detected at point, whereas the following will be:
;;     \"www.domain.com\" or \"http://domain.com\"
;;
;;     `url-normalize-url' doesn't do much.  Multiple slashes should be removed
;;     for a start.
;;
;; TODO
;;
;;     Support thing-nearest-point, with fallback.
;;
;;     Test various schemes, esp \"file:\", \"mailto:\", and \"ssh:\".
;;
;;     Extract multiple URLs from region and browse to all.
;;
;;; License
;;
;;     Simplified BSD License
;;
;;     Redistribution and use in source and binary forms, with or
;;     without modification, are permitted provided that the following
;;     conditions are met:
;;
;;        1. Redistributions of source code must retain the above
;;           copyright notice, this list of conditions and the following
;;           disclaimer.
;;
;;        2. Redistributions in binary form must reproduce the above
;;           copyright notice, this list of conditions and the following
;;           disclaimer in the documentation and/or other materials
;;           provided with the distribution.
;;
;;     This software is provided by Roland Walker \"AS IS\" and any express
;;     or implied warranties, including, but not limited to, the implied
;;     warranties of merchantability and fitness for a particular
;;     purpose are disclaimed.  In no event shall Roland Walker or
;;     contributors be liable for any direct, indirect, incidental,
;;     special, exemplary, or consequential damages (including, but not
;;     limited to, procurement of substitute goods or services; loss of
;;     use, data, or profits; or business interruption) however caused
;;     and on any theory of liability, whether in contract, strict
;;     liability, or tort (including negligence or otherwise) arising in
;;     any way out of the use of this software, even if advised of the
;;     possibility of such damage.
;;
;;     The views and conclusions contained in the software and
;;     documentation are those of the authors and should not be
;;     interpreted as representing official policies, either expressed
;;     or implied, of Roland Walker.
;;
"]) (browse-kill-ring . [(20131116 2113) nil "interactively insert items from kill-ring" single ";;; Commentary:

;; Ever feel that 'C-y M-y M-y M-y ...' is not a great way of trying
;; to find that piece of text you know you killed a while back?  Then
;; browse-kill-ring.el is for you.

;; This package is simple to install; add (require 'browse-kill-ring)
;; to your ~/.emacs file, after placing this file somewhere in your
;; `load-path'.  If you want to use 'M-y' to invoke
;; `browse-kill-ring', also add (browse-kill-ring-default-keybindings)
;; to your ~/.emacs file.  Alternatively, you can bind it to another
;; key such as \"C-c k\", with:
;; (global-set-key (kbd \"C-c k\") 'browse-kill-ring)

;; Note that the command keeps track of the last window displayed to
;; handle insertion of chosen text; this might have unexpected
;; consequences if you do 'M-x browse-kill-ring', then switch your
;; window configuration, and try to use the same *Kill Ring* buffer
;; again.

"]) (bpe . [(20131227 2120) nil "Blog from Org mode to Blogger" single ";;; Commentary:

"]) (boxquote . [(20081011 1326) nil "Quote text with a semi-box." single ";;; Commentary:

;; boxquote provides a set of functions for using a text quoting style that
;; partially boxes in the left hand side of an area of text, such a marking
;; style might be used to show externally included text or example code.
;;
;; ,----
;; | The default style looks like this.
;; `----
;;
;; A number of functions are provided for quoting a region, a buffer, a
;; paragraph and a defun. There are also functions for quoting text while
;; pulling it in, either by inserting the contents of another file or by
;; yanking text into the current buffer.
;;
;; The latest version of boxquote.el can be found at:
;;
;;   <URL:http://www.davep.org/emacs/#boxquote.el>

"]) (bookmark+ . [(20140102 1607) nil "Bookmark+: extensions to standard library `bookmark.el'." tar ";;; Commentary:
;;
;;    Bookmark+: extensions to standard library `bookmark.el'.
;;
;;    The Bookmark+ libraries are these:
;;
;;    `bookmark+.el'     - main (driver) library (this file)
;;    `bookmark+-mac.el' - Lisp macros
;;    `bookmark+-lit.el' - (optional) code for highlighting bookmarks
;;    `bookmark+-bmu.el' - code for the `*Bookmark List*' (bmenu)
;;    `bookmark+-1.el'   - other required code (non-bmenu)
;;    `bookmark+-key.el' - key and menu bindings
;;
;;    `bookmark+-doc.el' - documentation (comment-only file)
;;    `bookmark+-chg.el' - change log (comment-only file)
;;
;;    The documentation (in `bookmark+-doc.el') includes how to
;;    byte-compile and install Bookmark+.  The documentation is also
;;    available in these ways:
;;
;;    1. From the bookmark list (`C-x r l'):
;;       Use `?' to show the current bookmark-list status and general
;;       help, then click link `Doc in Commentary' or link `Doc on the
;;       Web'.
;;
;;    2. From the Emacs-Wiki Web site:
;;       http://www.emacswiki.org/cgi-bin/wiki/BookmarkPlus.
;;
;;    3. From the Bookmark+ group customization buffer:
;;       `M-x customize-group bookmark-plus', then click link
;;       `Commentary'.
;;
;;    (The commentary links in #1 and #3 work only if you have library
;;    `bookmark+-doc.el' in your `load-path'.)
;;
;;
;;    ****** NOTE ******
;;
;;      Whenever you update Bookmark+ (i.e., download new versions of
;;      Bookmark+ source files), I recommend that you do the
;;      following:
;;
;;      1. Delete all existing byte-compiled Bookmark+ files
;;         (bookmark+*.elc).
;;      2. Load Bookmark+ (`load-library' or `require').
;;      3. Byte-compile the source files.
;;
;;      In particular, always load `bookmark+-mac.el' (not
;;      `bookmark+-mac.elc') before you byte-compile new versions of
;;      the files, in case there have been any changes to Lisp macros
;;      (in `bookmark+-mac.el').
;;
;;    ******************
;;
;;
;;    ****** NOTE ******
;;
;;      On 2010-06-18, I changed the prefix used by package Bookmark+
;;      from `bookmarkp-' to `bmkp-'.  THIS IS AN INCOMPATIBLE CHANGE.
;;      I apologize for the inconvenience, but the new prefix is
;;      preferable for a number of reasons, including easier
;;      distinction from standard `bookmark.el' names.
;;
;;      This change means that YOU MUST MANUALLY REPLACE ALL
;;      OCCURRENCES of `bookmarkp-' by `bmkp-' in the following
;;      places, if you used Bookmark+ prior to this change:
;;
;;      1. In your init file (`~/.emacs') or your `custom-file', if
;;         you have one.  This is needed if you customized any
;;         Bookmark+ features.
;;
;;      2. In your default bookmark file, `bookmark-default-file'
;;         (`.emacs.bmk'), and in any other bookmark files you might
;;         have.
;;
;;      3. In your `*Bookmark List*' state file,
;;         `bmkp-bmenu-state-file' (`~/.emacs-bmk-bmenu-state.el').
;;
;;      4. In your `*Bookmark List*' commands file,
;;         `bmkp-bmenu-commands-file' (`~/.emacs-bmk-bmenu-commands.el'),
;;         if you have one.
;;
;;      You can do this editing in a virgin Emacs session (`emacs
;;      -Q'), that is, without loading Bookmark+.
;;
;;      Alternatively, you can do this editing in an Emacs session
;;      where Bookmark+ has been loaded, but in that case you must
;;      TURN OFF AUTOMATIC SAVING of both your default bookmark file
;;      and your `*Bookmark List*' state file.  Otherwise, when you
;;      quit Emacs your manually edits will be overwritten.
;;
;;      To turn off this automatic saving, you can use `M-~' and `M-l'
;;      in buffer `*Bookmark List*' (commands
;;      `bmkp-toggle-saving-bookmark-file' and
;;      `bmkp-toggle-saving-menu-list-state' - they are also in the
;;      `Bookmark+' menu).
;;
;;
;;      Again, sorry for this inconvenience.
;;
;;    ******************
;;
;;
;;  Commands defined here:
;;
;;    `bmkp-version'.
;;
;;  Internal variables defined here:
;;
;;    `bmkp-version-number'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

"]) (bm . [(20131214 1405) nil "Visible bookmarks in buffer." single ";;; Commentary:

;;; Description:
;;
;;   This package was created because I missed the bookmarks from M$
;;   Visual Studio. I find that they provide an easy way to navigate
;;   in a buffer.
;;
;;   bm.el provides visible, buffer local, bookmarks and the ability
;;   to jump forward and backward to the next bookmark.
;;
;;   Features:
;;    - Toggle bookmarks with `bm-toggle' and navigate forward and
;;      backward in buffer with `bm-next' and `bm-previous'.
;;
;;    - Different wrapping modes, see `bm-wrap-search' and
;;      `bm-wrap-immediately'. Use `bm-toggle-wrapping' to turn
;;      wrapping on/off. Wrapping is only available when
;;      `bm-cycle-all-buffers' is nil.
;;
;;    - Navigate between bookmarks only in current buffer or cycle
;;      through all buffers. Use `bm-cycle-all-buffers' to enable
;;      looking for bookmarks across all open buffers. When cycling
;;      through bookmarks in all open buffers, the search will always
;;      wrap around.
;;
;;    - Setting bookmarks based on a regexp, see `bm-bookmark-regexp'
;;      and `bm-bookmark-regexp-region'.
;;
;;    - Setting bookmark based on line number, see `bm-bookmark-line'.
;;
;;    - Goto line position or start of line, see `bm-goto-position'.
;;
;;    - Persistent bookmarks (see below). Use
;;      `bm-toggle-buffer-persistence' to enable/disable persistent
;;      bookmarks (buffer local).
;;
;;    - List bookmarks with annotations and context in a separate
;;      buffer, see `bm-show' (current buffer) and `bm-show-all' (all
;;      open buffers). See `bm-show-mode-map' for key bindings.
;;
;;    - Remove all bookmarks in current buffer with
;;      `bm-remove-all-current-buffer' and all bookmarks in all open
;;      buffers with `bm-remove-all-all-buffers'.
;;
;;    - Annotate bookmarks, see `bm-bookmark-annotate' and
;;      `bm-bookmark-show-annotation'. The annotation is displayed in
;;      the messsage area when navigating to a bookmark. Set the
;;      variable `bm-annotate-on-create' to t to be prompted for an
;;      annotation when bookmark is created.
;;
;;    - Different bookmark styles, fringe-only, line-only or both, see
;;      `bm-highlight-style'. It is possible to have fringe-markers on
;;      left or right side.
;;


;;; Known limitations:
;;
;;   This package is developed and tested on GNU Emacs 23.x. It should
;;   work on all GNU Emacs 21.x, GNU Emacs 22.x and also on XEmacs
;;   21.x with some limitations.
;;
;;   There are some incompatibilities with lazy-lock when using
;;   fill-paragraph. All bookmark below the paragraph being filled
;;   will be lost. This issue can be resolved using the
;;   `jit-lock-mode' introduced in GNU Emacs 21.1
;;
;;   Bookmarks will be extended when inserting text (before, inside or
;;   after) bookmark in XEmacs. This is due to the missing support for
;;   overlay hooks i XEmacs.


;;; Installation:
;;
;;   To use bm.el, put it in your load-path and add
;;   the following to your .emacs
;;
;;   (require 'bm)
;;
;; or
;;
;;   (autoload 'bm-toggle   \"bm\" \"Toggle bookmark in current buffer.\" t)
;;   (autoload 'bm-next     \"bm\" \"Goto bookmark.\"                     t)
;;   (autoload 'bm-previous \"bm\" \"Goto previous bookmark.\"            t)
;;


;;; Configuration:
;;
;;   To make it easier to use, assign the commands to some keys.
;;
;;   M$ Visual Studio key setup.
;;     (global-set-key (kbd \"<C-f2>\") 'bm-toggle)
;;     (global-set-key (kbd \"<f2>\")   'bm-next)
;;     (global-set-key (kbd \"<S-f2>\") 'bm-previous)
;;
;;   Click on fringe to toggle bookmarks, and use mouse wheel to move
;;   between them.
;;     (global-set-key (kbd \"<left-fringe> <mouse-5>\") 'bm-next-mouse)
;;     (global-set-key (kbd \"<left-fringe> <mouse-4>\") 'bm-previous-mouse)
;;     (global-set-key (kbd \"<left-fringe> <mouse-1>\") 'bm-toggle-mouse)
;;
;;   If you would like the markers on the right fringe instead of the
;;   left, add the following to line:
;;
;;   (setq bm-marker 'bm-marker-right)
;;



;;; Persistence:
;;
;;   Bookmark persistence is achieved by storing bookmark data in a
;;   repository when a buffer is killed. The repository is saved to
;;   disk on exit. See `bm-repository-file'. The maximum size of the
;;   repository is controlled by `bm-repository-size'.
;;
;;   The buffer local variable `bm-buffer-persistence' decides if
;;   bookmarks in a buffer is persistent or not. Non-file buffers
;;   can't have persistent bookmarks, except for *info* and
;;   indirect buffers.
;;
;;   Bookmarks are non-persistent as default. To have bookmarks
;;   persistent as default add the following line to .emacs.
;;
;;   ;; make bookmarks persistent as default
;;   (setq-default bm-buffer-persistence t)

;;   Use the function `bm-toggle-buffer-persistence' to toggle
;;   bookmark persistence.
;;
;;   To have automagic bookmark persistence we need to add some
;;   functions to the following hooks. Insert the following code
;;   into your .emacs file:
;;
;;   If you are using desktop or other packages that restore buffers
;;   on start up, bookmarks will not be restored. When using
;;   `after-init-hook' to restore the repository, it will be restored
;;   *after* .emacs is finished. To load the repository when bm is
;;   loaded set the variable `bm-restore-repository-on-load' to t,
;;   *before* loading bm (and don't use the `after-init-hook').
;;
;;   ;; Make sure the repository is loaded as early as possible
;;   (setq bm-restore-repository-on-load t)
;;   (require 'bm)
;;
;;   ;; Loading the repository from file when on start up.
;;   (add-hook' after-init-hook 'bm-repository-load)
;;
;;   ;; Restoring bookmarks when on file find.
;;   (add-hook 'find-file-hooks 'bm-buffer-restore)
;;
;;   ;; Saving bookmark data on killing a buffer
;;   (add-hook 'kill-buffer-hook 'bm-buffer-save)
;;
;;   ;; Saving the repository to file when on exit.
;;   ;; kill-buffer-hook is not called when Emacs is killed, so we
;;   ;; must save all bookmarks first.
;;   (add-hook 'kill-emacs-hook '(lambda nil
;;                                   (bm-buffer-save-all)
;;                                   (bm-repository-save)))
;;
;;   ;; Update bookmark repository when saving the file.
;;   (add-hook 'after-save-hook 'bm-buffer-save)
;;
;;   ;; Restore bookmarks when buffer is reverted.
;;   (add-hook 'after-revert-hook 'bm-buffer-restore)
;;
;;
;;   The `after-save-hook' and `after-revert-hook' is not necessary to
;;   use to achieve persistence, but it makes the bookmark data in
;;   repository more in sync with the file state.
;;
;;   The `after-revert-hook' might cause trouble when using packages
;;   that automatically reverts the buffer (like vc after a check-in).
;;   This can easily be avoided if the package provides a hook that is
;;   called before the buffer is reverted (like `vc-before-checkin-hook').
;;   Then new bookmarks can be saved before the buffer is reverted.
;;
;;   ;; make sure bookmarks is saved before check-in (and revert-buffer)
;;   (add-hook 'vc-before-checkin-hook 'bm-buffer-save)



;;; Acknowledgements:
;;
;;  - The use of overlays for bookmarks was inspired by highline.el by
;;    Vinicius Jose Latorre <vinicius(at)cpqd.com.br>.
;;  - Thanks to Ben Key for XEmacs support.
;;  - Thanks to Peter Heslin for notifying me on the incompability
;;    with lazy-lock.
;;  - Thanks to Christoph Conrad for adding support for goto line
;;    position in bookmarks and simpler wrapping.
;;  - Thanks to Jan Rehders for adding support for different bookmark
;;  - styles.
;;  - Thanks to Dan McKinley <mcfunley(at)gmail.com> for inspiration
;;    to add support for listing bookmarks in all buffers,
;;    `bm-show-all'. (http://www.emacswiki.org/cgi-bin/wiki/bm-ext.el)
;;  - Thanks to Jonathan Kotta <jpkotta(at)gmail.com> for mouse
;;    support and fringe markers on left or right side.
;;  - Thanks to Juanma Barranquero <lekktu(at)gmail.com> for making
;;    `bm-show' an electric window, cleaning up the code, finding and
;;    fixing bugs and correcting spelling errors.
;;  - Thanks to jixiuf <jixiuf(at)gmail.com> for adding LIFO support
;;    to bookmark navigation. See `bm-in-lifo-order' for more
;;    information.



"]) (blank-mode . [(20130824 1159) nil "minor mode to visualize TAB, (HARD) SPACE, NEWLINE" single ";;; Commentary:

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Introduction
;; ------------
;;
;; This package is a minor mode to visualize blanks (TAB, (HARD) SPACE
;; and NEWLINE).
;;
;; blank-mode uses two ways to visualize blanks: faces and display
;; table.
;;
;; * Faces are used to highlight the background with a color.
;;   blank-mode uses font-lock to highlight blank characters.
;;
;; * Display table changes the way a character is displayed, that is,
;;   it provides a visual mark for characters, for example, at the end
;;   of line (?\\xB6), at SPACEs (?\\xB7) and at TABs (?\\xBB).
;;
;; The `blank-style' and `blank-chars' variables are used to select
;; which way should be used to visualize blanks.
;;
;; Note that when blank-mode is turned on, blank-mode saves the
;; font-lock state, that is, if font-lock is on or off.  And
;; blank-mode restores the font-lock state when it is turned off.  So,
;; if blank-mode is turned on and font-lock is off, blank-mode also
;; turns on the font-lock to highlight blanks, but the font-lock will
;; be turned off when blank-mode is turned off.  Thus, turn on
;; font-lock before blank-mode is on, if you want that font-lock
;; continues on after blank-mode is turned off.
;;
;; When blank-mode is on, it takes care of highlighting some special
;; characters over the default mechanism of `nobreak-char-display'
;; (which see) and `show-trailing-whitespace' (which see).
;;
;; There are two ways of using blank-mode: local and global.
;;
;; * Local blank-mode affects only the current buffer.
;;
;; * Global blank-mode affects all current and future buffers.  That
;;   is, if you turn on global blank-mode and then create a new
;;   buffer, the new buffer will also have blank-mode on.  The
;;   `blank-global-modes' variable controls which major-mode will be
;;   automagically turned on.
;;
;; You can mix the local and global usage without any conflict.  But
;; local blank-mode has priority over global blank-mode.  Blank mode
;; is active in a buffer if you have enabled it in that buffer or if
;; you have enabled it globally.
;;
;; When global and local blank-mode are on:
;;
;; * if local blank-mode is turned off, blank-mode is turned off for
;;   the current buffer only.
;;
;; * if global blank-mode is turned off, blank-mode continues on only
;;   in the buffers in which local blank-mode is on.
;;
;; To use blank-mode, insert in your ~/.emacs:
;;
;;    (require 'blank-mode)
;;
;; Or autoload at least one of the commands`blank-mode',
;; `blank-toggle-options', `global-blank-mode' or
;; `global-blank-toggle-options'.  For example:
;;
;;    (autoload 'blank-mode                  \"blank-mode\"
;;      \"Toggle blank visualization.\"          t)
;;    (autoload 'blank-toggle-options        \"blank-mode\"
;;      \"Toggle local `blank-mode' options.\"   t)
;;
;; blank-mode was inspired by:
;;
;;    whitespace.el            Rajesh Vaidheeswarran <rv@gnu.org>
;;	Warn about and clean bogus whitespaces in the file
;;	(inspired the idea to warn and clean some blanks)
;;
;;    show-whitespace-mode.el  Aurelien Tisne <aurelien.tisne@free.fr>
;;       Simple mode to highlight whitespaces
;;       (inspired the idea to use font-lock)
;;
;;    whitespace-mode.el       Lawrence Mitchell <wence@gmx.li>
;;       Major mode for editing Whitespace
;;       (inspired the idea to use display table)
;;
;;    visws.el                 Miles Bader <miles@gnu.org>
;;       Make whitespace visible
;;       (handle display table, his code was modified, but the main
;;       idea was kept)
;;
;;
;; Using blank-mode
;; ----------------
;;
;; There is no problem if you mix local and global minor mode usage.
;;
;; * LOCAL blank-mode:
;;    + To toggle blank-mode options locally, type:
;;
;;         M-x blank-toggle-options RET
;;
;;    + To activate blank-mode locally, type:
;;
;;         C-u 1 M-x blank-mode RET
;;
;;    + To deactivate blank-mode locally, type:
;;
;;         C-u 0 M-x blank-mode RET
;;
;;    + To toggle blank-mode locally, type:
;;
;;         M-x blank-mode RET
;;
;; * GLOBAL blank-mode:
;;    + To toggle blank-mode options globally, type:
;;
;;         M-x global-blank-toggle-options RET
;;
;;    + To activate blank-mode globally, type:
;;
;;         C-u 1 M-x global-blank-mode RET
;;
;;    + To deactivate blank-mode globally, type:
;;
;;         C-u 0 M-x global-blank-mode RET
;;
;;    + To toggle blank-mode globally, type:
;;
;;         M-x global-blank-mode RET
;;
;; There are also the following useful commands:
;;
;; `blank-cleanup'
;;    Cleanup some blank problems in all buffer or at region.
;;
;; `blank-cleanup-region'
;;    Cleanup some blank problems at region.
;;
;; The problems, which are cleaned up, are:
;;
;; 1. empty lines at beginning of buffer.
;; 2. empty lines at end of buffer.
;;    If `blank-chars' has `empty' as an element, remove all empty
;;    lines at beginning and/or end of buffer.
;;
;; 3. 8 or more SPACEs at beginning of line.
;;    If `blank-chars' has `indentation' as an element, replace 8 or
;;    more SPACEs at beginning of line by TABs.
;;
;; 4. SPACEs before TAB.
;;    If `blank-chars' has `space-before-tab' as an element, replace
;;    SPACEs by TABs.
;;
;; 5. SPACEs or TABs at end of line.
;;    If `blank-chars' has `trailing' as an element, remove all
;;    SPACEs or TABs at end of line.\"
;;
;; 6. 8 or more SPACEs after TAB.
;;    If `blank-chars' has `space-after-tab' as an element, replace
;;    SPACEs by TABs.
;;
;;
;; Hooks
;; -----
;;
;; blank-mode has the following hook variables:
;;
;; `blank-mode-hook'
;;    It is evaluated always when blank-mode is turned on locally.
;;
;; `global-blank-mode-hook'
;;    It is evaluated always when blank-mode is turned on globally.
;;
;; `blank-load-hook'
;;    It is evaluated after blank-mode package is loaded.
;;
;;
;; Options
;; -------
;;
;; Below it's shown a brief description of blank-mode options, please,
;; see the options declaration in the code for a long documentation.
;;
;; `blank-style'		Specify the visualization style.
;;
;; `blank-chars'		Specify which kind of blank is
;;				visualized.
;;
;; `blank-space'		Face used to visualize SPACE.
;;
;; `blank-hspace'		Face used to visualize HARD SPACE.
;;
;; `blank-tab'			Face used to visualize TAB.
;;
;; `blank-newline'		Face used to visualize NEWLINE char
;;				mapping.
;;
;; `blank-trailing'		Face used to visualize trailing
;;				blanks.
;;
;; `blank-line'			Face used to visualize \"long\" lines.
;;
;; `blank-space-before-tab'	Face used to visualize SPACEs before
;;				TAB.
;;
;; `blank-indentation'		Face used to visualize 8 or more
;;				SPACEs at beginning of line.
;;
;; `blank-empty'		Face used to visualize empty lines at
;;				beginning and/or end of buffer.
;;
;; `blank-space-after-tab'	Face used to visualize 8 or more
;;				SPACEs after TAB.
;;
;; `blank-space-regexp'		Specify SPACE characters regexp.
;;
;; `blank-hspace-regexp'	Specify HARD SPACE characters regexp.
;;
;; `blank-tab-regexp'		Specify TAB characters regexp.
;;
;; `blank-trailing-regexp'	Specify trailing characters regexp.
;;
;; `blank-space-before-tab-regexp'	Specify SPACEs before TAB
;;					regexp.
;;
;; `blank-indentation-regexp'	Specify regexp for 8 or more SPACEs at
;;				beginning of line.
;;
;; `blank-empty-at-bob-regexp'	Specify regexp for empty lines at
;;				beginning of buffer.
;;
;; `blank-empty-at-eob-regexp'	Specify regexp for empty lines at end
;;				of buffer.
;;
;; `blank-space-after-tab-regexp'	Specify regexp for 8 or more
;;					SPACEs after TAB.
;;
;; `blank-line-column'		Specify column beyond which the line
;;				is highlighted.
;;
;; `blank-display-mappings'	Specify an alist of mappings for
;;				displaying characters.
;;
;; `blank-global-modes'		Modes for which global `blank-mode' is
;;				automagically turned on.
;;
;;
;; Acknowledgements
;; ----------------
;;
;; Thanks to nschum (EmacsWiki) for the idea about highlight \"long\"
;; lines tail.  See EightyColumnRule (EmacsWiki).
;;
;; Thanks to Juri Linkov <juri@jurta.org> for suggesting:
;;    * `define-minor-mode'.
;;    * `global-blank-*' name for global commands.
;;
;; Thanks to Robert J. Chassell <bob@gnu.org> for doc fix and testing.
;;
;; Thanks to Drew Adams <drew.adams@oracle.com> for toggle commands
;; suggestion.
;;
;; Thanks to Antti Kaihola <antti.kaihola@linux-aktivaattori.org> for
;; helping to fix `find-file-hooks' reference.
;;
;; Thanks to Andreas Roehler <andreas.roehler@easy-emacs.de> for
;; indicating defface byte-compilation warnings.
;;
;; Thanks to TimOCallaghan (EmacsWiki) for the idea about highlight
;; \"long\" lines.  See EightyColumnRule (EmacsWiki).
;;
;; Thanks to Yanghui Bian <yanghuibian@gmail.com> for indicating a new
;; newline character mapping.
;;
;; Thanks to Pete Forman <pete.forman@westgeo.com> for indicating
;; whitespace-mode on XEmacs.
;;
;; Thanks to Miles Bader <miles@gnu.org> for handling display table via
;; visws.el (his code was modified, but the main idea was kept).
;;
;; Thanks to:
;;    Rajesh Vaidheeswarran <rv@gnu.org>	whitespace.el
;;    Aurelien Tisne <aurelien.tisne@free.fr>	show-whitespace-mode.el
;;    Lawrence Mitchell <wence@gmx.li>		whitespace-mode.el
;;    Miles Bader <miles@gnu.org>		visws.el
;; And to all people who contributed with them.
;;
;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

"]) (bitly . [(20130503 149) nil "Shorten URLs using the bitly.com shortener service" single ";;; Commentary:

;; Simple mode to shorten URLs from Emacs.

;; Use (bitly-shorten URL) from an Emacs Lisp program, or
;; M-x bitly-url-at-point to replace the URL at point (or the region)
;; with a shortened version.

;; To use, go to https://bitly.com/a/oauth_apps to generate your personal
;; API access token. Then customize `bitly-access-token' and set it to
;; the token you just got.

"]) (bitlbee . [(20130328 1018) nil "Help get Bitlbee (http://www.bitlbee.org) up and running." single ";;; Commentary:
;;
;; Start and stop bitlbee from within Emacs.
;;
;; Assumes you have a ~/.bitlbee directory where the bitlbee.conf file
;; lives, along with the account information XML files.  The directory
;; can be set using the `bitlbee-user-directory' variable, and is
;; created automatically if necessary.
;;
;; You might also need to set the `bitlbee-executable' variable.
;;
;; Usage:
;;
;; (require 'bitlbee)
;; M-x bitlbee-start
;;
;; Latest version:
;;
;; git clone git://pmade.com/elisp
;;
"]) (birds-of-paradise-plus-theme . [(20130419 1429) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single nil]) (bind-key . [(20140106 1253) nil "A simple way to manage personal keybindings" single ";;; Commentary:

;; If you have lots of keybindings set in your .emacs file, it can be hard to
;; know which ones you haven't set yet, and which may now be overriding some
;; new default in a new Emacs version.  This module aims to solve that
;; problem.
;;
;; Bind keys as follows in your .emacs:
;;
;;   (require 'bind-key)
;;
;;   (bind-key \"C-c x\" 'my-ctrl-c-x-command)
;;
;; If you want the keybinding to override all minor modes that may also bind
;; the same key, use the `bind-key*' form:
;;
;;   (bind-key* \"<C-return>\" 'other-window)
;;
;; If you want to rebind a key only in a particular key, use:
;;
;;   (bind-key \"C-c x\" 'my-ctrl-c-x-command some-other-mode-map)
;;
;; To unbind a key within a keymap (for example, to stop your favorite major
;; mode from changing a binding that you don't want to override everywhere),
;; use `unbind-key':
;;
;;   (unbind-key \"C-c x\" some-other-mode-map)
;;
;; After Emacs loads, you can see a summary of all your personal keybindings
;; currently in effect with this command:
;;
;;   M-x describe-personal-keybindings
;;
;; This display will tell you if you've overriden a default keybinding, and
;; what the default was.  Also, it will tell you if the key was rebound after
;; your binding it with `bind-key', and what it was rebound it to.

(require 'easy-mmode)

(defgroup bind-key nil
  \"A simple way to manage personal keybindings\"
  :group 'emacs)

(defcustom bind-key-segregation-regexp
  \"\\\\`\\\\(\\\\(C-[chx] \\\\|M-[gso] \\\\)\\\\([CM]-\\\\)?\\\\|.+-\\\\)\"
  \"Regular expression used to divide key sets in the output from
\\\\[describe-personal-keybindings].\"
  :type 'regexp
  :group 'bind-key)

;; Create override-global-mode to force key remappings

(defvar override-global-map (make-keymap)
  \"override-global-mode keymap\")

(define-minor-mode override-global-mode
  \"A minor mode so that keymap settings override other modes.\"
  t \"\")

;; the keymaps in `emulation-mode-map-alists' take precedence over
;; `minor-mode-map-alist'
(add-to-list 'emulation-mode-map-alists
             `((override-global-mode . ,override-global-map)))

(defvar personal-keybindings nil)

(defmacro bind-key (key-name command &optional keymap)
  (let ((namevar (make-symbol \"name\"))
        (keyvar (make-symbol \"key\"))
        (bindingvar (make-symbol \"binding\"))
        (entryvar (make-symbol \"entry\")))
    `(let* ((,namevar ,(eval key-name))
            (,keyvar (read-kbd-macro ,namevar))
            (,bindingvar (lookup-key (or ,keymap global-map)
                                     ,keyvar)))
       (let ((,entryvar (assoc (cons ,namevar (quote ,keymap))
                               personal-keybindings)))
         (if ,entryvar
             (setq personal-keybindings
                   (delq ,entryvar personal-keybindings))))
       (setq personal-keybindings
             (cons (list (cons ,namevar (quote ,keymap))
                         ,command
                         (unless (numberp ,bindingvar) ,bindingvar))
                   personal-keybindings))
       (define-key (or ,keymap global-map) ,keyvar ,command))))

(defmacro unbind-key (key-name &optional keymap)
  `(bind-key ,key-name nil ,keymap))

(defmacro bind-key* (key-name command)
  `(progn
     (bind-key ,key-name ,command)
     (define-key override-global-map ,(read-kbd-macro key-name) ,command)))

(defun get-binding-description (elem)
  (cond
   ((listp elem)
    (cond
     ((eq 'lambda (car elem))
      \"#<lambda>\")
     ((eq 'closure (car elem))
      \"#<closure>\")
     ((eq 'keymap (car elem))
      \"#<keymap>\")
     (t
      elem)))
   ((keymapp elem)
    \"#<keymap>\")
   ((symbolp elem)
    elem)
   (t
    \"#<byte-compiled lambda>\")))

(defun compare-keybindings (l r)
  (let* ((regex bind-key-segregation-regexp)
         (lgroup (and (string-match regex (caar l))
                      (match-string 0 (caar l))))
         (rgroup (and (string-match regex (caar r))
                      (match-string 0 (caar r))))
         (lkeymap (cdar l))
         (rkeymap (cdar r)))
    (cond
     ((and (null lkeymap) rkeymap)
      (cons t t))
     ((and lkeymap (null rkeymap))
      (cons nil t))
     ((and lkeymap rkeymap
           (not (string= (symbol-name lkeymap) (symbol-name rkeymap))))
      (cons (string< (symbol-name lkeymap) (symbol-name rkeymap)) t))
     ((and (null lgroup) rgroup)
      (cons t t))
     ((and lgroup (null rgroup))
      (cons nil t))
     ((and lgroup rgroup)
      (if (string= lgroup rgroup)
          (cons (string< (caar l) (caar r)) nil)
        (cons (string< lgroup rgroup) t)))
     (t
      (cons (string< (caar l) (caar r)) nil)))))

(defun describe-personal-keybindings ()
  \"Display all the personal keybindings defined by `bind-key'.\"
  (interactive)
  (with-output-to-temp-buffer \"*Personal Keybindings*\"
    (princ \"Key name          Command                                 Comments
----------------- --------------------------------------- ---------------------
\")
    (let (last-binding)
      (dolist (binding
               (setq personal-keybindings
                     (sort personal-keybindings
                           #'(lambda (l r)
                               (car (compare-keybindings l r))))))

        (if (not (eq (cdar last-binding) (cdar binding)))
            (princ (format \"\\n\\n%s\\n%s\\n\\n\"
                           (cdar binding)
                           (make-string 79 ?-)))
          (if (and last-binding
                   (cdr (compare-keybindings last-binding binding)))
              (princ \"\\n\")))

        (let* ((key-name (caar binding))
               (at-present (lookup-key (or (symbol-value (cdar binding))
                                           (current-global-map))
                                       (read-kbd-macro key-name)))
               (command (nth 1 binding))
               (was-command (nth 2 binding))
               (command-desc (get-binding-description command))
               (was-command-desc (and was-command
                                      (get-binding-description was-command)))
               (at-present-desc (get-binding-description at-present))
               )
          (princ
           (format
            \"%-18s%-40s%s\\n\"
            key-name (format \"`%s\\'\" command-desc)
            (if (string= command-desc at-present-desc)
                (if (or (null was-command)
                        (string= command-desc was-command-desc))
                    \"\"
                  (format \"was `%s\\'\" was-command-desc))
              (format \"[now: `%s\\']\" at-present)))))

        (setq last-binding binding)))))

(provide 'bind-key)
;; Local Variables:
;; indent-tabs-mode: nil
;; End:
;;; bind-key.el ends here
"]) (bibslurp . [(20130904 1053) ((s (1 6 0)) (dash (1 5 0))) "retrieve BibTeX entries from NASA ADS" single ";;; Commentary:

;; Provides a function `bibslurp-query-ads', which reads a search
;; string from the minibuffer, sends the query to NASA ADS
;; (http://adswww.harvard.edu/), and displays the results in a new
;; buffer called \"ADS Search Results\".

;; The \"ADS Search Results\" buffer opens in `bibslurp-mode', which
;; provides a few handy functions.  Typing the number preceding an
;; abstract and hitting RET calls `bibslurp-slurp-bibtex', which
;; fetches the bibtex entry corresponding to the abstract and saves it
;; to the kill ring.  Typing 'a' instead pulls up the abstract page.
;; At anytime, you can hit 'q' to quit bibslurp-mode and restore the
;; previous window configuration.

;;; Example usage:

;; add an entry to a bibtex buffer:
;;   M-x bibslurp-query-ads RET ^Quataert 2008
;;   1 RET
;;   q
;;   C-y

;; For more examples and information see the project page at
;; http://astro.berkeley.edu/~mkmcc/software/bibslurp.html

;;; Notes about the implementation:

;; 1. As far as I know, ADS doesn't have an API for searching its
;;   database, and emacs doesn't have functionality to parse html.
;;   Since I don't want to implement a browser in emacs lisp, that
;;   leaves me parsing the html pages with regexps.  While that would
;;   be a terrible idea under ordinary circumstances, the ADS pages
;;   are all automatically generated, so they should conform to a
;;   pretty regular format.  That gives me some hope...

;; 2. There are many ways you can customize the behaviour of biblurp.
;;    I define font-lock faces at the beginning of the file so you can
;;    add these to your color theme.  I also run a mode hook at the
;;    end of `bibslurp-mode', so you can inject your own code at that
;;    point.

;;; Installation:

;; Use package.el. You'll need to add MELPA to your archives:

;; (require 'package)
;; (add-to-list 'package-archives
;;              '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)

;; Alternatively, you can just save this file and do the standard
;; (add-to-list 'load-path \"/path/to/bibslurp.el\")
;; (require 'bibslurp)

"]) (bibretrieve . [(20131013 1132) ((auctex (11 87)) (emacs (24 3))) "Retrieving BibTeX entries from the web" tar ";;; Commentary:
;;
;; This program searches the web for BibTeX entries matching the given
;; Author end/or Title.  It displays then a selection buffer, that permits
;; to examine and choose entries to add to the bibliography file, or to
;; insert into the current buffer.

;; The function is called through \"M-x bibretrieve\".  Then it prompts for
;; author and title.  For an advanced use, that permits to select which
;; backend to use, call it with \"C-u M-x bibretrieve\".

;; The configuration is done with the variable bibretrieve-backends, that
;; is an alist with pairs containing the backend to use and the timeout
;; for it. See the README file for the list of supported backends.

;; To create a new backend define a new function
;; \"bibretrieve-BACKEND-create-url\" that takes as input author and title
;; and returns a url that, when retrieved, gives some bibtex entries.
;; The function should be defined in \"bibretrieve-base.el\".
;; It is then necessary to advise bibretrieve of the new backend,
;; adding it to the list \"bibretrieve-installed-backends\".

;; The url is retrieved via mm-url.  You may want to customize the
;; variable mm-url-use-external and mm-url-program.

;; Acknowledgments: This program has been inspired by bibsnarf.  The
;; functions that create the urls for most backends are taken from
;; there.  This program uses the library mm-url.  This programs also uses
;; lot of function of RefTeX.  The selection process is entirely based on
;; reftex-sel.  Many function have also been adapted from there.

"]) (bf-mode . [(20130403 742) nil "Browse file persistently on dired" single ";;; Commentary:

;; What is this:
;;   Bf(Browse File)-mode is minor-mode for dired. Bf-mode allows you
;;   to browse file easily and directly, despite of keeping dired.
;;
;; Features:
;;   * easy browsing (texts, images, ... )
;;   * allow to use dired command (mark, delete, ... )
;;   * browse contents in directory
;;   * browse contents list in archived file such as .tar.* or .lzh
;;   * browse html files with w3m
;;
;; Install:
;;   1. Put \"bf-mode.el\" into your load-path directory.
;;   2. Add the following line to your dot.emacs.
;;
;;     (require 'bf-mode)
;;
;;   3. If you need to configure, add the following lines in your dot.emacs.
;;
;;     ;; list up file extensions which should be excepted
;;     (setq bf-mode-except-exts
;;           (append '(\"\\\\.dump$\" \"\\\\.data$\" \"\\\\.mp3$\" \"\\\\.lnk$\")
;;                   bf-mode-except-exts))
;;
;;     ;; list up file extensions which should be forced browsing
;;      (setq bf-mode-force-browse-exts
;;           (append '(\"\\\\.txt$\" \"\\\\.and.more...\")
;;                   bf-mode-force-browse-exts))
;;
;;     ;; browsable file size maximum
;;     (setq bf-mode-browsing-size 100) ;; 100 killo bytes
;;
;;     ;; browsing htmls with w3m (needs emacs-w3m.el and w3m)
;;     (setq bf-mode-html-with-w3m t)
;;
;;     ;; browsing archive file (contents listing) verbosely
;;     (setq bf-mode-archive-list-verbose t)
;;
;;     ;; browing directory (file listing) verbosely
;;     (setq bf-mode-directory-list-verbose t)
;;
;;     ;; start bf-mode immediately after starting dired
;;     (setq bf-mode-enable-at-starting-dired t)
;;
;;     ;; quitting dired directly from bf-mode
;;     (setq bf-mode-directly-quit t)

;; Usage:
;;   1. invoke dired by C-x d.
;;   2. b               enter bf-mode
;;   3. b or q          exit from bf-mode
;;   4. n or p          move cursor to target file in order to browse it.
;;   5. SPC             scroll up browsing window
;;      S-SPC           scroll down browsing window
;;   6. r               toggle read-only
;;      j               toggle browsing alternatively (html, archive and more)
;;      s               adjust browsable file size

"]) (better-defaults . [(20130422 1322) nil "Fixing weird quirks and poor defaults" single ";;; Commentary:

;; There are a number of unfortunate facts about the way Emacs works
;; out of the box. While all users will eventually need to learn their
;; way around in order to customize it to their particular tastes,
;; this package attempts to address the most obvious of deficiencies
;; in uncontroversial ways that nearly everyone can agree upon.

;; Obviously there are many further tweaks you could do to improve
;; Emacs, (like those the Starter Kit and similar packages) but this
;; package focuses only on those that have near-universal appeal.

"]) (bert . [(20131117 214) nil "BERT serialization library for Emacs" single ";;; Commentary:

;; Translation to and from BERT (Binary ERlang Term) format.
;;
;; See the BERT specification at http://bert-rpc.org/.
;;
;; The library provides two functions, `bert-pack' and `bert-unpack',
;; and supports the following Elisp types:
;;  - integers
;;  - floats
;;  - lists
;;  - symbols
;;  - vectors
;;  - strings
;;
;; The Elisp NIL is encoded as an empty list rather than a BERT atom,
;; BERT nil, or BERT false.
;;
;; Elisp vectors and strings are encoded as BERT tuples resp. BERT
;; binaries.
;;
;; Complex types are not supported.  Encoding and decoding of complex
;; types can be implemented as a thin layer on top of this library.
;;
;; Because Elisp integers are 30-bit, only integers of this size can
;; be correctly translated.  In particular, BERT bignums are not
;; supported.

"]) (bdo . [(20130910 126) nil "Do things to a browser page from Emacs. BETA!" tar ";;; Commentary:
;;
"]) (bbdb2erc . [(20130606 2329) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single ";;; Commentary:

;; Usage: put (require 'bbdb2erc) in your ~/.emacs

;; When the bbdb window pops up, the minibuffer should tell you if the
;; person is online (otherwise it's silent). You can make it tell you
;; again by pressing `I' in the bbdb window. You specify the nick(s)
;; of the person in the `irc-nick' field in BBDB, as in the
;; erc-bbdb.el package.

;; This package also overrides the default binding of `i' in bbdb to
;; start an ERC chat with the record at point. You can read the bbdb
;; info manual by typing M-x bbdb-info instead, or return it to normal
;; with (define-key bbdb-mode-map (kbd \"i\") 'bbdb-info)

;; If you use gnus, you might also want to go straight from a
;; summary/article to a chat with the sender, put this in your
;; ~/.emacs to achieve that:
;; (define-key gnus-summary-mode-map (kbd \"i\") 'bbdb2erc-pm)



"]) (bbdb-vcard . [(20130605 1139) ((bbdb (3 0))) "vCard import/export for BBDB" tar ";;; Commentary:
;;
;; Purpose
;; =======
;;
;; Import and export of vCards as defined in RFC 2425 and RFC 2426
;; to/from The Insidious Big Brother Database (BBDB).
;;
;;
;; Usage
;; =====
;;
;; vCard Import
;; ------------
;;
;; On a file, a buffer or a region containing one or more vCards, use
;; `bbdb-vcard-import-file', `bbdb-vcard-import-buffer', or
;; `bbdb-vcard-import-region' respectively to import them into BBDB.
;;
;; Preferred input format is vCard version 3.0.  Version 2.1 vCards
;; are converted to version 3.0 on import.
;;
;;
;; vCard Export
;; ------------
;;
;; In buffer *BBDB*, press v to export the record under point.  Press
;; * v to export all records in buffer into one vCard file.  Press *
;; C-u v to export them into one file each.
;;
;; To put one or all vCard(s) into the kill ring, press V or * V
;; respectively.
;;
;; Exported vCards are always version 3.0.  They can be re-imported
;; without data loss with one exception: North American phone numbers
;; lose their structure and are stored as flat strings.
;;
;;
;; There are a few customization variables grouped under `bbdb-vcard'.
;;
;;
;; Installation
;; ============
;;
;; Put this file and file vcard.el into your `load-path' and add the
;; following line to your Emacs initialization file:
;;
;;   (require 'bbdb-vcard)
;;
;;
;; Implementation
;; ==============
;;
;; vCard Import
;; ------------
;;
;; For conversion of v2.1 vCards into v3.0 on import, Noah Friedman's
;; vcard.el is needed.
;;
;; An existing BBDB record is extended by new information from a vCard
;;
;;   (a) if name and company and an email address match
;;   (b) or if name and company match
;;   (c) or if name and an email address match
;;   (d) or if name and birthday match
;;   (e) or if name and a phone number match.
;;
;; Otherwise, a fresh BBDB record is created.
;;
;; When `bbdb-vcard-try-merge' is set to nil, there is always a fresh
;; record created.
;;
;; In cases (c), (d), and (e), if the vCard has ORG defined, this ORG
;; would overwrite an existing Company in BBDB.
;;
;; Phone numbers are always imported as strings.
;;
;; For vCard types that have more or less direct counterparts in BBDB,
;; labels and parameters are translated and structured values
;; (lastname; firstname; additional names; prefixes etc.) are
;; converted appropriately with the risk of some (hopefully
;; unessential) information loss.  For labels of the vCard types ADR
;; and TEL, parameter translation is defined in
;; `bbdb-vcard-import-translation-table'.
;;
;; If there is a REV element, it is stored in BBDB's creation-date in
;; newly created BBDB records, or discarded for existing ones.  Time
;; and time zone information from REV are stored there as well if
;; there are any, but are ignored by BBDB (v2.36).
;;
;; VCard type prefixes (A.ADR:..., B.ADR:... etc.) are stripped off
;; and discarded from the following types: N, FN, NICKNAME, ORG (first
;; occurrence), ADR, TEL, EMAIL, URL, BDAY (first occurrence), NOTE.
;;
;; VCard types that are prefixed `X-BBDB-' are stored in BBDB without
;; the prefix.
;;
;; VCard type X-BBDB-ANNIVERSARY may contain (previously exported)
;; newline-separated non-birthday anniversaries that are meant to be
;; read by org-mode.
;;
;; All remaining vCard types that don't match the regexp in
;; `bbdb-vcard-skip-on-import' and that have a non-empty value are
;; stored unaltered in the BBDB Notes alist where, for instance,
;; `TZ;VALUE=text:-05:00' is stored as `(tz\\;value=text . \"-05:00\")'.
;; From the BBDB data fields AKA, Phones, Addresses, Net Addresses,
;; and Notes, duplicates are removed, respectively.
;;
;; VCards found inside other vCards (as values of type AGENT) are
;; imported as well.
;;
;;
;; Handling of the individual types defined in RFC2426 during import
;; (assuming default label translation and no vCard type exclusion):
;; \"
;; |----------------------+----------------------------------------|
;; | VCARD TYPE;          | STORAGE IN BBDB                        |
;; | PARAMETERS           |                                        |
;; |----------------------+----------------------------------------|
;; | VERSION              | -                                      |
;; |----------------------+----------------------------------------|
;; | N                    | First occurrence:                      |
;; |                      | Firstname                              |
;; |                      | Lastname                               |
;; |                      |                                        |
;; |                      | Rest:                                  |
;; |                      | AKAs (append)                          |
;; |----------------------+----------------------------------------|
;; | FN                   | AKAs (append)                          |
;; | NICKNAME             | AKAs (append)                          |
;; |----------------------+----------------------------------------|
;; | ORG                  | First occurrence:                      |
;; |                      | Company                                |
;; |                      |                                        |
;; |                      | Rest:                                  |
;; |                      | Notes<org                              |
;; |                      | (repeatedly)                           |
;; |----------------------+----------------------------------------|
;; | ADR;TYPE=x,HOME,y    | Addresses<Home                         |
;; | ADR;TYPE=x;TYPE=HOME | Addresses<Home                         |
;; | ADR;TYPE=x,WORK,y    | Addresses<Office                       |
;; | ADR;TYPE=x;TYPE=WORK | Addresses<Office                       |
;; | ADR;TYPE=x,y,z       | Addresses<x,y,z                        |
;; | ADR;TYPE=x;TYPE=y    | Addresses<x,y                          |
;; | ADR                  | Addresses<Office                       |
;; |----------------------+----------------------------------------|
;; | TEL;TYPE=x,HOME,y    | Phones<Home (append)                   |
;; | TEL;TYPE=x;TYPE=HOME | Phones<Home (append)                   |
;; | TEL;TYPE=x,WORK,y    | Phones<Office (append)                 |
;; | TEL;TYPE=x;TYPE=WORK | Phones<Office (append)                 |
;; | TEL;TYPE=x,CELL,y    | Phones<Mobile (append)                 |
;; | TEL;TYPE=x;TYPE=CELL | Phones<Mobile (append)                 |
;; | TEL;TYPE=x,y,z       | Phones<x,y,z (append)                  |
;; | TEL;TYPE=x;TYPE=y    | Phones<x,y (append)                    |
;; | TEL                  | Phones<Office (append)                 |
;; |----------------------+----------------------------------------|
;; | EMAIL;TYPE=x,y,z     | Net-Addresses (append)                 |
;; | URL                  | Notes<www                              |
;; |----------------------+----------------------------------------|
;; | BDAY                 | Notes<anniversary (append as birthday) |
;; | X-BBDB-ANNIVERSARY   | Notes<anniversary (append)             |
;; |----------------------+----------------------------------------|
;; | NOTE                 | Notes<notes (append)                   |
;; | REV                  | Notes<creation-date                    |
;; | CATEGORIES           | Notes<mail-alias (append)              |
;; | SORT-STRING          | Notes<sort-string                      |
;; | KEY                  | Notes<key                              |
;; | GEO                  | Notes<geo                              |
;; | TZ                   | Notes<tz                               |
;; | PHOTO                | Notes<photo                            |
;; | LABEL                | Notes<label                            |
;; | LOGO                 | Notes<logo                             |
;; | SOUND                | Notes<sound                            |
;; | TITLE                | Notes<title                            |
;; | ROLE                 | Notes<role                             |
;; | AGENT                | Notes<agent                            |
;; | MAILER               | Notes<mailer                           |
;; | UID                  | Notes<uid                              |
;; | PRODID               | Notes<prodid                           |
;; | CLASS                | Notes<class                            |
;; | X-foo                | Notes<x-foo                            |
;; | X-BBDB-bar           | Notes<bar                              |
;; |----------------------+----------------------------------------|
;; | anyJunK;a=x;b=y      | Notes<anyjunk;a=x;b=y                  |
;; |----------------------+----------------------------------------|
;; \"
;;
;; vCard Export
;; ------------
;;
;; VCard types N (only fields lastname, firstname) and FN both come
;; from BBDB's Name.
;;
;; Members of BBDB field AKA are stored comma-separated under the
;; vCard type NICKNAME.
;;
;; Labels of Addresses and Phones are translated as defined in
;; `bbdb-vcard-export-translation-table' into type parameters of
;; vCard types ADR and TEL, respectively.
;;
;; In vCard type ADR, fields postbox and extended address are always
;; empty.  Newlines which subdivide BBDB Address fields are converted
;; into commas subdividing vCard ADR fields.
;;
;; The value of 'anniversary in Notes is supposed to be subdivided by
;; newlines.  The birthday part (either just a date or a date followed
;; by \\\"birthday\\\") is stored under vCard type BDAY. The rest is
;; stored newline-separated in the non-standard vCard type
;; X-BBDB-ANNIVERSARY.
;;
;; Field names listed in `bbdb-vcard-x-bbdb-candidates' are in the
;; exported vCard prepended by `X-BBDB-'.
;;
;; The creation-date of the BBDB record is stored as vCard type REV.
;;
;; Remaining members of BBDB Notes are exported to the vCard without
;; change.
;;


"]) (bbdb-ext . [(20130513 1152) ((bbdb (2 36))) "Extra commands for BBDB" single ";;; Commentary: 
;;
;; Bitcoin donations gratefully accepted: 1GWis4cd4aokQrWxAd3ZASrsye5CGq5LJY
;;
;;  This file contains some extra commands for BBDB. Here is a list of the keybindings:

;; \"g\"    : Search address of current record on google maps
;; \"S d\"  : Show records with address field matching regexp (use \"^$\" to show records with no address)
;; \"/ S\"  : Show records that match regexp in either name, company, network, address or notes fields
;; \"/ n\"  : Show records with name field matching regexp
;; \"/ c\"  : Show records with company field matching regexp
;; \"/ a\"  : Show records with network address field matching regexp
;; \"/ o\"  : Show records with notes field matching regexp
;; \"/ p\"  : Show records with phones field matching regexp
;; \"/ d\"  : Show records with address field matching regexp (use \"^$\" to show records with no address)
;; \"/ /\"  : Show all records

"]) (bbdb . [(20140112 1856) nil "The Insidious Big Brother Database for GNU Emacs" tar nil]) (bbcode-mode . [(20130227 1137) nil "Major mode for writing BBCode markup" single ";;; Commentary:
;;
;; Put this file in your Emacs Lisp path (i.e. site-lisp) and add
;; this to your `.emacs' file:
;;
;;     (require 'bbcode-mode)
;;
;; Files with the '.bbcode' extension automatically enable
;; bbcode-mode.  No other extensions are associated with the mode.

"]) (batch-mode . [(20130824 1158) nil "major mode for editing ESRI batch scrips" single nil]) (bash-completion . [(20130526 544) nil "BASH completion for the shell buffer" tar ";;; Commentary:
;;
;; This file defines dynamic completion hooks for shell-mode and
;; shell-command prompts that are based on bash completion.
;;
;; You will need shell-command.el to get tab completion in the
;; minibuffer. See http://www.namazu.org/~tsuchiya/elisp/shell-command.el
;;
;; Bash completion for emacs:
;; - is aware of bash builtins, aliases and functions
;; - does file expansion inside of colon-separated variables
;;   and after redirections (> or <)
;; - escapes special characters when expanding file names
;; - is configurable through programmable bash completion
;;
;; When the first completion is requested in shell model or a shell
;; command, bash-completion.el starts a separate bash
;; process.  Bash-completion.el then uses this process to do the actual
;; completion and includes it into Emacs completion suggestions.
;;
;; A simpler and more complete alternative to bash-completion.el is to
;; run a bash shell in a buffer in term mode(M-x `ansi-term').
;; Unfortunately, many Emacs editing features are not available when
;; running in term mode.  Also, term mode is not available in
;; shell-command prompts.
;;
;; INSTALLATION
;;
;; 1. copy bash-completion.el into a directory that's on Emacs load-path
;; 2. add this into your .emacs file:
;;   (autoload 'bash-completion-dynamic-complete \\\"bash-completion\\\"
;;     \\\"BASH completion hook\\\")
;;   (add-hook 'shell-dynamic-complete-functions
;; 	'bash-completion-dynamic-complete)
;;   (add-hook 'shell-command-complete-functions
;; 	'bash-completion-dynamic-complete)
;;
;;   or simpler, but forces you to load this file at startup:
;;
;;   (require 'bash-completion)
;;   (bash-completion-setup)
;;
;; 3. reload your .emacs (M-x `eval-buffer') or restart
;;
;; Once this is done, use <TAB> as usual to do dynamic completion from
;; shell mode or a shell command minibuffer, such as the one started
;; for M-x `compile'. Note that the first completion is slow, as emacs
;; launches a new bash process.
;;
;; You'll get better results if you turn on programmable bash completion.
;; On Ubuntu, this means running:
;;   sudo apt-get install bash-completion
;; and then adding this to your .bashrc:
;;   . /etc/bash_completion
;;
;; Right after enabling programmable bash completion, and whenever you
;; make changes to you .bashrc, call `bash-completion-reset' to make
;; sure bash completion takes your new settings into account.
;;
;; Loading /etc/bash_completion often takes time, and is not necessary
;; in shell mode, since completion is done by a separate process, not
;; the process shell-mode process.
;;
;; To turn off bash completion when running from emacs but keep it on
;; for processes started by bash-completion.el, add this to your .bashrc:
;; if [[ ( -z \"$INSIDE_EMACS\" || \"$EMACS_BASH_COMPLETE\" = \"t\" ) &&\\
;;      -f /etc/bash_completion ]]; then
;;   . /etc/bash_completion
;; fi
;;
;; Emacs sets the environment variable INSIDE_EMACS to the processes
;; started from it. Processes started by bash-completion.el have
;; the environment variable EMACS_BASH_COMPLETE set to t.
;;
;; CAVEATS
;;
;; Using a separate process for doing the completion has several
;; important disadvantages:
;; - bash completion is slower than standard emacs completion
;; - the first completion can take a long time, since a new bash process
;;   needs to be started and initialized
;; - the separate process is not aware of any changes made to bash
;;   in the current buffer.
;;   In a standard terminal, you could do:
;;     $ alias myalias=ls
;;     $ myal<TAB>
;;   and bash would propose the new alias.
;;   Bash-completion.el cannot do that, as it is not aware of anything
;;   configured in the current shell. To make bash-completion.el aware
;;   of a new alias, you need to add it to .bashrc and restart the
;;   completion process using `bash-completion-reset'.
;;
;; COMPATIBILITY
;;
;; bash-completion.el is quite sensitive to the OS and BASH version.
;; This package is known to work on the following environment:
;;   GNU Emacs 22.3.1 (Aquamacs 1.7)
;;   GNU Emacs 22.1.1 (OSX 10.5)
;;   GNU Emacs 22.1.1 (Ubuntu 8.04)
;;   GNU Emacs 23.0.94.1 (Ubuntu 8.10)
;;
;; and using the following bash versions:
;;   BASH 3.2.17
;;   BASH 3.2.32
;;   BASH 3.2.39
;;
;; bash-completion.el does not works on XEmacs.
;;

"]) (base16-theme . [(20130413 1655) nil "No description available." tar nil]) (backup-walker . [(20130720 816) nil "quickly traverse all backups of a file" single ";;; Commentary:

;; I never delete backups.  They are versioned in their own directory, happy
;; and safe.  My fingers skip to C-x C-s whenever I pause to think about
;; anything.  Even when I'm working with VCS, I save far more often than I
;; commit.
;;
;; This package helps me traverse those backups if I'm looking for something.
;;
;; The typical workflow is:
;;
;;   1) I'm in a buffer and realize I need to check some backups.
;;
;;        M-x backup-walker-start
;;
;;   2) I press <p> to go backwards in history until I see something
;;      interesting.  Then I press <enter> to bring it up.  OOPs this isn't
;;      it, I go back to the backup-walker window and find the right file.
;;
;;   3) I get what I need from the backup, go back to backup-walker, and press
;;      <q> and kill all open backups.
;;
;;   4) the end.
;;
;; Additionally, note that all the diff-mode facilities are available in the
;; `backup-walker' buffer.
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

"]) (backup-each-save . [(20130704 1432) nil "backup each savepoint of a file" single ";;; Commentary:

;; Ever wish to go back to an older saved version of a file?  Then
;; this package is for you.  This package copies every file you save
;; in Emacs to a backup directory tree (which mirrors the tree
;; structure of the filesystem), with a timestamp suffix to make
;; multiple saves of the same file unique.  Never lose old saved
;; versions again.

;; To activate globally, place this file in your `load-path', and add
;; the following lines to your ~/.emacs file:
;;
;; (require 'backup-each-save)
;; (add-hook 'after-save-hook 'backup-each-save)

;; To activate only for individual files, add the require line as
;; above to your ~/.emacs, and place a local variables entry at the
;; end of your file containing the statement:
;;
;; eval: (add-hook (make-local-variable 'after-save-hook) 'backup-each-save)
;;
;; NOTE:  I would give a full example of how to do this here, but it
;; would then try to activate it for this file since it is a short
;; file and the docs would then be within the \"end of the file\" local
;; variables region.  :)

;; To filter out which files it backs up, use a custom function for
;; `backup-each-save-filter-function'.  For example, to filter out
;; the saving of gnus .newsrc.eld files, do:
;;
;; (defun backup-each-save-no-newsrc-eld (filename)
;;   (cond
;;    ((string= (file-name-nondirectory filename) \".newsrc.eld\") nil)
;;    (t t)))
;; (setq backup-each-save-filter-function 'backup-each-save-no-newsrc-eld)

"]) (backtrace-mode . [(20130223 1154) nil "A better way to browse /var/log/messages files" single nil]) (back-button . [(20131122 959) ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Visual navigation through mark rings" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'back-button)
;;
;;     (back-button-mode 1)
;;
;;     press the plus sign in the toolbar to create a mark
;;
;;     press the arrows in the toolbar to navigate marks
;;
;;     or use C-x C-Space as usual, then try C-x C-<right>
;;     to reverse the operation
;;
;; Explanation
;;
;; Back-button provides an alternative method for navigation by
;; analogy with the \"back\" button in a web browser.
;;
;; Every Emacs command which pushes the mark leaves behind an
;; invisible record of the location of the point at that moment.
;; Back-button moves the point back and forth over all the positions
;; where some command pushed the mark.
;;
;; This is essentially a replacement for `pop-global-mark', and the
;; default keybindings (when the minor mode is activated) override
;; that command.  The differences with `pop-global-mark' are:
;;
;;    - Visual index showing how far you have traveled in the
;;      mark ring.
;;
;;    - Easy way to move both forward and backward in the ring.
;;
;;    - Pushes a mark on the first of a series of invocations, so you
;;      can always return to where you issued the command.
;;
;;    - Skips duplicate positions, so that the interactive command
;;      always moves the point if possible.
;;
;; Commands and keybindings are also included to give identical
;; semantics for navigating the local (per-buffer) `mark-ring'.  This
;; consistency in navigation comes at the cost of pushing the mark
;; twice, so experienced Emacs users may prefer to unbind these
;; commands and/or set `back-button-never-push-mark' in customize.
;;
;; To use back-button, place the back-button.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'back-button)
;;     (back-button-mode 1)
;;
;; Default key bindings:
;;
;;     C-x C-<SPC>    go back in `global-mark-ring', respects prefix arg
;;     C-x C-<left>   go back in `global-mark-ring'
;;     C-x C-<right>  go forward in `global-mark-ring'
;;
;;     C-x <SPC>      go back in (buffer-local) `mark-ring', respects prefix arg
;;     C-x <left>     go back in (buffer-local) `mark-ring'
;;     C-x <right>    go forward in (buffer-local) `mark-ring'
;;
;; When the smartrep package is installed, the C-x prefix need not
;; be used for consecutive back-button commands.
;;
;; When the visible-mark package is installed, marks will be
;; made visible in the current buffer during navigation.
;;
;; See Also
;;
;;     M-x customize-group RET back-button RET
;;     M-x customize-group RET editing-basics RET
;;     M-x customize-group RET visible-mark RET
;;     M-x customize-group RET nav-flash RET
;;
;; Notes
;;
;;     This library depends upon other commands pushing the mark to
;;     provide useful waypoints for navigation.  This is a common
;;     convention, but not universal.
;;
;;     The function `back-button-push-mark-local-and-global' may be
;;     useful to call from Lisp.  It is a replacement for `push-mark'
;;     which unconditionally pushes onto the global mark ring,
;;     functionality which is not possible using vanilla `push-mark'.
;;
;;     Theoretically, `back-button-push-mark-local-and-global' could
;;     cause issues with Lisp code which depends on the convention that
;;     `global-mark-ring' not contain consecutive marks in the same
;;     buffer.  However, no such issues have been observed.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, at the time of writing
;;     GNU Emacs version 24.3           : yes
;;     GNU Emacs version 23.3           : yes
;;     GNU Emacs version 22.2           : yes, with some limitations
;;     GNU Emacs version 21.x and lower : unknown
;;
;;     Uses if present: smartrep.el, nav-flash.el, visible-mark.el,
;;                      ucs-utils.el
;;
;; Bugs
;;
;;     Pressing the toolbar back-button can navigate to a different
;;     buffer with a different toolbar (and no back-button).
;;
;;     Toolbar button disabling is not dependable.  Logic is left
;;     in place but unused.
;;
;;     Toolbar shift-click does not work in Cocoa Emacs.
;;
;;     Toolbar shift-click is not consistent with keyboard bindings
;;     (control for global ring, unmodified for local ring)
;;
;;     Displaying the index in a popup requires unreleased popup-volatile.el
;;
;; TODO
;;
;;     better toolbar icons
;;
;;     bug in visible-mark bug when mark is on last char of line
;;
;;     integrated delete-mark
;;
;;     could remove smartrep and implement mini-mode that includes
;;     extra commands such as delete-mark and perhaps digits
;;     for visible marks
;;
;;     Used to remember thumb between series, so long as no mark was
;;     pushed, now that does not work b/c these functions themselves
;;     push the mark -- make that an option?  Maybe the right way is
;;     to keep it out-of-band.
;;
;;     this is a crude but general way to force a navigation
;;     command to push the mark:
;;
;;         (defvar push-mark-before-goto-char nil)
;;         (defadvice goto-char (before push-mark-first activate)
;;           (when push-mark-before-goto-char
;;             (back-button-push-mark-local-and-global nil t)))
;;         ;; example use
;;         (defun ido-imenu-push-mark ()
;;           (interactive)
;;           (let ((push-mark-before-goto-char t))
;;             (ido-imenu)))
;;
;;     A better way would be: using a pre-command-hook, track series of
;;     related navigation commands (defined by a property placed on
;;     each command).  Push a global mark for the first of a related
;;     series, don't push for subsequent.  There is already a property
;;     placed on some navigation commands which might be sufficient -
;;     or is that only scroll commands?  There is a package AutoMark
;;     which purports to do this, but it doesn't do the hard part of
;;     classifying all commands.
;;
;;; License
;;
;; Simplified BSD License:
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;    1. Redistributions of source code must retain the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer.
;;
;;    2. Redistributions in binary form must reproduce the above
;;       copyright notice, this list of conditions and the following
;;       disclaimer in the documentation and/or other materials
;;       provided with the distribution.
;;
;; This software is provided by Roland Walker \"AS IS\" and any express
;; or implied warranties, including, but not limited to, the implied
;; warranties of merchantability and fitness for a particular
;; purpose are disclaimed.  In no event shall Roland Walker or
;; contributors be liable for any direct, indirect, incidental,
;; special, exemplary, or consequential damages (including, but not
;; limited to, procurement of substitute goods or services; loss of
;; use, data, or profits; or business interruption) however caused
;; and on any theory of liability, whether in contract, strict
;; liability, or tort (including negligence or otherwise) arising in
;; any way out of the use of this software, even if advised of the
;; possibility of such damage.
;;
;; The views and conclusions contained in the software and
;; documentation are those of the authors and should not be
;; interpreted as representing official policies, either expressed
;; or implied, of Roland Walker.
;;
"]) (babel . [(20131231 725) nil "interface to web translation services such as Babelfish" single ";;; Commentary:

;;; Overview ==========================================================
;;
;; This module provides an Emacs interface to different translation
;; services available on the Internet. You give it a word or paragraph
;; to translate and select the source and destination languages, and
;; it connects to the translation server, retrieves the data, and
;; presents it in a special *babel* buffer. Currently the following
;; backends are available:
;;
;;  * the FOSS MT platform Apertium
;;  * the Google service at translate.google.com
;;  * the Transparent Language motor at FreeTranslation.com

;;
;; Entry points: either 'M-x babel', which prompts for a phrase, a
;; language pair and a backend, or 'M-x babel-region', which prompts
;; for a language pair and backend, then translates the currently
;; selected region, and 'M-x babel-buffer' to translate the current
;; buffer.
;;

;; If you ask for a language combination which several backends could
;; translate, babel.el will allow you to choose which backend to
;; use. Since most servers have limits on the quantity of text
;; translated, babel.el will split long requests into translatable
;; chunks and submit them sequentially.
;;
;; Please note that the washing process (which takes the raw HTML
;; returned by a translation server and attempts to extract the useful
;; information) is fragile, and can easily be broken by a change in
;; the server's output format. In that case, check whether a new
;; version is available (and if not, warn me; I don't translate into
;; Welsh very often).
;;
;; Also note that by accessing an online translation service you are
;; bound by its Terms and Conditions; in particular
;; FreeTranslation.com is for \"personal, non-commercial use only\".
;;
;;
;; Installation ========================================================
;;
;; Place this file in a directory in your load-path (to see a list of
;; appropriate directories, type 'C-h v load-path RET'). Optionally
;; byte-compile the file (for example using the 'B' key when the
;; cursor is on the filename in a dired buffer). Then add the
;; following lines to your ~/.emacs.el initialization file:
;;
;;   (autoload 'babel \"babel\"
;;     \"Use a web translation service to translate the message MSG.\" t)
;;   (autoload 'babel-region \"babel\"
;;     \"Use a web translation service to translate the current region.\" t)
;;   (autoload 'babel-as-string \"babel\"
;;     \"Use a web translation service to translate MSG, returning a string.\" t)
;;   (autoload 'babel-buffer \"babel\"
;;     \"Use a web translation service to translate the current buffer.\" t)
;;
;; babel.el requires emacs >= 23
;;
;;
;; Backend information =================================================
;;
;; A babel backend named <zob> must provide three functions:
;;
;;    (babel-<zob>-translation from to)
;;
;;    where FROM and TO are three-letter language abbreviations from
;;    the alist `babel-languages'. This should return non-nil if the
;;    backend is capable of translating between these two languages.
;;
;;    (babel-<zob>-fetch msg from to)
;;
;;    where FROM and TO are as above, and MSG is the text to
;;    translate. Connect to the appropriate server and fetch the raw
;;    HTML corresponding to the request.
;;
;;    (babel-<zob>-wash)
;;
;;    When called on a buffer containing the raw HTML provided by the
;;    server, remove all the uninteresting text and HTML markup.
;;
;; I would be glad to incorporate backends for new translation servers
;; which are accessible to the general public.
;;
;; babel.el was inspired by a posting to the ding list by Steinar Bang
;; <sb@metis.no>. Morten Eriksen <mortene@sim.no> provided several
;; patches to improve InterTrans washing. Thanks to Per Abrahamsen and
;; Thomas Lofgren for pointing out a bug in the keymap code. Matt
;; Hodges <pczmph@unix.ccc.nottingham.ac.uk> suggested ignoring case
;; on completion. Colin Marquardt suggested
;; `babel-preferred-to-language'. David Masterson suggested adding a
;; menu item. Andy Stewart provided
;; `babel-remember-window-configuration' functionality, output window
;; adjustments and more improvements.
;;
;; User quotes: Dieses ist die gr\303\266\303\237te Sache seit geschnittenem Brot.
;;                 -- Stainless Steel Rat <ratinox@peorth.gweep.net>

;;; History

;;    Discontinued Log (Use GIT: git://github.com/juergenhoetzel/babel.git)

;;    1.4 * `babel-region' now yank the translation instead insert him at
;;          point.

;;    1.3 n* Added new Google languages

;;    1.2 * Added FOSS MT platform Apertium
;;         (by Kevin Brubeck Unhammer)
;;	  * Assume UTF-8, if HTTP header missing

;;    1.1 * Fixed invalid language code mapping for serveral
;;          languages

;;    1.0 * Fixed Google backend (new regex)
;;        * New custom variables `babel-buffer-name',
;;         `babel-echo-area', `babel-select-output-window'
;;        * Disable use of echo area usage on xemacs if lines > 1
;;          (resize of minibuffer does not work reliable)
;;        * `babel-url-retrieve' fix for xemacs from Uwe Brauer

;;    0.9  * Use `babel-buffer-name' for output buffer

;;    0.8  * Remember window config if `babel-remember-window-configuration'
;;           is non-nil.
;;         * made *babel* buffer read-only
;;         * use echo area (like `shell-command')
;;         * New functions `babel-as-string-default',`babel-region-default',
;;           `babel-buffer-default', `babel-smart' (provided by Andy)


;;    0.7  * error handling if no backend is available for translating
;;           the supplied languages
;;	   * rely on url-* functions (for charset decoding) on GNU emacs
;;         * increased chunk size for better performance
;;         * added support for all Google languages
;;         * `babel-region' with prefix argument inserts the translation
;;            output at point.

;;    0.6  * get rid of w3-region (implementend basic html entity parsing)
;;         * get rid of w3-form-encode-xwfu (using mm-url-form-encode-xwfu)
;;         * no character classes in regex (for xemacs compatibility)
;;         * default backend: Google

;;    0.5: * Fixed Google and Babelfish backends

;;    0.4: * revised FreeTranslation backend

;;;   0.3: * removed non-working backends: systran, intertrans, leo, e-PROMPT
;;;        * added Google backend
;;;        * revised UTF-8 handling
;;;        * Added customizable variables: babel-preferred-to-language, babel-preferred-from-language
;;;        * revised history handling
;;;        * added helper function: babel-wash-regex


;; TODO:
;;
;; * select multiple engines at once
;;
;; * Adjust output window height. Current versions use
;;  `with-current-buffer' instead `with-output-to-temp-buffer'. So
;;  `temp-buffer-show-hook' will fail to adjust output window height
;;  -> Use (fit-window-to-buffer nil babel-max-window-height) to
;;  adjust output window height in new version.
;;
;; * use non-blocking `url-retrieve'
;;
;; * improve function `babel-simple-html-parse'.
;;
;; * In `babel-quite' function, should be add (boundp
;;   'babel-previous-window-configuration) to make value of
;;   `babel-previous-window-configuration' is valid
;;

"]) (awk-it . [(20130917 1848) nil "Run AWK interactively on region!" single ";;; Commentary:

;; AWK it! allows you to see AWK output as you are typing the script;
;; it sends selected region to awk and uses yasnippet as interactive UI.

;; There are 3 modes of AWK code: simplified syntax(default, see below),
;; single line AWK syntax (regular AWK syntax but only inside the default
;; match) and raw AWK syntax(full AWK code). AWK it! can transfrom code
;; from one mode to another(not perfect, but it will make an effort) and
;; there is also support for multiple lines. Data is expanded with selected
;; yasnippet expand keybinding.

"]) (autopair . [(20131206 1059) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single ";;; Commentary:
;;
;; Another stab at making braces and quotes pair like in
;; TextMate:
;;
;; * Opening braces/quotes are autopaired;
;; * Closing braces/quotes are autoskipped;
;; * Backspacing an opening brace/quote autodeletes its adjacent pair.
;; * Newline between newly-opened brace pairs open an extra indented line.
;;
;; Autopair deduces from the current syntax table which characters to
;; pair, skip or delete.
;;
;;; Installation:
;;
;;   (require 'autopair)
;;   (autopair-global-mode) ;; to enable in all buffers
;;
;; To enable autopair in just some types of buffers, comment out the
;; `autopair-global-mode' and put autopair-mode in some major-mode
;; hook, like:
;;
;; (add-hook 'c-mode-common-hook #'(lambda () (autopair-mode)))
;;
;; Alternatively, do use `autopair-global-mode' and create
;; *exceptions* using the `autopair-dont-activate' local variable (for
;; emacs < 24), or just using (autopair-mode -1) (for emacs >= 24)
;; like:
;;
;; (add-hook 'c-mode-common-hook
;;           #'(lambda ()
;;             (setq autopair-dont-activate t)
;;             (autopair-mode -1)))
;;
;;
"]) (automargin . [(20131112 14) nil "add margins to windows not-splitted, and center them" single ";;; Commentary:

;; Require this script and enable automargin-mode.
;;
;;   (when (require 'automargin nil t)
;;     (automargin-mode 1))
;;
;; then, if the frame is not splitted horizontally, margins are set automatically.

"]) (autofit-frame . [(20131226 1804) ((fit-frame (0))) "Automatically resize one-window frames to fit" single ";;; Commentary:
;;
;;    Automatically resize one-window frames to fit.
;;
;;  Functions are provided here to automatically resize each frame to
;;  fit its selected window, when there is no other window in the
;;  frame.  Some standard Emacs primitive functions are redefined to
;;  do this: `display-buffer' (prior to Emacs 23 only),
;;  `switch-to-buffer', and `pop-to-buffer' (prior to Emacs 23 only).
;;
;;  Prior to Emacs 23, automatic frame resizing is also provided here
;;  implicitly for functions `switch-to-buffer-other-window' and
;;  `switch-to-buffer-other-frame', since they ultimately use
;;  `display-buffer', and so the version of it defined here.  (Command
;;  `switch-to-buffer' does not use `display-buffer' - it is redefined
;;  separately here, for all Emacs versions.)
;;
;;  Put the following in your Emacs initialization file (`~/.emacs'),
;;  in order to provide for automatic frame resizing:
;;
;;    (require 'autofit-frame)
;;    (add-hook 'after-make-frame-functions 'fit-frame)
;;
;;  The second line here causes newly created frames to be fitted to
;;  their buffer (window).  Even if you load `auto-fit-frames.el', you
;;  will still need to do this, because `display-buffer' and so on are
;;  not called when a new frame is created.
;;
;;  To automatically fit frames that show a temporary buffer in their
;;  sole window, add this to your initialization file also:
;;
;;    (add-hook 'temp-buffer-show-hook
;;              'fit-frame-if-one-window 'append)
;;
;;  User option (variable) `autofit-frames-flag' turns on and off the
;;  automatic resizing defined here.  Setting it to nil turns it off:
;;  (setq autofit-frames-flag nil).  You can also bind it to nil to
;;  temporarily inhibit frame resizing in Lisp code:
;;
;;         (let ((autofit-frames-flag nil))...)
;;
;;
;;  New user option (variable) defined here: `autofit-frames-flag'.
;;
;;  New function defined here (useful as a `temp-buffer-show-hook'):
;;
;;    `fit-frame-if-one-window'.
;;
;;
;;  ***** NOTE: The following function defined in `window.el' has been
;;              REDEFINED HERE:
;;
;;  `window--display-buffer-1' (Emacs 23+) -
;;     Resize frame to fit sole window if `autofit-frames-flag'.
;;
;;
;;  ***** NOTE: The following EMACS PRIMITIVES are REDEFINED HERE:
;;
;;  `display-buffer' (prior to Emacs 23 only) -
;;     1) Use `read-buffer' in interactive spec.
;;     2) Resize frame to fit sole window if `autofit-frames-flag'
;;        (and provided buffer was not yet displayed).
;;     3) Raise the frame.
;;     4) Restore point in buffer - fixes unknown Emacs 22 bug.
;;
;;  `pop-to-buffer' (prior to Emacs 23 only) -
;;     Use the `display-buffer' defined here.
;;
;;  `switch-to-buffer' (all Emacs versions) -
;;     1) Use `read-buffer' in interactive spec.
;;     2) If current window is dedicated, then use another window.
;;     3) Resize frame to fit sole window if `autofit-frames-flag'
;;        (unless BUFFER is already the `current-buffer').
;;
;;
;;  This file loads file `fit-frame.el', which provides the main
;;  functionality behind the automatic frame resizing.  See it for
;;  user options to do such things as customize default frame sizes.
;;
;;  The reason for separating the code here from that in
;;  `fit-frame.el' is to let you load that code but not load the code
;;  here, if you do not want to redefine Emacs primitives.
;;
;;  This file was formerly called `shrink-fit-all.el', then
;;  `auto-resize-frames.el'.
;;
;;
;;  See also these files for other frame commands:
;;
;;     `doremi-frm.el'    - Incrementally adjust frame properties
;;                          using arrow keys and/or mouse wheel.
;;
;;     `frame-cmds.el'    - Miscellaneous frame and window commands.
;;
;;     `thumb-frm.el'     - Shrink frames to a thumbnail size and
;;                          restore them again.
;;
;;     `zoom-frm.el'      - Zoom a frame, so that its font becomes
;;                          larger or smaller.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (auto-yasnippet . [(20131230 1421) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single ";;; Commentary:

;; Setup:
;;
;; 1. Download yasnippet from https://github.com/capitaomorte/yasnippet
;;    and set it up.
;;
;; 2. Put this file into your elisp folder.
;;
;; 3. In your .emacs file:
;;     (require 'auto-yasnippet)
;;     (global-set-key (kbd \"H-w\") 'aya-create)
;;     (global-set-key (kbd \"H-y\") 'aya-expand)

;; Usage:
;; e.g. in JavaScript write:
;;
;; field~1 = document.getElementById(\"field~1\");
;;
;; Since this just one line,
;; just call `aya-create' (from anywhere on this line).
;; The ~ chars disappear, yielding valid code.
;; `aya-current' becomes:
;; \"field$1 = document.getElementById(\\\"field$1\\\");\"
;; Now by calling `aya-expand' multiple times, you get:
;;
;; field1 = document.getElementById(\"field1\");
;; field2 = document.getElementById(\"field2\");
;; field3 = document.getElementById(\"field3\");
;; fieldFinal = document.getElementById(\"fieldFinal\");
;;
;; e.g. in Java write:
;;
;; class Light~On implements Runnable {
;;   public Light~On() {}
;;   public void run() {
;;     System.out.println(\"Turning ~on lights\");
;;     light = ~true;
;;   }
;; }
;;
;; This differs from the code that you wanted to write only by 4 ~ chars.
;; Since it's more than one line, select the region and call `aya-create'.
;; Again, the ~ chars disappear, yielding valid code.
;; `aya-current' becomes:
;; \"class Light$1 implements Runnable {
;;   public Light$1() {}
;;   public void run() {
;;     System.out.println(\\\"Turning $2 lights\\\");
;;     light = $3;
;;   }
;; }\"
;;
;; Now by calling `aya-expand', you can quickly fill in:
;; class LightOff implements Runnable {
;;   public LightOff() {}
;;   public void run() {
;;     System.out.println(\"Turning off lights\");
;;     light = false;
;;   }
;; }
;;
;; e.g. in C++ write:
;; const Point<3> curl(grad[~2][~1] - grad[~1][~2],
;;
;; select the region between the paren and the comma and call `aya-create'.
;;
;; You can easily obtain the final code:

;; const Point<3> curl(grad[2][1] - grad[1][2],
;;                     grad[0][2] - grad[2][0],
;;                     grad[1][0] - grad[0][1]);
;;
;; Note how annoying it would be to triple check that the indices match.
;; Now you just have to check for one line.

"]) (auto-shell-command . [(20130404 923) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single ";;; Commentary:

;; Run the shell command asynchronously that you specified when you save the file. 
;; And there flymake autotest, is Guard as a similar tool.

;; Feature
;;   1. Speicify targete file's regexp and command to execute when the save
;;   2. Can temporarily suspend the execution of the command
;;   3. Emacs is running on the OS of all work
;;   4. It is possible to register a temporary command disappear restart Emacs
;;   5. Caused by rewriting the file does not occur by external tools, malfunctions of the command disappointing

;; URL
;;   https://github.com/ongaeshi/auto-shell-command

"]) (auto-save-buffers-enhanced . [(20130607 1949) nil "Automatically save buffers in a decent way" single ";;; Commentary:

;; * Description
;;
;; Emacs's native auto-save feature simply
;; sucks. auto-save-buffers-enhanced.el provides such and other more
;; useful features which only require a few configurations to set up.
;;
;; auto-save-buffers-enhanced.el borrows main ideas and some codes
;; written by Satoru Takabayashi and enhances the original one. Thanks
;; a lot!!!
;;
;; See http://0xcc.net/misc/auto-save/
;;
;; * Usage
;;
;; Just simply put the code below into your .emacs:
;;
;;   (require 'auto-save-buffers-enhanced)
;;   (auto-save-buffers-enhanced t)
;;
;; You can explicitly set what kind of files should or should not be
;; auto-saved. Pass a list of regexps like below:
;;
;;   (setq auto-save-buffers-enhanced-include-regexps '(\".+\"))
;;   (setq auto-save-buffers-enhanced-exclude-regexps '(\"^not-save-file\" \"\\\\.ignore$\"))
;;
;; If you want `auto-save-buffers-enhanced' to work only with the files under
;; the directories checked out from VCS such as CVS, Subversion, and
;; svk, put the code below into your .emacs:
;;
;;   ;; If you're using CVS or Subversion or git
;;   (require 'auto-save-buffers-enhanced)
;;   (auto-save-buffers-enhanced-include-only-checkout-path t)
;;   (auto-save-buffers-enhanced t)
;;
;;   ;; If you're using also svk
;;   (require 'auto-save-buffers-enhanced)
;;   (setq auto-save-buffers-enhanced-use-svk-flag t)
;;   (auto-save-buffers-enhanced-include-only-checkout-path t)
;;   (auto-save-buffers-enhanced t)
;;
;; You can toggle `auto-save-buffers-enhanced' activity to execute
;; `auto-save-buffers-enhanced-toggle-activity'. For convinience, you
;; might want to set keyboard shortcut of the command like below:
;;
;;   (global-set-key \"\\C-xas\" 'auto-save-buffers-enhanced-toggle-activity)
;;
;; Make sure that you must reload the SVK checkout paths from your
;; configuration file such as `~/.svk/config', in which SVK stores the
;; information on checkout paths, by executing
;; `auto-save-buffers-reload-svk' after you check new files out from
;; your local repository. You can set a keyboard shortcut for it like
;; below:
;;
;;   (global-set-key \"\\C-xar\" 'auto-save-buffers-enhanced-reload-svk)
;;
;; For more details about customizing, see the section below:
;;

"]) (auto-install . [(20130824 1206) nil "Auto install elisp file" single ";;; Commentary:
;;
;; Automates the installation of Emacs Lisp files and packages.
;;
;; `auto-install' provides an automated way to:
;;
;; (1) Download Emacs Lisp files and packages from common sources
;; (2) View them (diff) and save them to your repository
;; (3) Compile and Load them
;;

"]) (auto-indent-mode . [(20131220 1220) nil "Auto indent Minor mode" tar ";;; Commentary:
;; 
;; * About auto-indent-mode
;; Provides auto-indentation minor mode for Emacs.  This allows the
;; following: 
;; 
;;   - Return automatically indents the code appropriately (if enabled)
;; 
;;   - Pasting/Yanking indents the appropriately
;; 
;;   - Killing line will take off unneeded spaces (if enabled)
;; 
;;   - On visit file, indent appropriately, but DONT SAVE. (Pretend like
;;     nothing happened, if enabled)
;; 
;;   - On save, optionally unttabify, remove trailing white-spaces, and
;;     definitely indent the file (if enabled).
;; 
;;   - TextMate behavior of keys if desired (see below)
;; 
;;   - Deleting the end of a line will shrink the whitespace to just one
;;     (if desired and enabled)
;; 
;;   - Automatically indent balanced parenthetical expression, or sexp, if desired
;;     `auto-indent-current-pairs' or `auto-indent-next-pair' is set
;;     to be true (disabled by default).  This is not immediate but occurs
;;     after a bit to allow better responsiveness in emacs.
;; 
;;   - Attempts to set the indentation level (number of spaces for an
;;     indent) for a major-mode.
;; 
;; All of these options can be customized. (customize auto-indent)
;; * Installing auto-indent-mode
;; 
;; To use put this in your load path and then put the following in your emacs
;; file:
;; 
;;   (setq auto-indent-on-visit-file t) ;; If you want auto-indent on for files
;;   (require 'auto-indent-mode)
;; 
;; 
;; If you (almost) always want this on, add the following to ~/.emacs:
;; 
;; 
;;    (auto-indent-global-mode)
;; 
;; 
;; 
;; Excluded modes are defined in `auto-indent-disabled-modes-list'
;; 
;; If you only want this on for a single mode, you would add the following to
;; ~/.emacs
;; 
;; 
;;   (add-hook 'emacs-lisp-mode-hook 'auto-indent-mode)
;; 
;; 
;; 
;; You could always turn on the minor mode with the command
;; `auto-indent-mode'
;; * Auto-indent and repositories
;; auto-indent-mode will now be more conservative when it determines
;; that you are in a repository.  It will only indent the local area you
;; are editing.  This can be changed to be conservative everywhere by:
;; 
;;   (setq auto-indent-indent-style 'conservative)
;; 
;; 
;; You can revert to the old behavior of aggressive by:
;; 
;; 
;;   (setq auto-indent-indent-style 'aggressive)
;; 
;; 
;; 
;; * Setting the number of spaces for indenting major modes
;; While this is controlled by the major mode, as a convenience,
;; auto-indent-mode attempts to set the default number of spaces for an
;; indentation for specific major mode.  
;; 
;; This is done by:
;; 1. Making local variables of all the variables specified in
;;    `auto-indent-known-indent-level-variables' and setting them to
;;    auto-indent's `auto-indent-assign-indent-level'
;; 2. Looking to see if major mode variables
;;    `major-mode-indent-level' and `major-mode-basic-offset' variables
;;    are present.  If either of these variables are present,
;;    `auto-indent-mode' sets these variables to the default
;;    `auto-indent-assign-indent-level'.   
;; 
;; * TextMate Meta-Return behavior
;; If you would like TextMate behavior of Meta-RETURN going to the
;; end of the line and then inserting a newline, as well as
;; Meta-shift return going to the end of the line, inserting a
;; semi-colon then inserting a newline, use the following:
;; 
;; 
;;   (setq auto-indent-key-for-end-of-line-then-newline \"<M-return>\")
;;   (setq auto-indent-key-for-end-of-line-insert-char-then-newline \"<M-S-return>\")
;;   (require 'auto-indent-mode)
;;   (auto-indent-global-mode)
;; 
;; 
;; This may or may not work on your system.  Many times emacs cannot
;; distinguish between M-RET and M-S-RET, so if you don't mind a
;; slight redefinition use:
;; 
;; 
;;   (setq auto-indent-key-for-end-of-line-then-newline \"<M-return>\")
;;   (setq auto-indent-key-for-end-of-line-insert-char-then-newline \"<C-M-return>\")
;;   (require 'auto-indent-mode)
;;   (auto-indent-global-mode)
;; 
;; 
;; If you want to insert something other than a semi-colon (like a
;; colon) in a specific mode, say colon-mode, do the following:
;; 
;; 
;;   (add-hook 'colon-mode-hook (lambda () (setq auto-indent-eol-char \":\")))
;; 
;; * Notes about autopair-mode and yasnippet compatibility
;; If you wish to use this with autopairs and yasnippet, please load
;; this library first.
;; * Using specific functions from auto-indent-mode
;; 
;; Also if you wish to just use specific functions from this library
;; that is possible as well.
;; 
;; To have the auto-indentation delete characters use:
;; 
;; 
;;   
;;   (autoload 'auto-indent-delete-char \"auto-indent-mode\" \"\" t)
;;   (define-key global-map [remap delete-char] 'auto-indent-delete-char)
;;   
;;   (autoload 'auto-indent-kill-line \"auto-indent-mode\" \"\" t)
;;   (define-key global-map [remap kill-line] 'auto-indent-kill-line)
;;   
;; 
;; 
;; 
;; However, this does not honor the excluded modes in
;; `auto-indent-disabled-modes-list'
;; 
;; 
;; * Making certain modes perform tasks on paste/yank.
;; Sometimes, like in R, it is convenient to paste c:\\ and change it to
;; c:/.  This can be accomplished by modifying the
;; `auto-indent-after-yank-hook'.
;; 
;; The code for changing the paths is as follows:
;; 
;; 
;;   (defun kicker-ess-fix-path (beg end)
;;     \"Fixes ess path\"
;;     (save-restriction
;;       (save-excursion
;;         (narrow-to-region beg end)
;;         (goto-char (point-min))
;;         (when (looking-at \"[A-Z]:\\\\\\\\\")
;;           (while (search-forward \"\\\\\" nil t)
;;             (replace-match \"/\"))))))
;;   
;;   (defun kicker-ess-turn-on-fix-path ()
;;     (interactive)
;;     (when (string= \"S\" ess-language)
;;       (add-hook 'auto-indent-after-yank-hook 'kicker-ess-fix-path t t)))
;;   (add-hook 'ess-mode-hook 'kicker-ess-turn-on-fix-path)
;; 
;; 
;; Another R-hack is to take of the \">\" and \"+\" of a command line
;; copy. For example copying:
;; 
;;  > 
;;  > availDists <- c(Normal=\"rnorm\", Exponential=\"rexp\")
;;  > availKernels <- c(\"gaussian\", \"epanechnikov\", \"rectangular\",
;;  + \"triangular\", \"biweight\", \"cosine\", \"optcosine\")
;; 
;; 
;; Should give the following code on paste:
;; 
;;  
;;  availDists <- c(Normal=\"rnorm\", Exponential=\"rexp\")
;;  availKernels <- c(\"gaussian\", \"epanechnikov\", \"rectangular\",
;;  \"triangular\", \"biweight\", \"cosine\", \"optcosine\")
;; 
;; 
;; This is setup by the following code snippet:
;; 
;; 
;;   (defun kicker-ess-fix-code (beg end)
;;     \"Fixes ess path\"
;;     (save-restriction
;;       (save-excursion
;;         (save-match-data
;;           (narrow-to-region beg end)
;;           (goto-char (point-min))
;;           (while (re-search-forward \"^[ \\t]*[>][ \\t]+\" nil t)
;;             (replace-match \"\")
;;             (goto-char (point-at-eol))
;;             (while (looking-at \"[ \\t\\n]*[+][ \\t]+\")
;;               (replace-match \"\\n\")
;;               (goto-char (point-at-eol))))))))
;;   
;;   (defun kicker-ess-turn-on-fix-code ()
;;     (interactive)
;;     (when (string= \"S\" ess-language)
;;       (add-hook 'auto-indent-after-yank-hook 'kicker-ess-fix-code t t)))
;;   (add-hook 'ess-mode-hook 'kicker-ess-turn-on-fix-code)
;; 
;; 
;; * Auto-indent and org-mode
;; Auto-indent does not technically turn on for org-mode.  Instead the
;; following can be added/changed:
;; 
;; 1. `org-indent-mode' is turned on when `auto-indent-start-org-indent' 
;;    is true.
;; 2. The return behavior is changed to newline and indent in code blocks
;;    when `auto-indent-fix-org-return' is true.
;; 3. The backspace behavior is changed to auto-indent's backspace when
;;    `auto-indent-delete-backward-char' is true.  This only works in
;;    code blocks. 
;; 4. The home beginning of line behavior is changed to auto-indent's
;;    when `auto-indent-fix-org-move-beginning-of-line' is true.
;; 5. The yank/paste behavior is changed to auto-indent in a code block
;;    when `auto-indent-fix-org-yank' is true.
;; 6. The auto-filling activity in source-code blocks can break your code
;;    depending on the language.  When `auto-indent-fix-org-auto-fill' is
;;    true, auto-filling is turned off in`org-mode' source blocks.
;; * FAQ
;; ** Why isn't my mode indenting?
;; Some modes are excluded for compatability reasons, such as
;; text-modes.  This is controlled by the variable
;; `auto-indent-disabled-modes-list'
;; ** Why isn't my specific mode have the right number of spaces?
;; Actually, the number of spaces for indentation is controlled by the
;; major mode. If there is a major-mode specific variable that controls
;; this offset, you can add this variable to
;; `auto-indent-known-indent-level-variables' to change the indentation
;; for this mode when auto-indent-mode starts.
;; 
;; See:
;; 
;; - [[http://www.pement.org/emacs_tabs.htm][Understanding GNU Emacs and tabs]]
;; - [[http://kb.iu.edu/data/abde.html][In Emacs how can I change tab sizes?]]
;; *** How do I add a variable to the auto-indent tab offset?
;; You can add the variable by using =M-x customize-group
;; auto-indent-mode= and then add the variable to
;; `auto-indent-known-indent-levels'.  Another way is to use lisp:
;; 
;; 
;;   (add-to-list 'auto-indent-known-indent-levels 'c-basic-offset)
;; 
;; 
;; *** How do I change the auto-indent default offset?
;; You can change auto-indent's default offset by:
;; 
;; 
;;   (setq auto-indent-assign-indent-level 4) ; Changes the indent level to
;;                                           ; 4 spaces instead of 2.
;; 
;; 
;; *** How do I turn of auto-indent assignment?
;; When auto-indent finds a tab-size variable, it assigns the indentation
;; level to the globally defined `auto-indent-assign-indent-level'.  If
;; you do not want this to happen you can turn it off by
;; 
;;   (setq auto-indent-assign-indent-level-variables nil)
;; 
;; 
;; ** Why is auto-indent-mode changing tabs to spaces
;; I prefer tabs instead of spaces.  You may prefer the other way.  The
;; options to change this are:
;; 
;; 
;;   (setq auto-indent-mode-untabify-on-yank-or-paste nil)
;; 
;; 
;; to keep tabs upon paste.
;; 
;; 
;;   (setq auto-indent-untabify-on-visit-file nil) ; Already disabled
;; 
;; 
;; 
;; To keep tabs upon visiting a file.
;; 
;; 
;;   (setq auto-indent-untabify-on-save-file nil)
;; 
;; 
;; to turn off changing tabs to spaces on file save.
;; 
;; 
;;   (setq auto-indent-backward-delete-char-behavior nil) ; Just delete one character.
;; 
;; 
;; So that backspace doesn't change tabs to spaces.
;; 
;; If you wish to be more extreme you can also change spaces to tabs by:
;; 
;; 
;;   (setq auto-indent-mode-untabify-on-yank-or-paste 'tabify)
;; 
;; 
;; to keep tabs upon paste.
;; 
;; 
;;   (setq auto-indent-untabify-on-visit-file 'tabify) ; I would suggest
;;                                           ; leaving this off.
;; 
;; 
;; 
;; To keep tabs upon visiting a file.
;; 
;; 
;;   (setq auto-indent-untabify-on-save-file 'tabify)
;; 
;; 
;; 
;; ** Argh -- Auto-indent is messing with my indentation.  What can I do?
;; If you do not like the default indentation style of a particular
;; mode, sometimes you may adjust the indetation by hand.  Then you
;; press the return button and all your hard work is erased.  This can
;; be quite frustrating.  
;; 
;; What is happening, is that auto-indent is fixing the current line's
;; indentation and then indenting the next line on pressing enter.  This
;; can be turned off customizing the `auto-indent-newline-function' to
;; 
;; 
;;   (setq auto-indent-newline-function 'newline-and-indent) 
;; 
;; 
;; This will insert a newline and then indent.  Not reindent according
;; to the major mode's conventions.
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (auto-dim-other-buffers . [(20130429 1126) nil "Visually makes non-current buffers less prominent" single nil]) (auto-dictionary . [(20130628 253) nil "automatic dictionary switcher for flyspell" tar ";;; Commentary:
;;
;; Add the following to your .emacs file:
;; (require 'auto-dictionary)
;; (add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1)))
;;
;; Then just type.  When you stop for a few moments `auto-dictionary-mode' will
;; start evaluating the content.
;;
;; You can also force a check using `adict-guess-dictionary', whether or not
;; `auto-dictionary-mode' is enabled.
;;
;; If you're unhappy with the results, call `adict-change-dictionary' to
;; change it and stop automatic checks.
;;
;; You can use `adict-change-dictionary-hook' to hook into any of these changes,
;; or `adict-conditional-insert' to insert text (like signatures) that will
;; automatically conform to the language.
;;
"]) (auto-complete-nxml . [(20130917 2019) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single ";;; Commentary:
;; 
;; This extension provides completion by auto-complete.el on nXML-mode.
;; About auto-complete.el, see <https://github.com/auto-complete/auto-complete>.

"]) (auto-complete-clang-async . [(20130526 814) nil "Auto Completion source for clang for GNU Emacs" single ";;; Commentary:

;; Auto Completion source for clang.
;; Uses a \"completion server\" process to utilize libclang.
;; Also provides flymake syntax checking.

"]) (auto-complete-clang . [(20120614 610) nil "Auto Completion source for clang for GNU Emacs" single ";;; Commentary:
;;
;; Auto Completion source for clang. Most of codes are taken from
;; company-clang.el and modified and enhanced for Auto Completion.

"]) (auto-complete-c-headers . [(20131215 506) ((auto-complete (1 4))) "An auto-complete source for C/C++ header files" single ";;; Commentary:

;; (require 'auto-complete-c-headers)
;; (add-to-list 'ac-sources 'ac-source-c-headers)

"]) (auto-complete . [(20131128 233) ((popup (0 5 0))) "Auto Completion for GNU Emacs" tar nil]) (auto-compile . [(20131106 631) ((cl-lib (0 2)) (packed (0 3 4))) "automatically compile Emacs Lisp libraries" single ";;; Commentary:

;; This package provides two minor modes which automatically recompile
;; Emacs Lisp source files.  Together these modes guarantee that Emacs
;; never loads outdated byte code files.

;; `auto-compile-on-save-mode' recompiles source files when they are
;; being saved and `auto-compile-on-load-mode' does so before they are
;; being loaded.  Both modes only _recompile_ a source file when the
;; respective byte code file exists and is outdated.  Otherwise (when
;; the byte code file doesn't exist or is up-to-date) these modes do
;; _not_ compile the source file.

;; To permanently or temporarily toggle automatic compilation of some
;; source file use the command `toggle-auto-compile'.  Since the modes
;; only ever _update_ byte code files, toggling automatic compilation
;; is done simply by either creating the byte code file or removing
;; it.  `toggle-auto-compile' can also toggle automatic compilation of
;; multiple files at once; see it's doc-string for more information.

;; Even when using `auto-compile-on-save-mode' it can happen that some
;; source file is newer than the respective byte code file.  This can
;; for example happen when performing version control operations and
;; is a problem because Emacs always loads the byte code file even
;; when the respective source file has been modified since the former
;; was created.

;; To prevent outdated byte code files from being loaded
;; `auto-compile-on-load-mode' advises `require' and `load' to first
;; recompile a source file if it is newer than the respective byte
;; code file.

;; Enabling `auto-compile-on-load-mode' as early as possible reduces
;; the risk of loading an outdated byte code file.  It is best if you
;; enable both modes together at the beginning of your init file, even
;; before loading your package manager and having it initialize the
;; `load-path'.

;;     ;; -*- no-byte-compile: t -*-
;;     (add-to-list 'load-path \"/path/to/auto-compile\")
;;     (require 'auto-compile)
;;     (auto-compile-on-load-mode 1)
;;     (auto-compile-on-save-mode 1)

;; Automatically compilation of Emacs Lisp source files is useful for
;; at least the following reasons:

;; \342\227\206 Emacs prefers the byte code file over the source file even if the
;;   former is outdated.  If you have to do the compilation manually
;;   you will at least occasionally forget to do so and end up with an
;;   old version of your code being loaded.

;; \342\227\206 There are many otherwise fine libraries to be found on the
;;   Internet which when compiled will confront the user with a wall
;;   of compile warnings and an occasional error.  If authors are
;;   informed about these (often trivial) problems after each save
;;   they will likely fix them quite quickly.  That or they have a
;;   high noise tolerance.

;; \342\227\206 It's often easier and less annoying to fix errors and warnings as
;;   they are introduced than to do a \"let's compile today's work and
;;   see how it goes\".

;; This package is designed to stay out of your way as much as it can
;; while still motivating you to get things fixed.  That might be
;; annoying initially but less so once existing problems have been
;; fixed.  By default Auto-Compile won't let you quit Emacs on the
;; first attempt without fixing fatal errors in visited source files
;; first.  To disable this set `auto-compile-mark-failed-modified' to
;; nil.

;; Also note that just because no warnings and/or errors are reported
;; when a source file is compiled by the modes defined here this does
;; not necessarily mean that users of your libraries won't see any.  A
;; likely cause for this would be that you forgot to require a feature
;; which is loaded on your system but not necessarily on the users'
;; systems.  So you should still manually compile your packages before
;; release:
;;
;;     emacs -batch -Q -L . -L ../dependency/ -f batch-byte-compile *.el

"]) (auto-capitalize . [(20131014 505) nil "Automatically capitalize (or upcase) words" single ";;; Commentary:

;; In `auto-capitalize' minor mode, the first word at the beginning of
;; a paragraph or sentence (i.e. at `left-margin' on a line following
;; `paragraph-separate', after `paragraph-start' at `left-margin', or
;; after `sentence-end') is automatically capitalized when a following
;; whitespace or punctuation character is inserted.
;;
;; The `auto-capitalize-words' variable can be customized so that
;; commonly used proper nouns and acronyms are capitalized or upcased,
;; respectively.
;;
;; The `auto-capitalize-yank' option controls whether words in yanked
;; text should by capitalized in the same way.
;;
;; To install auto-capitalize.el, copy it to a `load-path' directory,
;; `M-x byte-compile-file' it, and add this to your
;; site-lisp/default.el or ~/.emacs file:
;; 	(autoload 'auto-capitalize-mode \"auto-capitalize\"
;; 	  \"Toggle `auto-capitalize' minor mode in this buffer.\" t)
;; 	(autoload 'turn-on-auto-capitalize-mode \"auto-capitalize\"
;; 	  \"Turn on `auto-capitalize' minor mode in this buffer.\" t)
;; 	(autoload 'enable-auto-capitalize-mode \"auto-capitalize\"
;; 	  \"Enable `auto-capitalize' minor mode in this buffer.\" t)
;;
;; To turn on (unconditional) capitalization in all Text modes, add
;; this to your site-lisp/default.el or ~/.emacs file:
;; 	(add-hook 'text-mode-hook 'turn-on-auto-capitalize-mode)
;; To enable (interactive) capitalization in all Text modes, add this
;; to your site-lisp/default.el or ~/.emacs file:
;; 	(add-hook 'text-mode-hook 'enable-auto-capitalize-mode)
;;
;; To prevent a word from ever being capitalized or upcased
;; (e.g. \"http\"), simply add it (in lowercase) to the
;; `auto-capitalize-words' list.
;;
;; To prevent a word in the `auto-capitalize-words' list from being
;; capitalized or upcased in a particular context (e.g.
;; \"GNU.emacs.sources\"), insert the following whitespace or
;; punctuation character with `M-x quoted-insert' (e.g. `gnu C-q .').
;;
;; To enable contractions based on a word in the
;; `auto-capitalize-words' list to be capitalized or upcased
;; (e.g. \"I'm\") in the middle of a sentence in Text mode, define the
;; apostrophe as a punctuation character or as a symbol that joins two
;; words:
;; 	;; Use \"_\" instead of \".\" to define apostrophe as a symbol:
;; 	(modify-syntax-entry ?' \".   \" text-mode-syntax-table) ; was \"w   \"

"]) (auto-auto-indent . [(20131106 1103) ((es-lib (0 1)) (cl-lib (1 0))) "Indents code as you type" single ";;; Commentary:

;; The project is hosted at https://github.com/sabof/auto-auto-indent
;; The latest version, and all the relevant information can be found there.

"]) (auto-async-byte-compile . [(20130824 1158) nil "Automatically byte-compile when saved" single ";;; Commentary:
;;
;; Automatically byte-comple elisp files ASYNCHRONOUSLY when saved.
;; It invokes \"emacs -Q --batch --eval '(setq load-path ...)'
;; -l ~/.emacs.d/initfuncs.el -f batch-byte-compile this-file.el\"
;;
;; If you define your own macros, put them into ~/.emacs.d/initfuncs.el first.

"]) (audio-notes-mode . [(20130909 146) nil "Play audio notes synced from somewhere else." single ";;; Commentary:
;;
;; `audio-notes-mode' is a way to manage small audio recordings that
;; you make in order to record thoughts.
;;
;; After much struggle, I finally decided to stop trying to make
;; speech recognition work from my phone. Instead, I decided to just
;; record audio notes, and I wrote this package to automate the
;; process of playing them back at the computer.
;;
;; I found this to be even faster, because I don't have to wait and
;; see if the speech recognition worked and I don't have to repeat the
;; message 1/3 of the time.
;;
;; A tasker profile (which records and uploads these notes) is also
;; provided at the github page.
;;
;; The idea is that you sync voice notes you record on your
;; smartphone into a directory on your PC. But you're free to use it
;; in other ways.
;;
;; When you activate this mode, it will play the first audio note in a
;; specific directory and wait for you to write it down. Once you're
;; finished, just call the next note with \\\\[anm/play-next]. When you
;; do this, `audio-notes-mode' will DELETE the note which was already
;; played and start playing the next one. Once you've gone through all
;; of them, `audio-notes-mode' deactivates itself.

;;; Instructions:
;;
;; INSTALLATION
;;
;; Configuration is simple. Require the package and define the following two variables:
;;           (require 'audio-notes-mode)
;;           (setq anm/notes-directory \"~/Directory/where/your/notes/are/\")
;;           (setq anm/goto-file \"~/path/to/file.org\") ;File in which you'll write your notes as they are played.
;;
;; Then just choose how you want to activate it.
;; 1) If you use `org-mobile-pull', you can do
;;       (setq anm/hook-into-org-pull t)
;;    and `audio-notes-mode' will activate whenever you call
;;    org-mobile-pull.
;;    
;; 2) The second options is to just bind `audio-notes-mode' to
;;    some key and call it when you want.
;;       (global-set-key [f8] 'audio-notes-mode)
;;
;; If you installed manually, first require the feature with:
;; then use one of the methods above.

"]) (auctex-lua . [(20130818 1120) nil "Lua editing support for AUCTeX" single ";;; Commentary:
;;
;; This package provides some basic utilities for working with Lua
;; code from within AUCTeX.  `LaTeX-edit-Lua-code-start' is the entry
;; point of this package; bind it to your favorite key and use it
;; inside of any environment in `LaTeX-Lua-environments'.  To commit
;; your changes to the parent buffer and return to it, simply use
;; `save-buffer' (or whichever key it is bound to).  The contents of
;; the parent buffer will be updated and the Lua buffer will be killed.
;; 
;; Beware!  Editing embedded Lua code is asynchronous.  If you kill
;; the buffer that was editing it, your changes will be lost!  In a
;; future update I will add a `yes-or-no-p' confirmation to killing
;; the buffer, but I've yet to figure that one out.

"]) (auctex-latexmk . [(20140107 215) ((auctex (11 87))) "Add LatexMk support to AUCTeX" single ";;; Commentary:

;; This library adds LatexMk support to AUCTeX.
;;
;; Requirements:
;;   * AUCTeX
;;   * LatexMk
;;   * TeXLive (2011 or later if you write TeX source in Japanese)
;;
;; To use this package, add the following line to your .emacs file:
;;     (require 'auctex-latexmk)
;;     (auctex-latexmk-setup)
;; And add the following line to your .latexmkrc file:
;;     # .latexmkrc starts
;;     $pdf_mode = 1;
;;     # .latexmkrc ends
;; After that, by using M-x TeX-command-master (or C-c C-c), you can use
;; LatexMk command to compile TeX source.
;;
;; For Japanese users:
;;
;; LatexMk command automatically stores the encoding of a source file
;; and passes it to latexmk via an environment variable named \"LATEXENC\".
;; Here is the example of .latexmkrc to use \"LATEXENC\":
;;     # .latexmkrc starts
;;     $kanji    = \"-kanji=$ENV{\\\"LATEXENC\\\"}\" if defined $ENV{\"LATEXENC\"};
;;     $latex    = \"platex -interaction=nonstopmode $kanji\";
;;     $bibtex   = 'pbibtex $kanji';
;;     $dvipdf   = 'perl -e \"exec(\\'dvipdfmx\\', \\$ARGV[0])\"';
;;     $pdf_mode = 3;
;;     # .latexmkrc ends

"]) (async . [(20131117 2035) nil "Asynchronous processing in Emacs" tar nil]) (ascope . [(20130824 1158) nil "Another cscope interface for emacs" single nil]) (ascii . [(20130824 1200) nil "ASCII code display." single ";;; Commentary:

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Introduction
;; ------------
;;
;; This package provides a way to display ASCII code on a window, that is,
;; display in another window an ASCII table highlighting the current character
;; code.
;;
;; Well, maybe the name \"ascii\" is not a good name for this package, as this
;; package also displays non-ASCII code, that is, character code which is
;; greater than 255.  It also displays characters codified in HTML (&Aacute;),
;; quoted (=20), escaped (\\xFF) and Emacs Lisp character (?\\^A).
;;
;; To use ascii, insert in your ~/.emacs:
;;
;;    (require 'ascii)
;;
;; Or:
;;
;;    (autoload 'ascii-on        \"ascii\" \"Turn on ASCII code display.\"   t)
;;    (autoload 'ascii-off       \"ascii\" \"Turn off ASCII code display.\"  t)
;;    (autoload 'ascii-display   \"ascii\" \"Toggle ASCII code display.\"    t)
;;    (autoload 'ascii-customize \"ascii\" \"Customize ASCII code display.\" t)
;;
;; For good performance, be sure to byte-compile ascii.el, e.g.
;;
;;    M-x byte-compile-file <give the path to ascii.el when prompted>
;;
;; This will generate ascii.elc, which will be loaded instead of ascii.el.
;;
;; It runs on GNU Emacs 20.4.1, 21, 22 and 23.
;;
;;
;; Using ascii
;; -----------
;;
;; To activate ascii, type:
;;
;;    M-x ascii-on RET
;;
;; Or:
;;
;;    C-u 1 M-x ascii-display RET
;;
;; To deactivate ascii, type:
;;
;;    M-x ascii-off RET
;;
;; Or:
;;
;;    C-u 0 M-x ascii-display RET
;;
;; To toggle ascii, type:
;;
;;    M-x ascii-display RET
;;
;; To customize ascii, type:
;;
;;    M-x ascii-customize RET
;;
;; You can also bind `ascii-display', `ascii-on', `ascii-off' and
;; `ascii-customize' to some key, like:
;;
;;    (global-set-key \"\\C-c\\C-a\" 'ascii-on)
;;    (global-set-key \"\\C-c\\C-e\" 'ascii-off)
;;    (global-set-key \"\\C-c\\C-t\" 'ascii-display)
;;    (global-set-key \"\\C-c\\C-c\" 'ascii-customize)
;;
;; If you're using `mule' package, a good usage example is to activate `ascii'
;; on emacs/etc/HELLO file.
;;
;;
;; Hooks
;; -----
;;
;; ascii has the following hook variable:
;;
;; `ascii-hook'
;;    It is evaluated once when ascii is turned on.
;;
;;
;; Options
;; -------
;;
;; Below it's shown a brief description of ascii options, please, see the
;; options declaration in the code for a long documentation.
;;
;; `ascii-code'				Specify list of character code to
;;					display.
;;
;; `ascii-show-nonascii'		Non-nil means converts to unibyte and
;;					display the ascii code.
;;
;; `ascii-show-nonascii-message'	Non-nil means show a message when
;;					character is above 255.
;;
;; `ascii-window-size'			Specify initial ASCII window size.
;;
;; `ascii-display-code'			Specify list of character range to be
;;					displayed.
;;
;; `ascii-keep-window'			Non-nil means to keep ASCII window
;;					active.
;;
;; `ascii-table-separator'		Specify string used to separate ASCII
;;					table columns.
;;
;; `ascii-ascii-face'			Specify symbol face used to highlight
;;					ascii code.
;;
;; `ascii-non-ascii-face'		Specify symbol face used to highlight
;;					non-ascii code.
;;
;; To set the above options you may:
;;
;; a) insert the code in your ~/.emacs, like:
;;
;;	 (setq ascii-window-size 6)
;;
;;    This way always keep your default settings when you enter a new Emacs
;;    session.
;;
;; b) or use `set-variable' in your Emacs session, like:
;;
;;	 M-x set-variable RET ascii-window-size RET 6 RET
;;
;;    This way keep your settings only during the current Emacs session.
;;
;; c) or use customization, for example:
;;	 click on menu-bar *Help* option,
;;	 then click on *Customize*,
;;	 then click on *Browse Customization Groups*,
;;	 expand *Data* group,
;;	 expand *Ascii* group
;;	 and then customize ascii options.
;;    Through this way, you may choose if the settings are kept or not when
;;    you leave out the current Emacs session.
;;
;; d) or see the option value:
;;
;;	 C-h v ascii-window-size RET
;;
;;    and click the *customize* hypertext button.
;;    Through this way, you may choose if the settings are kept or not when
;;    you leave out the current Emacs session.
;;
;; e) or invoke:
;;
;;	 M-x ascii-customize RET
;;
;;    and then customize ascii options.
;;    Through this way, you may choose if the settings are kept or not when
;;    you leave out the current Emacs session.
;;
;;
;; Acknowledgments
;; ---------------
;;
;; Thanks to Steven W. Orr <steveo@syslang.net> for patch to Emacs 23.
;;
;; Thanks to Roman Belenov <roman@nstl.nnov.ru> for suggestion on dynamic ascii
;; table evaluation (depending on character encoding).
;;
;; Thanks to Alex Schroeder <asc@bsiag.com> for suggestion on customization.
;;
;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

"]) (ariadne . [(20131117 911) ((bert (0 1))) "Ariadne plugin for Emacs" single ";;; Commentary:

;; Ariadne (https://github.com/feuerbach/ariadne) provides a
;; \"go-to-definition\" functionality for Haskell.

;; `ariadne.el' is an Ariadne plugin for Emacs.

;; Dependencies:

;; `ariadne.el' depends on `bert.el'
;; (https://github.com/manzyuk/bert-el), BERT serialization library
;; for Emacs.

;; Usage:

;; The function `ariadne-goto-definition' queries the Ariadne server
;; about the location of the definition of a name at point and jumps
;; to that location.  Bind `ariadne-goto-definition' to a key, for
;; example as follows:
;;
;;     (require 'ariadne)
;;     (add-hook 'haskell-mode-hook
;;               (lambda ()
;;                 (define-key haskell-mode-map \"\\C-cd\" 'ariadne-goto-definition)))

"]) (arduino-mode . [(20140108 1602) nil "Major mode for the Arduino language" single ";;; Commentary:
;;
;; Based on derived-mode-ex.el found here:
;;
;; <http://cc-mode.sourceforge.net/derived-mode-ex.el>.
;;

"]) (archive-region . [(20130824 1207) nil "Move region to archive file instead of killing" single ";;; Commentary:
;;
;; Extend C-w to have archive feature.
;; C-u C-w moves region to the archive file.
;; C-u C-u C-w opens the archive file.
;; The archive files have suffix \"_archive\" after original filename.

"]) (apt-utils-ido . [(20130527 1345) ((apt-utils (1 212))) "Ido commands for apt-utils" single ";;; Commentary: 
;;
;; Bitcoin donations gratefully accepted: 14zv8HBJVqHRFRnXXaiLbUippnnYvg3iYv
;;
;; This library provides commands for accessing apt-utils using ido.
;; This means you don't need to remember so many keybindings.
;;
;; Press \"S\" to select a type of package search
;; Press \"b\" to select webpage to browse
;; Press \"v\" to select type of file to view

;;;;

"]) (apt-utils . [(20130824 1200) nil "Emacs interface to APT (Debian package management)" single ";;; Commentary:
;;
;; Package to interface Emacs with APT.  Start things off using e.g.:
;; M-x apt-utils-show-package RET emacs21 RET
;;
;; Other packages (dependencies, conflicts etc.) can be navigated
;; using apt-utils-{next,previous}-package,
;; apt-utils-choose-package-link or apt-utils-follow-link.  Return to
;; the previous package with apt-utils-view-previous-package.
;; ChangeLog and README files for the current package can easily be
;; accessed with, for example, apt-utils-view-changelog.
;;
;; For normal (i.e., not virtual) packages, the information can be
;; toggled between `package' and `showpkg' displays using
;; apt-utils-toggle-package-info; the latter is useful for the
;; \"Reverse Depends\".
;;
;; View the key bindings with describe-mode (bound to ? by default).

"]) (apropos-fn+var . [(20131226 1803) nil "Apropos for functions and variables" single ";;; Commentary:
;;
;;  Standard `apropos' commands `apropos-variable' and
;;  `apropos-command' do not distinguish, by command name, between the
;;  different types of target object (but you can do that via `C-u').
;;  This library provides individual `apropos' commands for user
;;  options, variables in general (not just options), and functions in
;;  general (not just commands).  These commands are defined here:
;;
;;    `apropos-option'   - Apropos a user option
;;    `apropos-variable' - Apropos any variable, not just user option
;;    `apropos-function' - Apropos any function, not just command
;;
;;
;;  ***** NOTE: The following functions defined in `apropos.el' have
;;              been REDEFINED HERE:
;;
;;  `apropos-variable' - See above (the standard command does what
;;                       `apropos-option' does here).
;;  `apropos-print'    - Identifies user options with label `Option'.
;;
;;
;;  Slightly different versions of `apropos-function' and
;;  `apropos-variable' were posted by Kevin Rodgers to bug-gnu-emacs,
;;  Tue, 06 Sep 2005 14:34:54 -0600.  Kevin didn't actually redefine
;;  `apropos-variable' (he would never do that ;-)), but he provided
;;  the new definition.  I redefined `apropos-print' and added button
;;  type `apropos-option'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (applescript-mode . [(20090320 2332) nil "major mode for editing AppleScript source" single ";;; Commentary:

;; AppleScript Mode

"]) (apples-mode . [(20110120 2018) nil "Major mode for editing and executing AppleScript code" tar ";;; Commentary:

;; This program provides a major mode for AppleScript.

;; [INSTALL]
;;
;; Put files in your load-path and add the following to your init file.
;;
;;    (autoload 'apples-mode \"apples-mode\" \"Happy AppleScripting!\" t)
;;    (autoload 'apples-open-scratch \"apples-mode\" \"Open scratch buffer for AppleScript.\" t)
;;    (add-to-list 'auto-mode-alist '(\"\\\\.\\\\(applescri\\\\|sc\\\\)pt\\\\'\" . apples-mode))
;; or
;;    (require 'apples-mode)
;;    (add-to-list 'auto-mode-alist '(\"\\\\.\\\\(applescri\\\\|sc\\\\)pt\\\\'\" . apples-mode))
;;
;; After that you should byte-compile apples-mode.el.
;;
;;    M-x byte-compile-file RET /path/to/apples-mode.el RET
;;
;; During the byte-compilation, you may get some warnings, but you should
;; ignore them.
;;
;; [FEATURES]
;;
;; Commands for the execution have the prefix `apples-run-'. You can see
;; the other features via menu.
;;
;; [CONFIGURATION]
;;
;; You can access to the customize group via menu or using the command
;; `apples-customize-group'.

"]) (apache-mode . [(20080905 553) nil "major mode for editing Apache configuration files" single ";;; Commentary:
;;
;;   (autoload 'apache-mode \"apache-mode\" nil t)
;;   (add-to-list 'auto-mode-alist '(\"\\\\.htaccess\\\\'\"   . apache-mode))
;;   (add-to-list 'auto-mode-alist '(\"httpd\\\\.conf\\\\'\"  . apache-mode))
;;   (add-to-list 'auto-mode-alist '(\"srm\\\\.conf\\\\'\"    . apache-mode))
;;   (add-to-list 'auto-mode-alist '(\"access\\\\.conf\\\\'\" . apache-mode))
;;   (add-to-list 'auto-mode-alist '(\"sites-\\\\(available\\\\|enabled\\\\)/\" . apache-mode))
;;

"]) (aok . [(20130824 1127) nil "various useful ways to do `multi-occur'" single ";;; Commentary:

;; search all buffers, all buffers whose filenames have a certain
;; type, or all buffers in a certain mode, with `all-occur',
;; `type-occur', or `mode-occur', respectively.

"]) (anzu . [(20131119 1848) nil "Show number of matches in mode-line while searching" single ";;; Commentary:

;; `anzu.el' is an Emacs port of `anzu.vim'.
;;
;; `anzu.el' provides a minor mode which displays 'current match/total
;; matches' in the mode-line in various search modes.  This makes it
;; easy to understand how many matches there are in the current buffer
;; for your search query.

;; To use this package, add following code to your init.el or .emacs
;;
;;   (global-anzu-mode +1)
;;

"]) (anything-git-grep . [(20130608 1940) ((anything (1 3 9))) "anything for git grep" tar ";;; Commentary:

"]) (anything-git-files . [(20130609 243) ((anything (1 3 9))) "anything for git files" single nil]) (anything . [(20130605 1746) nil "open anything / QuickSilver-like candidate-selection framework" tar ";;; Commentary:

;;
;; Start with M-x anything, narrow the list by typing some pattern,
;; select with up/down/pgup/pgdown/C-p/C-n/C-v/M-v, choose with enter,
;; left/right moves between sources.  With TAB actions can be selected
;; if the selected candidate has more than one possible action.
;;
;; Note that anything.el provides only the framework and some example
;; configurations for demonstration purposes.  See anything-config.el
;; for practical, polished, easy to use configurations which can be
;; used to assemble a custom personalized configuration.
;;
;; NOTE: What you find on Emacswiki is mostly deprecated and not maintained,
;;       don't complain if you use such code or configuration and something
;;       doesn't work.
;;
;; Here is Japanese translation of `anything-sources' attributes.  Thanks.
;; http://d.hatena.ne.jp/sirocco634/20091012/1255336649


"]) (anyins . [(20131229 241) nil "Insert content at multiple places from shell command or kill-ring" single ";;; Commentary:
;;
;; Insert content either from kill-ring or from shell command result at marked
;; point or vertically like rectangular do.
;;
;; Have a look to README at https://github.com/antham/anyins to have more information
;;
"]) (anti-zenburn-theme . [(20140104 1542) nil "Low-contrast Zenburn-inverted theme" single ";;; Commentary:

;; Derived from Bozhidar Batsov's port of the Zenburn theme
;; located here https://github.com/bbatsov/zenburn-emacs

"]) (ant . [(20131227 2307) nil "helpers for compiling with ant" single nil]) (ansi . [(20130827 753) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" single nil]) (annoying-arrows-mode . [(20130515 1000) nil "Ring the bell if using arrows too much" single ";;; Commentary:

;; Entering annoying-arrows-mode makes emacs ring the bell in your
;; face if you use the arrow keys to move long distances.

;; Set the `annoying-arrows-too-far-count' to adjust the length.

;; Code:

(defvar annoying-arrows-too-far-count 10
  \"Number of repeated arrow presses before emacs gets annoyed.\")

(setq annoying-commands '())

(defvar annoying-arrows--current-count 0)

(defun aa--commands-with-shortcuts (cmds)
  (remove-if (lambda (cmd)
               (string-equal
                (substring (substitute-command-keys (format \"\\\\[%S]\" cmd)) 0 3)
                \"M-x\")) cmds))

(defun aa--maybe-complain (cmd)
  (if (and (memq this-command annoying-commands)
           (eq this-command last-command))
      (progn
        (incf annoying-arrows--current-count)
        (when (> annoying-arrows--current-count annoying-arrows-too-far-count)
          (beep 1)
          (let* ((alts (aa--commands-with-shortcuts (get cmd 'aa--alts)))
                 (alt (nth (random (length alts)) alts))
                 (key (substitute-command-keys (format \"\\\\[%S]\" alt))))
            (message \"Annoying! How about using %S (%s) instead?\" alt key))))
    (setq annoying-arrows--current-count 0)))

(defmacro add-annoying-arrows-advice (cmd alternatives)
  `(progn
     (add-to-list 'annoying-commands (quote ,cmd))
     (put (quote ,cmd) 'aa--alts ,alternatives)
     (defadvice ,cmd (before annoying-arrows activate)
       (when annoying-arrows-mode
         (aa--maybe-complain (quote ,cmd))))))

(add-annoying-arrows-advice previous-line '(ace-jump-mode backward-paragraph isearch-backward ido-imenu smart-up))
(add-annoying-arrows-advice next-line '(ace-jump-mode forward-paragraph isearch-forward ido-imenu smart-down))
(add-annoying-arrows-advice right-char '(jump-char-forward iy-go-to-char right-word smart-forward))
(add-annoying-arrows-advice left-char '(jump-char-backward iy-go-to-char-backward left-word smart-backward))
(add-annoying-arrows-advice forward-char '(jump-char-forward iy-go-to-char right-word smart-forward))
(add-annoying-arrows-advice backward-char '(jump-char-backward iy-go-to-char-backward left-word smart-backward))

(add-annoying-arrows-advice backward-delete-char-untabify '(backward-kill-word kill-region-or-backward-word subword-backward-kill))
(add-annoying-arrows-advice backward-delete-char '(backward-kill-word kill-region-or-backward-word subword-backward-kill))
;;(add-annoying-arrows-advice delete-char '(subword-kill kill-line zap-to-char))

;;;###autoload
(define-minor-mode annoying-arrows-mode
  \"Annoying-Arrows emacs minor mode.\"
  nil \"\" nil)

;;;###autoload
(define-globalized-minor-mode global-annoying-arrows-mode
  annoying-arrows-mode annoying-arrows-mode)

(defun aa-add-suggestion (cmd alternative)
  (let ((old-alts (or (get cmd 'aa--alts)
                      ())))
    (unless (memq alternative old-alts)
      (put cmd 'aa--alts (cons alternative old-alts)))))

(defun aa-add-suggestions (cmd alternatives)
  (let ((old-alts (or (get cmd 'aa--alts)
                      ())))
    (put cmd 'aa--alts (append
                        (remove-if (lambda (cmd)
                                     (memq cmd old-alts)) alternatives)
                        old-alts))))

(provide 'annoying-arrows-mode)
;;; annoying-arrows-mode.el ends here
"]) (angular-snippets . [(20131125 314) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar nil]) (angry-police-captain . [(20120829 552) nil "Show quote from http://theangrypolicecaptain.com in the minibuffer" single ";;; Commentary:

;; The website \"http://theangrypolicecaptain.com\" shows a quote about
;; a angry police captain.
;;
;; The function `angry-police-captain' shows you a quote from that
;; webpage in the minibuffer.

"]) (android-mode . [(20131104 748) nil "Minor mode for Android application development" single ";;; Commentary:

;; Provides support for running Android SDK subprocesses like the
;; emulator, logcat, ddms and ant.  When loaded `dired-mode' and
;; `find-file' hooks are added to automatically enable `android-mode'
;; when opening a file or directory in an android project.


"]) (anaphora . [(20131022 450) nil "anaphoric macros providing implicit temp variables" single ";;; Commentary:
;;
;; Quickstart
;;
;;     (require 'anaphora)
;;
;;     (awhen (big-long-calculation)
;;       (foo it)      ; `it' is provided as
;;       (bar it))     ; a temporary variable
;;
;;     ;; anonymous function to compute factorial using `self'
;;     (alambda (x) (if (= x 0) 1 (* x (self (1- x)))))
;;
;; Explanation
;;
;; Anaphoric expressions implicitly create one or more temporary
;; variables which can be referred to during the expression.  This
;; technique can improve clarity in certain cases.  It also enables
;; recursion for anonymous functions.
;;
;; To use anaphora, place the anaphora.el library somewhere
;; Emacs can find it, and add the following to your ~/.emacs file:
;;
;;     (require 'anaphora)
;;
;; The following macros are made available
;;
;;     `aand'
;;     `ablock'
;;     `acase'
;;     `acond'
;;     `aecase'
;;     `aetypecase'
;;     `aif'
;;     `alambda'
;;     `alet'
;;     `aprog1'
;;     `aprog2'
;;     `atypecase'
;;     `awhen'
;;     `awhile'
;;     `a+'
;;     `a-'
;;     `a*'
;;     `a/'
;;
;; The following macros are experimental
;;
;;     `anaphoric-set'
;;     `anaphoric-setq'
;;
;; See Also
;;
;;     M-x customize-group RET anaphora RET
;;     http://en.wikipedia.org/wiki/On_Lisp
;;     http://en.wikipedia.org/wiki/Anaphoric_macro
;;
;; Notes
;;
;; Partially based on examples from the book \"On Lisp\", by Paul
;; Graham.
;;
;; When this library is loaded, the provided anaphoric forms are
;; registered as keywords in font-lock.  This may be disabled via
;; customize.
;;
;; Compatibility and Requirements
;;
;;     GNU Emacs version 24.4-devel     : yes, except macros marked experimental
;;     GNU Emacs version 24.3           : yes, except macros marked experimental
;;     GNU Emacs version 23.3           : yes, except macros marked experimental
;;     GNU Emacs version 22.2           : yes, except macros marked experimental
;;     GNU Emacs version 21.x and lower : unknown
;;
;; Bugs
;;
;; TODO
;;
;;     better face for it and self
;;
;;; License
;;
;; All code contributed by the author to this library is placed in the
;; public domain.  It is the author's belief that the portions adapted
;; from examples in \"On Lisp\" are in the public domain.  At least 10
;; lines of code have been adapted from the Emacs 'cl package (in the
;; function `anaphoric-setq').
;;
;; Regardless of the copyright status of individual functions, all
;; code herein is free software, and is provided without any express
;; or implied warranties.
;;
"]) (ample-zen-theme . [(20131129 440) nil "AmpleZen Theme for Emacs 24" single ";;; Commentary:

;; A combination of zenburn-emacs by Bozhidar Batsov and Ample Theme
;; by Jordon Biondo.  This theme is built with Emacs 24.  Based on version
;; 0.2.4 of ample-theme found at
;; https://github.com/jordonbiondo/ample-theme and version 2.1 of
;; zenburn-emacs found at http://github.com/bbatsov/zenburn-emacs

;; Mostly, I liked the colors of ample and the better highlighting and
;; and robustness of zenburn

"]) (ample-theme . [(20131208 2116) nil "Calm Dark Theme for Emacs" single ";;; Commentary:
;;
;;  The ample theme is a calm dark theme.
;;
;;  Full colored term/gui support only, 256 and down support coming eventually.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (all-ext . [(20130824 1206) ((all (1 0))) "Extension of M-x all" single ";;; Commentary: 
;; 
;; Extend M-x all to be editable M-x occur:
;;   - Show line number before line content (using overlay)
;;   - Can navigate with M-x next-error / M-x previous-error
;;
;; Call M-x all from anything/helm:
;;   1. Call anything/helm command showing lineno and content
;;      such as M-x anything-occur / anything-browse-code /
;;              helm-occur / helm-browse-code etc
;;   2. Press C-c C-a to show anything/helm contents into *All* buffer
;;   3. You can edit *All* buffer!
;;
;;; Installation:
;;
;; Put all-ext.el to your load-path.
;; The load-path is usually ~/elisp/.
;; It's set in your ~/.emacs like this:
;; (add-to-list 'load-path (expand-file-name \"~/elisp\"))
;;
;; And the following to your ~/.emacs startup file.
;;
;; (require 'all-ext)
;; ;; optional
;; (require 'helm-config) ;; or (require 'anything-config)
;;
;; No need more.

"]) (align-cljlet . [(20131016 2356) ((clojure-mode (1 11 5))) "Space align various Clojure forms" single ";;; Commentary:

;;; Description:
;;
;; This program exists because I was tired of manually aligning let
;; statements in clojure.  This program is designed to quickly and
;; easily allow let forms to be aligned.  This is my first Emacs
;; Lisp program and as a result if probably less than optimal.  Feel
;; free to suggest improvements or send in patches.
;;
;; This program was inspired by align-let.el although does not share
;; any of it's code.  I had considered altering align-let.el to
;; work correctly with Clojure however it was easiler to simply
;; start from scratch.
;;
"]) (alert . [(20130510 20) nil "Growl-style notification system for Emacs" single ";;; Commentary:

;; Alert is a Growl-workalike for Emacs which uses a common notification
;; interface and multiple, selectable \"styles\", whose use is fully
;; customizable by the user.
;;
;; * For module writers
;;
;; Just use `alert' instead of `message' as follows:
;;
;;   (require 'alert)
;;
;;   ;; This is the most basic form usage
;;   (alert \"This is an alert\")
;;
;;   ;; You can adjust the severity for more important messages
;;   (alert \"This is an alert\" :severity 'high)
;;
;;   ;; Or decrease it for purely informative ones
;;   (alert \"This is an alert\" :severity 'trivial)
;;
;;   ;; Alerts can have optional titles.  Otherwise, the title is the
;;   ;; buffer-name of the (current-buffer) where the alert originated.
;;   (alert \"This is an alert\" :title \"My Alert\")
;;
;;   ;; Further, alerts can have categories.  This allows users to
;;   ;; selectively filter on them.
;;   (alert \"This is an alert\" :title \"My Alert\" :category 'debug)
;;
;; * For users
;;
;; For the user, there are several variables to control when and how alerts
;; are presented.  By default, they appear in the minibuffer much the same
;; as a normal Emacs message.  But there are many more possibilities:
;;
;;   `alert-fade-time'
;;     Normally alerts disappear after this many seconds, if the style
;;     supports it.  The default is 5 seconds.
;;
;;   `alert-default-style'
;;     Pick the style to use if no other config rule matches.  The
;;     default is `message', but `growl' works well too.
;;
;;   `alert-reveal-idle-time'
;;     If a config rule choose to match on `idle', this is how many
;;     seconds idle the user has to be.  Defaults to 5 so that users
;;     don't miss any alerts, but 120 is also good.
;;
;;   `alert-persist-idle-time'
;;     After this many idle seconds, alerts will become sticky, and not
;;     fade away more.  The default is 15 minutes.
;;
;;   `alert-log-messages'
;;     By default, all alerts are logged to *Alerts* (and to *Messages*,
;;     if the `message' style is being used).  Set to nil to disable.
;;
;;   `alert-hide-all-notifications'
;;     Want alerts off entirely?  They still get logged, however, unless
;;     you've turned that off too.
;;
;;   `alert-user-configuration'
;;     This variable lets you control exactly how and when a particular
;;     alert, a class of alerts, or all alerts, get reported -- or if at
;;     all.  Use this to make some alerts use Growl, while others are
;;     completely silent.
;;
;; * Programmatically adding rules
;;
;; Users can also programmatically add configuration rules, in addition to
;; customizing `alert-user-configuration'.  Here is one that the author
;; currently uses with ERC, so that the fringe gets colored whenever people
;; chat on BitlBee:
;;
;;  (alert-add-rule :status   '(buried visible idle)
;;                  :severity '(moderate high urgent)
;;                  :mode     'erc-mode
;;                  :predicate
;;                  #'(lambda (info)
;;                      (string-match (concat \"\\\\`[^&].*@BitlBee\\\\'\")
;;                                    (erc-format-target-and/or-network)))
;;                  :persistent
;;                  #'(lambda (info)
;;                      ;; If the buffer is buried, or the user has been
;;                      ;; idle for `alert-reveal-idle-time' seconds,
;;                      ;; make this alert persistent.  Normally, alerts
;;                      ;; become persistent after
;;                      ;; `alert-persist-idle-time' seconds.
;;                      (memq (plist-get info :status) '(buried idle)))
;;                  :style 'fringe
;;                  :continue t)
;;
;; * Builtin alert styles
;;
;; There are several builtin styles, and it is trivial to create new ones.
;; The builtins are:
;;
;;   message  - Uses the Emacs `message' facility
;;   log      - Logs the alert text to *Alerts*, with a timestamp
;;   ignore   - Ignores the alert entirely
;;   fringe   - Changes the current frame's fringe background color
;;   growl    - Uses Growl on OS X, if growlnotify is on the PATH
;;   notifier - Uses terminal-notifier on OS X, if it is on the PATH
;;
;; * Defining new styles
;;
;; To create a new style, you need to at least write a \"notifier\", which is
;; a function that receives the details of the alert.  These details are
;; given in a plist which uses various keyword to identify the parts of the
;; alert.  Here is a prototypical style definition:
;;
;;  (alert-define-style 'style-name :title \"My Style's title\"
;;                      :notifier
;;                      (lambda (info)
;;                        ;; The message text is :message
;;                        (plist-get info :message)
;;                        ;; The :title of the alert
;;                        (plist-get info :title)
;;                        ;; The :category of the alert
;;                        (plist-get info :category)
;;                        ;; The major-mode this alert relates to
;;                        (plist-get info :mode)
;;                        ;; The buffer the alert relates to
;;                        (plist-get info :buffer)
;;                        ;; Severity of the alert.  It is one of:
;;                        ;;   `urgent'
;;                        ;;   `high'
;;                        ;;   `moderate'
;;                        ;;   `normal'
;;                        ;;   `low'
;;                        ;;   `trivial'
;;                        (plist-get info :severity)
;;                        ;; Whether this alert should persist, or fade away
;;                        (plist-get info :persistent)
;;                        ;; Data which was passed to `alert'.  Can be
;;                        ;; anything.
;;                        (plist-get info :data))
;;
;;                      ;; Removers are optional.  Their job is to remove
;;                      ;; the visual or auditory effect of the alert.
;;                      :remover
;;                      (lambda (info)
;;                        ;; It is the same property list that was passed to
;;                        ;; the notifier function.
;;                        ))

(eval-when-compile
  (require 'cl))

(defgroup alert nil
  \"Notification system for Emacs similar to Growl\"
  :group 'emacs)

(defcustom alert-severity-faces
  '((urgent   . alert-urgent-face)
    (high     . alert-high-face)
    (moderate . alert-moderate-face)
    (normal   . alert-normal-face)
    (low      . alert-low-face)
    (trivial  . alert-trivial-face))
  \"Faces associated by default with alert severities.\"
  :type '(alist :key-type symbol :value-type color)
  :group 'alert)

(defcustom alert-severity-colors
  '((urgent   . \"red\")
    (high     . \"orange\")
    (moderate . \"yellow\")
    (normal   . \"green\")
    (low      . \"blue\")
    (trivial  . \"purple\"))
  \"Colors associated by default with alert severities.
This is used by styles external to Emacs that don't understand faces.\"
  :type '(alist :key-type symbol :value-type color)
  :group 'alert)

(defcustom alert-reveal-idle-time 15
  \"If idle this many seconds, rules will match the `idle' property.\"
  :type 'integer
  :group 'alert)

(defcustom alert-persist-idle-time 900
  \"If idle this many seconds, all alerts become persistent.
This can be overriden with the Never Persist option (:never-persist).\"
  :type 'integer
  :group 'alert)

(defcustom alert-fade-time 5
  \"If not idle, alerts disappear after this many seconds.
The amount of idle time is governed by `alert-persist-idle-time'.\"
  :type 'integer
  :group 'alert)

(defcustom alert-hide-all-notifications nil
  \"If non-nil, no alerts are ever shown to the user.\"
  :type 'boolean
  :group 'alert)

(defcustom alert-log-messages t
  \"If non-nil, all alerts are logged to the *Alerts* buffer.\"
  :type 'boolean
  :group 'alert)

(defvar alert-styles nil)

(defun alert-styles-radio-type (widget-name)
  (append
   (list widget-name :tag \"Style\")
   (mapcar #'(lambda (style)
               (list 'const
                     :tag (or (plist-get (cdr style) :title)
                              (symbol-name (car style)))
                     (car style)))
           (setq alert-styles
                 (sort alert-styles
                       #'(lambda (l r)
                           (string< (symbol-name (car l))
                                    (symbol-name (car r)))))))))

(defcustom alert-default-style 'message
  \"The style to use if no rules match in the current configuration.
If a configured rule does match an alert, this style is not used;
it is strictly a fallback.\"
  :type (alert-styles-radio-type 'radio)
  :group 'alert)

(defun alert-configuration-type ()
  (list 'repeat
        (list
         'list :tag \"Select style if alert matches selector\"
         '(repeat
           :tag \"Selector\"
           (choice
            (cons :tag \"Severity\"
                  (const :format \"\" :severity)
                  (set (const :tag \"Urgent\" urgent)
                       (const :tag \"High\" high)
                       (const :tag \"Moderate\" moderate)
                       (const :tag \"Normal\" normal)
                       (const :tag \"Low\" low)
                       (const :tag \"Trivial\" trivial)))
            (cons :tag \"User Status\"
                  (const :format \"\" :status)
                  (set (const :tag \"Buffer not visible\" buried)
                       (const :tag \"Buffer visible\" visible)
                       (const :tag \"Buffer selected\" selected)
                       (const :tag \"Buffer selected, user idle\" idle)))
            (cons :tag \"Major Mode\"
                  (const :format \"\" :mode)
                  regexp)
            (cons :tag \"Category\"
                  (const :format \"\" :category)
                  regexp)
            (cons :tag \"Title\"
                  (const :format \"\" :title)
                  regexp)
            (cons :tag \"Message\"
                  (const :format \"\" :message)
                  regexp)
            (cons :tag \"Predicate\"
                  (const :format \"\" :predicate)
                  function)))
         (alert-styles-radio-type 'choice)
         '(set :tag \"Options\"
               (cons :tag \"Make alert persistent\"
                     (const :format \"\" :persistent)
                     (choice :value t (const :tag \"Yes\" t)
                             (function :tag \"Predicate\")))
               (cons :tag \"Never persist\"
                     (const :format \"\" :never-persist)
                     (choice :value t (const :tag \"Yes\" t)
                             (function :tag \"Predicate\")))
               (cons :tag \"Continue to next rule\"
                     (const :format \"\" :continue)
                     (choice :value t (const :tag \"Yes\" t)
                             (function :tag \"Predicate\")))
               ;;(list :tag \"Change Severity\"
               ;;      (radio :tag \"From\"
               ;;             (const :tag \"Urgent\" urgent)
               ;;             (const :tag \"High\" high)
               ;;             (const :tag \"Moderate\" moderate)
               ;;             (const :tag \"Normal\" normal)
               ;;             (const :tag \"Low\" low)
               ;;             (const :tag \"Trivial\" trivial))
               ;;      (radio :tag \"To\"
               ;;             (const :tag \"Urgent\" urgent)
               ;;             (const :tag \"High\" high)
               ;;             (const :tag \"Moderate\" moderate)
               ;;             (const :tag \"Normal\" normal)
               ;;             (const :tag \"Low\" low)
               ;;             (const :tag \"Trivial\" trivial)))
               ))))

(defcustom alert-user-configuration nil
  \"Rules that determine how and when alerts get displayed.\"
  :type (alert-configuration-type)
  :group 'alert)

(defvar alert-internal-configuration nil
  \"Rules added by `alert-add-rule'.
For user customization, see `alert-user-configuration'.\")

(defface alert-urgent-face
  '((t (:foreground \"Red\" :bold t)))
  \"Urgent alert face.\"
  :group 'alert)

(defface alert-high-face
  '((t (:foreground \"Dark Orange\" :bold t)))
  \"High alert face.\"
  :group 'alert)

(defface alert-moderate-face
  '((t (:foreground \"Gold\" :bold t)))
  \"Moderate alert face.\"
  :group 'alert)

(defface alert-normal-face
  '((t))
  \"Normal alert face.\"
  :group 'alert)

(defface alert-low-face
  '((t (:foreground \"Dark Blue\")))
  \"Low alert face.\"
  :group 'alert)

(defface alert-trivial-face
  '((t (:foreground \"Dark Purple\")))
  \"Trivial alert face.\"
  :group 'alert)

(defun alert-define-style (name &rest plist)
  \"Define a new style for notifying the user of alert messages.
To create a new style, you need to at least write a \\\"notifier\\\",
which is a function that receives the details of the alert.
These details are given in a plist which uses various keyword to
identify the parts of the alert.  Here is a prototypical style
definition:

\\(alert-define-style 'style-name :title \\\"My Style's title\\\"
                    :notifier
                    (lambda (info)
                      ;; The message text is :message
                      (plist-get info :message)
                      ;; The :title of the alert
                      (plist-get info :title)
                      ;; The :category of the alert
                      (plist-get info :category)
                      ;; The major-mode this alert relates to
                      (plist-get info :mode)
                      ;; The buffer the alert relates to
                      (plist-get info :buffer)
                      ;; Severity of the alert.  It is one of:
                      ;;   `urgent'
                      ;;   `high'
                      ;;   `moderate'
                      ;;   `normal'
                      ;;   `low'
                      ;;   `trivial'
                      (plist-get info :severity)
                      ;; Whether this alert should persist, or fade away
                      (plist-get info :persistent)
                      ;; Data which was passed to `alert'.  Can be
                      ;; anything.
                      (plist-get info :data))

                    ;; Removers are optional.  Their job is to remove
                    ;; the visual or auditory effect of the alert.
                    :remover
                    (lambda (info)
                      ;; It is the same property list that was passed to
                      ;; the notifier function.
                      ))\"
  (add-to-list 'alert-styles (cons name plist))
  (put 'alert-user-configuration 'custom-type (alert-configuration-type))
  (put 'alert-define-style 'custom-type (alert-styles-radio-type 'radio)))

(alert-define-style 'ignore :title \"Ignore Alert\"
                    :notifier #'ignore
                    :remover #'ignore)

;;;###autoload
(defun* alert-add-rule (&key severity status mode category title
                             message predicate (style alert-default-style)
                             persistent continue never-persist append)
  \"Programmatically add an alert configuration rule.

Normally, users should custoimze `alert-user-configuration'.
This facility is for module writers and users that need to do
things the Lisp way.  

Here is a rule the author currently uses with ERC, so that the
fringe gets colored whenever people chat on BitlBee:

\\(alert-add-rule :status   '(buried visible idle)
                :severity '(moderate high urgent)
                :mode     'erc-mode
                :predicate
                #'(lambda (info)
                    (string-match (concat \\\"\\\\\\\\`[^&].*@BitlBee\\\\\\\\'\\\")
                                  (erc-format-target-and/or-network)))
                :persistent
                #'(lambda (info)
                    ;; If the buffer is buried, or the user has been
                    ;; idle for `alert-reveal-idle-time' seconds,
                    ;; make this alert persistent.  Normally, alerts
                    ;; become persistent after
                    ;; `alert-persist-idle-time' seconds.
                    (memq (plist-get info :status) '(buried idle)))
                :style 'fringe
                :continue t)\"
  (let ((rule (list (list t) style (list t))))
    (if severity
        (nconc (nth 0 rule)
               (list (cons :severity
                           (if (listp severity)
                               severity
                             (list severity))))))
    (if status
        (nconc (nth 0 rule)
               (list (cons :status
                           (if (listp status)
                               status
                             (list status))))))
    (if mode
        (nconc (nth 0 rule)
               (list (cons :mode
                           (if (stringp mode)
                               mode
                             (concat \"\\\\`\" (symbol-name mode)
                                     \"\\\\'\"))))))
    (if category
        (nconc (nth 0 rule) (list (cons :category category))))
    (if title
        (nconc (nth 0 rule) (list (cons :title title))))
    (if message
        (nconc (nth 0 rule) (list (cons :message message))))
    (if predicate
        (nconc (nth 0 rule) (list (cons :predicate predicate))))
    (setcar rule (cdr (nth 0 rule)))

    (if persistent
        (nconc (nth 2 rule) (list (cons :persistent persistent))))
    (if never-persist
        (nconc (nth 2 rule) (list (cons :never-persist never-persist))))
    (if continue
        (nconc (nth 2 rule) (list (cons :continue continue))))
    (setcdr (cdr rule) (list (cdr (nth 2 rule))))

    (if (null alert-internal-configuration)
        (setq alert-internal-configuration (list rule))
      (if append
          (nconc alert-internal-configuration (list rule))
        (setq alert-internal-configuration
              (cons rule alert-internal-configuration))))

    rule))

(alert-define-style 'ignore :title \"Don't display alerts\")

(defun alert-colorize-message (message severity)
  (set-text-properties 0 (length message)
                       (list 'face (cdr (assq severity
                                              alert-severity-faces)))
                       message)
  message)

(defun alert-log-notify (info)
  (with-current-buffer
      (get-buffer-create \"*Alerts*\")
    (goto-char (point-max))
    (insert (format-time-string \"%H:%M %p - \")
            (alert-colorize-message (plist-get info :message)
                                    (plist-get info :severity))
            ?\\n)))

(defun alert-log-clear (info)
  (with-current-buffer
      (get-buffer-create \"*Alerts*\")
    (goto-char (point-max))
    (insert (format-time-string \"%H:%M %p - \")
            \"Clear: \" (plist-get info :message)
            ?\\n)))

(alert-define-style 'log :title \"Log to *Alerts* buffer\"
                    :notifier #'alert-log-notify
                    ;;:remover #'alert-log-clear
                    )

(defun alert-message-notify (info)
  (message (alert-colorize-message (plist-get info :message)
                                   (plist-get info :severity)))
  ;;(if (memq (plist-get info :severity) '(high urgency))
  ;;    (ding))
  )

(defun alert-message-remove (info)
  (message \"\"))

(alert-define-style 'message :title \"Display message in minibuffer\"
                    :notifier #'alert-message-notify
                    :remover #'alert-message-remove)

(copy-face 'fringe 'alert-saved-fringe-face)

(defun alert-fringe-notify (info)
  (set-face-background 'fringe (cdr (assq (plist-get info :severity)
                                          alert-severity-colors))))

(defun alert-fringe-restore (info)
  (copy-face 'alert-saved-fringe-face 'fringe))

(alert-define-style 'fringe :title \"Change the fringe color\"
                    :notifier #'alert-fringe-notify
                    :remover #'alert-fringe-restore)

(defcustom alert-growl-command (executable-find \"growlnotify\")
  \"Path to the growlnotify command.
This is found in the Growl Extras: http://growl.info/extras.php.\"
  :type 'file
  :group 'alert)

(defcustom alert-growl-priorities
  '((urgent   . 2)
    (high     . 2)
    (moderate . 1)
    (normal   . 0)
    (low      . -1)
    (trivial  . -2))
  \"A mapping of alert severities onto Growl priority values.\"
  :type '(alist :key-type symbol :value-type integer)
  :group 'alert)

(defsubst alert-encode-string (str)
  (encode-coding-string str (keyboard-coding-system)))

(defun alert-growl-notify (info)
  (if alert-growl-command
      (let ((args
             (list \"--appIcon\"  \"Emacs\"
                   \"--name\"     \"Emacs\"
                   \"--title\"    (alert-encode-string (plist-get info :title))
                   \"--message\"  (alert-encode-string (plist-get info :message))
                   \"--priority\" (number-to-string
                                 (cdr (assq (plist-get info :severity)
                                            alert-growl-priorities))))))
        (if (and (plist-get info :persistent)
                 (not (plist-get info :never-persist)))
            (nconc args (list \"--sticky\")))
        (apply #'call-process alert-growl-command nil nil nil args))
    (alert-message-notify info)))

(alert-define-style 'growl :title \"Notify using Growl\"
                    :notifier #'alert-growl-notify)

(defcustom alert-notifier-command (executable-find \"terminal-notifier\")
  \"Path to the terminal-notifier command.
From https://github.com/alloy/terminal-notifier.\"
  :type 'file
  :group 'alert)

(defun alert-notifier-notify (info)
  (if alert-notifier-command
      (let ((args
             (list \"-title\"   (alert-encode-string (plist-get info :title))
                   \"-message\" (alert-encode-string (plist-get info :message)))))
        (apply #'call-process alert-notifier-command nil nil nil args))
    (alert-message-notify info)))

(alert-define-style 'notifier :title \"Notify using terminal-notifier\"
                    :notifier #'alert-notifier-notify)

(defun alert-frame-notify (info)
  (let ((buf (plist-get info :buffer)))
    (if (eq (alert-buffer-status buf) 'buried)
        (let ((current-frame (selected-frame)))
          (with-selected-frame
              (make-frame '((width                . 80)
                            (height               . 20)
                            (top                  . -1)
                            (left                 . 0)
                            (left-fringe          . 0)
                            (right-fringe         . 0)
                            (tool-bar-lines       . nil)
                            (menu-bar-lines       . nil)
                            (vertical-scroll-bars . nil)
                            (unsplittable         . t)
                            (has-modeline-p       . nil)
                            (minibuffer           . nil)))
            (switch-to-buffer buf)
            ;;(set (make-local-variable 'mode-line-format) nil)
            (nconc info (list :frame (selected-frame))))
          (select-frame current-frame)))))

(defun alert-frame-remove (info)
  (unless (eq this-command 'handle-switch-frame)
    (delete-frame (plist-get info :frame) t)))

;; jww (2011-08-25): Not quite working yet
;;(alert-define-style 'frame :title \"Popup buffer in a frame\"
;;                    :notifier #'alert-frame-notify
;;                    :remover #'alert-frame-remove)

(defun alert-buffer-status (&optional buffer)
  (with-current-buffer (or buffer (current-buffer))
    (let ((wind (get-buffer-window)))
      (if wind
          (if (eq wind (selected-window))
              (if (and (current-idle-time)
                       (> (float-time (current-idle-time))
                          alert-reveal-idle-time))
                  'idle
                'selected)
            'visible)
        'buried))))

(defvar alert-active-alerts nil)

(defun alert-remove-when-active (remover info)
  (let ((idle-time (and (current-idle-time)
                        (float-time (current-idle-time)))))
    (cond
     ((and idle-time (> idle-time alert-persist-idle-time)))
     ((and idle-time (> idle-time alert-reveal-idle-time))
      (run-with-timer alert-fade-time nil
                      #'alert-remove-when-active remover info))
     (t
      (funcall remover info)))))

(defun alert-remove-on-command ()
  (let (to-delete)
    (dolist (alert alert-active-alerts)
      (when (eq (current-buffer) (nth 0 alert))
        (push alert to-delete)
        (if (nth 2 alert)
            (funcall (nth 2 alert) (nth 1 alert)))))
    (dolist (alert to-delete)
      (setq alert-active-alerts (delq alert alert-active-alerts)))))

;;;###autoload
(defun* alert (message &key (severity 'normal) title category
                       buffer mode data style persistent never-persist)
  \"Alert the user that something has happened.
MESSAGE is what the user will see.  You may also use keyword
arguments to specify additional details.  Here is a full example:

\\(alert \\\"This is a message\\\"
       :severity 'high          ;; The default severity is `normal'
       :title \\\"Title\\\"         ;; An optional title
       :category 'example       ;; A symbol to identify the message
       :mode 'text-mode         ;; Normally determined automatically
       :buffer (current-buffer) ;; This is the default
       :data nil                ;; Unused by alert.el itself
       :persistent nil          ;; Force the alert to be persistent;
                                ;; it is best not to use this
       :never-persist nil       ;; Force this alert to never persist
       :style 'fringe)          ;; Force a given style to be used;
                                ;; this is only for debugging!

If no :title is given, the buffer-name of :buffer is used.  If
:buffer is nil, it is the current buffer at the point of call.

:data is an opaque value which modules can pass through to their
own styles if they wish.

Here are some more typical examples of usage:

  ;; This is the most basic form usage
  (alert \\\"This is an alert\\\")

  ;; You can adjust the severity for more important messages
  (alert \\\"This is an alert\\\" :severity 'high)

  ;; Or decrease it for purely informative ones
  (alert \\\"This is an alert\\\" :severity 'trivial)

  ;; Alerts can have optional titles.  Otherwise, the title is the
  ;; buffer-name of the (current-buffer) where the alert originated.
  (alert \\\"This is an alert\\\" :title \\\"My Alert\\\")

  ;; Further, alerts can have categories.  This allows users to
  ;; selectively filter on them.
  (alert \\\"This is an alert\\\" :title \\\"My Alert\\\"
         :category 'some-category-or-other)\"
  (destructuring-bind
      (alert-buffer current-major-mode current-buffer-status
                    current-buffer-name)
      (with-current-buffer (or buffer (current-buffer))
        (list (current-buffer)
              (or mode major-mode)
              (alert-buffer-status)
              (buffer-name)))

    (let ((base-info (list :message message
                           :title (or title current-buffer-name)
                           :severity severity
                           :category category
                           :buffer alert-buffer
                           :mode current-major-mode
                           :data data))
          matched)

      (if alert-log-messages
          (alert-log-notify base-info))

      (unless alert-hide-all-notifications
        (catch 'finish
          (dolist (config (append alert-user-configuration
                                  alert-internal-configuration))
            (let* ((style-def (cdr (assq (or style (nth 1 config))
                                         alert-styles)))
                   (options (nth 2 config))
                   (persist-p (or persistent
                                  (cdr (assq :persistent options))))
                   (persist (if (functionp persist-p)
                                (funcall persist-p base-info)
                              persist-p))
                   (never-persist-p
                    (or never-persist
                        (cdr (assq :never-persist options))))
                   (never-per (if (functionp never-persist-p)
                                  (funcall never-persist-p base-info)
                                never-persist-p))
                   (continue (cdr (assq :continue options)))
                   info)
              (setq info (if (not (memq :persistent base-info))
                             (append base-info (list :persistent persist))
                           base-info)
                    info (if (not (memq :never-persist info))
                             (append info (list :never-persist never-per))
                           info))
              (when
                  (or style           ; :style always \"matches\", for testing
                      (not
                       (memq
                        nil
                        (mapcar
                         #'(lambda (condition)
                             (case (car condition)
                               (:severity
                                (memq severity (cdr condition)))
                               (:status
                                (memq current-buffer-status (cdr condition)))
                               (:mode
                                (string-match
                                 (cdr condition)
                                 (symbol-name current-major-mode)))
                               (:category
                                (and category (string-match
                                               (cdr condition)
                                               (if (stringp category)
                                                   category
                                                 (symbol-name category)))))
                               (:title
                                (and title
                                     (string-match (cdr condition) title)))
                               (:message
                                (string-match (cdr condition) message))
                               (:predicate
                                (funcall (cdr condition) info))))
                         (nth 0 config)))))

                (let ((notifier (plist-get style-def :notifier)))
                  (if notifier
                      (funcall notifier info)))
                (setq matched t)

                (let ((remover (plist-get style-def :remover)))
                  (add-to-list 'alert-active-alerts
                               (list alert-buffer info remover))
                  (with-current-buffer alert-buffer
                    (add-hook 'post-command-hook
                              'alert-remove-on-command nil t))
                  (if (and remover (or (not persist) never-per))
                      (run-with-timer alert-fade-time nil
                                      #'alert-remove-when-active
                                      remover info))
                  (if (or style
                          (not (if (functionp continue)
                                   (funcall continue info)
                                 continue)))
                      (throw 'finish t))))))))

      (if (and alert-default-style
               (not matched))
          (let ((notifier
                 (plist-get (cdr (assq alert-default-style
                                       alert-styles))
                            :notifier)))
            (if notifier
                (funcall notifier base-info)))))))

(provide 'alert)

;;; alert.el ends here
"]) (alect-themes . [(20140110 200) nil "4 configurable color themes for Emacs 24" tar nil]) (airplay . [(20130212 426) ((request (20130110 2144)) (simple-httpd (1 4 1)) (deferred (0 3 1))) "Airplay bindings to Emacs" tar ";;; Commentary:

;; A client for AirPlay Server.

"]) (ahg . [(20131230 550) nil "Alberto's Emacs interface for Mercurial (Hg)" single ";;; Commentary:
;;; A simple Emacs interface for the Mercurial (Hg) Distributed SCM.
;;; Installation: put this file where Emacs can find it, and then add the line
;;; (require 'ahg)
;;; to your .emacs

;;; Code goes here.

(require 'diff-mode)
(require 'easymenu)
(require 'log-edit)
(require 'ewoc)
(eval-when-compile
  (require 'cl))
(require 'grep)
(require 'dired)
(require 'vc-annotate)

;;-----------------------------------------------------------------------------
;; ahg-version
;;-----------------------------------------------------------------------------

(defvar ahg-version-string \"1.0.0\")

(defun ahg-version ()
  \"Shows aHg version number.\"
  (interactive)
  (message \"aHg version %s\" ahg-version-string))

;;-----------------------------------------------------------------------------
;; the global aHg menu and keymap
;;-----------------------------------------------------------------------------

(easy-menu-add-item nil '(\"tools\")
                    '(\"aHg\"
                      [\"Status\" ahg-status t]
                      [\"Log Summary\" ahg-short-log t]
                      [\"Detailed Log\" ahg-log t]
                      [\"Revision DAG\" ahg-glog t]
                      [\"Commit Current File\" ahg-commit-cur-file t]
                      [\"View Changes of Current File\" ahg-diff-cur-file t]
                      [\"View Change Log of Current File\" ahg-log-cur-file t]
                      [\"Annotate Current File\" ahg-annotate-cur-file t]
                      [\"Revert Current File\" ahg-revert-cur-file t]
                      [\"Remove Current File\" ahg-rm-cur-file t]
                      [\"Grep the Working Directory\" ahg-manifest-grep t]
                      [\"--\" nil nil]
                      (\"Mercurial Queues\"
                       [\"New Patch...\" ahg-qnew t]
                       [\"View Qdiff\" ahg-qdiff t]
                       [\"Refresh Current Patch\" ahg-qrefresh t]
                       [\"Go to Patch...\" ahg-qgoto t]
                       [\"Move to Patch...\" ahg-qmove t]
                       [\"Switch to Patch...\" ahg-qswitch t]
                       [\"Apply Patch to the Working Copy...\" ahg-qapply t]
                       [\"Pop All Patches\" ahg-qpop-all t]
                       [\"Show Name of Current Patch\" ahg-qtop t]
                       [\"List All Patches\" ahg-mq-list-patches t]
                       [\"Delete Patch...\" ahg-qdelete t]
                       [\"Convert Current Patch to Changeset\"
                        ahg-mq-convert-patch-to-changeset t]
                       [\"Edit series File\" ahg-mq-edit-series t])
                      [\"--\" nil nil]
                      [\"Execute Hg Command\" ahg-do-command t]
                      [\"Help on Hg Command\" ahg-command-help t])
                    \"PCL-CVS\")

(defvar ahg-global-map
  (let ((map (make-sparse-keymap)))
    (define-key map \"s\" 'ahg-status)
    (define-key map \"l\" 'ahg-short-log)
    (define-key map \"L\" 'ahg-log)
    (define-key map \"G\" 'ahg-glog)
    (define-key map \"g\" 'ahg-glog)
    (define-key map \"!\" 'ahg-do-command)
    (define-key map \"h\" 'ahg-command-help)
    (define-key map \"c\" 'ahg-commit-cur-file)
    (define-key map \"=\" 'ahg-diff-cur-file)
    (define-key map \"a\" 'ahg-annotate-cur-file)
    (define-key map \"r\" 'ahg-revert-cur-file)
    (define-key map \"R\" 'ahg-rm-cur-file)
    (define-key map \"f\" 'ahg-manifest-grep)
    (define-key map (kbd \"C-l\") 'ahg-log-cur-file)
    (define-key map \"Q\"
      (let ((qmap (make-sparse-keymap)))
        (define-key qmap \"n\" 'ahg-qnew)
        (define-key qmap \"=\" 'ahg-qdiff)
        (define-key qmap \"r\" 'ahg-qrefresh)
        (define-key qmap \"g\" 'ahg-qgoto)
        (define-key qmap \"m\" 'ahg-qmove)
        (define-key qmap \"s\" 'ahg-qswitch)
        (define-key qmap \"a\" 'ahg-qapply)
        (define-key qmap \"p\" 'ahg-qpop-all)
        (define-key qmap \"t\" 'ahg-qtop)
        (define-key qmap \"d\" 'ahg-qdelete)
        (define-key qmap \"f\" 'ahg-mq-convert-patch-to-changeset)
        (define-key qmap \"l\" 'ahg-mq-list-patches)
        (define-key qmap \"e\" 'ahg-mq-edit-series)
        qmap))
    map))

;;-----------------------------------------------------------------------------
;; Customization
;;-----------------------------------------------------------------------------

(defgroup ahg nil \"aHg Mercurial Frontend\" :group 'tools)

(defcustom ahg-hg-command \"hg\"
  \"Command to use for invoking Mercurial.\"
  :group 'ahg :type 'string)

(defcustom ahg-global-key-prefix \"hg\"
  \"Prefix of globally-available aHg commands.\"
  :group 'ahg :type 'string
  :set (function (lambda (symbol value)
                   (when (boundp symbol) (global-unset-key (eval symbol)))
                   (global-set-key (set symbol value) ahg-global-map))))

(defcustom ahg-do-command-insert-header t
  \"If non-nil, `ahg-do-command' will insert a header line in the
command output.\" :group 'ahg :type 'boolean)

(defcustom ahg-do-command-show-buffer-immediately t
  \"If non-nil, `ahg-do-command' will immediately switch to the buffer with the
command output, instead of waiting for the command to finish.\"
  :group 'ahg :type 'boolean)

(defcustom ahg-do-command-interactive-regexp \"\\\\<\\\\(in\\\\|incoming\\\\|out\\\\|outgoing\\\\|pull\\\\|push\\\\)\\\\>\"
  \"Regexp for commands that might require a username/password
input in `ahg-do-command'.\"
  :group 'ahg :type 'regexp)

(defcustom ahg-auto-refresh-status-buffer t
  \"If non-nil, automatically refresh the *aHg status* buffer when certain
operations (e.g. add, remove, commit) are performed.\"
  :group 'ahg :type 'boolean)

(defcustom ahg-restore-window-configuration-on-quit t
  \"If non-nil, when `ahg-buffer-quit' will restore the window configuration.\"
  :group 'ahg :type 'boolean)

(defcustom ahg-diff-use-git-format t
  \"If non-nil, aHg commands that output a diff will use the git format.\"
  :group 'ahg :type 'boolean)

(defcustom ahg-qrefresh-use-short-flag t
  \"If non-nil, aHg qrefresh command will use the --short flag. See the help
for qrefresh for more information.\"
  :group 'ahg :type 'boolean)

(defcustom ahg-yesno-short-prompt t
  \"If non-nil, use short form (y or n) when asking for confimation to the user.\"
  :group 'ahg :type 'boolean)

(defcustom ahg-i18n t
  \"If non-nil, use i18n when calling Mercurial.
Note: disabling i18n is done by unsetting the LANG environment variable
when calling hg. This might not always work.\"
  :group 'ahg :type 'boolean)

(defcustom ahg-subprocess-coding-system nil
  \"If non-nil, coding system used when reading output of hg commands.\"
  :group 'ahg :type 'symbol)

(defcustom ahg-log-revrange-size 100
  \"Length of default revision range for `ahg-log',
`ahg-short-log' and `ahg-glog'.\"
  :group 'ahg :type 'integer)

(defcustom ahg-map-cmdline-file nil
  \"Path to the file for mapping the command line.
For `nil' the default file is used.\"
  :group 'ahg :type 'string)

(defface ahg-status-marked-face
  '((default (:inherit font-lock-preprocessor-face)))
  \"Face for marked files in aHg status buffers.\" :group 'ahg)

(defface ahg-status-modified-face
  '((default (:inherit font-lock-function-name-face)))
  \"Face for modified files in aHg status buffers.\" :group 'ahg)

(defface ahg-status-added-face
  '((default (:inherit font-lock-type-face)))
  \"Face for added files in aHg status buffers.\" :group 'ahg)

(defface ahg-status-removed-face
  '((default (:inherit font-lock-constant-face)))
  \"Face for removed files in aHg status buffers.\" :group 'ahg)

(defface ahg-status-clean-face
  '((default (:inherit default)))
  \"Face for clean files in aHg status buffers.\" :group 'ahg)

(defface ahg-status-deleted-face
  '((default (:inherit font-lock-string-face)))
  \"Face for deleted files in aHg status buffers.\" :group 'ahg)

(defface ahg-status-ignored-face
  '((default (:inherit font-lock-comment-face)))
  \"Face for ignored files in aHg status buffers.\" :group 'ahg)

(defface ahg-status-unknown-face
  '((default (:inherit font-lock-variable-name-face)))
  \"Face for unknown files in aHg status buffers.\" :group 'ahg)

(defface ahg-short-log-revision-face
  '((default (:inherit font-lock-function-name-face)))
  \"Face for revision field in aHg short log buffers.\" :group 'ahg)

(defface ahg-short-log-date-face
  '((default (:inherit font-lock-string-face)))
  \"Face for date field in aHg short log buffers.\" :group 'ahg)

(defface ahg-log-revision-face
  '((default (:inherit font-lock-variable-name-face)))
  \"Face for revision field in aHg log buffers.\" :group 'ahg)

(defface ahg-log-field-face
  '((default (:inherit font-lock-function-name-face)))
  \"Face for fields in aHg log buffers.\" :group 'ahg)

(defface ahg-log-branch-face
  '((default (:inherit font-lock-keyword-face)))
  \"Face for tags and branches in aHg log buffers.\" :group 'ahg)

(defface ahg-short-log-user-face
  '((default (:inherit font-lock-type-face)))
  \"Face for user field in aHg short log buffers.\" :group 'ahg)

(defface ahg-header-line-face
  '((default (:inherit font-lock-comment-face)))
  \"Face for header lines in aHg buffers.\" :group 'ahg)

(defface ahg-header-line-root-face
  '((default (:inherit font-lock-constant-face)))
  \"Face for repository path in header lines of aHg buffers.\" :group 'ahg)

;;-----------------------------------------------------------------------------
;; Variable definitions for faces
;;-----------------------------------------------------------------------------

(defvar ahg-status-marked-face 'ahg-status-marked-face)
(defvar ahg-status-modified-face 'ahg-status-modified-face)
(defvar ahg-status-added-face 'ahg-status-added-face)
(defvar ahg-status-removed-face 'ahg-status-removed-face)
(defvar ahg-status-clean-face 'ahg-status-clean-face)
(defvar ahg-status-deleted-face 'ahg-status-deleted-face)
(defvar ahg-status-ignored-face 'ahg-status-ignored-face)
(defvar ahg-status-unknown-face 'ahg-status-unknown-face)
(defvar ahg-short-log-revision-face 'ahg-short-log-revision-face)
(defvar ahg-short-log-date-face 'ahg-short-log-date-face)
(defvar ahg-log-field-face 'ahg-log-field-face)
(defvar ahg-log-branch-face 'ahg-log-branch-face)
(defvar ahg-log-revision-face 'ahg-log-revision-face)
(defvar ahg-short-log-user-face 'ahg-short-log-user-face)
(defvar ahg-header-line-face 'ahg-header-line-face)
(defvar ahg-header-line-root-face 'ahg-header-line-root-face)
(defvar ahg-invisible-face
  (progn
    (copy-face 'default 'ahg-invisible-face)
    (set-face-foreground 'ahg-invisible-face (face-background 'default))
    'ahg-invisible-face))


;;-----------------------------------------------------------------------------
;; some dynamically-generated variables, defined here to prevent compiler
;;-----------------------------------------------------------------------------
(defvar ahg-status-extra-switches)
(defvar ahg-root)
(defvar ewoc)
(defvar ahg-window-configuration)


;;-----------------------------------------------------------------------------
;; hg root
;;-----------------------------------------------------------------------------

(defun ahg-root ()
  \"Returns the root of the tree handled by Mercurial, or nil if
the current dir is not under hg.\"
  (with-temp-buffer
    (when (= (ahg-call-process \"root\") 0)
      (buffer-substring-no-properties (point-min) (1- (point-max))))))

;;-----------------------------------------------------------------------------
;; hg identify
;;-----------------------------------------------------------------------------

(defun ahg-identify (&optional root)
  (interactive)
  (with-temp-buffer
    (let* ((args (list \"-nibt\"))
           (status
           (if root
               (let ((default-directory (file-name-as-directory root)))
                 (ahg-call-process \"identify\" args))
             (ahg-call-process \"identify\" args))))
      (when (= status 0)
        (concat
         \"Id: \"
         (buffer-substring-no-properties (point-min) (1- (point-max))))))))

(defun ahg-summary-info (root)
  (with-temp-buffer
    (let ((status (let ((default-directory (file-name-as-directory root)))
                    (ahg-call-process \"summary\" nil))))
      (if (= status 0)
          (buffer-substring-no-properties (point-min) (1- (point-max)))
        ;; if hg summary is not available, fall back to hg identify
        (ahg-identify root)))))

;;-----------------------------------------------------------------------------
;; hg status
;;-----------------------------------------------------------------------------

(defvar ahg-face-status-hash
  (let* ((test (define-hash-table-test 'ahg-str-hash 'string= 'sxhash))
         (h (make-hash-table :test 'ahg-str-hash)))
    (puthash \"M\" ahg-status-modified-face h)
    (puthash \"A\" ahg-status-added-face h)
    (puthash \"R\" ahg-status-removed-face h)
    (puthash \"C\" ahg-status-clean-face h)
    (puthash \"=\" ahg-status-clean-face h) ;; for Mercurial > 0.9.5
    (puthash \"!\" ahg-status-deleted-face h)
    (puthash \"I\" ahg-status-ignored-face h)
    (puthash \"?\" ahg-status-unknown-face h)
    h))

(defvar ahg-status-line-map
  (let ((map (make-sparse-keymap)))
    (define-key map [mouse-2] 'ahg-status-visit-file-other-window)
    map))

(defun ahg-face-from-status (status-code)
  (gethash status-code ahg-face-status-hash 'default))


(define-derived-mode ahg-status-mode special-mode \"aHg-status\"
  \"Major mode for *hg status* buffers.

Commands:
\\\\{ahg-status-mode-map}
\"
  (buffer-disable-undo) ;; undo info not needed here
  (toggle-read-only t)
  (font-lock-mode nil)
  (define-key ahg-status-mode-map \" \" 'ahg-status-toggle-mark)
  (define-key ahg-status-mode-map \"m\" 'ahg-status-mark)
  (define-key ahg-status-mode-map \"u\" 'ahg-status-unmark)
  (define-key ahg-status-mode-map (kbd \"M-DEL\") 'ahg-status-unmark-all)
  (define-key ahg-status-mode-map \"c\" 'ahg-status-commit)
  (define-key ahg-status-mode-map \"a\" 'ahg-status-add)
  (define-key ahg-status-mode-map \"A\" 'ahg-status-addremove)
  (define-key ahg-status-mode-map \"=\" 'ahg-status-diff)
  (define-key ahg-status-mode-map \"D\" 'ahg-status-diff-all)
  (define-key ahg-status-mode-map \"r\" 'ahg-status-remove)
  (define-key ahg-status-mode-map \"g\" 'ahg-status-refresh)
  (define-key ahg-status-mode-map \"I\" 'ahg-status-add-to-hgignore)
  (define-key ahg-status-mode-map \"q\" 'ahg-buffer-quit)
  (define-key ahg-status-mode-map \"U\" 'ahg-status-undo)
  (define-key ahg-status-mode-map \"!\" 'ahg-status-do-command)
  (define-key ahg-status-mode-map \"l\" 'ahg-status-short-log)
  (define-key ahg-status-mode-map \"L\" 'ahg-status-log)
  (define-key ahg-status-mode-map \"G\" 'ahg-status-glog)
  (define-key ahg-status-mode-map \"f\" 'ahg-status-visit-file)
  (define-key ahg-status-mode-map \"\\r\" 'ahg-status-visit-file)
  (define-key ahg-status-mode-map \"o\" 'ahg-status-visit-file-other-window)
  (define-key ahg-status-mode-map \"h\" 'ahg-command-help)
  (define-key ahg-status-mode-map \"$\" 'ahg-status-shell-command)
  (define-key ahg-status-mode-map \"F\" 'ahg-status-dired-find)
  (define-key ahg-status-mode-map \"d\" 'ahg-status-delete)
  (let ((showmap (make-sparse-keymap)))
    (define-key showmap \"s\" 'ahg-status-show-default)
    (define-key showmap \"A\" 'ahg-status-show-all)
    (define-key showmap \"t\" 'ahg-status-show-tracked)
    (define-key showmap \"m\" 'ahg-status-show-modified)
    (define-key showmap \"a\" 'ahg-status-show-added)
    (define-key showmap \"r\" 'ahg-status-show-removed)
    (define-key showmap \"d\" 'ahg-status-show-deleted)
    (define-key showmap \"c\" 'ahg-status-show-clean)
    (define-key showmap \"u\" 'ahg-status-show-unknown)
    (define-key showmap \"i\" 'ahg-status-show-ignored)
    (define-key ahg-status-mode-map \"s\" showmap))
  (let ((qmap (make-sparse-keymap)))
    (define-key qmap \"n\" 'ahg-qnew)
    (define-key qmap \"=\" 'ahg-qdiff)
    (define-key qmap \"r\" 'ahg-qrefresh)
    (define-key qmap \"g\" 'ahg-qgoto)
    (define-key qmap \"m\" 'ahg-qmove)
    (define-key qmap \"s\" 'ahg-qswitch)
    (define-key qmap \"a\" 'ahg-qapply)
    (define-key qmap \"p\" 'ahg-qpop-all)
    (define-key qmap \"t\" 'ahg-qtop)
    (define-key qmap \"d\" 'ahg-qdelete)
    (define-key qmap \"f\" 'ahg-mq-convert-patch-to-changeset)
    (define-key qmap \"l\" 'ahg-mq-list-patches)
    (define-key qmap \"e\" 'ahg-mq-edit-series)
    (define-key ahg-status-mode-map \"Q\" qmap))
  (let ((imap (make-sparse-keymap)))
    (define-key imap \"c\" 'ahg-record)
    (let ((iqmap (make-sparse-keymap)))
      (define-key iqmap \"n\" 'ahg-record-qnew)
      (define-key imap \"Q\" iqmap))
    (define-key ahg-status-mode-map \"i\" imap))
  (let ((amap (make-sparse-keymap)))
    (define-key amap \"a\" 'ahg-status-commit-amend)
    (define-key ahg-status-mode-map \"C\" amap))
  (easy-menu-add ahg-status-mode-menu ahg-status-mode-map))

(easy-menu-define ahg-status-mode-menu ahg-status-mode-map \"aHg Status\"
  '(\"aHg Status\"
    [\"Visit File\" ahg-status-visit-file [:keys \"f\" :active t]]
    [\"Visit File (Other Window)\" ahg-status-visit-file-other-window
     [:keys \"o\" :active t]]
    [\"--\" nil nil]
    [\"Commit\" ahg-status-commit [:keys \"c\" :active t]]
    [\"Interactive Commit (Record)\" ahg-record [:keys \"ic\" :active t]]
    [\"Amend\" ahg-status-commit-amend [:keys \"Ca\" :active t]]
    [\"Add\" ahg-status-add [:keys \"a\" :active t]]
    [\"Remove\" ahg-status-remove [:keys \"r\" :active t]]
    [\"Add/Remove\" ahg-status-addremove [:keys \"A\" :active t]]
    [\"Add to .hgignore\" ahg-status-add-to-hgignore [:keys \"I\" :active t]]
    [\"Undo\" ahg-status-undo [:keys \"U\" :active t]]
    [\"Delete\" ahg-status-delete [:keys \"d\" :active t]]
    [\"Hg Command\" ahg-status-do-command [:keys \"!\" :active t]]
    [\"Shell Command\" ahg-status-shell-command [:keys \"$\" :active t]]
    [\"--\" nil nil]
    [\"Toggle Mark\" ahg-status-toggle-mark [:keys \" \" :active t]]
    [\"Mark\" ahg-status-mark [:keys \"m\" :active t]]
    [\"Unmark\" ahg-status-unmark [:keys \"u\" :active t]]
    [\"Unmark All\" ahg-status-unmark-all [:keys (kbd \"M-DEL\") :active t]]
    [\"Show Marked in Dired\" ahg-status-dired-find [:keys \"F\" :active t]]
    [\"--\" nil nil]
    [\"Log Summary\" ahg-short-log [:keys \"l\" :active t]]
    [\"Detailed Log\" ahg-log [:keys \"L\" :active t]]
    [\"Revision DAG\" ahg-glog [:keys \"G\" :active t]]
    [\"Diff\" ahg-status-diff [:keys \"=\" :active t]]
    [\"Diff Marked\" ahg-status-diff-all [:keys \"D\" :active t]]
    [\"--\" nil nil]
    (\"Show\"
     [\"Default\" ahg-status-show-default [:keys \"ss\" :active t]]
     [\"All\" ahg-status-show-all [:keys \"sA\" :active t]]
     [\"Tracked\" ahg-status-show-tracked [:keys \"st\" :active t]]
     [\"Modified\" ahg-status-show-modified [:keys \"sm\" :active t]]
     [\"Added\" ahg-status-show-added [:keys \"sa\" :active t]]
     [\"Removed\" ahg-status-show-removed [:keys \"sr\" :active t]]
     [\"Deleted\" ahg-status-show-deleted [:keys \"sd\" :active t]]
     [\"Clean\" ahg-status-show-clean [:keys \"sc\" :active t]]
     [\"Unknown\" ahg-status-show-unknown [:keys \"su\" :active t]]
     [\"Ignored\" ahg-status-show-ignored [:keys \"si\" :active t]]
     )
    [\"--\" nil nil]
    (\"Mercurial Queues\"
     [\"New Patch...\" ahg-qnew [:keys \"Qn\" :active t]]
     [\"New Interactive Patch\" ahg-record-qnew [:keys \"iQn\" :active t]]
     [\"View Qdiff\" ahg-qdiff [:keys \"Q=\" :active t]]
     [\"Refresh Current Patch\" ahg-qrefresh [:keys \"Qr\" :active t]]
     [\"Go to Patch...\" ahg-qgoto [:keys \"Qg\" :active t]]
     [\"Move to Patch...\" ahg-qmove [:keys \"Qm\" :active t]]
     [\"Switch to Patch...\" ahg-qswitch [:keys \"Qs\" :active t]]
     [\"Apply Patch to the Working Copy...\" ahg-qapply [:keys \"Qa\" :active t]]
     [\"Pop All Patches\" ahg-qpop-all [:keys \"Qp\" :active t]]
     [\"Show Name of Current Patch\" ahg-qtop [:keys \"Qt\" :active t]]
     [\"List All Patches\" ahg-mq-list-patches [:keys \"Ql\" :active t]]
     [\"Delete Patch...\" ahg-qdelete [:keys \"Qd\" :active t]]
     [\"Convert Current Patch to Changeset\"
      ahg-mq-convert-patch-to-changeset [:keys \"Qf\" :active t]]
     [\"Edit series File\" ahg-mq-edit-series [:keys \"Qe\" :active t]])
    [\"--\" nil nil]
    [\"Help on Hg Command\" ahg-command-help [:keys \"h\" :active t]]
    [\"--\" nil nil]
    [\"Refresh\" ahg-status-refresh [:keys \"g\" :active t]]
    [\"Quit\" ahg-buffer-quit [:keys \"q\" :active t]]
    ))


(defvar ahg-status-consider-extra-switches nil)

(defun ahg-status (&rest extra-switches)
  \"Run hg status. When called non-interactively, it is possible
to pass extra switches to hg status.\"
  (interactive)
  (let ((buf (get-buffer-create \"*aHg-status*\"))
        (curdir default-directory)
        (show-message (interactive-p))
        (root (ahg-root)))
    (when ahg-status-consider-extra-switches
      (let ((sbuf (ahg-get-status-buffer root)))
        (when sbuf
          (with-current-buffer sbuf
            (setq extra-switches ahg-status-extra-switches)))))    
    (with-current-buffer buf
      (let ((inhibit-read-only t))
        (erase-buffer))
      (setq default-directory (file-name-as-directory curdir))
      (set (make-local-variable 'ahg-root) root)
      (set (make-local-variable 'ahg-status-extra-switches) extra-switches)
      (ahg-push-window-configuration))
    (ahg-generic-command
     \"status\" extra-switches
     (lexical-let ((no-pop ahg-status-no-pop)
                   (point-pos ahg-status-point-pos))
       (lambda (process status)
         (ahg-status-sentinel process status no-pop point-pos))) buf
         nil (not show-message))))

(defun ahg-status-pp (data)
  \"Pretty-printer for data elements in a *hg status* buffer.\"
  ;; data is a cons cell: (marked flag (hg status . filename))
  (let ((marked (car data))
        (status-code (cadr data))
        (filename (cddr data)))
    (if marked
        (progn
          (insert (propertize \"*\" 'face (cons 'foreground-color \"#00CC00\")))
          (insert (propertize (concat status-code \" \" filename)
                              'face ahg-status-marked-face)))
      (insert (propertize (concat \" \" status-code \" \" filename)
                          'face (ahg-face-from-status status-code)
                          'mouse-face 'highlight
                          'keymap ahg-status-line-map)))))


(defun ahg-status-toggle-mark ()
  (interactive)
  (let* ((node (ewoc-locate ewoc))
         (data (and node (ewoc-data node)))
         (inhibit-read-only t))
    (when data
      (if (car data) (ewoc-set-data node (cons nil (cdr data)))
        (ewoc-set-data node (cons t (cdr data))))
      (ewoc-invalidate ewoc node)
      (setq node (ewoc-next ewoc node))
      (when node (goto-char (ewoc-location node))))))

(defun ahg-status-do-mark (yes)
  (let* ((node (ewoc-locate ewoc))
         (data (and node (ewoc-data node)))
         (inhibit-read-only t))
    (when data
      (if yes (ewoc-set-data node (cons t (cdr data)))
        (ewoc-set-data node (cons nil (cdr data))))
      (ewoc-invalidate ewoc node)
      (setq node (ewoc-next ewoc node))
      (when node (goto-char (ewoc-location node))))))

(defun ahg-status-mark () (interactive) (ahg-status-do-mark t))
(defun ahg-status-unmark () (interactive) (ahg-status-do-mark nil))

(defun ahg-status-unmark-all ()
  (interactive)
  (ewoc-map (lambda (d) (when (car d) (setcar d nil) t)) ewoc))

(defun ahg-status-show-default () (interactive) (ahg-status \"\"))
(defun ahg-status-show-all () (interactive) (ahg-status \"-A\"))
(defun ahg-status-show-tracked () (interactive) (ahg-status \"-mardc\"))
(defun ahg-status-show-modified () (interactive) (ahg-status \"-m\"))
(defun ahg-status-show-added () (interactive) (ahg-status \"-a\"))
(defun ahg-status-show-removed () (interactive) (ahg-status \"-r\"))
(defun ahg-status-show-deleted () (interactive) (ahg-status \"-d\"))
(defun ahg-status-show-clean () (interactive) (ahg-status \"-c\"))
(defun ahg-status-show-unknown () (interactive) (ahg-status \"-u\"))
(defun ahg-status-show-ignored () (interactive) (ahg-status \"-i\"))


(defun ahg-status-get-marked (action-if-empty &optional filter)
  \"Returns the list of marked nodes. If such list is empty, behave according to
ACTION-IF-EMPTY: if nil, do nothing. If 'all, return all nodes, if 'cur return
the singleton list with the node at point.\"
  (let ((marked (ewoc-collect ewoc
                              (if filter (lambda (d)
                                           (and (car d) (funcall filter d)))
                                'car))))
    (if (null marked)
      (cond ((eq action-if-empty nil) nil)
            ((eq action-if-empty 'all)
             (ewoc-collect ewoc (if filter filter 'identity)))
            ((eq action-if-empty 'cur)
             (let ((n (ewoc-locate ewoc)))
               (when (and n (or (null filter) (funcall filter (ewoc-data n))))
                 (list (ewoc-data n))))))
      marked)))

(defun ahg-status-commit (&optional logmsg)
  (interactive)
  (let ((files (ahg-status-get-marked nil)))
    (ahg-commit (mapcar 'cddr files) nil logmsg)))

(defun ahg-status-commit-amend ()
  (interactive)
  (let ((files (ahg-status-get-marked nil))
        msg
        logmsg)
    (with-temp-buffer
      (when (= (ahg-call-process \"log\"
                                 (list \"-r\" \".\" \"--template\"
                                       \"{node|short}\\\\n{desc}\")) 0)
        (goto-char (point-min))
        (setq msg (format \"amending changeset %s\"
                          (buffer-substring-no-properties (point-min)
                                                          (point-at-eol))))
        (forward-line 1)
        (setq logmsg (buffer-substring-no-properties
                      (point-at-bol) (point-max)))))
    (ahg-commit (append (list \"--amend\") (mapcar 'cddr files))
                msg logmsg)))

(defun ahg-status-add ()
  (interactive)
  (let ((files (ahg-status-get-marked
                'all (lambda (data) (string= (cadr data) \"?\")))))
    (if (ahg-y-or-n-p (format \"Add %d files to hg? \" (length files)))
        (ahg-generic-command
         \"add\" (mapcar 'cddr files)
         (lexical-let ((howmany (length files))
                       (aroot (ahg-root)))
           (lambda (process status)
             (if (string= status \"finished\\n\")
                 (with-current-buffer
                     (process-buffer process)
                   (ahg-status-maybe-refresh aroot)
                   (kill-buffer nil)
                   (message \"Added %d files\" howmany))
               (ahg-show-error process)))))
      (message \"hg add aborted\"))))

(defun ahg-status-remove ()
  (interactive)
  (let ((files (ahg-status-get-marked
                 'all (lambda (data)
                        (let ((f (cadr data)))
                          (or (string= f \"!\") (string= f \"C\")))))))
    (if (ahg-y-or-n-p (format \"Remove %d files from hg? \" (length files)))
        (ahg-generic-command
         \"remove\" (mapcar 'cddr files)
         (lexical-let ((howmany (length files))
                       (aroot (ahg-root)))
           (lambda (process status)
             (if (string= status \"finished\\n\")
                 (with-current-buffer (process-buffer process)
                   (ahg-status-maybe-refresh aroot)
                   (kill-buffer nil)
                   (message \"Removed %d files\" howmany))
               (ahg-show-error process)))))
      (message \"hg remove aborted\"))))

(defun ahg-status-addremove ()
  (interactive)
  (let ((files (ahg-status-get-marked
                'all (lambda (data)
                       (or (string= (cadr data) \"?\")
                           (string= (cadr data) \"!\"))))))
    (if (ahg-y-or-n-p (format \"Add/Remove %d files to/from hg? \"
                              (length files)))
        (ahg-generic-command
         \"addremove\" (mapcar 'cddr files)
         (lexical-let ((howmany (length files))
                       (aroot (ahg-root)))
           (lambda (process status)
             (if (string= status \"finished\\n\")
                 (with-current-buffer
                     (process-buffer process)
                   (ahg-status-maybe-refresh aroot)
                   (kill-buffer nil)
                   (message \"Added/Removed %d files\" howmany))
               (ahg-show-error process)))))
      (message \"hg addremove aborted\"))))


(defun ahg-status-refresh ()
  (interactive)
  (let ((ahg-status-point-pos (ahg-line-point-pos))
        ;;(ahg-status-consider-extra-switches t)
        )
    (call-interactively 'ahg-status)))


(defun ahg-status-maybe-refresh (root)
  (when ahg-auto-refresh-status-buffer
    (let ((buf (ahg-get-status-buffer root)))
      (when buf
        (let ((ahg-status-no-pop t)
              (ahg-status-point-pos
               (with-current-buffer buf (ahg-line-point-pos)))
              ;;(ahg-status-consider-extra-switches t) - not sure about this...
              )
          (ahg-status))))))


(defun ahg-status-diff (&optional all)
  \"Shows changes of the current revision wrt. its parent. If ALL is t,
shows changes of all marked files. Otherwise, shows changes of
the file on the current line.\"
  (interactive)
  (let ((files
         (if all (ahg-status-get-marked 'all)
           (let ((n (ewoc-locate ewoc))) (when n (list (ewoc-data n))))))
;;         (ahg-status-get-marked (if all 'all 'cur)))
        (buf (get-buffer-create \"*aHg diff*\"))
        (curdir default-directory)
        (inhibit-read-only t)
        (args (when ahg-diff-use-git-format '(\"--git\"))))
    (with-current-buffer buf
      (setq default-directory (file-name-as-directory curdir)))
    (cond ((null files) (message \"aHg diff: no file selected.\"))
          (t      
           (with-current-buffer buf
             (erase-buffer)
             (ahg-push-window-configuration))
           (ahg-generic-command \"diff\" (append args (mapcar 'cddr files))
                                (lambda (process status)
                                  (if (string= status \"finished\\n\")
                                      (progn
                                        (pop-to-buffer (process-buffer process))
                                        (ahg-diff-mode)
                                        (set-buffer-modified-p nil)
                                        (goto-char (point-min)))
                                    (ahg-show-error process)))
                                buf)))
     ))

(defun ahg-status-diff-all ()
  (interactive)
  (ahg-status-diff t))


(defun ahg-status-delete ()
  (interactive)
  (let ((files (ahg-status-get-marked 'cur)))
    (if files
	(if (ahg-y-or-n-p 
	     (if (> (length files) 1)
		 (format \"Delete %d files? \" (length files))
	       (format \"Delete %s? \" (cddar files))))
	    (progn
	      (mapc 'delete-file (mapcar 'cddr files))
	      (ahg-status-refresh))
	  (message \"delete aborted!\"))
      (message \"0 files selected, nothing deleted\"))))


(defun ahg-status-undo ()
  (interactive)
  (let ((files (ahg-status-get-marked nil)))
    (if (ahg-y-or-n-p
         (if files (format \"Undo changes on %d files? \" (length files))
           \"Undo all changes? \"))
        (ahg-generic-command
         \"revert\" (if files (mapcar 'cddr files) '(\"--all\"))
         (lexical-let ((aroot (ahg-root)))
           (lambda (process status)
             (if (string= status \"finished\\n\")
                 (with-current-buffer
                     (process-buffer process)
                   (ahg-status-maybe-refresh aroot)
                   (kill-buffer nil))
               (ahg-show-error process)))))
      (message \"hg revert aborted\"))))                         

(defun ahg-revert-cur-file ()
  \"Reverts the current file\"
  (interactive)
  (cond ((buffer-file-name)
	 (if (ahg-y-or-n-p (concat \"Revert \" (buffer-file-name)))
	     (ahg-generic-command 
	      \"revert\" (list (buffer-file-name))
              (lambda (process status)
                (if (string= status \"finished\\n\")
                    (revert-buffer nil t))))
           (message \"hg revert aborted\")))))

(defun ahg-rm-cur-file ()
  \"Runs hg rm on the current file, and kills the current buffer\"
  (interactive)
  (when (buffer-file-name)
    (lexical-let ((buffer (current-buffer)))
      (if (ahg-y-or-n-p (concat \"hg rm \" (buffer-file-name)))
          (ahg-generic-command 
           \"rm\" (list (buffer-file-name))
           (lambda (process status)
             (if (string= status \"finished\\n\")
                 (kill-buffer buffer))))
        (message \"hg rm aborted\")))))

(defun ahg-status-merge ()
  \"Runs hg merge on the repo.  Called when user clicks on or presses RET on 
the `merge' text in the status view. See propertize-summary-info below.\" 
  (interactive)
  (lexical-let ((status-buffer (current-buffer))
                (merge-buffer 
                 (get-buffer-create
                  (concat \"*hg merge: \" (ahg-root)))))
    (pop-to-buffer merge-buffer)
    (ahg-generic-command 
     \"merge\" nil
     (lambda (process status)
       (if (string= status \"finished\\n\")
           (progn
             (pop-to-buffer status-buffer)
             (ahg-status-refresh)
             (ahg-status-commit \"Merge\"))
         (ahg-show-error process)))
     merge-buffer)))

(defun propertize-summary-info (summary)
  \"If the repo is in need of a merge, then the summary info will contain the
text `heads (merge)'.  This function makes that text active, so that clicking
it or pressing RET on it will initiate a merge.\"
  (let ((map (make-sparse-keymap)))
    (define-key map [mouse-1] 'ahg-status-merge)
    (define-key map (kbd \"RET\") 'ahg-status-merge)
    (replace-regexp-in-string 
     \"heads (merge)\" 
     (concat \"heads \" 
             (propertize 
              \"(merge)\" 
              'mouse-face 'highlight 
              'help-echo \"Run hg merge\"
              'face 'info-xref
              'keymap map))
     summary)))

(defun ahg-get-status-ewoc (root)
  \"Returns an *hg status* buffer for ROOT. The buffer's major mode is
ahg-status, and it has an ewoc associated with it.\"
  (let ((buf (ahg-get-status-buffer root t))
        (inhibit-read-only t)
        (header (concat
                 (propertize \"hg status for \" 'face ahg-header-line-face)
                 (propertize root 'face ahg-header-line-root-face) \"\\n\"))
        (footer (concat \"\\n\"
                        (make-string (1- (window-width (selected-window))) ?-)
                        \"\\n\" (propertize-summary-info (ahg-summary-info root)))))
    (with-current-buffer buf
      (erase-buffer)
      (let ((ew (ewoc-create 'ahg-status-pp
                             header footer)))
        (ahg-status-mode)
        (set (make-local-variable 'ewoc) ew)
        (setq default-directory (file-name-as-directory root))
        ew))))

(defun ahg-get-status-buffer (&optional root create)
  (unless root (setq root (ahg-root)))
  (let ((name (concat \"*hg status: \"
                      (file-name-as-directory (expand-file-name root)) \"*\")))
    (funcall (if create 'get-buffer-create 'get-buffer) name)))

(defvar ahg-status-no-pop nil)
(defvar ahg-status-point-pos nil)

(defun ahg-status-sentinel (process status &optional no-pop point-pos)
  (with-temp-message (or (current-message) \"\")
    (if (string= status \"finished\\n\")
        ;; everything was ok, we can show the status buffer
        (let* ((buf (process-buffer process))
               (root (with-current-buffer buf ahg-root))
               (ew (ahg-get-status-ewoc root))
               (outbuf (ewoc-buffer ew))
               (cfg (with-current-buffer buf ahg-window-configuration))
               (extra-switches
                (with-current-buffer buf ahg-status-extra-switches)))
          (with-current-buffer buf
            (goto-char (point-min))
            (while (not (eobp))
              (ewoc-enter-last
               ew
               (cons nil
                     (cons (buffer-substring (point) (1+ (point)))
                           (buffer-substring (+ (point) 2) (point-at-eol)))))
              (forward-line 1)))
          (kill-buffer buf)
          (unless no-pop
            (pop-to-buffer outbuf))
          (set (make-local-variable 'ahg-window-configuration) cfg)
          (with-current-buffer outbuf
            (let ((inhibit-read-only t)
                  (node (ewoc-nth ew 0)))
              (when node (goto-char (ewoc-location node)))))
          (when point-pos
            (with-current-buffer outbuf
              (ahg-goto-line-point point-pos)))
          (with-current-buffer outbuf
            (set (make-local-variable 'ahg-status-extra-switches)
                 extra-switches)))
      ;; error, we signal it and pop to the buffer
      (ahg-show-error process))))


(defun ahg-status-visit-file (&optional other-window)
  (interactive)
  (let* ((node (ewoc-locate ewoc))
         (data (and node (ewoc-data node))))
    (when data
      (if other-window
          (find-file-other-window (cddr data))
        (find-file (cddr data))))))

(defun ahg-status-visit-file-other-window ()
  (interactive)
  (ahg-status-visit-file t))


(defun ahg-status-do-command ()
  (interactive)
  (let ((files (ahg-status-get-marked nil)))
    (if files
        (let ((ahg-do-command-prompt \"Hg command on selected files: \")
              (ahg-do-command-extra-args (mapcar 'cddr files)))
          (call-interactively 'ahg-do-command))
      (call-interactively 'ahg-do-command))))

(defun ahg-status-short-log ()
  (interactive)
  (let* ((files (ahg-status-get-marked nil))
         (ahg-file-list-for-log-command (if files (mapcar 'cddr files) nil)))
    (call-interactively 'ahg-short-log)))

(defun ahg-status-log ()
  (interactive)
  (let* ((files (ahg-status-get-marked nil))
         (ahg-file-list-for-log-command (if files (mapcar 'cddr files) nil)))
    (call-interactively 'ahg-log)))


(defun ahg-status-glog ()
  (interactive)
  (let* ((files (ahg-status-get-marked nil))
         (ahg-file-list-for-log-command (if files (mapcar 'cddr files) nil)))
    (call-interactively 'ahg-glog)))


(defun ahg-status-shell-command (command files refresh)
  \"Run a shell command COMMAND on the marked files.
If there are no marked files, run COMMAND on the file at point.
This function uses `dired-do-shell-command' to do the work, and
so it supports the special meaning of `*' and `?' in COMMAND.
See the help for `dired-do-shell-command' for details.
If REFRESH is non-nil, refresh the status buffer after executing COMMAND.
When called interactively, REFRESH is non-nil if a prefix argument is given.\"
  (interactive
   (let ((fnames (ahg-status-get-marked 'cur)))
     (list
      (let ((minibuffer-local-completion-map
             (copy-keymap minibuffer-local-map)))
        (define-key minibuffer-local-completion-map \"\\t\"
          'minibuffer-complete)
        (completing-read
         (apply 'format \"Shell command on %s file%s: \"
                (if (and (= (length fnames) 1) (null (caar fnames)))
                    (list \"current\" (format \" (%s)\" (cddar fnames)))
                  '(\"selected\" \"s\")))
         (ahg-dynamic-completion-table ahg-complete-shell-command)))
      (mapcar 'cddr fnames)
      (if ahg-auto-refresh-status-buffer
          (not current-prefix-arg) current-prefix-arg))))
  (dired-do-shell-command command nil files)
  (when refresh (ahg-status-refresh)))


(defun ahg-status-dired-find (files)
  \"Show the highlighted files in a dired buffer.
Uses find-dired to get them into nicely.\"
  (interactive (list (ahg-status-get-marked 'cur)))
  (find-dired
   default-directory
   (concat
    (mapconcat
     (lambda (f)
       (concat \"-path \\\"*/\" (cddr f) \"\\\" -or\"))
     files \" \")
    \" -false\")))


(defun ahg-status-add-to-hgignore ()
  \"Adds the selected files to .hgignore for the current repository.\"
  (interactive)
  (let ((files (ahg-status-get-marked 'cur)))
    (when (ahg-y-or-n-p (format \"Add %d files to .hgignore? \" (length files)))
      (let* ((aroot (ahg-root))
             (hgignore (concat (file-name-as-directory aroot) \".hgignore\")))
        (with-temp-buffer
          (when (file-exists-p hgignore)
            (insert-file-contents hgignore))
          (goto-char (point-max))
          (insert \"\\n# added by aHg on \" (current-time-string)
                  \"\\nsyntax: glob\\n\")
          (mapc (lambda (f) (insert (cddr f) \"\\n\")) files)
          (write-file hgignore)
          (kill-buffer))
        (ahg-status-maybe-refresh aroot)))))

;;-----------------------------------------------------------------------------
;; hg commit
;;-----------------------------------------------------------------------------

(defun ahg-commit-callback ()
  (interactive)
  (let ((msg (ahg-parse-commit-message)))
    (let ((args (append (list \"-m\" msg)
                        (log-edit-files))))
      (ahg-generic-command
       \"commit\" args
       (lexical-let ((aroot (ahg-root))
                     (n (length (log-edit-files))))
         (lambda (process status)
           (if (string= status \"finished\\n\")
               (progn
                 (ahg-status-maybe-refresh aroot)
                 (message \"Successfully committed %s.\"
                          (if (> n 0)
                              (format \"%d file%s\" n (if (> n 1) \"s\" \"\"))
                            \"all modified files\"))
                 (kill-buffer (process-buffer process)))
             (ahg-show-error process)))))))
  (kill-buffer (current-buffer)))

(defun ahg-commit (files &optional msg logmsg)
  \"Run hg commit. Pops up a buffer for editing the log file.\"
  (let ((buf (generate-new-buffer \"*aHg-log*\")))
    (ahg-log-edit
     'ahg-commit-callback
     (lexical-let ((flist files)) (lambda () flist))
     buf
     msg
     logmsg)))

(defun ahg-commit-cur-file ()
  \"Run hg commit on the current file only.\"
  (interactive)
  (cond ((eq major-mode 'ahg-status-mode)
         (call-interactively 'ahg-status-commit))
        ((buffer-file-name)
         (when (and (buffer-modified-p)
                    (ahg-y-or-n-p \"Save buffer before committing? \"))
           (save-buffer))
         (ahg-commit (list (buffer-file-name))))
        (t (message \"hg commit: no file found, aborting.\"))))

;;-----------------------------------------------------------------------------
;; hg update
;;-----------------------------------------------------------------------------

(defvar ahg-update-to-rev-get-revision-function nil)

(defun ahg-update-to-rev (rev force)
  \"Update to the given revision. If force is non-nil, pass -C
flag to hg update.\"
  (interactive
   (let* ((rev (funcall ahg-update-to-rev-get-revision-function))
          (ans (and rev (ahg-y-or-n-p (format \"Update to revision %s? \" rev))))
          (overw (and ans (if (ahg-uncommitted-changes-p)
                              (ahg-y-or-n-p \"Overwrite local changes? \")
                            t))))
     (list (and ans rev) overw)))
  (when rev
    (ahg-generic-command
     \"update\" (if force (list \"-C\" \"-r\" rev) (list \"-r\" rev))
     (lexical-let ((aroot default-directory)
                   (rev rev))
       (lambda (process status)
         (if (string= status \"finished\\n\")
             (progn
               (ahg-status-maybe-refresh aroot)
               (message \"Updated to revision %s\" rev)
               (kill-buffer (process-buffer process)))
           (ahg-show-error process)))))))


;;-----------------------------------------------------------------------------
;; hg log
;;-----------------------------------------------------------------------------

(defvar ahg-short-log-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map [?g] 'ahg-short-log)
    (define-key map [?s] 'ahg-status)
    (define-key map [?=] 'ahg-short-log-view-diff)
    (define-key map [?D] 'ahg-short-log-view-diff-select-rev)
    (define-key map [? ] 'ahg-short-log-view-details)
    (define-key map [?\\r] 'ahg-short-log-update-to-rev)
    (define-key map [?r] 'ahg-short-log-goto-revision)
    (define-key map [?n] 'ahg-short-log-next)
    (define-key map [?p] 'ahg-short-log-previous)
    (define-key map [?q] 'ahg-buffer-quit)
    (define-key map [?!] 'ahg-do-command)
    (define-key map [?h] 'ahg-command-help)
    map)
  \"Keymap used in `ahg-short-log-mode'.\")

(defvar ahg-short-log-line-map
  (let ((map (make-sparse-keymap)))
    (define-key map [mouse-1] 'ahg-short-log-view-details-mouse)
    (define-key map [mouse-2] 'ahg-short-log-view-diff-mouse)
    map))

;; (defvar ahg-short-log-revision-face font-lock-function-name-face)
;; (defvar ahg-short-log-date-face font-lock-string-face)
;; (defvar ahg-short-log-user-face font-lock-type-face)

(defconst ahg-short-log-start-regexp \"^ +\\\\([0-9]+\\\\) |\")

(define-derived-mode ahg-short-log-mode special-mode \"ahg-short-log\"
  \"Major mode to display hg shortlog output.

Commands:
\\\\{ahg-short-log-mode-map}
\"
  (buffer-disable-undo) ;; undo info not needed here
  (use-local-map ahg-short-log-mode-map)
  (font-lock-mode nil)
;;  (hl-line-mode t)
  (easy-menu-add ahg-short-log-mode-menu ahg-short-log-mode-map))

(easy-menu-define ahg-short-log-mode-menu ahg-short-log-mode-map \"aHg Short Log\"
  '(\"aHg Short Log\"
    [\"View Revision Diff\" ahg-short-log-view-diff [:keys \"=\" :active t]]
    [\"View Revision Diff with Other...\" ahg-short-log-view-diff-select-rev
     [:keys \"D\" :active t]]
    [\"View Revision Details\" ahg-short-log-view-details [:keys \" \" :active t]]
    [\"Update to Revision\" ahg-short-log-update-to-rev [:keys \"\\r\" :active t]]
    [\"--\" nil nil]
    [\"Status\" ahg-status [:keys \"s\" :active t]]
    [\"Hg Command\" ahg-do-command [:keys \"!\" :active t]]
    [\"--\" nil nil]
    [\"Next Revision\" ahg-short-log-next [:keys \"n\" :active t]]
    [\"Previous Revision\" ahg-short-log-previous [:keys \"p\" :active t]]
    [\"Go to Revision...\" ahg-short-log-goto-revision [:keys \"r\" :active t]]
    [\"--\" nil nil]
    [\"Help on Hg Command\" ahg-command-help [:keys \"h\" :active t]]
    [\"--\" nil nil]
    [\"Refresh\" ahg-short-log [:keys \"g\" :active t]]
    [\"Quit\" ahg-buffer-quit [:keys \"q\" :active t]]
    ))


(defun ahg-short-log-pp (data)
  \"Pretty-printer for short log revisions.\"
  ;; data is a 4-elements list
  (labels ((trim (n s) (if (> (length s) n) (substring s 0 n) s)))
    (let* ((width (window-width (selected-window)))
           (p1 (car data))
           (p2 (cadr data))
           (p3 (caddr data))
           (p4 (cadddr data))
           (s (format \"%7s | %s | %8s | %s\"
                      (propertize p1 'face ahg-short-log-revision-face)
                      (propertize p2 'face ahg-short-log-date-face)
                      (propertize (trim 8 p3) 'face ahg-short-log-user-face)
                      p4))
           (pad (if (< (length s) width)
                    (make-string (- width (length s)) ? )
                  \"\")))
      (insert (propertize (concat s pad) 'mouse-face 'highlight
                          'keymap ahg-short-log-line-map
                          'help-echo p4)))))
        
(defun ahg-short-log-insert-contents (ewoc contents)
  (let ((lines (split-string contents \"\\n\")))
    (flet ((format-line (line)
               (if (and line (> (length line) 0))
                    (let* ((p1 (string-match \" \" line))
                           (p2 (string-match \" \" line (1+ p1)))
                           (p3 (string-match \" \" line (1+ p2)))
                           (data (list
                                  (substring line 0 p1)
                                  (substring line (1+ p1) p2)
                                  (substring line (1+ p2) p3)
                                  (substring line (1+ p3)))))
                      (ewoc-enter-last ewoc data)))))
      (mapcar 'format-line lines))))


(defun ahg-short-log-next (n)
  \"Move to the next changeset line\"
  (interactive \"p\")
  (ewoc-goto-next ewoc n))

(defun ahg-short-log-previous (n)
  \"Move to the previous changeset line\"
  (interactive \"p\")
  (ewoc-goto-prev ewoc n))

(defun ahg-short-log-revision-at-point ()
  (let ((node (ewoc-locate ewoc)))
    (and node (car (ewoc-data node)))))

(defun ahg-short-log-view-diff ()
  (interactive)
  (let* ((r1 (ahg-short-log-revision-at-point))
         (r2 (ahg-first-parent-of-rev r1)))
    (ahg-diff r2 r1)))

(defun ahg-short-log-view-diff-select-rev (rev)
  (interactive \"sEnter revision to compare against: \")
  (let ((r1 (ahg-short-log-revision-at-point))
        (r2 rev))
    (ahg-diff r2 r1)))

(defun ahg-short-log-view-details ()
  \"View details of the given revision.\"
  (interactive)
  (let ((rev (ahg-short-log-revision-at-point)))
    (ahg-log rev nil)))


(defun ahg-short-log-view-details-mouse (event)
  (interactive \"e\")
  (save-window-excursion
    (select-window (posn-window (event-end event)) t)
    (goto-char (posn-point (event-end event)))
    (ahg-short-log-view-details)))


(defun ahg-short-log-view-diff-mouse (event)
  (interactive \"e\")
  (save-window-excursion
    (select-window (posn-window (event-end event)) t)
    (goto-char (posn-point (event-end event)))
    (ahg-short-log-view-diff)))


(defun ahg-short-log-goto-revision (rev)
  \"Move point to the revision REV. If REV is not found in the log buffer,
do nothing.\"
  (interactive \"P\")
  (when (interactive-p)
    (unless rev
      (setq rev (read-string \"Goto revision: \"))))
  (let ((n (ewoc-nth ewoc 0)))
    (while (and n (not (string= rev (car (ewoc-data n)))))
      (setq n (ewoc-next ewoc n)))
    (when n (ewoc-goto-node ewoc n))))


(defun ahg-short-log-update-to-rev ()
  (interactive)
  (let ((ahg-update-to-rev-get-revision-function
         'ahg-short-log-revision-at-point))
    (call-interactively 'ahg-update-to-rev)))


(defun ahg-args-add-revs (r1 r2 &optional disjoint)
  (let (command-list)
    (when r1
      (when (numberp r1)
        (setq r1 (number-to-string r1))))
    (when r2
      (when (numberp r2)
        (setq r2 (number-to-string r2))))
    (cond ((and r1 r2 (> (length r1) 0) (> (length r2) 0))
           (setq command-list
                 (if disjoint
                     (append command-list (list \"-r\" r1 \"-r\" r2))
                   (append command-list (list \"-r\" (format \"%s:%s\" r1 r2))))))
          ((and r1 (> (length r1) 0)) (setq command-list
                                 (append command-list (list \"-r\" r1))))
          ((and r2 (> (length r2) 0)) (setq command-list
                                            (append command-list
                                                    (list \"-r\" r2)))))
    command-list))


(defun ahg-maybe-revset (rev)
  (not (null (string-match \"[()]\" rev))))


;; helper function used by ahg-short-log, ahg-log and ahg-log-cur-file to
;; get arguments from the user
(defvar ahg-log-default-revisions '(\"tip\" . \"0\"))
(defun ahg-log-read-args (is-on-selected-files read-extra-flags)
  (let* ((firstrev
          (read-string
           (concat \"hg log\"
                   (if is-on-selected-files \" (on selected files)\" \"\")
                   \", R1: \") (car ahg-log-default-revisions)))
         (retval
          (append
           (list
            firstrev
            (when (not (ahg-maybe-revset firstrev))
              (read-string
               (concat \"hg log\"
                       (if is-on-selected-files \" (on selected files)\" \"\")
                       \", R2: \") (ahg-log-revrange-end))))
           (when read-extra-flags
             (list (read-string
                    (concat \"hg log\"
                            (if is-on-selected-files \" (on selected files)\" \"\")
                            \", extra switches: \") \"\"))))))
    ;; remember the values entered for the next call
    (setq ahg-log-default-revisions (cons (car retval) (cadr retval)))
    retval))

(defun ahg-log-revrange-end ()
  (with-temp-buffer
    (if (= (ahg-call-process \"id\" (list \"-n\")) 0)
        (let ((n (string-to-number (buffer-string))))
          (if (> n ahg-log-revrange-size)
              (format \"-%s\" ahg-log-revrange-size)
            \"0\"))
      \"0\")))


(defun ahg-short-log-create-ewoc ()
  (let* ((width (window-width (selected-window)))
         (header (concat
                  (propertize \"hg log for \" 'face ahg-header-line-face)
                  (propertize default-directory 'face ahg-header-line-root-face)
                  \"\\n\\n\" (propertize (make-string width ?-) 'face 'bold) \"\\n\"
                  (propertize \"    Rev |    Date    |  Author  | Summary\\n\"
                              'face 'bold)
                  (propertize (make-string width ?-) 'face 'bold)))
         (footer (propertize (make-string width ?-) 'face 'bold))
         (ew (ewoc-create 'ahg-short-log-pp header footer)))
    ew))

(defvar ahg-file-list-for-log-command nil)

(defun ahg-short-log (r1 r2 &optional extra-flags)
  \"Run hg log, in a compressed format.
This displays the log in a tabular view, one line per
changeset. The format of each line is: Revision | Date | User | Summary.
R1 and R2 specify the range of revisions to
consider. When run interactively, the user must enter their
values (which default to tip for R1 and 0 for R2). If called with
a prefix argument, prompts also for EXTRA-FLAGS.\"
  (interactive
   (ahg-log-read-args ahg-file-list-for-log-command current-prefix-arg))  
  (let ((buffer (get-buffer-create
                 (concat \"*hg log (summary): \" (ahg-root) \"*\")))
        (command-list (ahg-args-add-revs r1 r2)))  
    (setq command-list
          (append command-list
                  (list \"--template\"
                        \"{rev} {date|shortdate} {author|user} {desc|firstline}\\\\n\")
                  (when extra-flags (split-string extra-flags))))
    (when ahg-file-list-for-log-command
      (setq command-list (append command-list ahg-file-list-for-log-command)))
    (with-current-buffer buffer
      (let ((inhibit-read-only t))
        (erase-buffer)
        (ahg-push-window-configuration)))
    (ahg-generic-command
     \"log\" command-list
     (lambda (process status)
       (if (string= status \"finished\\n\")
           (with-current-buffer (process-buffer process)
             (pop-to-buffer (current-buffer))
             (ahg-short-log-mode)
             (let ((contents (buffer-substring-no-properties
                              (point-min) (point-max)))
                   (inhibit-read-only t))
               (erase-buffer)
               (setq truncate-lines t)
               (let ((ew (ahg-short-log-create-ewoc)))
                 (ahg-short-log-insert-contents ew contents)
                 (goto-line 6)
                 (toggle-read-only 1)
                 (set (make-local-variable 'ewoc) ew))))
         (ahg-show-error process)))
     buffer)))


(defvar ahg-log-font-lock-keywords
  '((\"^hg \\\\<[a-z]+\\\\> for\" . ahg-header-line-face)
    (\"^hg \\\\<[a-z]+\\\\> for \\\\(.*\\\\)\" 1 ahg-header-line-root-face)
    (\"^changeset:\" . ahg-log-field-face)
    (\"^tag:\" . ahg-log-field-face)
    (\"^user:\" . ahg-log-field-face)
    (\"^date:\" . ahg-log-field-face)
    (\"^summary:\" . ahg-log-field-face)
    (\"^files:\" . ahg-log-field-face)
    (\"^branch:\" . ahg-log-field-face)
    (\"^parent:\" . ahg-log-field-face)
    (\"^description:\" . ahg-log-field-face)
    (\"^\\\\(changeset\\\\|parent\\\\): +\\\\(.+\\\\)$\" 2 ahg-log-revision-face)
    (\"^\\\\(tag\\\\|branch\\\\): +\\\\(.+\\\\)$\" 2 ahg-log-branch-face)
    (\"^user: +\\\\(.+\\\\)$\" 1 ahg-short-log-user-face)
    (\"^date: +\\\\(.+\\\\)$\" 1 ahg-short-log-date-face)
    )
  \"Keywords in `ahg-log-mode' mode.\")

(define-derived-mode ahg-log-mode special-mode \"ahg-log\"
  \"Major mode to display hg log output.

Commands:
\\\\{ahg-log-mode-map}
\"
  (buffer-disable-undo) ;; undo info not needed here
  (toggle-read-only t)
  (define-key ahg-log-mode-map [?g] 'ahg-log)
  (define-key ahg-log-mode-map [?s] 'ahg-status)
  (define-key ahg-log-mode-map [?=] 'ahg-log-view-diff)
  (define-key ahg-log-mode-map [?D] 'ahg-log-view-diff-select-rev)
  (define-key ahg-log-mode-map [?n] 'ahg-log-next)
  (define-key ahg-log-mode-map \"\\t\" 'ahg-log-next)
  (define-key ahg-log-mode-map [?p] 'ahg-log-previous)
  (define-key ahg-log-mode-map [S-iso-lefttab] 'ahg-log-previous)
  (define-key ahg-log-mode-map [?q] 'ahg-buffer-quit)
  (define-key ahg-log-mode-map [?!] 'ahg-do-command)
  (define-key ahg-log-mode-map [?h] 'ahg-command-help)
  (define-key ahg-log-mode-map \"\\r\" 'ahg-log-update-to-rev)
  (set (make-local-variable 'font-lock-defaults)
       (list 'ahg-log-font-lock-keywords t nil nil))
  (easy-menu-add ahg-log-mode-menu ahg-log-mode-map))

(easy-menu-define ahg-log-mode-menu ahg-log-mode-map \"aHg Log\"
  '(\"aHg Log\"
    [\"View Revision Diff\" ahg-log-view-diff [:keys \"=\" :active t]]
    [\"View Revision Diff with Other...\" ahg-log-view-diff-select-rev
     [:keys \"D\" :active t]]
    [\"Update to Revision\" ahg-log-update-to-rev [:keys \"\\r\" :active t]]
    [\"--\" nil nil]
    [\"Status\" ahg-status [:keys \"s\" :active t]]
    [\"Hg Command\" ahg-do-command [:keys \"!\" :active t]]
    [\"--\" nil nil]
    [\"Next Revision\" ahg-log-next [:keys \"\\t\" :active t]]
    [\"Previous Revision\" ahg-log-previous [:keys \"p\" :active t]]
    [\"--\" nil nil]
    [\"Help on Hg Command\" ahg-command-help [:keys \"h\" :active t]]
    [\"--\" nil nil]
    [\"Refresh\" ahg-log [:keys \"g\" :active t]]
    [\"Quit\" ahg-buffer-quit [:keys \"q\" :active t]]
    ))


(defconst ahg-log-start-regexp \"^changeset: +\\\\([0-9]+:[0-9a-f]+\\\\)\")
(defun ahg-log-next (n)
  \"Move to the next changeset header of the next diff hunk\"
  (interactive \"p\")
  (end-of-line)
  (re-search-forward ahg-log-start-regexp nil t n)
  (beginning-of-line))

(defun ahg-log-previous (n)
  \"Move to the previous changeset header of the previous diff hunk\"
  (interactive \"p\")
  (end-of-line)
  (re-search-backward ahg-log-start-regexp)
  (re-search-backward ahg-log-start-regexp nil t n))

(defun ahg-log-view-diff ()
  (interactive)
  (let* ((r1 (ahg-log-revision-at-point t))
         (r2 (ahg-first-parent-of-rev r1)))
    (ahg-diff r2 r1)))

(defun ahg-log-view-diff-select-rev (rev)
  (interactive \"sEnter revision to compare against: \")
  (let ((r1 (ahg-log-revision-at-point t))
        (r2 rev))
    (ahg-diff r2 r1)))

(defun ahg-log-revision-at-point (&optional short-id)
  (save-excursion
    (end-of-line)
    (re-search-backward ahg-log-start-regexp)
    (let ((rev (match-string-no-properties 1)))
      (when rev
        (if short-id (car (split-string rev \":\"))
          (cadr (split-string rev \":\")))))))


(defun ahg-log-goto-revision (rev)
  \"Move point to the revision REV. If REV is not found in the log
buffer, do nothing.\"
  (let ((rev-pos))
    (save-excursion
      (when
          (re-search-forward (concat \"^changeset: +\" rev) nil t)
        (setq rev-pos (point))))
    (when rev-pos
      (goto-char rev-pos))))

(defvar ahg-dir-name-for-log-command nil)

(defconst ahg-log-style-map
  \"changeset = \\\"{rev}:{node|short}\\\\n{branches}\\\\n{tags}\\\\n{parents}\\\\n{author}\\\\n{date|date}\\\\n{files}\\\\n\\\\t{desc|tabindent}\\\\n\\\"
file = \\\"{file}\\\\n\\\"
\")

(defun ahg-log-prepare-style-map ()
  (let ((f (make-temp-file \"ahg\")))
    (with-temp-file f
      (insert ahg-log-style-map))
    f))
  
(defun ahg-log (r1 r2 &optional extra-flags)
  \"Run hg log. R1 and R2 specify the range of revisions to
consider. When run interactively, the user must enter their
values (which default to tip for R1 and 0 for R2). If called with
a prefix argument, prompts also for EXTRA-FLAGS.\"
  (interactive
   (ahg-log-read-args ahg-file-list-for-log-command current-prefix-arg))
  (let ((buffer (get-buffer-create
                 (concat \"*hg log (details): \" (ahg-root) \"*\")))
        (command-list (ahg-args-add-revs r1 r2))
        (ahgstyle (ahg-log-prepare-style-map)))
    (setq command-list (append command-list
                               (list \"--style\" ahgstyle)
                               (when extra-flags (split-string extra-flags))))
    (when ahg-file-list-for-log-command
      (setq command-list (append command-list ahg-file-list-for-log-command)))
    (with-current-buffer buffer
      (let ((inhibit-read-only t))
        (erase-buffer)
        (ahg-push-window-configuration)))
    (let ((proc
           (ahg-generic-command
            \"log\" command-list
            (lexical-let ((dn (or ahg-dir-name-for-log-command
                                  default-directory))
                          (ahgstyle ahgstyle))
              (lambda (process status)
                (if (string= status \"finished\\n\")
                    (progn
                      (pop-to-buffer (process-buffer process))
                      (ahg-format-log-buffer)
                      (ahg-log-mode)
                      (goto-char (point-min))
                      (let ((inhibit-read-only t))
                        (insert
                         (propertize \"hg log for \" 'face ahg-header-line-face)
                         (propertize dn 'face ahg-header-line-root-face)
                         \"\\n\\n\"))
                      (delete-file ahgstyle))
                  (ahg-show-error process))))
            buffer
            nil nil nil nil nil nil nil
            ; use-temp-file because the output can be large.  
            ; Considerable speed improvement.
            t 
            )))
      )))

(defvar ahg-log-file-line-map
  (let ((map (make-sparse-keymap)))
    (define-key map [mouse-2]
      (lambda (event)
        (interactive \"e\")
        (select-window (posn-window (event-end event)) t)
        (goto-char (posn-point (event-end event)))
        (let ((fn (ahg-log-filename-at-point (point))))
          (when (file-exists-p fn)
            (find-file-other-window fn)))))
    (define-key map [S-mouse-2]
      (lambda (event)
        (interactive \"e\")
        (select-window (posn-window (event-end event)) t)
        (let ((pt (posn-point (event-end event))))
          (goto-char pt)
          (let* ((r1 (ahg-log-revision-at-point t))
                 (r2 (ahg-first-parent-of-rev r1))
                 (fn (ahg-log-filename-at-point pt)))
            (ahg-diff r2 r1 (list fn))))))
    (define-key map \"f\"
      (lambda ()
        (interactive)
        (let ((fn (ahg-log-filename-at-point (point))))
          (when (file-exists-p fn)
            (find-file fn)))))
    (define-key map \"o\"
      (lambda ()
        (interactive)
        (let ((fn (ahg-log-filename-at-point (point))))
          (when (file-exists-p fn)
            (find-file-other-window fn)))))
    (define-key map \"=\"
      (lambda ()
        (interactive)
          (let* ((r1 (ahg-log-revision-at-point t))
                 (r2 (ahg-first-parent-of-rev r1))
                 (fn (ahg-log-filename-at-point (point))))
            (ahg-diff r2 r1 (list fn)))))
    map))

(defun ahg-log-filename-at-point (point)
  (interactive \"d\")
  (let ((fn 
         (save-excursion
           (goto-char point)
           (buffer-substring-no-properties
            (+ 13 ;; (length \"             \")
               (point-at-bol))
            (point-at-eol)))))
    (ahg-abspath fn)))

(defun ahg-format-log-buffer ()
  (goto-char (point-min))
  (let ((inhibit-read-only t))
    (labels ((next () (beginning-of-line) (forward-line 1)))
      (while (not (eobp))
        ;; first line, changeset
        (insert \"changeset:   \")
        (next)
        ;; second line, branch
        (if (looking-at \"^$\")
            (delete-char 1)
          (insert \"branch:      \")
          (next))
        ;; third line, tags
        (if (looking-at \"^$\")
            (delete-char 1) ;; remove empty line
          ;; otherwise, insert a \"tag: \" entry for each entry in the list
          (let ((tags (split-string (buffer-substring-no-properties
                                     (point-at-bol) (point-at-eol))))
                (kill-whole-line t))
            (kill-line)
            (mapc (lambda (tag) (insert \"tag:         \" tag \"\\n\")) tags)))
        ;; fourth line, parents
        (if (looking-at \"^$\")
            (delete-char 1) 
          (let ((parents (split-string (buffer-substring-no-properties
                                        (point-at-bol) (point-at-eol))))
                (kill-whole-line t))
            (kill-line)
            (mapc (lambda (p) (insert \"parent:      \" p \"\\n\")) parents)))
        ;; fifth line, user
        (insert \"user:        \")
        (next)
        ;; sixth line, date
        (insert \"date:        \")
        (next)
        ;; seventh line, files, until an empty line is found
        (unless (looking-at \"^$\")
          (set-text-properties (point-at-bol) (point-at-eol)
                               (list 'mouse-face 'highlight
                                     'keymap ahg-log-file-line-map))
          (insert \"files:       \")
          (next))
        (while (not (looking-at \"^$\"))
          (set-text-properties (point-at-bol) (point-at-eol)
                               (list 'mouse-face 'highlight
                                     'keymap ahg-log-file-line-map))
          (insert \"             \")
          (next))
        (delete-char 1) ;; remove the empty line at the end of the list of files
        ;; rest is the description
        (insert \"description:\\n\")
        ;; each line in the description starts with a '\\t'
        (while (and (looking-at \"^\\\\(\\t\\\\|$\\\\)\") (not (eobp)))
          (unless (looking-at \"^$\")
            (delete-char 1)) ;; remove the \\t in front of the line
          (next))
        (insert \"\\n\\n\")
        ))))

(defun ahg-log-cur-file (&optional prefix)
  \"Shows changelog of the current file. When called interactively
with a prefix argument, prompt for a revision range. If the
prefix argument is the list (16) (corresponding to C-u C-u),
prompts also for extra flags.\"
  (interactive \"P\")
  (cond ((eq major-mode 'ahg-status-mode) (call-interactively 'ahg-status-log))
        ((buffer-file-name)
         (let ((ahg-file-list-for-log-command (list (buffer-file-name)))
               (ahg-dir-name-for-log-command (buffer-file-name)))
           (if prefix
               (apply 'ahg-log   
                      (ahg-log-read-args nil (equal current-prefix-arg '(16))))
             (ahg-log \"tip\" \"0\"))))
        (t (message \"hg log: no file found, aborting.\"))))

(defun ahg-log-update-to-rev ()
  (interactive)
  (let ((ahg-update-to-rev-get-revision-function 'ahg-log-revision-at-point))
    (call-interactively 'ahg-update-to-rev)))

;;-----------------------------------------------------------------------------
;; graph log
;;-----------------------------------------------------------------------------

(defvar ahg-glog-font-lock-keywords
  '((\"^hg revision DAG for\" . ahg-header-line-face)
    (\"^hg revision DAG for \\\\(.*\\\\)\" 1 ahg-header-line-root-face)
    (\"^\\\\([+|@o\\\\\\\\/ -]\\\\)+\" . 'bold)
    (\"^\\\\([+|@o\\\\\\\\/ -]\\\\)+\\\\([0-9]+\\\\)\" 2 ahg-short-log-revision-face)
    (\"^\\\\([+|@o\\\\\\\\/ -]\\\\)+[0-9]+  \\\\([0-9a-f]+\\\\)\" 2 ahg-log-revision-face)
    (\"^\\\\([+|@o\\\\\\\\/ -]\\\\)+[0-9]+  [0-9a-f]+  \\\\([^ ]+\\\\)\"
     2 ahg-short-log-date-face)
    (\"^\\\\([+|@o\\\\\\\\/ -]\\\\)+[0-9]+  [0-9a-f]+  [^ ]+  \\\\([^ ]+\\\\)\" 2
     ahg-short-log-user-face)
    (\"^\\\\([+|@o\\\\\\\\/ -]\\\\)+[0-9]+  [0-9a-f]+  [^ ]+  [^ ]+  \\\\(\\\\[[^]]+\\\\]\\\\)\"
     2 ahg-log-branch-face) ;; tags
    (\"^\\\\([+|@o\\\\\\\\/ -]\\\\)+[0-9]+  [0-9a-f]+  [^ ]+  [^ ]+  \\\\(\\\\[\\\\]\\\\)\" 2
     ahg-invisible-face) ;; empty tags
    (\"^\\\\([+|@o\\\\\\\\/ -]\\\\)+[0-9]+  [0-9a-f]+  [^ ]+  [^ ]+  [^ ]+ \\\\(([^)]+)\\\\)$\"
     2 ahg-log-branch-face) ;; branches
    (\"^\\\\([+|@o\\\\\\\\/ -]\\\\)+[0-9]+  [0-9a-f]+  [^ ]+  [^ ]+  [^ ]+ \\\\(()\\\\)$\" 2
     ahg-invisible-face) ;; empty branches    
    )
  \"Keywords in `ahg-glog-mode' mode.\")

(define-derived-mode ahg-glog-mode special-mode \"ahg-glog\"
  \"Major mode to display hg glog output.

Commands:
\\\\{ahg-glog-mode-map}
\"
  (buffer-disable-undo) ;; undo info not needed here
  (setq truncate-lines t)
  (toggle-read-only t)
  (define-key ahg-glog-mode-map [?g] 'ahg-glog)
  (define-key ahg-glog-mode-map [?s] 'ahg-status)
  (define-key ahg-glog-mode-map [?=] 'ahg-glog-view-diff)
  (define-key ahg-glog-mode-map [?D] 'ahg-glog-view-diff-select-rev)
  (define-key ahg-glog-mode-map [?n] 'ahg-glog-next)
  (define-key ahg-glog-mode-map \"\\t\" 'ahg-glog-next)
  (define-key ahg-glog-mode-map [?p] 'ahg-glog-previous)
  (define-key ahg-glog-mode-map [S-iso-lefttab] 'ahg-glog-previous)  
  (define-key ahg-glog-mode-map [?q] 'ahg-buffer-quit)
  (define-key ahg-glog-mode-map [?!] 'ahg-do-command)
  (define-key ahg-glog-mode-map [?h] 'ahg-command-help)
  (define-key ahg-glog-mode-map \"\\r\" 'ahg-glog-update-to-rev)
  (define-key ahg-glog-mode-map [? ] 'ahg-glog-view-details)
  (set (make-local-variable 'font-lock-defaults)
       (list 'ahg-glog-font-lock-keywords t nil nil))
  (set-face-foreground 'ahg-invisible-face (face-background 'default))
  (easy-menu-add ahg-glog-mode-menu ahg-glog-mode-map))

(easy-menu-define ahg-glog-mode-menu ahg-glog-mode-map \"aHg Rev DAG\"
  '(\"aHg Rev DAG\"
    [\"View Revision Details\" ahg-glog-view-details [:keys \" \" :active t]]
    [\"View Revision Diff\" ahg-glog-view-diff [:keys \"=\" :active t]]
    [\"View Revision Diff with Other...\" ahg-glog-view-diff-select-rev
     [:keys \"D\" :active t]]
    [\"Update to Revision\" ahg-glog-update-to-rev [:keys \"\\r\" :active t]]
    [\"--\" nil nil]
    [\"Status\" ahg-status [:keys \"s\" :active t]]
    [\"Hg Command\" ahg-do-command [:keys \"!\" :active t]]
    [\"--\" nil nil]
    [\"Next Revision\" ahg-glog-next [:keys \"\\t\" :active t]]
    [\"Previous Revision\" ahg-glog-previous [:keys \"p\" :active t]]
    [\"--\" nil nil]
    [\"Help on Hg Command\" ahg-command-help [:keys \"h\" :active t]]
    [\"--\" nil nil]
    [\"Refresh\" ahg-glog [:keys \"g\" :active t]]
    [\"Quit\" ahg-buffer-quit [:keys \"q\" :active t]]
    ))


(defconst ahg-glog-start-regexp \"^\\\\([+|@o\\\\\\\\/ -]\\\\)+\\\\([0-9]+\\\\)\")

(defun ahg-glog-next (n)
  (interactive \"p\")
  (end-of-line)
  (re-search-forward ahg-glog-start-regexp nil t n)
  (beginning-of-line))

(defun ahg-glog-previous (n)
  (interactive \"p\")
  (end-of-line)
  (re-search-backward ahg-glog-start-regexp)
  (re-search-backward ahg-glog-start-regexp nil t n))

(defun ahg-glog-view-diff ()
  (interactive)
  (let* ((r1 (ahg-glog-revision-at-point))
         (r2 (ahg-first-parent-of-rev r1)))
    (ahg-diff r2 r1)))

(defun ahg-glog-view-diff-select-rev (rev)
  (interactive \"sEnter revision to compare against: \")
  (let ((r1 (ahg-glog-revision-at-point))
        (r2 rev))
    (ahg-diff r2 r1)))

(defun ahg-glog-revision-at-point ()
  (save-excursion
    (end-of-line)
    (re-search-backward ahg-glog-start-regexp)
    (match-string-no-properties 2)))

(defun ahg-glog-view-details ()
  \"View details of the given revision.\"
  (interactive)
  (let ((rev (ahg-glog-revision-at-point)))
    (ahg-log rev nil)))
  
(defun ahg-glog (r1 r2 &optional extra-flags)
  \"Run hg glog. R1 and R2 specify the range of revisions to
consider. When run interactively, the user must enter their
values (which default to tip for R1 and 0 for R2). If called with
a prefix argument, prompts also for EXTRA-FLAGS.\"
  (interactive
   (ahg-log-read-args ahg-file-list-for-log-command current-prefix-arg))
  (let ((buffer (get-buffer-create
                 (concat \"*hg glog: \" (ahg-root) \"*\")))
        (command-list (ahg-args-add-revs r1 r2)))  
    (setq command-list
          (append command-list
                  (list \"--template\"
                        \"{rev}  {node|short}  {date|shortdate}  {author|user}  [{tags}] ({branches})\\\\n  {desc|firstline}\\\\n\\\\n\")
                  (when extra-flags (split-string extra-flags))))
    (when ahg-file-list-for-log-command
      (setq command-list (append command-list ahg-file-list-for-log-command)))
    (with-current-buffer buffer
      (let ((inhibit-read-only t))
        (erase-buffer)
        (ahg-push-window-configuration)))
    (ahg-generic-command
     \"glog\" command-list
     (lexical-let ((dn (or ahg-dir-name-for-log-command default-directory)))
       (lambda (process status)
         (if (string= status \"finished\\n\")
             (progn
               (pop-to-buffer (process-buffer process))
               (ahg-glog-mode)
               (goto-char (point-min))
               (let ((inhibit-read-only t))
                 (insert
                  (propertize \"hg revision DAG for \" 'face ahg-header-line-face)
                  (propertize dn 'face ahg-header-line-root-face)
                  \"\\n\\n\")))
           (ahg-show-error process))))
     buffer
     nil ;; use-shell
     nil ;; no-show-message
     nil ;; report-untrusted
     nil ;; filterfunc
     nil ;; is-interactive
     (list \"--config\" \"extensions.hgext.graphlog=\") ;; global-opts
     )))

(defun ahg-glog-update-to-rev ()
  (interactive)
  (let ((ahg-update-to-rev-get-revision-function 'ahg-glog-revision-at-point))
    (call-interactively 'ahg-update-to-rev)))

;;-----------------------------------------------------------------------------
;; hg diff
;;-----------------------------------------------------------------------------

(defun ahg-remove-^M ()
  \"Remove ^M at end of line in the whole buffer.  This is done in ahg-diff-mode
so that extra ^M's are not added when applying hunks with C-c C-a.  Plus it 
is a lot more readable without the ^M's getting in the way.\"
  (save-match-data
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward (concat (char-to-string 13) \"$\") 
                                (point-max) t)
        (replace-match \"\")))))

(define-derived-mode ahg-diff-mode diff-mode \"aHg Diff\"
  \"Special Diff mode for aHg buffers.

Commands:
\\\\{ahg-diff-mode-map}
\"
  (put 'ahg-diff-mode 'mode-class 'special)
  ; Remove trailing ^M's.  Without this, ^M's are inserted when applying hunks.
  (ahg-remove-^M)
  (toggle-read-only t)
  (save-excursion
    (goto-char (point-min))
    (while (and (not (eobp)) (not (looking-at \"^---\"))) (forward-line 1))
    (let ((fs (or (diff-hunk-file-names) (diff-hunk-file-names t)))
          goodpath)
      (when fs
        (dolist (p fs goodpath)
          (unless goodpath
            (when (string-match \"^\\\\(a\\\\|b\\\\)/\" p)
              (setq goodpath (substring p (match-end 0))))))
        (when goodpath
          (let ((hint (concat (ahg-root) \"/\" goodpath)))
            (set (make-local-variable 'diff-remembered-defdir)
                 default-directory)
            (diff-tell-file-name nil hint)))
        )))
  (define-key ahg-diff-mode-map \"q\" 'ahg-buffer-quit)
  (easy-menu-add-item nil '(\"Diff\") '[\"--\" nil nil])
  (easy-menu-add-item nil '(\"Diff\") '[\"Quit\" ahg-buffer-quit
                                      [:keys \"q\" :active t]]))


(defun ahg-diff (&optional r1 r2 files)
  (interactive \"P\")
  (when (interactive-p)
    (unless r1
      (setq r1 (read-string \"hg diff, R1: \" \"tip\"))
      (setq r2 (read-string \"hg diff, R2: \" \"\"))))
  (let ((buffer (get-buffer-create \"*aHg diff*\"))
        (command-list (ahg-args-add-revs r1 r2 t))
        (curdir default-directory))
    (with-current-buffer buffer
      (setq default-directory (file-name-as-directory curdir)))
    (when ahg-diff-use-git-format
      (setq command-list (cons \"--git\" command-list)))
    (when files
      (setq command-list (append command-list files)))
    (with-current-buffer buffer
      (let ((inhibit-read-only t))
        (erase-buffer)
        (ahg-push-window-configuration)))
    (ahg-generic-command \"diff\" command-list
                         (lambda (process status)
                           (if (string= status \"finished\\n\")
                               (progn
                                 (pop-to-buffer (process-buffer process))
                                 (ahg-diff-mode)
                                 (goto-char (point-min)))
                             (ahg-show-error process)))
                         buffer
                         nil nil nil nil nil nil nil
                         ; use-temp-file because the output can be large.  
                         ; Considerable speed improvement.
                         t 
                         )))

(defun ahg-diff-c (r &optional files)
  \"runs hg diff -c (show changes in revision)\"
  (interactive)
  (let ((buffer (get-buffer-create \"*aHg diff*\"))
        (command-list (list \"-c\" r))
        (curdir default-directory))
    (with-current-buffer buffer
      (setq default-directory (file-name-as-directory curdir)))
    (when ahg-diff-use-git-format
      (setq command-list (cons \"--git\" command-list)))
    (when files
      (setq command-list (append command-list files)))
    (with-current-buffer buffer
      (let ((inhibit-read-only t))
        (erase-buffer)
        (ahg-push-window-configuration)))
    (ahg-generic-command \"diff\" command-list
                         (lambda (process status)
                           (if (string= status \"finished\\n\")
                               (progn
                                 (pop-to-buffer (process-buffer process))
                                 (ahg-diff-mode)
                                 (goto-char (point-min)))
                             (ahg-show-error process)))
                         buffer
                         nil nil nil nil nil nil nil
                         ; use-temp-file because the output can be large.  
                         ; Considerable speed improvement.
                         t 
                         )))

(defun ahg-diff-cur-file (ask-other-rev)
  (interactive \"P\")
  (cond ((eq major-mode 'ahg-status-mode) (call-interactively 'ahg-status-diff))
        ((eq major-mode 'ahg-short-log-mode)
         (call-interactively 'ahg-short-log-view-diff))
        ((eq major-mode 'ahg-log-mode) (call-interactively 'ahg-log-view-diff))
        ((buffer-file-name)
         (ahg-diff (when ask-other-rev
                     (read-string \"Enter revision to compare against: \"))
                   nil (list (buffer-file-name))))
        (t (message \"hg diff: no file found, aborting.\"))))

;;-----------------------------------------------------------------------------
;; hg annotate
;;-----------------------------------------------------------------------------

(defun ahg-annotate-cur-file ()
  \"Runs hg annotate on the current file.\"
  (interactive)
  (ahg-annotate)
)

(defun ahg-annotate (&optional file rev line)
  \"Run hg annotate on the supplied file and rev.  If no file is given, use the 
current buffer.  If no rev is given, use the current rev.  Lines are colored 
according to their revision, and revision descriptions are shown as tooltips.

The line parameter specifies where to position the point in the annotated file.
If line is not specified, the current line number in the current buffer is
used.
\"
  (lexical-let ((file (or file (buffer-file-name)))
                (rev rev)
                (line (or line (line-number-at-pos))))
    (when file
      (lexical-let ((buffer (get-buffer-create
                             (concat \"*hg annotate: \" 
                                     (when rev (concat \"-r \" rev \" \") ) 
                                     file \"*\" ))))
        (with-current-buffer buffer
          (unless (equal major-mode 'fundamental-mode)
            (fundamental-mode))
          (setq buffer-read-only nil)
          (erase-buffer)
          (ahg-push-window-configuration)
          (put (make-local-variable 'ahg-annotate-cur-file) 
               'permanent-local t)
          (set 'ahg-annotate-current-file file)
          (put (make-local-variable 'ahg-annotate-max-revision) 
               'permanent-local t)
          (put (make-local-variable 'ahg-changeset-descriptions) 
               'permanent-local t))
      
        
        ;; We're actually going to run two commands.  We'll run hg log to get
        ;; the revision descriptions, and then run hg annotate.  After that, 
        ;; we'll colorize and show descriptions as tooltips
        
        (ahg-generic-command
         \"log\" 
         (append
          (list  \"--template\" \"{rev} {desc|firstline))}\\\\n\" file)
          (when rev (list \"-r\" (concat rev \":0\" )))
          )
         (lambda (process status)
           
           (if (string= status \"finished\\n\")
               (with-current-buffer buffer
                 (goto-char (point-min))
                 (set 'ahg-annotate-max-revision 
                      (let ((rev (word-at-point)))
                        (if rev (string-to-number (word-at-point)) 0)))
                 (goto-char (point-max))
                 (forward-line -1)
                 (set 'ahg-annotate-min-revision 
                      (let ((rev (word-at-point)))
                        (if rev (string-to-number (word-at-point)) 0)))
                 (goto-char (point-min))
                 (setq ahg-changeset-descriptions (make-hash-table))
                 (while (not (eobp))
                   (let ((rev (word-at-point)))
                     (when rev
                       (setq rev (string-to-number (word-at-point)))
                       (forward-word)
                       (puthash rev 
                                (buffer-substring-no-properties (point)
                                                                (point-at-eol))
                                ahg-changeset-descriptions))
                     (forward-line)))
                 (erase-buffer)
                 (ahg-generic-command
                  \"annotate\" 
                  (append 
                   (list \"-undl\" file)
                   (when rev (list \"-r\" rev)))
                  
                  (lambda (process status)
                    (if (string= status \"finished\\n\")
                        (progn
                          (pop-to-buffer buffer)
                          ;; Reformat dates to make more room for the file 
                          ;; contents
                          (while (re-search-forward (concat
                           \"\\\\(^ *[^ ]+ +[0-9]+\\\\) [^ ]+ \\\\([^ ]+\\\\) \"
                           \"\\\\([0-9][0-9]\\\\) [0-9][0-9]:[0-9][0-9]:[0-9][0-9] \"
                           \"[0-9][0-9]\\\\([0-9][0-9]\\\\) [^:]+: *\\\\([0-9]+\\\\)\") 
                                                    nil t)
                            (let ((aline (match-string 5)))
                              (replace-match \"\\\\1 \\\\3-\\\\2-\\\\4\")
                              (let ((end (point)))
                                (beginning-of-line)
                                (put-text-property (point) end 
                                                   'ahg-line-number aline))))
                          (goto-line line)
                          (unless (equal major-mode 'ahg-annotate-mode)
                            (ahg-annotate-mode))
                          (setq buffer-read-only t)
                          )
                      (ahg-show-error process)))
                  buffer
                  nil nil nil nil nil nil nil
                  t 
                  ))
             (ahg-show-error process)))
         buffer
         nil nil nil nil nil nil nil
         ; use-temp-file because the output can be large.  
         ; Considerable speed improvement.
         t 
         )))))

;; Adapted from vc-annotate-mode
(define-derived-mode ahg-annotate-mode special-mode \"Annotate\"
  \"Major mode for output buffers of the `ahg-annotate-cur-file' command.
Commands:
\\\\{ahg-annotate-mode-map}
\"
  (buffer-disable-undo) ;; Undo not needed here
  ;; Frob buffer-invisibility-spec so that if it is originally a naked t,
  ;; it will become a list, to avoid initial annotations being invisible.
  (add-to-invisibility-spec 'foo)
  (remove-from-invisibility-spec 'foo)
  (set (make-local-variable 'truncate-lines) t)
  (set (make-local-variable 'font-lock-defaults)
       '(ahg-annotate-font-lock-keywords t))
  (when (fboundp 'hack-dir-local-variables-non-file-buffer)
    (hack-dir-local-variables-non-file-buffer))

  (define-key ahg-annotate-mode-map \"=\" 'ahg-annotate-diff)
  (define-key ahg-annotate-mode-map \"l\" 'ahg-annotate-log)
  (define-key ahg-annotate-mode-map \"a\" 'ahg-annotate-annotate)
  (define-key ahg-annotate-mode-map \"u\" 'ahg-annotate-uncover)
  (define-key ahg-annotate-mode-map \"q\" 'ahg-buffer-quit)
  (easy-menu-add ahg-annotate-mode-menu ahg-annotate-mode-map))

(easy-menu-define ahg-annotate-mode-menu ahg-annotate-mode-map \"aHg Annotate\"
  '(\"aHg Annotate\"
    [\"Diff Line's Revision\" ahg-annotate-diff [:keys \"=\" :active t]]
    [\"Log Line's Revision\" ahg-annotate-log [:keys \"l\" :active t]]
    [\"Annotate Line's Revision\" ahg-annotate-annotate [:keys \"a\" :active t]]
    [\"Uncover Line\" ahg-annotate-uncover [:keys \"u\" :active t]]
    [\"Quit\" ahg-buffer-quit [:keys \"q\" :active t]]))

;; Adapted from vc-annotate-font-lock-keywords
(defconst ahg-annotate-font-lock-keywords
  ;; The fontification is done by ahg-annotate-lines instead of font-lock.
  '((ahg-annotate-lines)))

;; Borrowed from vc-annotate-lines, optimized it
(defun ahg-annotate-lines (limit)
  \"Iterates over each line.  When it hits the end or the revision changes, it
applies the group of preceding lines having the same revision.\"
  (let ((start (point)) lastrev rev)
    (while (< (point) limit)
      (forward-word 2) ;; go to revision column
      (let ((rev (current-word)))
        (when (and (not (equal rev lastrev)) lastrev)
          (beginning-of-line)
          (ahg-annotate-region start (setq start (point)) lastrev))
        (setq lastrev rev))
      (forward-line))
    (ahg-annotate-region start (point) lastrev))
  nil)

(defun ahg-annotate-region (start end rev)
  \"Sets properties on a group of lines belonging to the same revision.
It sets a color corresponding to the revision.  It also sets a tooltip that 
displays the changeset description.

Colors range from purple for old revisions to red for recent revisions.\"
  (setq rev (string-to-number rev))
  (let* ((color (ahg-hsv-to-hex 
                 (* .7 ; Using .7 here omits the ambiguous pinks
                    (/ (- ahg-annotate-max-revision (float rev)) 
                       (max 1 ; avoid divide by zero with this
                            (- ahg-annotate-max-revision 
                               ahg-annotate-min-revision))))
                 .9 .9))
         ;; substring from index 1 to remove any leading `#' in the name
         (face-name (concat \"ahg-annotate-face-\"
                            (if (string-equal
                                 (substring color 0 1) \"#\")
                                (substring color 1)
                              color)))
         ;; Make the face if not done.
         (face (or (intern-soft face-name)
                   (let ((tmp-face (make-face (intern face-name))))
                     (set-face-foreground tmp-face color)
                     (when vc-annotate-background
                       (set-face-background tmp-face
                                            vc-annotate-background))
                     tmp-face))))	; Return the face
    (put-text-property start end 'face face)
    (put-text-property start end 'help-echo 
                       (gethash rev ahg-changeset-descriptions ))))

;;; Helper functions for commands in ahg-annotate-mode
(defun ahg-annotate-revision-at-line ()
  \"Return the revision of the current line.  It is located in the second word in
the line\"
  (save-excursion
     (beginning-of-line)
     (forward-word 2)
     (word-at-point)))

(defun ahg-annotate-line-at-line ()
  \"Return the line number at the first appearance of the current line.  It is 
stored in a text property.\"
  (save-excursion
     (beginning-of-line)
     (string-to-number (get-text-property (point) 'ahg-line-number))))

;;; Commands that can be invoked in ahg-annotate-mode
(defun ahg-annotate-log ()
  \"See the changeset log for the revision at the current line in the
annotation.\"
  (interactive)
  (ahg-log 
   (ahg-annotate-revision-at-line)
   nil))

(defun ahg-annotate-diff ()
  \"Display a complete diff of the revision at the current line in the
annotation.\"
  (interactive)
  (ahg-diff-c 
   (ahg-annotate-revision-at-line)
   (list ahg-annotate-current-file)
   ))

(defun ahg-annotate-uncover ()
  \"See the annotated revision just prior to the revision your cursor is on.
Lets you step back in time for that line.\"
  (interactive)
  (let ((prior-rev 
         (1-
          (string-to-number 
           (ahg-annotate-revision-at-line)))))
    (if (< prior-rev 0)
        (message \"Already at revision zero\")
      (ahg-annotate 
       ahg-annotate-current-file 
       (number-to-string prior-rev)
       (ahg-annotate-line-at-line)))))

(defun ahg-annotate-annotate ()
  \"See the annotated file using the revision your cursor is on.\"
  (interactive)
  (ahg-annotate 
   ahg-annotate-current-file 
   (ahg-annotate-revision-at-line)
   (ahg-annotate-line-at-line)))

;;-----------------------------------------------------------------------------
;; hg command
;;-----------------------------------------------------------------------------

(defun ahg-complete-command-name (command)
  (with-temp-buffer
    (let ((process-environment (cons \"LANG=\" process-environment)))
      (if (= (ahg-call-process \"debugcomplete\") 0)
          ;; first, we try the built-in autocompletion of mercurial
          (let (out)
            (goto-char (point-min))
            (while (not (eobp))
              (setq out
                    (cons
                     (buffer-substring-no-properties
                      (point-at-bol) (point-at-eol))
                     out))
              (forward-line 1))
            (if out (nreverse out) (list command)))
        ;; if this fails, we return the string itself as a match
        (list command)))))

(defvar ahg-complete-command-directory-for-filename-completion nil)

(defun ahg-complete-command (command)
  ;; we split the string, and treat the last word as a filename
  (let* ((idx (string-match \"\\\\([^ ]+\\\\)$\" command))
         (matches
          (cond ((= idx 0) (ahg-complete-command-name command))
                ((and (= idx 5) (string= (substring command 0 idx) \"help \"))
                 (ahg-complete-command-name (substring command idx)))
                (t
                 (let ((default-directory
                         (or
                          ahg-complete-command-directory-for-filename-completion
                          default-directory)))
                   (mapcar
                    (lambda (n)
                      (if (file-directory-p n) (file-name-as-directory n) n))
                    (file-expand-wildcards
                     (concat (substring command idx) \"*\")))))))
         (prev (substring command 0 idx)))
    (mapcar (function (lambda (a) (concat prev a))) matches)))


(defvar ahg-do-command-prompt \"Hg command: \")
(defvar ahg-do-command-extra-args nil)

(defun ahg-do-command (cmdstring)
  \"Execute an arbitrary hg command CMDSTRING.
CMDSTRING should not include 'hg' as first argument, as this is
implicit.

When run from an *aHg-status* buffer, the selected files are
passed as extra arguments. In this case, if there is a `*' in
CMDSTRING, surrounded by whitespace, the list of files is
substituted there. Otherwise, the list of files is appended to
CMDSTRING.

With a non-nil prefix arg, upon successful completion the status
buffer is automatically refreshed. (If called from an MQ patches buffer,
that buffer is refreshed instead.)\"
  (interactive (list
                (let ((minibuffer-local-completion-map
                       (copy-keymap minibuffer-local-map)))
                  (define-key minibuffer-local-completion-map \"\\t\"
                    'minibuffer-complete)
                  (completing-read ahg-do-command-prompt
                                   (ahg-dynamic-completion-table
                                    ahg-complete-command)))))
  (let* ((args (split-string cmdstring \" \"))
         (cmdname (car args))
         (cmdargs (mapconcat 'identity (cdr args) \" \"))
         (interpolate (member \"*\" (cdr args)))
         (buffer (get-buffer-create (concat \"*hg command: \"
                                            (ahg-root) \"*\")))
         (curdir default-directory)
         (should-refresh current-prefix-arg)
         (is-interactive
          (ahg-string-match-p ahg-do-command-interactive-regexp cmdname))
         (ahg-i18n (if is-interactive nil ahg-i18n)))
    (when ahg-do-command-extra-args
      (let ((extra (mapconcat 'identity ahg-do-command-extra-args \" \")))
        (setq cmdargs
              (if interpolate
                  (replace-regexp-in-string
                   \"\\\\([*]\\\\).*\\\\'\" extra cmdargs nil nil 1)
                (concat cmdargs \" \" extra)))))
    (with-current-buffer buffer
      (let ((inhibit-read-only t))
        (ahg-command-mode)
        (erase-buffer)
        (setq default-directory (file-name-as-directory curdir))
        (ahg-push-window-configuration)))
    (when ahg-do-command-show-buffer-immediately
      (pop-to-buffer buffer))
    (when ahg-do-command-insert-header
      (with-current-buffer buffer
        (let ((inhibit-read-only t))
          (goto-char (point-min))
          (insert
           (propertize
            (concat \"output of 'hg \" cmdname \" \" cmdargs \"' on \")
            'face ahg-header-line-face)
           (propertize default-directory 'face ahg-header-line-root-face)
           \"\\n\" (make-string (1- (window-width (selected-window))) ?-)
           \"\\n\\n\"))))
    (ahg-generic-command
     cmdname (list cmdargs)
     (lexical-let ((should-refresh should-refresh)
                   (aroot (ahg-root))
                   (is-mq (eq major-mode 'ahg-mq-patches-mode)))
       (lambda (process status)
         (if (string= status \"finished\\n\")
             (progn
               (when should-refresh
                 (if is-mq
                     (ahg-mq-patches-maybe-refresh aroot)
                   (ahg-status-maybe-refresh aroot)))
               (pop-to-buffer (current-buffer))
               (goto-char (point-min)))
           (ahg-show-error process))))
     buffer
     t ;; use-shell
     nil ;; no-show-message
     t ;; report-untrusted
     (when is-interactive 'ahg-do-command-filter) ;; filterfunc
     is-interactive ;; is-interactive
     nil ;; global-opts
     (not is-interactive) ;; no-hgplain
     )))


(defun ahg-do-command-filter (process string)
  (when (buffer-name (process-buffer process))
    ;; insert output into the buffer
    (with-current-buffer (process-buffer process)
      (let ((moving (= (point) (process-mark process)))
            (inhibit-read-only t))
        (save-excursion
          ;; Insert the text, advancing the process marker.
          (goto-char (process-mark process))
          (insert string)
          (set-marker (process-mark process) (point))
          ;; check if we are expecting a user name or a password
          (let (user pass data)
            (save-excursion
              (backward-word)
              (cond ((looking-at \"\\\\<user: $\") (setq user t))
                    ((looking-at \"\\\\<password: $\") (setq pass t))))
            (cond (user (setq data (concat (read-string \"user: \") \"\\n\"))
                        (process-send-string process data))
                  (pass (setq data (concat (read-passwd \"password: \") \"\\n\"))
                        (process-send-string process data)
                        (setq data \"***\\n\")
                        ))
            (when data
              (insert data)
              (set-marker (process-mark process) (point)))
            )
          )
        (if moving (goto-char (process-mark process)))))))
  

;;-----------------------------------------------------------------------------
;; hg help
;;-----------------------------------------------------------------------------

(defun ahg-command-help (command)
  (interactive
   (list (completing-read \"Help on hg command: \"
                          (ahg-dynamic-completion-table
                           ahg-complete-command-name))))
  (let ((buffer (get-buffer-create \"*hg help*\"))
        (oldcols (getenv \"COLUMNS\"))
        (ahg-i18n t))
    (with-current-buffer buffer (let ((inhibit-read-only t)) (erase-buffer)))
    (setenv \"COLUMNS\" (format \"%s\" (window-width (selected-window))))
    (ahg-generic-command
     \"help\" (list command)
     (lambda (process status)
       (if (string= status \"finished\\n\")
           (progn
             (pop-to-buffer (process-buffer process))
             (help-mode)
             (local-set-key \"!\" 'ahg-do-command)
             (let ((mymap (copy-keymap
                           (cdr (assq 'view-mode minor-mode-map-alist)))))
               (define-key mymap \"h\" 'ahg-command-help)
               (add-to-list 'minor-mode-overriding-map-alist
                            (cons 'view-mode mymap)))
             (goto-char (point-min)))
         (ahg-show-error process)))
     buffer)
    (setenv \"COLUMNS\" oldcols)))

;;-----------------------------------------------------------------------------
;; manifest grep
;;-----------------------------------------------------------------------------

(defvar ahg-manifest-grep-pattern-history nil
  \"History for patterns of `ahg-manifest-grep'.\")

(defun ahg-grep-regexp-quote (s)
  (replace-regexp-in-string \"[()]\" (lambda (m) (concat \"\\\\\\\\\" m))
                            (regexp-quote s)))

(defun ahg-manifest-grep (pattern glob)
  \"Search for grep-like pattern in the working directory, considering only
the files under version control.\"
  (interactive
   (list
    (let* ((default
             (cond ((and mark-active transient-mark-mode)
                    (ahg-grep-regexp-quote (buffer-substring (region-beginning)
                                                             (region-end))))
                   ((symbol-at-point)
                    (ahg-grep-regexp-quote (format \"%s\" (symbol-at-point))))
                   (t (car ahg-manifest-grep-pattern-history))))
           (input (read-string
                   (if default
                       (format \"Search for pattern (default %s): \"
                               (query-replace-descr default))
                     \"Search for pattern: \"))))
      (if (and input (> (length input) 0)) input default))
    (if current-prefix-arg (read-string \"Files to search: \") \"\")))
  (grep (format \"cd %s && %s locate -0 %s | xargs -0 grep -nHE -e %s\"
                (ahg-root) ahg-hg-command
                (shell-quote-argument glob)
                (shell-quote-argument pattern))))

;;-----------------------------------------------------------------------------
;; MQ support
;;-----------------------------------------------------------------------------

(defun ahg-mq-log-callback (cmdname &optional extraargs)
  \"Callback function to edit log messages for mq commands.\"
  (interactive)
  (let ((msg (ahg-parse-commit-message)))
    (let ((args (append (list \"-m\" msg)
                        extraargs
                        (log-edit-files))))
      (ahg-generic-command
       cmdname args
       (lexical-let ((aroot (ahg-root))
                     (n (length (log-edit-files)))
                     (cmdn cmdname))
         (lambda (process status)
           (if (string= status \"finished\\n\")
               (progn
                 (ahg-status-maybe-refresh aroot)
                 (message \"mq command %s successful.\" cmdn)
                 (kill-buffer (process-buffer process)))
             (ahg-show-error process)))))))
  (kill-buffer (current-buffer)))

(defun ahg-complete-mq-patch-name (patchname)
  \"Function to complete patch names, according to the result of the
hg qseries command.\"
  (with-temp-buffer
    (let ((process-environment (cons \"LANG=\" process-environment))) 
      (if (= (ahg-call-process \"qseries\") 0)
          (let (out)
            (goto-char (point-min))
            (while (not (or (looking-at \"^$\") (eobp)))
              (let* ((curname (buffer-substring-no-properties
                               (point-at-bol) (point-at-eol)))
                     (ok (compare-strings patchname 0 nil curname 0 nil)))
                (when (or (eq ok t) (= (- ok) (1+ (length patchname))))
                  (setq out (cons curname out)))
                (beginning-of-line)
                (forward-line 1)))
            (nreverse out))
        ;; here, we silently ignore errors, and return an empty completion
        nil))))

(defun ahg-qnew (patchname force edit-log-message)
  \"Create a new mq patch PATCHNAME. If FORCE is nil, abort if
there are outstanding changes in the working directory. If
EDIT-LOG-MESSAGE is non-nil, pop a buffer to enter a commit
message to use instead of the default one. When called
interactively, the name of the patch and the FORCE flag are read
from the minibuffer, and EDIT-LOG-MESSAGE is non-nil only if
called with a prefix argument. If FORCE is true and the function
is called interactively from a aHg status buffer, only the
selected files will be incorporated into the patch.\"
  (interactive
   (list (read-string \"Patch name: \")
         (and (ahg-uncommitted-changes-p)
              (ahg-y-or-n-p \"Import outstanding changes into patch? \"))
         current-prefix-arg))
  (if (and (not force) (ahg-uncommitted-changes-p))
      (message \"mq command qnew aborted.\")
    (let ((files (when (eq major-mode 'ahg-status-mode)
                   (mapcar 'cddr (ahg-status-get-marked nil))))
          (qnew-args (append (when ahg-diff-use-git-format (list \"--git\"))
                             (list \"--force\"))))
      (if edit-log-message
          (ahg-log-edit
           (lexical-let ((qnew-args qnew-args))
             (lambda () (interactive)
               (ahg-mq-log-callback \"qnew\" qnew-args)))
           (lexical-let ((flist (cons patchname files))) (lambda () flist))
           (generate-new-buffer \"*aHg-log*\"))
        ;; else
        (ahg-generic-command
         \"qnew\" (append qnew-args (list patchname) files)
         (lexical-let ((aroot (ahg-root)))
           (lambda (process status)
             (if (string= status \"finished\\n\")
                 (progn
                   (ahg-status-maybe-refresh aroot)
                   (ahg-mq-patches-maybe-refresh aroot)
                   (message \"mq command qnew successful.\")
                   (kill-buffer (process-buffer process)))
               (ahg-show-error process)))))
        ))))

(defun ahg-qrefresh (get-log-message)
  \"Refreshes the current mq patch. If GET-LOG-MESSAGE is non-nil,
a buffer will pop up to enter the commit message. When called
interactively, GET-LOG-MESSAGE is non-nil only if called with a
prefix arg. If called interactively from a aHg status buffer,
only the selected files will be refreshed.\"
  (interactive \"P\")
  (let ((buf (when get-log-message (generate-new-buffer \"*aHg-log*\")))
        (files (when (eq major-mode 'ahg-status-mode)
                 (mapcar 'cddr (ahg-status-get-marked nil)))))
    (if get-log-message
        (let* ((patchname
                (with-temp-buffer
                  (when (= (ahg-call-process \"qtop\") 0)
                    (buffer-substring-no-properties
                     (point-min) (1- (point-max))))))
               (msg (when patchname
                      (concat \"Refreshing mq patch: \" patchname)))
               (content
                (with-temp-buffer
                  (when
                      (= (if patchname
                             (ahg-call-process \"qheader\" (list patchname))
                           (ahg-call-process \"qheader\")) 0)
                    (buffer-substring-no-properties
                     (point-min) (1- (point-max)))))))
          (ahg-log-edit
           (lexical-let ((args (when ahg-diff-use-git-format (list \"--git\"))))
             (lambda () (interactive) (ahg-mq-log-callback \"qrefresh\" args)))
           (lexical-let ((flist files)) (lambda () flist))
           buf msg content))
      (ahg-generic-command
       \"qrefresh\" (append (when (and files ahg-qrefresh-use-short-flag)
                            (list \"--short\"))
                          (when ahg-diff-use-git-format (list \"--git\")) files)
       (lexical-let ((aroot (ahg-root)))
         (lambda (process status)
           (if (string= status \"finished\\n\")
               (progn
                 (ahg-status-maybe-refresh aroot)
;;                 (ahg-mq-patches-maybe-refresh aroot)
                 (message \"mq command qrefresh successful.\")
                 (kill-buffer (process-buffer process)))
             (ahg-show-error process))))))))

(defun ahg-qgoto (patchname force)
  \"Puts the given mq patch PATCHNAME on the top of the stack. If
FORCE is non-nil, discard local changes (passing -f to hg). When
called interactively, PATCHNAME and FORCE are read from the minibuffer.
\"
  (interactive
   (list (completing-read
          \"Go to patch: \"
          (ahg-dynamic-completion-table ahg-complete-mq-patch-name))
         (and (ahg-uncommitted-changes-p)
              (ahg-y-or-n-p \"Overwrite local changes? \"))))
  (let ((args (if force (list \"-f\" patchname) (list patchname))))
    (ahg-generic-command
     \"qgoto\" args
     (lexical-let ((aroot (ahg-root)))
       (lambda (process status)
         (if (string= status \"finished\\n\")
             (progn
               (ahg-status-maybe-refresh aroot)
               (ahg-mq-patches-maybe-refresh aroot)
               (let ((msg
                      (with-current-buffer (process-buffer process)
                        (goto-char (point-max))
                        (forward-char -1)
                        (beginning-of-line)
                        (buffer-substring-no-properties
                         (point-at-bol) (point-at-eol)))))
                 (message msg)
                 (if (ahg-string-match-p \"^errors \" msg)
                     (ahg-show-error process)
                   (kill-buffer (process-buffer process)))))
           (ahg-show-error process)))))))


(defun ahg-qmove (patchname force)
  \"Like `ahg-qgoto', but reorder patch series and apply only the given patch.\"
  (interactive
   (list (completing-read
          \"Move to patch: \"
          (ahg-dynamic-completion-table ahg-complete-mq-patch-name))
         (and (ahg-uncommitted-changes-p)
              (ahg-y-or-n-p \"Overwrite local changes? \"))))
  (let ((args (append (list \"--move\")
                      (if force (list \"-f\" patchname) (list patchname))))
        (finishfunc
         (lexical-let ((aroot (ahg-root)))
           (lambda (process status)
             (if (string= status \"finished\\n\")
                 (progn
                   (ahg-status-maybe-refresh aroot)
                   (ahg-mq-patches-maybe-refresh aroot)
                   (let ((msg
                          (with-current-buffer (process-buffer process)
                            (goto-char (point-max))
                            (forward-char -1)
                            (beginning-of-line)
                            (buffer-substring-no-properties
                             (point-at-bol) (point-at-eol)))))
                     (message msg)
                     (if (ahg-string-match-p \"^errors \" msg)
                         (ahg-show-error process)
                       (kill-buffer (process-buffer process)))))
               (ahg-show-error process))))))
    (ahg-generic-command \"qpush\" args finishfunc)))


(defun ahg-qswitch (patchname force)
  \"Like `ahg-qmove', but pop the currently applied patches before moving.\"
  (interactive
   (list (completing-read
          \"Move to patch: \"
          (ahg-dynamic-completion-table ahg-complete-mq-patch-name))
         (and (ahg-uncommitted-changes-p)
              (ahg-y-or-n-p \"Overwrite local changes? \"))))
  (let ((args (append (list \"--move\")
                      (if force (list \"-f\" patchname) (list patchname))))
        (finishfunc
         (lexical-let ((aroot (ahg-root)))
           (lambda (process status)
             (if (string= status \"finished\\n\")
                 (progn
                   (ahg-status-maybe-refresh aroot)
                   (ahg-mq-patches-maybe-refresh aroot)
                   (let ((msg
                          (with-current-buffer (process-buffer process)
                            (goto-char (point-max))
                            (forward-char -1)
                            (beginning-of-line)
                            (buffer-substring-no-properties
                             (point-at-bol) (point-at-eol)))))
                     (message msg)
                     (if (ahg-string-match-p \"^errors \" msg)
                         (ahg-show-error process)
                       (kill-buffer (process-buffer process)))))
               (ahg-show-error process))))))
    (if (ahg-mq-applied-patches-p)
        (ahg-generic-command
         \"qpop\" (if force (list \"-f\" \"-a\") (list \"-a\"))
         (lexical-let ((aroot (ahg-root))
                       (finishfunc finishfunc)
                       (args args))
           (lambda (process status)
             (if (string= status \"finished\\n\")
                 (ahg-generic-command \"qpush\" args finishfunc)
               (ahg-show-error process)))))
      (ahg-generic-command \"qpush\" args finishfunc))))


(defun ahg-qapply (patchname force)
  \"Apply the patch PATCHNAME to the working copy, without
actually modifying the status of the repo and of the patch
queue. If there are local changes, proceed only if FORCE is
non-nil. When called interactively, FORCE is read from the
minibuffer.\"
  (interactive
   (list (completing-read
          \"Apply patch (to the working copy): \"
          (ahg-dynamic-completion-table ahg-complete-mq-patch-name))
         (and (ahg-uncommitted-changes-p)
              (ahg-y-or-n-p
               \"Working copy contains local changes, proceed anyway? \"))))
  (let ((aroot (file-name-as-directory (ahg-root)))
        (curwc (current-window-configuration))
        (buffer (generate-new-buffer \"*ahg-command*\")))
    (with-current-buffer buffer
      (let* ((default-directory aroot)
             (patchfile (concat aroot \".hg/patches/\" patchname))
             (args (list \"-p\" \"1\" \"--no-commit\" patchfile)))
        (when force
          (setq args (cons \"--force\" args)))
        (if (= (ahg-call-process \"patch\" args) 0)
            (progn
              (kill-buffer)
              (set-window-configuration curwc)
              (message \"Applied patch %s to the working copy\" patchname))
          (pop-to-buffer buffer)
          (message \"Error applying patch %s to the working copy\" patchname))))
    (ahg-status-maybe-refresh aroot)))


(defun ahg-qpop-all (force)
  \"Pops all patches off the mq stack. If FORCE is non-nil,
discards any local changes. When called interactively, FORCE is
read from the minibuffer.
\"
  (interactive
   (list (and (ahg-uncommitted-changes-p)
              (ahg-y-or-n-p \"Forget local changes? \"))))
  (let ((args (if force (list \"-f\" \"-a\") (list \"-a\"))))
    (ahg-generic-command
     \"qpop\" args
     (lexical-let ((aroot (ahg-root)))
       (lambda (process status)
         (if (string= status \"finished\\n\")
             (progn
               (ahg-status-maybe-refresh aroot)
               (ahg-mq-patches-maybe-refresh aroot)
               (let ((msg
                      (with-current-buffer (process-buffer process)
                        (goto-char (point-max))
                        (forward-char -1)
                        (beginning-of-line)
                        (buffer-substring-no-properties
                         (point-at-bol) (point-at-eol)))))
                 (message msg))
               (kill-buffer (process-buffer process)))
           (ahg-show-error process)))))))

(defun ahg-qtop ()
  \"Shows the name of the mq patch currently at the top of the stack.\"
  (interactive)
  (ahg-generic-command
   \"qtop\" nil
   (lambda (process status)
     (if (string= status \"finished\\n\")
         (progn
           (let ((msg
                  (with-current-buffer (process-buffer process)
                    (goto-char (point-max))
                    (forward-char -1)
                    (beginning-of-line)
                    (buffer-substring-no-properties
                     (point-at-bol) (point-at-eol)))))
             (message msg))
           (kill-buffer (process-buffer process)))
       (ahg-show-error process)))))

(defun ahg-qdelete (patchname)
  \"Deletes the given patch PATCHNAME. When called interactively,
read the name from the minibuffer.\"
  (interactive
   (list
    (completing-read
     \"Delete patch: \"
     (ahg-dynamic-completion-table ahg-complete-mq-patch-name))))
  (ahg-generic-command
   \"qdelete\" (list patchname)
   (lexical-let ((patchname patchname)
                 (aroot (ahg-root)))
     (lambda (process status)
       (if (string= status \"finished\\n\")
           (progn
             (ahg-mq-patches-maybe-refresh aroot)
             (message \"Deleted mq patch %s\" patchname)
             (kill-buffer (process-buffer process)))
         (ahg-show-error process))))))


(defun ahg-mq-convert-patch-to-changeset-callback ()
  (interactive)
  (ahg-generic-command ;; first, we refresh the patch with the new log message
   \"qrefresh\" (list \"-m\" (ahg-parse-commit-message))
   (lexical-let ((log-buffer (current-buffer)))
     (lambda (process status)
       (kill-buffer log-buffer)
       (if (string= status \"finished\\n\")
           (progn 
             (ahg-generic-command ;; if successful, we then try to convert it to
                                  ;; a regular changeset.
              \"qdelete\" (list \"--rev\" \"tip\")
              (lexical-let ((aroot (ahg-root)))
                (lambda (process status)
                  (if (string= status \"finished\\n\")
                      (progn
                        (ahg-status-maybe-refresh aroot)
                        (ahg-mq-patches-maybe-refresh aroot)
                        (kill-buffer (process-buffer process)))
                    ;; note that if this second command fails, we still have
                    ;; changed the log message... This is not nice, but at the
                    ;; moment I don't know how to fix it
                    (ahg-show-error process)))))
             (kill-buffer (process-buffer process)))
         (ahg-show-error process))))))

(defun ahg-mq-convert-patch-to-changeset ()
  \"Tell mq to stop managing the current patch and convert it to a regular
mercurial changeset. The patch must be applied and at the base of the stack.
Pops a buffer for entering the commit message.\"
  (interactive)
  (let* ((buf (generate-new-buffer \"*aHg-log*\"))
         (patchname
          (with-temp-buffer
            (when (= (ahg-call-process \"qtop\") 0)
              (buffer-substring-no-properties
               (point-min) (1- (point-max))))))
         (msg (when patchname
                (concat \"Converting mq patch: \" patchname
                        \" to regular changeset\")))
         (content
          (with-temp-buffer
            (when (= (if patchname
                         (ahg-call-process \"qheader\" (list patchname))
                       (ahg-call-process \"qheader\")) 0)
              (buffer-substring-no-properties (point-min) (1- (point-max)))))))
    (ahg-log-edit
     'ahg-mq-convert-patch-to-changeset-callback
     (lambda () nil)
     buf
     msg content)))


(defun ahg-qdiff (files)
  \"Shows a diff which includes the current mq patch as well as any
changes which have been made in the working directory since the
last refresh.\"
  (interactive (list (when (eq major-mode 'ahg-status-mode) 
                       (mapcar 'cddr (ahg-status-get-marked nil)))))
  (let ((buf (get-buffer-create \"*aHg diff*\")))
    (with-current-buffer buf
      (let ((inhibit-read-only t))
        (erase-buffer)
        (ahg-push-window-configuration)))
    (ahg-generic-command
     \"qdiff\" (if ahg-diff-use-git-format (append (list \"--git\") files) files)
     (lexical-let ((aroot (file-name-as-directory (ahg-root))))
       (lambda (process status)
         (if (string= status \"finished\\n\")
             (progn
               (pop-to-buffer (process-buffer process))
               (setq default-directory aroot)
               (ahg-diff-mode)
               (goto-char (point-min)))
           (ahg-show-error process))))
     buf)))


(define-generic-mode ahg-mq-series-mode
  '(\"#\") ;; comments
  '() ;; keywords
  '() ;; extra font locks
  '() ;; auto mode list
  '() ;; functions for setup
  \"Major mode for editing MQ patch series files.\")


(defun ahg-mq-edit-series ()
  (interactive)
  ;; first, check whether there is any patch applied. If so, ask the user
  ;; whethe (s)he wants to pop all patches before editing series
  (let* ((some-patches-applied
         (with-temp-buffer
           (when (= (ahg-call-process \"tip\" (list \"--template\" \"{tags}\")) 0)
             (let ((tags (split-string (buffer-string))))
               (member \"qtip\" tags)))))
         (pop (and some-patches-applied
                   (ahg-y-or-n-p \"Pop all patches before editing series? \")))
         (edit-series (lambda (root)
                        (find-file-other-window
                         (concat (file-name-as-directory root)
                                 \".hg/patches/series\"))
                        (ahg-mq-series-mode))))
      (if pop
          (ahg-generic-command
           \"qpop\" (list \"--all\")
           (lexical-let ((aroot (ahg-root))
                         (edit-series edit-series))
             (lambda (process status)
               (if (string= status \"finished\\n\")
                   (progn
                     (ahg-status-maybe-refresh aroot)
                     (ahg-mq-patches-maybe-refresh aroot)
                     (funcall edit-series aroot)
                     (kill-buffer (process-buffer process)))
                 (ahg-show-error process)))))
        (funcall edit-series (ahg-root)))))


(defvar ahg-mq-patches-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map [?q] 'ahg-buffer-quit)
    (define-key map [?g] 'ahg-mq-patch-list-refresh)
    (define-key map [?D] 'ahg-mq-patches-delete-patch)
    (define-key map [?!] 'ahg-mq-do-command)
    (define-key map [?h] 'ahg-command-help)
    (define-key map [?=] 'ahg-mq-patches-view-patch)
    (define-key map [?\\r] 'ahg-mq-patches-goto-patch)
    (define-key map [?m] 'ahg-mq-patches-moveto-patch)
    (define-key map [?s] 'ahg-mq-patches-switchto-patch)
    (define-key map [?a] 'ahg-mq-patches-apply-patch)
    (define-key map [?p] 'ahg-qpop-all)
    (define-key map [?n] 'ahg-qnew)
    (define-key map [?e] 'ahg-mq-edit-series)
    (define-key map [?f] 'ahg-mq-patches-convert-patch-to-changeset)
    (define-key map [?r] 'ahg-mq-patches-qrefresh)
    map)
  \"Keymap used in `ahg-mq-patches-mode'.\")

(defvar ahg-mq-patches-line-map
  (let ((map (make-sparse-keymap)))
    (define-key map [mouse-1] 'ahg-mq-patches-view-patch-mouse)
    (define-key map [mouse-2] 'ahg-mq-patches-goto-patch-mouse)
    map))

(easy-menu-define ahg-mq-patches-mode-menu ahg-mq-patches-mode-map
  \"aHg MQ Patches\"
  '(\"aHg MQ Patches\"
    [\"View Patch\" ahg-mq-patches-view-patch [:keys \"=\" :active t]]
    [\"Go to Patch\" ahg-mq-patches-goto-patch [:keys \"\\r\" :active t]]
    [\"Move to Patch\" ahg-mq-patches-moveto-patch [:keys \"m\" :active t]]
    [\"Switch to Patch\" ahg-mq-patches-switchto-patch [:keys \"s\" :active t]]
    [\"Apply Patch to the Working Copy\" ahg-mq-patches-apply-patch
     [:keys \"a\" :active t]]
    [\"New Patch...\" ahg-qnew [:keys \"n\" :active t]]
    [\"Delete Patch\" ahg-mq-patches-delete-patch [:keys \"D\" :active t]]
    [\"Pop All Patches\" ahg-qpop-all [:keys \"p\" :active t]]
    [\"Edit series File\" ahg-mq-edit-series [:keys \"e\" :active t]]
    [\"--\" nil nil]
    [\"Refresh Current Patch\" ahg-mq-patches-qrefresh [:keys \"r\" :active t]]
    [\"Convert Current Patch to Changeset\"
     ahg-mq-patches-convert-patch-to-changeset [:keys \"f\" :active t]]
    [\"--\" nil nil]
    [\"Hg Command\" ahg-mq-do-command [:keys \"!\" :active t]]
    [\"Help on Hg Command\" ahg-command-help [:keys \"h\" :active t]]
    [\"--\" nil nil]
    [\"Refresh\" ahg-mq-patch-list-refresh [:keys \"g\" :active t]]
    [\"Quit\" ahg-buffer-quit [:keys \"q\" :active t]]
    ))

(define-derived-mode ahg-mq-patches-mode special-mode \"ahg-mq-patches\"
  \"Major mode to display mq patch queues.

Commands:
\\\\{ahg-mq-patches-mode-map}
\"
  (buffer-disable-undo) ;; undo info not needed here
  (use-local-map ahg-mq-patches-mode-map)
  (font-lock-mode nil)
  ;;(hl-line-mode t)
  (setq truncate-lines t)
  (toggle-read-only t)
  (easy-menu-add ahg-mq-patches-mode-menu ahg-mq-patches-mode-map)
  )

(defun ahg-mq-patch-pp (data)
  \"Pretty-printer for mq patches patch list.\"
  ;; data is a 4-elements list: index, applied, patch name, guards
  (let* ((s (format \"% 6d |  %s  | %s %s\" (car data)
                   (if (cadr data) \"*\" \" \") (caddr data)
                   (if (not (string= (car (cadddr data)) \"unguarded\"))
                       (cadddr data) \"\")))
         (width (window-width (selected-window)))
         (pad (if (< (length s) width)
                  (make-string (- width (length s)) ? ) \"\")))
    (insert (propertize (concat s pad)
                        'mouse-face 'highlight
                        'keymap ahg-mq-patches-line-map))))

(defun ahg-mq-patches-insert-contents (ewoc patches applied guards)
  (let ((idx 0))
    (mapcar
     (lambda (patch)
       (when (not (string-match patch \"[ \\t]+\"))
         (let ((data (list idx
                           (member patch applied)
                           patch
                           (cdr (assoc patch guards)))))
           (setq idx (1+ idx))
           (ewoc-enter-last ewoc data))))
     patches)))

(defun ahg-mq-patches-create-ewoc ()
  (let* ((width (window-width (selected-window)))
         (r (propertize (make-string width ?-) 'face 'bold))
         (header (concat
                  (propertize \"mq patch queue for \" 'face ahg-header-line-face)
                  (propertize default-directory 'face ahg-header-line-root-face)
                  \"\\n\\n\" r \"\\n\"
                  (propertize \" Index | App | Patch (Guards)\\n\" 'face 'bold) r))
         (footer r)
         (ew (ewoc-create 'ahg-mq-patch-pp header footer)))
    ew))

(defun ahg-mq-show-patches-buffer (buf patches applied guards curdir no-pop
                                       point-pos)
  (with-current-buffer buf
    (ahg-mq-patches-mode)    
    (let ((inhibit-read-only t))
      (erase-buffer)
      (setq default-directory (file-name-as-directory curdir))
      (ahg-push-window-configuration)
      (goto-char (point-min))
      (let ((ew (ahg-mq-patches-create-ewoc)))
        (ahg-mq-patches-insert-contents ew patches applied guards)
        (set (make-local-variable 'ewoc) ew)))
      (toggle-read-only t)
      (if point-pos
          (ahg-goto-line-point point-pos)
        (goto-char (point-min))
        (forward-line 1))
      (set-buffer-modified-p nil)
      (message \" \"))
  (unless no-pop
    (pop-to-buffer buf)))


(defun ahg-mq-get-patches-buffer (root &optional dont-create)
  (let* ((name (format \"*aHg mq patches for: %s*\" root))
         (buf (if dont-create (get-buffer name) (get-buffer-create name))))
    (when buf
      (with-current-buffer buf
        (setq default-directory (file-name-as-directory root))))
    buf))


(defvar ahg-mq-list-patches-no-pop nil)
(defvar ahg-mq-patches-buffer-point nil)

(defun ahg-mq-list-patches (&optional root)
  \"List all mq patches in the queue, showing also information
about which are currently applied.\"
  (interactive)
  (unless root (setq root (ahg-root)))
  (let ((buf (ahg-mq-get-patches-buffer root))
        (msg (when (interactive-p)
               (format \"aHg: getting patch queue for %s...\" root)))
        (oldcolumns (getenv \"COLUMNS\")))
    (when msg (message msg))
    (setenv \"COLUMNS\" \"100000\")
    (ahg-generic-command
     \"qseries\" nil
     (lexical-let ((buf buf)
                   (curdir default-directory)
                   (aroot root)
                   (no-pop ahg-mq-list-patches-no-pop)
                   (point-pos ahg-mq-patches-buffer-point)
                   (msg msg))
       (lambda (process status) ;; parse output of hg qseries
         (if (string= status \"finished\\n\")
             (let ((patches
                    (with-current-buffer (process-buffer process)
                      (split-string (buffer-string) \"\\n\"))))
               (kill-buffer (process-buffer process))
               (setenv \"COLUMNS\" \"100000\")
               (ahg-generic-command
                \"qapplied\" nil
                (lexical-let ((buf buf)
                              (patches patches)
                              (curdir curdir)
                              (no-pop no-pop)
                              (point-pos point-pos)
                              (msg msg))
                  (lambda (process status) ;; parse output of hg qapplied
                    (if (string= status \"finished\\n\")
                        (let ((applied
                               (with-current-buffer (process-buffer process)
                                 (split-string (buffer-string) \"\\n\"))))
                          (kill-buffer (process-buffer process))
                          ;; now, list guards as well
                          (ahg-generic-command
                           \"qguard\" (list \"-l\")
                           (lexical-let ((buf buf)
                                         (patches patches)
                                         (applied applied)
                                         (curdir curdir)
                                         (no-pop no-pop)
                                         (point-pos point-pos)
                                         (msg msg))
                             (lambda (process status)
                               (if (string= status \"finished\\n\")
                                   (let
                                       ((guards
                                         (with-current-buffer
                                             (process-buffer process)
                                           (mapcar
                                            (lambda (s) (split-string s \": \"))
                                            (split-string
                                             (buffer-string) \"\\n\")))))
                                     (kill-buffer (process-buffer process))
                                     ;; and show the buffer
                                     (ahg-mq-show-patches-buffer
                                      buf patches applied guards curdir
                                      no-pop point-pos)
                                     (when msg (message \"%sdone\" msg)))
                                 ;; error in hg qguard
                                 (kill-buffer buf)
                                 (ahg-show-error process)))) nil nil t))
                      ;; error in hg qapplied
                      (kill-buffer buf)
                      (ahg-show-error process)))) nil nil t))
           ;; error in hg qseries
           (kill-buffer buf)
           (ahg-show-error process))))
     nil nil t)
    ;; restore the COLUMNS env var
    (setenv \"COLUMNS\" oldcolumns)
    ))


(defun ahg-mq-patch-list-refresh ()
  (interactive)
  (let ((ahg-mq-patches-buffer-point (ahg-line-point-pos)))
    (call-interactively 'ahg-mq-list-patches)))


(defun ahg-mq-patches-maybe-refresh (root)
  (when ahg-auto-refresh-status-buffer
    (let ((buf (ahg-mq-get-patches-buffer root t))
          (default-directory (file-name-as-directory root)))
      (when buf
        (let ((ahg-mq-list-patches-no-pop t)
              (ahg-mq-patches-buffer-point
               (with-current-buffer buf (ahg-line-point-pos))))
          (ahg-mq-list-patches root))))))


(defun ahg-mq-patches-view-patch ()
  \"Display the patch at point in the patch list buffer.\"
  (interactive)
  (let ((patch (ahg-mq-patches-patch-at-point))
        (root (ahg-root)))
    (when patch
      (find-file-other-window
       (concat (file-name-as-directory root) \".hg/patches/\" patch))
      (ahg-diff-mode))))

(defun ahg-mq-patches-patch-at-point ()
  (let ((node (ewoc-locate ewoc)))
    (and node (caddr (ewoc-data node)))))


(defun ahg-mq-patches-goto-patch ()
  \"Puts the patch at point in the patch list buffer on top of the
stack of applied patches.\"
  (interactive)
  (let* ((patch (ahg-mq-patches-patch-at-point))
         (ok (and patch (ahg-y-or-n-p (format \"Go to patch %s? \" patch))))
         (force (and ok (ahg-uncommitted-changes-p)
                     (ahg-y-or-n-p \"Overwrite local changes? \"))))
    (when ok
      (ahg-qgoto patch force))))


(defun ahg-mq-patches-moveto-patch ()
  \"Like `ahg-mq-patches-goto-patch', but reorder patch series and
apply only the given patch.\"
  (interactive)
  (let* ((patch (ahg-mq-patches-patch-at-point))
         (ok (and patch (ahg-y-or-n-p (format \"Move to patch %s? \" patch))))
         (force (and ok (ahg-uncommitted-changes-p)
                     (ahg-y-or-n-p \"Overwrite local changes? \"))))
    (when ok
      (ahg-qmove patch force))))


(defun ahg-mq-patches-switchto-patch ()
  \"Pop all applied patches and move to the given patch.\"
  (interactive)
  (let* ((patch (ahg-mq-patches-patch-at-point))
         (ok (and patch (ahg-y-or-n-p (format \"Switch to patch %s? \" patch))))
         (force (and ok (ahg-uncommitted-changes-p)
                     (ahg-y-or-n-p \"Overwrite local changes? \"))))
    (when ok
      (ahg-qswitch patch force))))


(defun ahg-mq-patches-apply-patch ()
  \"Apply the given patch to the working copy, without modifying the repository.\"
  (interactive)
  (let* ((patch (ahg-mq-patches-patch-at-point))
         (ok (and patch
                  (ahg-y-or-n-p
                   (format \"Apply patch %s to the working copy? \" patch))))
         (force (and
                 ok (ahg-uncommitted-changes-p)
                 (ahg-y-or-n-p
                  \"Working copy contains local changes, proceed anyway? \"))))
    (when ok
      (ahg-qapply patch force))))


(defun ahg-mq-patches-view-patch-mouse (event)
  (interactive \"e\")
  (save-window-excursion
    (select-window (posn-window (event-end event)) t)
    (goto-char (posn-point (event-end event)))
    (ahg-mq-patches-view-patch)))


(defun ahg-mq-patches-goto-patch-mouse (event)
  (interactive \"e\")
  (save-window-excursion
    (select-window (posn-window (event-end event)) t)
    (goto-char (posn-point (event-end event)))
    (ahg-mq-patches-goto-patch)))


(defun ahg-mq-patches-delete-patch ()
  \"Deletes the patch at point in the patch list buffer.\"
  (interactive)
  (let* ((patch (ahg-mq-patches-patch-at-point))
         (ok (and patch (ahg-y-or-n-p (format \"Delete patch %s? \" patch)))))
    (when ok
      (ahg-qdelete patch))))


(defun ahg-mq-get-current-patch ()
  (with-temp-buffer
    (when (= (ahg-call-process \"qtop\") 0)
      (buffer-substring-no-properties (point-min) (1- (point-max))))))

(defun ahg-mq-patches-qrefresh (get-log-message)
  (interactive \"P\")
  (let ((curpatch (ahg-mq-get-current-patch)))
    (if curpatch
        (and (ahg-y-or-n-p (format \"Refresh current patch (%s)? \" curpatch))
             (ahg-qrefresh get-log-message))
      (message \"aHg Error: unable to determine current patch!\"))))


(defun ahg-mq-patches-convert-patch-to-changeset ()
  (interactive)
  (let ((curpatch (ahg-mq-get-current-patch)))
    (if curpatch
        (and (ahg-y-or-n-p (format \"Convert current patch (%s) to changeset? \"
                                   curpatch))
             (ahg-mq-convert-patch-to-changeset))
      (message \"aHg Error: unable to determine current patch!\"))))


(defun ahg-mq-do-command ()
  \"Call `ahg-do-command', but set `default-directory' to the MQ patches dir,
so that filename completion works on patch names.\"
  (interactive)
  (let ((ahg-complete-command-directory-for-filename-completion
         (concat (file-name-as-directory (ahg-root)) \".hg/patches/\")))
    (call-interactively 'ahg-do-command)))


;;-----------------------------------------------------------------------------
;; ahg-record and related functions
;;-----------------------------------------------------------------------------

(defun ahg-record-setup (root selected-files)
  (setq root (file-name-as-directory root))
  ;;(message \"ROOT IS: %s\" root)
  (let* ((backup (concat root \".hg/ahg-record-backup\"))
         (curpatch (concat root \".hg/ahg-record-patch\"))
         (isthere (or (file-exists-p backup) (file-symlink-p backup)))
         (parents (with-temp-buffer
                    (when (= (ahg-call-process \"parents\"
                                               (list \"--template\" \"{node} \")
                                               (list \"-R\" root)) 0)
                      (split-string (buffer-string)))))
         (addremove (with-temp-buffer
                      (or (not (= (ahg-call-process \"status\"
                                                    (list \"-a\" \"-d\" \"-r\")
                                                    (list \"-R\" root)) 0))
                          (> (buffer-size) 0)))))
    (cond (isthere
           ;; we don't want to overwrite old backups
           (error
            (format \"stale ahg-record backup file detected in `%s', aborting\"
                    backup)))
          ((not (= (length parents) 1))
           ;; this is either an uncommitted merge, or we failed to get the
           ;; parents
           (error
            (if (null parents)
                \"could not in determine parents of working dir, aborting\"
              \"uncommitted merge detected, aborting\")))
          (addremove
           ;; pending additions/deletions are not supported
           (error \"pending additions and/or deletions detected, aborting\"))
          (t
           ;; create the patch
           (let ((patchbuf (generate-new-buffer \"*aHg-record*\")))
             (with-current-buffer patchbuf
               (cd root)
               (if (= (ahg-call-process \"diff\" (list \"--git\")
                                        (list \"-R\" root)) 0)
                   (progn
                     ;; write the backup
                     (goto-char (point-min))
                     (insert \"# aHg record parent: \"
                             (car parents) \"\\n\")
                     (write-file backup)
                     ;; now, generate the patch to edit
                     (kill-buffer)
                     (setq patchbuf (generate-new-buffer \"*aHg-record*\"))
                     (with-current-buffer patchbuf
                       (ahg-push-window-configuration)
                       (if (null selected-files)
                           ;; if there are no selected files, we can simply
                           ;; copy the backup file, thus saving an hg call
                           (progn
                             (insert-file-contents backup)
                             (goto-char (point-min))
                             (when (looking-at \"^# aHg record parent: \")
                               (let ((kill-whole-line t))
                                 (kill-line))))
                         ;; otherwise, let's call hg diff again
                         (cd root)
                         (unless (= (ahg-call-process
                                     \"diff\"
                                     (append (list \"--git\") selected-files)
                                     (list \"-R\" root)) 0)
                           (kill-buffer)
                           (error \"impossible to generate diff\")))
                       (goto-char (point-min))
                       ;; if there are binary files, abort
                       (save-excursion
                         (while (not (eobp))
                           (re-search-forward \"^diff --git [^\\n]*$\" nil 1)
                           (forward-line 2)
                           (beginning-of-line)
                           (if (looking-at \"^GIT binary patch$\")
                               (error \"binary files in patch, aborting\"))))
                       ;; insert header
                       (insert \"# aHg record interactive buffer\\n\"
                               \"# edit this patch file, and press C-c C-c when done to commit the changes\\n\"
                               \"# if something goes wrong, there's a backup file in\\n\"
                               \"# \" backup \"\\n\\n\")
                       ;; now, let's return all the needed data
                       (list backup curpatch (car parents) patchbuf)))
                 ;; error occurred, delete the buffer and raise exception
                 (kill-buffer)
                 (error \"impossible to generate diff\"))))))))


(defun ahg-do-record (selected-files commit-func &rest commit-func-args)
  (condition-case err
      (let* ((root (ahg-root))
             (data (ahg-record-setup root selected-files))
             (backup (car data))
             (curpatch (cadr data))
             (parent (caddr data))
             (patchbuf (cadddr data)))
        (switch-to-buffer patchbuf)
        (ahg-diff-mode)
        (toggle-read-only nil)
        (local-set-key
         (kbd \"C-c C-c\")
         (lexical-let ((root root)
                       (backup backup)
                       (curpatch curpatch)
                       (parent parent)
                       (commit-func commit-func)
                       (commit-func-args commit-func-args))
           (lambda ()
             (interactive)
             (apply commit-func
                    root backup curpatch parent commit-func-args)))))
    (error
     (let ((buf (generate-new-buffer \"*aHg-record*\")))
       (ahg-show-error-msg (format \"aHg record error: %s\"
                                   (error-message-string err)) buf)))))


(defun ahg-record (selected-files)
  \"Interactively select which changes to commit. Similar in
spirit to the crecord hg extension, but using the patch editing
functionalities provided by Emacs.\"
  (interactive
   (list (when (eq major-mode 'ahg-status-mode) 
           (mapcar 'cddr
                   (ahg-status-get-marked
                    nil (lambda (d) (not (string= (cadr d) \"?\"))))))))
  (ahg-do-record selected-files 'ahg-record-commit))


(defun ahg-record-commit (root backup curpatch parent)
  (let ((buf (generate-new-buffer \"*aHg-log*\")))
    ;; save the contents of the patch
    (write-file curpatch)
    (ahg-log-edit
     (lexical-let ((root root)
                   (backup backup)
                   (curpatch curpatch)
                   (parent parent)
                   (patchbuf (current-buffer))
                   (buf buf))
       (lambda ()
         (interactive)
         (with-current-buffer patchbuf
           (set-buffer-modified-p nil))
         (let ((msg (ahg-parse-commit-message)))
           (kill-buffer buf)
           (ahg-record-commit-callback
            \"commit\" (list \"-m\" msg)
            root backup curpatch parent patchbuf))))
     (lambda () nil)
     buf)))


(defun ahg-record-commit-callback (commit-cmd commit-args
                                   root backup curpatch parent patchbuf)
  (let ((args (list \"-r\" parent \"--all\" \"--no-backup\"))
        (buf (generate-new-buffer \"*aHg-record*\")))
    (cd root)
    ;; 1. update to parent rev
    (ahg-generic-command
     \"revert\"
     args
     (lexical-let ((root root)
                   (backup backup)
                   (curpatch curpatch)
                   (parent parent)
                   (commit-cmd commit-cmd)
                   (commit-args commit-args)
                   (buf buf)
                   (patchbuf patchbuf))
       (lambda (process status)
         (switch-to-buffer buf)
         (if (string= status \"finished\\n\")
             (let ((args (list \"--force\" \"--no-commit\" curpatch)))
               ;; 2. apply the patch
               (if (= (ahg-call-process \"import\" args (list \"-R\" root)) 0)
                   (ahg-generic-command
                    commit-cmd commit-args
                    (lexical-let ((root root)
                                  (backup backup)
                                  (curpatch curpatch)
                                  (parent parent)
                                  (buf buf)
                                  (patchbuf patchbuf))
                      (lambda (process status)
                        (switch-to-buffer buf)
                        (if (string= status \"finished\\n\")
                            ;; 4. update to the parent rev again
                            (ahg-generic-command
                             \"revert\"
                             (list \"-r\" parent \"--all\" \"--no-backup\")
                             (lexical-let ((root root)
                                           (backup backup)
                                           (curpatch curpatch)
                                           (parent parent)
                                           (buf buf)
                                           (patchbuf patchbuf))
                               (switch-to-buffer buf)
                               (lambda (process status)
                                 (if (string= status \"finished\\n\")
                                     ;; 5. apply the backup patch
                                     (if (= (ahg-call-process
                                             \"import\"
                                             (list \"--force\" \"--no-commit\"
                                                   backup)
                                             (list \"-R\" root)) 0)
                                         ;; 6. delete the backup files
                                         (let ((sbuf
                                                (ahg-get-status-buffer root))
                                               (cfg
                                                (with-current-buffer patchbuf
                                                  ahg-window-configuration)))
                                           (delete-file curpatch)
                                           (delete-file backup)
                                           (kill-buffer buf)
                                           (kill-buffer patchbuf)
                                           (ahg-status-maybe-refresh root)
                                           (ahg-mq-patches-maybe-refresh root)
                                           (set-window-configuration cfg)
                                           (when sbuf (pop-to-buffer sbuf))
                                           (message \"changeset recorded successfully.\"))
                                       ;; error
                                       (ahg-show-error-msg
                                        (format
                                         \"error in applying patch `%s'\"
                                         backup)))
                                   ;; error
                                   (ahg-show-error process))))
                             buf)
                          ;; error
                          (ahg-show-error process))))
                    buf)
                 ;; error
                 (ahg-show-error-msg
                  (format \"error in applying patch `%s'\" curpatch))))
           ;; error
           (ahg-show-error process))))
     buf)))


(defun ahg-record-mq-commit (root backup curpatch parent mq-command mq-args)
  ;; save the contents of the patch
  (write-file curpatch)
  (set-buffer-modified-p nil)
  (ahg-record-commit-callback mq-command mq-args root backup curpatch parent
                              (current-buffer)))


(defun ahg-record-qnew (patchname selected-files)
  \"Interactively select which changes to include in the new mq patch PATCHNAME.
Similar in spirit to the crecord hg extension, but using the
patch editing functionalities provided by Emacs.\"
  (interactive
   (list (read-string \"Patch name: \")
         (when (eq major-mode 'ahg-status-mode)
           (mapcar 'cddr (ahg-status-get-marked nil)))))
  (ahg-do-record selected-files 'ahg-record-mq-commit
                 \"qnew\" (append (when ahg-diff-use-git-format (list \"--git\"))
                                (list \"--force\" patchname))))

                                          
;;-----------------------------------------------------------------------------
;; Various helper functions
;;-----------------------------------------------------------------------------

(defun ahg-first-parent-of-rev (rev)
  (with-temp-buffer
    (let ((process-environment (cons \"LANG=\" process-environment)))
      (if (= (ahg-call-process \"parents\"
                               (list \"-r\" rev \"--template\" \"{rev} \")) 0)
          (car (split-string (buffer-string)))
        (if (string-to-number rev)
            (number-to-string (1- (string-to-number rev)))
          0)))))

(defun ahg-buffer-quit ()
  (interactive)
  (let ((buf (current-buffer)))
    (ahg-pop-window-configuration)
    (kill-buffer buf)))

(defun ahg-generic-command (command args sentinel
                                    &optional buffer
                                              use-shell
                                              no-show-message
                                              report-untrusted
                                              filterfunc
                                              is-interactive
                                              global-opts
                                              no-hgplain
                                              use-temp-file) 
  \"Executes then given hg command, with the given
arguments. SENTINEL is a sentinel function. BUFFER is the
destination buffer. If nil, a new buffer will be used.

If use-temp-file is not nil, then the command's output is written 
to a temp file via a shell redirect (>).  Once the process is done, 
the contents are loaded into the buffer.  This greatly speeds things
up for commands with potentially large output such as annotate or 
diff on large files.
\"
  (unless buffer (setq buffer (generate-new-buffer \"*ahg-command*\")))
  (with-current-buffer buffer
    (setq mode-line-process
          (list (concat \":\" (propertize \"%s\" 'face '(:foreground \"#DD0000\"))))))
  (unless no-show-message (message \"aHg: executing hg '%s' command...\" command))
  (let ((lang (getenv \"LANG\"))
        retprocess
        (temp-file (if use-temp-file (make-temp-file \"ahg\" ))))
    (unless no-hgplain (setenv \"HGPLAIN\" \"1\"))
    (unless ahg-i18n (setenv \"LANG\"))
    (when (and (not use-shell) use-temp-file)
      (setq args (mapcar 'shell-quote-argument args)))
    (let ((process
           (apply (if (or use-shell use-temp-file) 
                      'start-process-shell-command 
                    'start-process)
                  (concat \"*ahg-command-\" command \"*\") buffer
                  ahg-hg-command
                  (append
                   (unless report-untrusted
                     (list \"--config\" \"ui.report_untrusted=0\"))
                   (when is-interactive
                     (list \"--config\" \"ui.interactive=1\"))
                   global-opts
                   (list command) args 
                   (when use-temp-file
                     (list \" > \" (concat \"'\" temp-file \"'\" ) \" 2>&1 \"))))))
      (when ahg-subprocess-coding-system
        (set-process-coding-system process ahg-subprocess-coding-system))
      (set-process-sentinel
       process
       (lexical-let ((sf sentinel)
                     (cmd command)
                     (no-show-message no-show-message)
                     (temp-file temp-file))
         (lambda (p s)
           (unless no-show-message
             (message \"aHg: executing hg '%s' command...done\"
                      cmd))
           (if temp-file
               (with-current-buffer (process-buffer p)
                 (let ((inhibit-read-only t))
                   (insert-file-contents temp-file)
                   (delete-file temp-file))))
           (setq mode-line-process nil)
           (funcall sf p s))))
      (set-process-filter process filterfunc)
      (setq retprocess process)
      )
    (setenv \"HGPLAIN\")
    (setenv \"LANG\" lang)
    retprocess
    )
  )

(defun ahg-show-error (process)
  \"Displays an error message for the given process.\"
  (let ((buf (process-buffer process)))
    (pop-to-buffer buf)
    (goto-char (point-min))
    (ahg-command-mode)
    (message \"aHg command exited with non-zero status: %s\"
             (mapconcat 'identity (process-command process) \" \"))))

(defun ahg-show-error-msg (msg &optional buf)
  \"Displays an error message for the given process.\"
  (when buf
    (pop-to-buffer buf))
  (goto-char (point-max))
  (ahg-command-mode)
  (let ((inhibit-read-only t))
    (insert msg \"\\n\")))


(defun ahg-command-prompt ()
  \"Prompts for data from the minibuffer and sends it to the
current hg command.\"
  (interactive)
  (goto-char (point-max))
  (let ((process (get-buffer-process (current-buffer)))
        (msg (buffer-substring-no-properties
              (point-at-bol) (point-at-eol)))
        data)
    (setq data (concat (read-string msg) \"\\n\"))
    (process-send-string process data)
    (let ((inhibit-read-only t))
      (insert data))
    (set-marker (process-mark process) (point))
    ))

(define-derived-mode ahg-command-mode special-mode \"aHg command\"
  \"Major mode for aHg commands.

Commands:
\\\\{ahg-command-mode-map}
\"
  (buffer-disable-undo) ;; undo info not needed here
  (toggle-read-only t)
  (font-lock-mode nil)
  (define-key ahg-command-mode-map \"h\" 'ahg-command-help)
  (define-key ahg-command-mode-map \"q\" 'ahg-buffer-quit)
  (define-key ahg-command-mode-map \"!\" 'ahg-do-command)
  (define-key ahg-command-mode-map (kbd \"C-i\") 'ahg-command-prompt)
  (easy-menu-add ahg-command-mode-menu ahg-command-mode-map))

(easy-menu-define ahg-command-mode-menu ahg-command-mode-map \"aHg Command\"
  '(\"aHg Command\"
    [\"Execute Hg Command\" ahg-do-command [:keys \"!\" :active t]]
    [\"Get data from prompt\" ahg-command-prompt [:keys (kbd \"C-i\") :active t]]
    [\"Help on Hg Command\" ahg-command-help [:keys \"h\" :active t]]
    [\"Quit\" ahg-buffer-quit [:keys \"q\" :active t]]))


(defun ahg-push-window-configuration ()
  (set (make-local-variable 'ahg-window-configuration)
       (current-window-configuration))
  (put 'ahg-window-configuration 'permanent-local t))

(defun ahg-pop-window-configuration ()
  (when (and ahg-restore-window-configuration-on-quit
             (boundp 'ahg-window-configuration))
    (set-window-configuration ahg-window-configuration)))

(defun ahg-y-or-n-p (prompt)
  (if ahg-yesno-short-prompt
      (y-or-n-p prompt)
    (yes-or-no-p prompt)))

(defun ahg-uncommitted-changes-p (&optional root)
  (with-temp-buffer
    (let ((global-opts (when root (list \"-R\" root))))
      (when (= (ahg-call-process \"id\" (list \"-n\") global-opts) 0)
        (= (char-before (1- (point-max))) ?+)))))

(defun ahg-line-point-pos ()
  (cons (line-number-at-pos) (- (point) (point-at-bol))))

(defun ahg-goto-line-point (lp)
  ;;(goto-char (point-min))
  (goto-line (car lp))
  (forward-char (min (cdr lp) (- (point-at-eol) (point-at-bol)))))


(defun ahg-call-process (cmd &optional args global-opts)
  (let ((callargs (append (list ahg-hg-command nil t nil
                                \"--config\" \"ui.report_untrusted=0\")
                          global-opts (list cmd) args)))
    ;;(message \"callargs: %s\" callargs)
    (apply 'call-process callargs)))

(defmacro ahg-dynamic-completion-table (fun)
  (if (fboundp 'completion-table-dynamic)
      `(completion-table-dynamic (quote ,fun))
    `(dynamic-completion-table ,fun)))


(defun ahg-complete-shell-command (command)
  ;; we split the string, and treat the last word as a filename
  (let* ((idx (string-match \"\\\\([^ ]+\\\\)$\" command))
         (matches (file-expand-wildcards (concat (substring command idx) \"*\")))
         (prev (substring command 0 idx)))
    (mapcar (function (lambda (a) (concat prev a))) matches)))

(defun ahg-string-match-p (&rest args)
  (if (fboundp 'string-match-p)
      (apply 'string-match-p args)
    (save-match-data
      (apply 'string-match args))))

(defun ahg-mq-applied-patches-p (&optional root)
  (with-temp-buffer
    (let ((global-opts (when root (list \"-R\" root))))
      (when (= (ahg-call-process \"qapplied\" nil global-opts) 0)
        (> (buffer-size) 0)))))

(defun ahg-abspath (pth &optional root)
  (unless root
    (setq root (ahg-root)))
  (expand-file-name pth (file-name-as-directory root)))

;; adapted from hexrgb-hsv-to-hex in hexrgb.el
;; Copyright (C) 2004-2014, Drew Adams, all rights reserved.
;; licensed under the GPL
(defun ahg-hsv-to-hex (hue saturation value)
  (let (red green blue int-hue fract pp qq tt ww)
    (if (< saturation 1.0e-8)
        (setq red    value
              green  value
              blue   value)             ; Gray
      (setq hue      (* hue 6.0)        ; Sectors: 0 to 5
            int-hue  (floor hue)
            fract    (- hue int-hue)
            pp       (* value (- 1 saturation))
            qq       (* value (- 1 (* saturation fract)))
            ww       (* value (- 1 (* saturation (- 1 (- hue int-hue))))))
      (case int-hue
        ((0 6) (setq red    value
                     green  ww
                     blue   pp))
        (1 (setq red    qq
                 green  value
                 blue   pp))
        (2 (setq red    pp
                 green  value
                 blue   ww))
        (3 (setq red    pp
                 green  qq
                 blue   value))
        (4 (setq red    ww
                 green  pp
                 blue   value))
        (otherwise (setq red    value
                         green  pp
                         blue   qq))))
    (flet ((int-to-hex (int) (substring (format \"%04X\" int) (- 4)))
           (scale (x) (floor (* x 65535.0))))
      (concat \"#\"
              (int-to-hex (scale red))
              (int-to-hex (scale green))
              (int-to-hex (scale blue))))))

;;-----------------------------------------------------------------------------
;; log-edit related functions
;;-----------------------------------------------------------------------------

(defun ahg-log-edit-hook (&optional extra-message content)
  (erase-buffer)
  (let ((user
         (with-temp-buffer
           (if (and
                (= (ahg-call-process \"showconfig\" (list \"ui.username\")) 0)
                (> (point-max) (point-min)))
               (buffer-substring-no-properties (point-min) (1- (point-max)))
             \"\")))
        (branch
         (with-temp-buffer
           (if (and
                (= (ahg-call-process \"branch\") 0)
                (> (point-max) (point-min)))
               (buffer-substring-no-properties (point-min) (1- (point-max)))
             \"\")))
        (changed (log-edit-files))
        (root-regexp (concat \"^\" (regexp-quote default-directory))))
    (insert
     (format \"%s

HG: Enter commit message.  Lines beginning with 'HG:' are removed.
%sHG: --
HG: user: %s
HG: root: %s
HG: branch: %s
HG: committing %s
HG: Press C-c C-c when you are done editing.\"
             (or content \"\")
             (if extra-message
                 (concat
                  (mapconcat (lambda (s) (concat \"HG: \" s))
                             (split-string extra-message \"\\n\") \"\\n\") \"\\n\")
               \"\")
             user
             default-directory
             branch
             (if changed
                 (mapconcat
                  (lambda (s) (replace-regexp-in-string root-regexp \"\" s))
                  changed \" \")
               \"ALL CHANGES (run 'ahg-status' for the details)\")))
  (goto-char (point-min))))

(defun ahg-log-edit (callback file-list-function buffer &optional msg content)
  \"Sets up a log-edit buffer for committing hg changesets.\"
  (let ((log-edit-hook
         (list (if (or msg content)
                   (lexical-let ((msg msg)
                                 (content content))
                         (lambda () (ahg-log-edit-hook msg content)))
                 'ahg-log-edit-hook))))
    (log-edit
     callback
     t
     (if (version< emacs-version \"23.0\") file-list-function
       (list (cons 'log-edit-listfun file-list-function)))
     buffer)))

(defun ahg-parse-commit-message ()
  \"Returns the contents of the current buffer, discarding lines
starting with 'HG:'.\"
  (let ((out))
    (goto-char (point-min))
    (while (not (eobp))
      (unless (looking-at \"^HG:\")
        (setq out
              (cons
               (buffer-substring-no-properties (point-at-bol) (point-at-eol))
               out)))
      (forward-line 1))
    (mapconcat 'identity (nreverse out) \"\\n\")))


(provide 'ahg)

;;; ahg.el ends here
"]) (ag . [(20131220 643) nil "A front-end for ag ('the silver searcher'), the C ack replacement." single ";;; Commentary:

;; Please see README.md for documentation, or read in online at
;; https://github.com/Wilfred/ag.el/#agel

"]) (afternoon-theme . [(20140104 1059) ((emacs (24 1))) "Dark color theme with a deep blue background" single ";;; Commentary:

;; To use it, put the following in your Emacs configuration file:
;;
;;   (load-theme 'afternoon t)
;;
;; Requirements: Emacs 24.

"]) (aes . [(20130120 1913) nil "Implementation of AES" single ";;; Commentary:

;; This library provides support for saving files in an encrypted form
;; by using Cipher-block chaining [4] and Offset Codebook Mode [5].
;; Both use Rijndael [1] as encryption algorithm, which is implemented
;; natively in Emacs.  Rijndael is a superset of the AES algorithm
;; [2].  For patent issues about OCB see [6], which allows this
;; distribution.  Additionally this library provides a password
;; generator based on AES and random user input.

;; Config file
;; Insert \"(require 'aes)\" into your local .emacs file to load this
;; library.
;; Insert \"(aes-enable-auto-decryption)\" into yout local .emacs file
;; for convenient automatic recognization of encrypted files during
;; loading.

;; Whenever possible, this library should be used byte-compiled, as
;; this provides a really great performance boost!

;; Main entry points:

;; `aes-encrypt-current-buffer' / `aes-decrypt-current-buffer' Ask for
;; password and encrypt / decrypt current buffer.
;; `aes-insert-password' Generate a random password from user input.

;; For customizing this library, there is the customization group aes
;; in the applications group.

;; Emacs versions 22 to 23 are recommended.  It should work with
;; version 21 and 24, but there were no tests.

;; This implementation allows additionally to the AES specification
;; blocklengths of 24 and 32 bytes.

;; Nb denotes the number of 32-bit words in the state.
;; Nk denotes the number of 32-bit words comprising the cipher key.
;; Nr denotes the number of rounds.
;; We allow Nb and Nk to be 4, 6, or 8. and Nr = max(Nb, Nk) + 6

;; Since Emacs implements integers as 29 bit numbers, it is not
;; possible to use the optimization, which requires 32 bit numbers.
;; For details see [3].  This leads to an 8-bit design for this
;; implementation.  So the following fitting implementation is used
;; here.
;; - Multiplication and inverting in GF(2^8) are implemented as a
;; - table lookups.
;; - The state is implemented as a string of length 4 * Nb.
;; - Plaintext and ciphertext are implemented as unibyte strings.
;; - The expanded key is implemented as a list of length 4 * Nb * (1 +
;;   Nr) with entries '((A . B) . (C . D)), where A, B, C and D are
;;   bytes.  It is precalculated before the en-/decryption algorithms.
;; - The S-boxes are implemented by lookup tables.
;; - The three operations ByteSub, ShiftRow and MixColumn together
;;   with round-key-addition are implemented in the functions
;;   `aes-SubShiftMixKeys' and `aes-InvSubShiftMixKeys' for encryption
;;   and decryption respectively.
;; - CBC mode is implemented straightforward, using a Zero or PKCS#7
;;   [7] padding.  The IV is appended to and saved with the
;;   ciphertext.
;; - OCB mode made the implementation of a pmac, based on AES,
;;   necessary, but the further details were straightforward.  The IV
;;   is appended to the ciphertext.  During decryption the created
;;   hash-value is checked.
;; - the function `aes-key-from-passwd' generates an AES key from an
;;   user input string (password).
;; - Further a facility is provided to generate random passwords,
;;   based on random user input like mousemovement, time and keyinput.
;; - The ciphertext is usually converted to a base-64 encoded string.

;; The version of the internal storage format of encrypted data is 1.2.

;; Known Bugs / TODO:
;; - Encrypted buffers are Auto-Saved unencrypted.
;; - This implementation is not resistant against DPA attacks [8].
;; - `aes-auto-decrypt' is not completely compliant to Emacs standards.
;; - Handle CBC and OCB in two different functions instead of the
;;   single function `aes-encrypt-buffer-or-string'.
;; - `aes-enlarge-to-multiple-num' is a really bad function name.
;; - don't handle padding in `aes-cbc-encrypt'.

;; References:
;; [1] http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf
;; [2] http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf
;; [3] http://www.openssl.org/
;; [4] http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
;; [5] http://tools.ietf.org/html/draft-krovetz-ocb-00
;; [6] http://www.cs.ucdavis.edu/~rogaway/ocb/license.htm
;; [7] http://tools.ietf.org/html/rfc5652#section-6.3
;; [8] http://en.wikipedia.org/wiki/Differential_power_analysis

"]) (adoc-mode . [(20130917 0) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single ";;; Commentary:
;; 
;; # Introduction 
;; 
;; [AsciiDoc](http://www.methods.co.nz/asciidoc/) is a text document format for
;; writing short documents, articles, books and UNIX man pages. AsciiDoc files
;; can be translated to HTML and DocBook markups.
;; 
;; adoc-mode is an Emacs major mode for editing AsciiDoc files. It emphasizes on
;; the idea that the document is highlighted so it pretty much looks like the
;; final output. What must be bold is bold, what must be italic is italic etc.
;; Meta characters are naturally still visible, but in a faint way, so they can
;; be easily ignored.
;; 
;; 
;; # Download 
;; 
;; The raw file (adoc-mode.el) can be found
;; [here](https://raw.github.com/sensorflo/adoc-mode/master/adoc-mode.el).
;; Optionally you can get the sources from the [git
;; repository](https://github.com/sensorflo/adoc-mode).
;; 
;; You will also need to download the library
;; [markup-faces](https://github.com/sensorflo/markup-faces). If you install
;; adoc-mode via Emacs Lisp Packages, see below, markup-faces is installed
;; automatically if you don't have it yet.
;; 
;; 
;; # Installation 
;; 
;; Installation is as usual, so if you are proficient with Emacs you don't need
;; to read this.
;; 
;; ## Install the traditional way
;; 
;; 1. Copy the file adoc-mode.el to a directory in your load-path, e.g.
;;    \\~/.emacs.d. To add a specific directory to the load path, add this to our
;;    initialization file (probably ~/.emacs): `(add-to-list 'load-path
;;    \"mypath\")`
;; 
;; 2. Add either of the two following lines to your initialization file. The
;;    first only loads adoc mode when necessary, the 2nd always during startup
;;    of Emacs.
;; 
;;    * `(autoload 'adoc-mode \"adoc-mode\")`
;; 
;;    * `(require 'adoc-mode)`
;; 
;; 3. Optionally byte compile adoc-mode.el for faster startup: `M-x
;;    byte-compile`
;; 
;; 4. To use adoc mode, call adoc-mode after you opened an AsciiDoc file: `M-x
;;    adoc-mode`
;; 
;; 
;; ## Install via Emacs Lisp Packages (on Marmalade)
;; 
;; For this way you either need packages.el from
;; [here](https://github.com/technomancy/package.el) and or Emacs 24, where the
;; packages library is already included. adoc-mode is on the
;; [Marmalade](http://marmalade-repo.org/) package archive.
;; 
;; * Type `M-x package-install RET adoc-mode RET`.
;; 
;; 
;; ## Possible steps after installation
;; 
;; Each of the following is optional
;; 
;; * According to AsciiDoc manual, .txt is the standard file extension of
;;   AsciiDoc files. Add the following to your initialization file to open all
;;   .txt files with adoc-mode as major mode automatically: `(add-to-list
;;   'auto-mode-alist (cons \"\\\\.txt\\\\'\" 'adoc-mode))`
;; 
;; * If your default face is a fixed pitch (monospace) face, but in AsciiDoc
;;   files you liked to have normal text with a variable pitch face,
;;   buffer-face-mode is for you: `(add-hook 'adoc-mode-hook (lambda()
;;   (buffer-face-mode t)))`
;; 
;; 
;; # Features
;; 
;; - sophisticated highlighting
;; 
;; - promote / denote title
;; 
;; - toggle title type between one line title and two line title
;; 
;; - adjust underline length of a two line title to match title text's length
;; 
;; - goto anchor defining a given id, default reading from xref at point
;; 
;; - support for outline (however only with the one-line title style)
;; 
;; 
;; ## Coming features
;; 
;; The next features I plan to implement
;; 
;; - Denote / promote for list items
;; - Outline support also for two line titles
;; - Correctly highlighting backslash escapes
;; 
;; 
;; # Screenshot
;; 
;; The highlighting emphasizes on how the output will look like. _All_
;; characters are visible, however meta characters are displayed in a faint way.
;; 
;; ![screenshot](http://dl.dropbox.com/u/75789984/adoc-mode.png)
;;
;;
"]) (actionscript-mode . [(20130328 838) nil "A simple mode for editing Actionscript 3 files" single ";;; Commentary:
;;
;; Add this to your .emacs:
;;
;; (autoload 'actionscript-mode \"actionscript-mode\" \"Major mode for actionscript.\" t)
;; (add-to-list 'auto-mode-alist '(\"\\\\.as$\" . actionscript-mode))
;;
;;------------------
;;; TODO

;; Imenu (imenu-generic-expression or imenu-create-index-function)

;;------------------

;;; Changes in 7.2
;;
;; Updated comments.
;;
;; See https://github.com/austinhaas/actionscript-mode for info on
;; future changes.

"]) (ack-menu . [(20130312 131) ((mag-menu (0 1 0))) "A menu-based front-end for ack" tar ";;; Commentary:
;;
;; Ack-menu is a fork of Nikolaj Schumacher's full-ack. Instead of
;; offering a set of emacs variables that control what command line
;; options are passed to ack, it uses mag-menu.el to provide an
;; intuitive menu-based front-end to ack.
;;
;; The main function is ack-menu.
;;
"]) (ack-and-a-half . [(20130815 1917) nil "Yet another front-end for ack" single ";;; Commentary:
;;
;; ack-and-a-half.el provides a simple compilation mode for the perl
;; grep-a-like ack (http://petdance.com/ack/).
;;
;; Add the following to your .emacs:
;;
;;     (add-to-list 'load-path \"/path/to/ack-and-a-half\")
;;     (require 'ack-and-a-half)
;;     (defalias 'ack 'ack-and-a-half)
;;     (defalias 'ack-same 'ack-and-a-half-same)
;;     (defalias 'ack-find-file 'ack-and-a-half-find-file)
;;     (defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)
;;
;; Run `ack' to search for all files and `ack-same' to search for
;; files of the same type as the current buffer.
;;
;; `next-error' and `previous-error' can be used to jump to the
;; matches.
;;
;; `ack-find-file' and `ack-find-same-file' use ack to list the files
;; in the current project.  It's a convenient, though slow, way of
;; finding files.
;;

"]) (achievements . [(20131111 2351) ((keyfreq (0 0 3))) "Achievements for emacs usage." tar nil]) (ace-jump-mode . [(20130719 2053) nil "a quick cursor location minor mode for emacs" single ";;; Commentary:

;;; INTRODUCTION
;;

;; What's this?
;;
;; It is a minor mode for Emacs. It can help you to move your cursor
;; to ANY position in emacs by using only 3 times key press. 

;; Where does ace jump mode come from ?
;;
;; I firstly see such kind of moving style is in a vim plugin called
;; EasyMotion. It really attract me a lot. So I decide to write
;; one for Emacs and MAKE IT BETTER.
;;
;; So I want to thank to :
;;         Bartlomiej P.   for his PreciseJump
;;         Kim Silkeb\303\246kken for his EasyMotion


;; What's ace-jump-mode ?
;;
;; ace-jump-mode is an fast/direct cursor location minor mode. It will
;; create the N-Branch search tree internal and marks all the possible
;; position with predefined keys in within the whole emacs view.
;; Allowing you to move to the character/word/line almost directly.
;;

;;; Usage
;;
;; Add the following code to your init file, of course you can select
;; the key that you prefer to.
;; ----------------------------------------------------------
;; ;;
;; ;; ace jump mode major function
;; ;; 
;; (add-to-list 'load-path \"/full/path/where/ace-jump-mode.el/in/\")
;; (autoload
;;   'ace-jump-mode
;;   \"ace-jump-mode\"
;;   \"Emacs quick move minor mode\"
;;   t)
;; ;; you can select the key you prefer to
;; (define-key global-map (kbd \"C-c SPC\") 'ace-jump-mode)
;;
;; ;; 
;; ;; enable a more powerful jump back function from ace jump mode
;; ;;
;; (autoload
;;   'ace-jump-mode-pop-mark
;;   \"ace-jump-mode\"
;;   \"Ace jump back:-)\"
;;   t)
;; (eval-after-load \"ace-jump-mode\"
;;   '(ace-jump-mode-enable-mark-sync))
;; (define-key global-map (kbd \"C-x SPC\") 'ace-jump-mode-pop-mark)
;; 
;; ;;If you use viper mode :
;; (define-key viper-vi-global-user-map (kbd \"SPC\") 'ace-jump-mode)
;; ;;If you use evil
;; (define-key evil-normal-state-map (kbd \"SPC\") 'ace-jump-mode)
;; ----------------------------------------------------------

;;; For more information
;; Intro Doc: https://github.com/winterTTr/ace-jump-mode/wiki
;; FAQ      : https://github.com/winterTTr/ace-jump-mode/wiki/AceJump-FAQ

"]) (ace-jump-buffer . [(20131221 759) ((ace-jump-mode (1 0)) (dash (2 4 0))) "fast buffer switching extension to `ace-jump-mode'" single nil]) (ac-slime . [(20131005 326) nil "An auto-complete source using slime completions" single ";;; Commentary:

;; Usage:

;;     (require 'ac-slime)
;;     (add-hook 'slime-mode-hook 'set-up-slime-ac)
;;     (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
;;     (eval-after-load \"auto-complete\"
;;       '(add-to-list 'ac-modes 'slime-repl-mode))
;;

"]) (ac-octave . [(20131228 538) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single nil]) (ac-nrepl . [(20131031 346) ((cider (0 1)) (auto-complete (1 4))) "auto-complete sources for Clojure using nrepl completions" single ";;; Commentary:

;; Provides a number of auto-complete sources for Clojure projects
;; using nrepl.

;;; Installation:

;; Available as a package in both Melpa (recommended) at
;; http://melpa.milkbox.net/ and Marmalade at http://marmalade-repo.org/
;; M-x package-install ac-nrepl

"]) (ac-math . [(20131003 1604) ((auto-complete (1 4))) "Auto-complete sources for input of mathematical symbols and latex tags" single ";;; Commentary:
;;
;; (See https://github.com/vitoshka/ac-math#readme for more)
;;
;; This add-on defines three ac-sources for the
;; *[auto-complete](https://github.com/auto-complete)* package:
;; 
;; * ac-source-latex-commands		  - input latex commands 
;; * ac-source-math-latex		 - input math latex tags  (by default, active only in math environments)
;; 
;; ![symbols](https://raw.github.com/vitoshka/ac-math/master/img/latex-symbols.png)
;; 
;; * ac-source-math-unicode - input of unicode symbols (_by default, active
;; * everywhere except math environments_)
;; 
;; ![math](https://raw.github.com/vitoshka/ac-math/master/img/unicode-math.png)
;; 
;; Start math completion by typing the prefix \"\\\" key. Select the completion
;; type RET (`ac-complete`). Completion on TAB (`ac-expand`) is not working that
;; well as yet.
;; 
;; Depending on the context the unicode symbol or latex \\tag will be inserted.
;; 
;; ## Activation ##
;; 
;; You must have *[auto-complete](https://github.com/auto-complete)* package
;; installed.
;; 
;; Ac-math is available thorough MELPA repository. You can also download
;; [ac-math.el](https://raw.github.com/vitoshka/ac-math/master/ac-math.el)
;; directly and put it into your load-path directory.
;; 
;; This is an example of how to activate the 'ac-math' in latex-mode:
;; 
;; ```lisp
;; 
;; (require 'ac-math)
;; 
;; (add-to-list 'ac-modes 'latex-mode)   ; make auto-complete aware of `latex-mode`
;; 
;; (defun ac-latex-mode-setup ()         ; add ac-sources to default ac-sources
;;   (setq ac-sources
;;         (append '(ac-source-math-unicode ac-source-math-latex ac-source-latex-commands)
;;                 ac-sources))
;;   )
;; 
;; (add-hook 'latex-mode-hook 'ac-latex-mode-setup)
;; ```
;; 
;; If you are using 'flyspell' you might want to activate the
;; [workaround](http://www.emacswiki.org/emacs/AutoComplete#toc6):
;;
;; ```lisp
;; (ac-flyspell-workaround)
;; ```
;; 
;; ## Unicode Input ##
;; 
;; To use unicode in full force with LaTeX you will need
;; [XeTeX](http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&item_id=xetex)
;; bundle.
;; 
;; By default unicode input (`ac-source-math-unicode`) is not activated in latex
;; math environments. To activate, do
;; 
;; ```lisp
;; (setq ac-math-unicode-in-math-p t)
;; ```
;; 
;; You can always call UNDO to insert LaTeX command instead of Unicode
;; character. For instance `\\alp RET` inserts the character, then undo reinserts
;; `\\alpha`. Hence, you might consider removing `ac-source-math-latex`
;; altogether from the list of `ac-sources` to increase the completion speed:
;;
;; ```lisp
;; (defun ac-latex-mode-setup ()         
;;   (setq ac-sources
;;         (append '(ac-source-math-unicode ac-source-latex-commands)
;;                 ac-sources))
;;   )
;; ```
;; 
;; Unicode input is not restricted to LaTeX modes and is particularly useful in
;; org-mode (with it's powerful exporting facilities), or web development tools
;; where unicode is crucial.
;; 
;; 
;; Suppose you want it for  mode `XXX`:
;; 
;; ```lisp
;; 
;; (require 'ac-math)
;; 
;; (add-to-list 'ac-modes 'XXX-mode)
;; 
;; (defun ac-XXX-mode-setup ()
;;   (add-to-list 'ac-sources 'ac-source-math-unicode)
;;   )
;; 
;; (add-hook 'XXX-mode-hook 'ac-XXX-mode-setup)
;; 
;; ```
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
"]) (ac-js2 . [(20131112 403) ((js2-mode (20090723)) (skewer-mode (1 4))) "Auto-complete source for Js2-mode, with navigation" tar ";;; Commentary:

;; An attempt to get context sensitive Javascript completion in Emacs.
;; Basic completions are obtained by parsing Javascript code with
;; Js2-mode's parser.
;;
;; Installation
;;
;; Easiest way to get ac-js2 is to install it from MELPA. You may need
;; this snippet
;;
;; `(add-to-list 'package-archives
;;              '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)'
;;
;; if you don't have it already to fetch packages from MELPA.
;;
;; Enable ac-js2 in js2-mode as follows:
;;
;; (add-hook 'js2-mode-hook 'ac-js2-mode)
;;
;; Ac-js2 does not require auto-complete mode but I suggest you grab
;; it anyway as ac-js2 is designed to work with a completion frontend.
;; Support for Company mode is on its way.
;;
;; For more comprehensive completions you can opt to evaluate the code
;; for candidates. A browser needs to be connected to Emacs for the
;; evaluation completions to work. Put this in your init.el file.
;;
;; `(setq ac-js2-evaluate-calls t)'
;;
;; To add completions for external libraries add something like this:
;;
;; (add-to-list 'ac-js2-external-libraries \"path/to/lib/library.js\")
;;
;; Then connect a browser to Emacs by calling `(run-skewer)'. You may
;; need to save the buffer for completions to start.
;;
;; If auto-complete mode is installed on your system then completions
;; should start showing up otherwise use `completion-at-point'.
;;
;; Note: library completions will only work if `ac-js2-evaluate-calls'
;; is set and a browser is connected to Emacs.
;;
;; Bonus: M-. is bound to `ac-js2-jump-to-definition' which will jump
;; to Javascript definitions found in the same buffer. Given the
;; following proprety reference:
;;
;; foo.bar.baz();
;;
;; placing the cursor on `foo', `bar' or `baz' and executing M-. will
;; take you straight to their respective definitions. Use M-, to jump
;; back to where you were. Also works for object literals.
;;
;; Recently added `ac-js2-expand-function' that will expand a function's
;; parameters bound to `C-c C-c`. Expansion will only work if the cursor
;; is after the function.
;;
;; If you have any issues or suggestions please create an issue on Github:
;; https://github.com/ScottyB/ac-js2

"]) (ac-ispell . [(20131124 2044) ((auto-complete (1 4))) "ispell completion source for auto-complete" single ";;; Commentary:

;; `ac-ispell.el' provides ispell/aspell completion source for auto-complete.
;; You can use English word completion with it.

;; To use this package, add following code to your init.el or .emacs
;;
;;    ;; Completion words longer than 4 characters
;;    (custom-set-variables
;;      '(ac-ispell-requires 4))
;;
;;    (eval-after-load \"auto-complete\"
;;      '(progn
;;          (ac-ispell-setup)))
;;
;;    (defun my/enable-ac-ispell ()
;;      (add-to-list 'ac-sources 'ac-source-ispell))
;;
;;    (add-hook 'git-commit-mode-hook 'my/enable-ac-ispell)
;;    (add-hook 'mail-mode-hook 'my/enable-ac-ispell)

"]) (ac-inf-ruby . [(20131115 350) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single ";;; Commentary:

;; Provides an `auto-complete' source for use in `inf-ruby-mode' buffers,
;; which ties directly into the accurate inf-ruby completions mechanism.

;; Enable using:

;;     (require 'ac-inf-ruby) ;; when not installed via package.el
;;     (eval-after-load 'auto-complete
;;       '(add-to-list 'ac-modes 'inf-ruby-mode))
;;     (add-hook 'inf-ruby-mode-hook 'ac-inf-ruby-enable)

;; Optionally bind auto-complete to TAB in inf-ruby buffers:
;;     (eval-after-load 'inf-ruby '
;;       '(define-key inf-ruby-mode-map (kbd \"TAB\") 'auto-complete))

"]) (ac-helm . [(20131224 647) ((helm (20130328)) (auto-complete (1 4 0)) (popup (0 5 0))) "Helm interface for auto-complete" single ";;; Commentary:

;; Auto Complete with Helm.  It enables us to narrow candidates
;; with helm interface.  If you have helm-match-plugin.el,
;; candidates can be narrowed many times.

;; Commands:
;;
;; Below are complete command list:
;;
;;  `ac-complete-with-helm'
;;    Select auto-complete candidates by `helm'.
;;
;; Customizable Options:
;;
;; Below are customizable option list:
;;

;; Installation:

;; Add the following to your emacs init file:
;;
;; (require 'ac-helm) ;; Not necessary if using ELPA package
;; (global-set-key (kbd \"C-:\") 'ac-complete-with-helm)
;; (define-key ac-complete-mode-map (kbd \"C-:\") 'ac-complete-with-helm)

;; That's all.

"]) (ac-geiser . [(20130928 2347) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar nil]) (ac-etags . [(20131127 311) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single ";;; Commentary:

;; `ac-etags.el' is etags/ctags completion source for auto-complete.

;; Sample configuration
;;
;; If you change `requires' auto-complete source attribute
;;
;;   (custom-set-variables
;;     '(ac-etags-requires 1))
;;
;;   (eval-after-load \"etags\"
;;     '(progn
;;         (ac-etags-setup)))
;;
;;   (defun my/c-mode-common-hook ()
;;     (add-to-list 'ac-sources 'ac-source-etags))
;;
;;   (add-hook 'c-mode-common-hook 'my/c-mode-common-hook)

"]) (ac-emmet . [(20131015 858) ((emmet-mode (1 0 2)) (auto-complete (1 4))) "auto-complete sources for emmet-mode's snippets" single ";;; Commentary:

;; Provides auto-complete sources for emmet-mode.

"]) (ac-dabbrev . [(20130906 518) nil "auto-complete.el source for dabbrev" single nil]) (ac-c-headers . [(20131015 2339) nil "auto-complete source for C headers" single ";;; Commentary:

;; Require this script (and auto-complete) then add to ac-sources.
;;
;;   (add-hook 'c-mode-hook
;;             (lambda ()
;;               (add-to-list 'ac-sources 'ac-source-c-headers)
;;               (add-to-list 'ac-sources 'ac-source-c-header-symbols t)))
;;
;; then header filenames and symbols in imported headers are completed.
;;
;;   #include <s[tdio.h>]   <- ac-source-c-headers
;;   pr[intf]               <- ac-source-c-header-symbols

"]) (abl-mode . [(20140105 1253) nil "Python TDD minor mode" tar ";;; Commentary:

;; The aim of this mode is to make editing Python code in a
;; version-controlled project easier, and enable the execution of
;; repetitive tasks --such as running tests or scripts-- in emacs
;; shell buffers. Please see README.rst for details.

;; <<--------- The necessary minor-mode stuff  ---------->>

(defvar abl-mode nil
  \"Mode variable for abl-mode\")
(make-variable-buffer-local 'abl-mode)

(defun abl-mode (&optional arg)
  \"abl minor mode\"
  (interactive \"P\")
  (setq abl-mode (if (null arg) (not abl-mode)
		   (> (prefix-numeric-value arg) 0)))
  (if abl-mode
      (let ((project-base (abl-mode-find-base-dir)))
	(if (not project-base)
	    (setq abl-mode nil)
	  (setq abl-mode-branch-base project-base)
	  (setq abl-mode-branch (abl-mode-branch-name abl-mode-branch-base))
	  (setq abl-mode-project-name (abl-mode-get-project-name abl-mode-branch-base))
	  (setq abl-mode-ve-name (abl-mode-get-vem-name))
	  (setq abl-mode-shell-name (abl-mode-shell-name-for-branch
				     abl-mode-project-name
				     abl-mode-branch))
	  (abl-mode-local-options project-base)))))

(defun abl-mode-hook ()
  (abl-mode))

(if (not (assq 'abl-mode minor-mode-alist))
    (setq minor-mode-alist
	  (cons '(abl-mode \" abl-mode\")
		minor-mode-alist)))

(defvar abl-mode-keymap
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd \"C-c t\") 'abl-mode-run-test-at-point)
    (define-key map (kbd \"C-c u\") 'abl-mode-rerun-last-test)
    (define-key map (kbd \"C-c o\") 'abl-mode-open-python-path-at-point)
    (define-key map (kbd \"C-c s\") 'abl-mode-start-python)
    map)
  \"The keymap for abl-mode\")

(or (assoc 'abl-mode minor-mode-map-alist)
    (setq minor-mode-map-alist
          (cons (cons 'abl-mode abl-mode-keymap)
                minor-mode-map-alist)))

;; <<------------  Customization options  -------------->>

(defcustom abl-mode-ve-activate-command \"workon %s\"
  \"The command for activating a virtual environment\")
(make-variable-buffer-local 'abl-mode-ve-activate-command)

(defcustom abl-mode-ve-create-command \"mkvirtualenv %s\"
  \"The command for activating a virtual environment\")
(make-variable-buffer-local 'abl-mode-ve-create-command)

(defcustom abl-mode-test-command \"nosetests -s %s\"
  \"The command for running tests\")
(make-variable-buffer-local 'abl-mode-test-command)

(defcustom abl-mode-branch-shell-prefix \"ABL-SHELL:\"
  \"Prefix for the shell buffers opened\")
(make-variable-buffer-local 'abl-mode-branch-shell-prefix)

(defcustom abl-mode-check-and-activate-ve t
  \"Check existence of virtualenv, and activate it when a command is run\")
(make-variable-buffer-local 'abl-mode-check-and-activate-ve)

(defcustom abl-mode-ve-base-dir \"~/.virtualenvs\"
  \"base directory for virtual environments\")
(make-variable-buffer-local 'abl-mode-ve-base-dir)

(defcustom abl-mode-install-command \"python setup.py develop\"
  \"The command to install a package.\")
(make-variable-buffer-local 'abl-mode-install-command)

(defcustom abl-mode-test-file-regexp \".*_tests.py\"
\"regexp used to check whether a file is a test file\")
(make-variable-buffer-local 'abl-mode-test-file-regexp)

(defcustom abl-mode-code-file-tests-regexps
  '(\"^\\\"\\\"\\\"[^(\\\"\\\"\\\")]*\\\\(^tests:\\\\)\" \"^'''[^(''')]*\\\\(^tests:\\\\)\")
\"list of regexps used to search for corresponding test files in a code file\")
(make-variable-buffer-local 'abl-mode-code-file-tests-regexps)

;; <<----------------  Here ends the customization -------------->>

(defvar abl-mode-branch-base \"\"
  \"Base directory of the current branch\")
(make-variable-buffer-local 'abl-mode-branch-base)

(defvar abl-mode-ve-name \"\"
  \"Name of the virtual env\")
(make-variable-buffer-local 'abl-mode-ve-name)

(defvar abl-mode-etags-command-base \"find %s -name '*.py' -print | etags - -o %s/TAGS\"
  \"command run to create a tags file for emacs\")

(defvar abl-mode-branch \"master\"
  \"The branch you are working on.When abl-mode is started, it is
  set to the name of the directory in which you are for svn, the
  git branch if you're on git.\")
(make-variable-buffer-local 'abl-mode-branch)

(defvar abl-mode-shell-name \"ABL-SHELL\")
(make-variable-buffer-local 'abl-mode-shell-name)

(defvar abl-mode-project-name \"web\"
  \"The name of the project. \")
(make-variable-buffer-local 'abl-mode-project-name)

(defvar abl-mode-last-test-run nil
  \"Last test run and which branch it was\")

(defvar abl-mode-replacement-vems '())


(defvar abl-mode-shell-child-cmd
  (if (eq system-type 'darwin)
      \"ps -j | grep %d | grep -v grep | grep -v \\\"/bin/bash\\\" | wc -l\"
    \"ps --ppid %d  h | wc -l\"))
;; <<------------- Helpers  ------------->>

(defun abl-mode-starts-with (str1 str2)
  (and (> (length str1) 0)
       (string= str2
		(substring str1 0 (length str2)))))

(defun abl-mode-ends-with (str1 str2)
  (let ((str1-length (length str1)))
    (and (> str1-length 0)
	 (string= (substring str1 (- str1-length (length str2)) str1-length) str2))))

(defun abl-mode-remove-last (lst)
  (if (not (cdr lst))
      '()
    (cons (car lst) (abl-mode-remove-last (cdr lst)))))

(defun abl-mode-index-of (substr str1)
  (cond ((< (length str1) (length substr)) nil)
	((string= substr (substring str1 0 (length substr))) 0)
	(t (let ((rest-return (abl-mode-index-of substr (substring str1 1 (length str1)))))
	     (if (null rest-return) nil
	       (+ rest-return 1))))))

(defun abl-mode-concat-paths (base &rest paths)
  \"join a list of path components into a path\"
  (if (equal paths '())
      base
    (apply 'abl-mode-concat-paths
	   (concat (file-name-as-directory base) (car paths))
	   (cdr paths))))

(defun abl-mode-remove-last-slash (path)
  (if (abl-mode-ends-with path \"/\")
      (substring path 0 (- (length path) 1))
    path))

(defun abl-mode-higher-dir (path)
  \"Return one higher directory of a given path\"
  (assert (abl-mode-starts-with path \"/\"))
  (if (string-equal \"/\" path)
      nil
    (let* ((true-path (abl-mode-remove-last-slash path))
	   (components (split-string true-path \"/\" )))
      (apply 'abl-mode-concat-paths
	     (concat \"/\" (car components))
	     (abl-mode-remove-last (cdr components))))))

(defun abl-mode-last-path-comp (path)
  \"Get the last path components, whether it's a file name or directory\"
  (and (< 0 (length path))
       (car (last (split-string (abl-mode-remove-last-slash path) \"/\")))))


(defun abl-mode-find-base-dir (&optional dir-path)
  (let* ((path (or dir-path (buffer-file-name))))
    (if (and (file-exists-p (abl-mode-concat-paths path \"setup.py\"))
	     (not (file-exists-p (abl-mode-concat-paths path \"__init__.py\"))))
	path
      (let ((higher (abl-mode-higher-dir path)))
	(if (not higher)
	    nil
	  (abl-mode-find-base-dir higher))))))


(defun abl-mode-string-in-buffer (string)
  (save-excursion
    (goto-char (point-min))
    (if (search-forward string nil t)
	t
      nil)))

(defun abl-mode-join-string (string-list joiner)
  (cond ((not (cdr string-list)) (car string-list))
	 (t (concat
	     (car string-list)
	     joiner
	     (abl-mode-join-string (cdr string-list) joiner)))))

(defun abl-mode-starts-uppercase? (strng)
  (let ((y (substring strng 0 1))) (string= y (upcase y))))

(defun chomp (str)
  \"Chomp leading and tailing whitespace from STR.\"
  (while (string-match \"\\\\`\\n+\\\\|^\\\\s-+\\\\|\\\\s-+$\\\\|\\n+\\\\'\"
		       str)
    (setq str (replace-match \"\" t t str)))
  str)

;; ------------------------------------

(defun abl-mode-git-or-svn (base-dir)
  (cond ((locate-dominating-file (abl-mode-concat-paths base-dir) \".git\") \"git\")
	((locate-dominating-file (abl-mode-concat-paths base-dir) \".svn\") \"svn\")
	(t nil)))

(defun abl-mode-set-config (name value)
  (set (intern name) (eval (read value))))

(defun parse-abl-options (file-path)
  (let ((config-lines (with-temp-buffer
			(insert-file-contents file-path)
			(split-string (buffer-string) \"\\n\" t))))
    (loop for config-line in config-lines
	  do (let* ((parts (split-string config-line))
		    (command-part (car parts))
		    (rest-part (abl-mode-join-string (cdr parts) \" \")))
	       (abl-mode-set-config command-part rest-part)))))


(defun abl-mode-local-options (base-dir)
  (let ((file-path (abl-mode-concat-paths base-dir \".abl\")))
    (if (file-exists-p file-path)
	 (parse-abl-options file-path)
      nil)))

(defun abl-mode-get-git-branch-name (base-dir)
  (let* ((command (concat \"cd \" base-dir \" && git branch\"))
	(git-output (shell-command-to-string command)))
    (if (string-equal git-output \"\")
	(progn
	  (message \"Looks like your git repository is empty (the output of git branch was empty). Calling it 'none'.\")
	  \"none\")
      (string-match \"\\\\* \\\\(.*\\\\)\" git-output)
      (substring git-output (match-beginning 1) (match-end 1)))))


(defun abl-mode-branch-name (path)
  (if (string= path \"/\")
      nil
    (let ((vcs (abl-mode-git-or-svn path)))
      (cond ((or (not vcs) (string-equal vcs \"svn\"))
	     (abl-mode-last-path-comp path))
	    ((string-equal vcs \"git\")
	     (abl-mode-get-git-branch-name path))
	    (t nil)))))


(defun abl-mode-get-project-name (path)
  \"Returns the name of the project; higher directory for no vcs or svn,
   directory name for git.\"
  (if (string= path \"/\")
      nil
    (let ((vcs (abl-mode-git-or-svn path)))
      (cond ((or (not vcs) (string-equal vcs \"svn\"))
	     (abl-mode-last-path-comp (abl-mode-higher-dir path)))
	    ((string-equal vcs \"git\")
	     (abl-mode-last-path-comp path))
	    (t nil)))))

(defun abl-mode-get-vem-name (&optional branch project)
  (let ((branch-name (or branch abl-mode-branch))
	(prjct-name (or project abl-mode-project-name)))
    (or
     (cdr (assoc branch-name abl-mode-replacement-vems))
     (concat prjct-name \"_\"
	     (replace-regexp-in-string \"/\" \"-\" branch-name)))))

;;<< ---------------  Shell stuff  ----------------->>

(defun abl-mode-shell-name-for-branch (project-name branch-name)
  (concat abl-mode-branch-shell-prefix project-name \"_\" branch-name))


(defun abl-shell-busy ()
  \"Find out whether the shell has any child processes
running using ps.\"
  (let ((abl-shell-buffer (get-buffer abl-mode-shell-name)))
    (if (not abl-shell-buffer)
	nil
      (let* ((shell-process-id (process-id (get-buffer-process abl-shell-buffer)))
	     (command (format abl-mode-shell-child-cmd shell-process-id))
	     (output (shell-command-to-string command)))
	(/= (string-to-number output) 0)))))


(defun abl-mode-exec-command (command)
  (let* ((new-or-name (abl-mode-ve-name-or-create abl-mode-ve-name))
	 (ve-name (car new-or-name))
	 (create-vem (cdr new-or-name))
	 (commands
	  (cond (create-vem (list (concat \"cd \" abl-mode-branch-base)
				  (format abl-mode-ve-create-command ve-name)
				  (format abl-mode-ve-activate-command ve-name)
				  abl-mode-install-command
				  command))
		((not ve-name) (list (concat \"cd \" abl-mode-branch-base)
					  command))
		(t (list (concat \"cd \" abl-mode-branch-base)
			 (format abl-mode-ve-activate-command ve-name)
			 command))))
	 (shell-name abl-mode-shell-name)
	 (open-shell-buffer (get-buffer shell-name))
	 (open-shell-window (if open-shell-buffer
				(get-buffer-window-list shell-name nil t)
			      nil))
	 (code-window (selected-window)))
    (if open-shell-window
	(select-window (car open-shell-window))
      (if open-shell-buffer
	  (switch-to-buffer open-shell-buffer)
	(shell shell-name)
	(sleep-for 2)))
    (goto-char (point-max))
    (insert (abl-mode-join-string commands \" && \"))
    (comint-send-input)
    (select-window code-window)))


(defun abl-mode-ve-name-or-create (name)
  (if (not abl-mode-check-and-activate-ve)
      (cons nil nil)
    (let ((replacement-vem (cdr (assoc name abl-mode-replacement-vems))))
      (if replacement-vem
	  (cons replacement-vem nil)
	(let ((vem-path (expand-file-name name abl-mode-ve-base-dir)))
	  (if (file-exists-p vem-path)
	      (cons name nil)
	    (let*
		((command-string
		  (format
		   \"No virtualenv %s; y to create it, or name of existing to use instead: \"
		   name))
		 (vem-or-y (read-from-minibuffer command-string))
		 (create-new (or (string-equal vem-or-y \"y\") (string-equal vem-or-y \"Y\"))))
	      (if create-new
		  (cons name create-new)
		(abl-mode-ve-name-or-create vem-or-y)))))))))

;; <<------------  Running the server and tests  -------->>

(defun abl-mode-determine-test-function-name ()
  (save-excursion
    (end-of-line)
    (if (not (re-search-backward \"^ *def test_*\" nil t))
	(error \"Looks like you are not even in a function definiton! Bad girl!\"))
    (let* ((start (re-search-forward \"^ *def *\"))
	   (end (re-search-forward \"test_[^\\(]*\" (line-end-position) t)))
      (if (not end)
	  (error \"Looks like you are not inside a test function. Go to a test function! Now!\")
	(buffer-substring-no-properties start (point))))))


(defun abl-mode-determine-test-class-name ()
  (save-excursion
    (if (not (re-search-backward \"^class *\" nil t))
	(error \"Looks like there is a problem with your python code (functions is indented
but not in a class). Sorry, can't do anything\")
    (let* ((start (re-search-forward \"^class *\"))
	   (end (re-search-forward \"[^\\(:]*\" (line-end-position) t)))
      (if (not end)
	  (error \"Looks like there is a problem with you python code (keyword class not
followed by a proper class name).\")
	(buffer-substring-no-properties start (point)))))))


;;this function assumes that you are already in a test function (see
;;the function above)
(defun abl-mode-test-in-class ()
  (save-excursion
    (end-of-line)
    (let* ((start (re-search-backward \"^ *def *\"))
	   (end (re-search-forward \"[^ ]\")))
      (> (- end start 1) 0))))


(defun abl-mode-get-test-file-path ()
  (let ((buffer-name (buffer-file-name)))
    (if (not (abl-mode-ends-with buffer-name \".py\"))
	(error \"You do not appear to be in a python file. Now open a python file!\"))
    (let ((relative-path (substring
			  buffer-file-name
			  (+ (length abl-mode-branch-base) 1)
			  (- (length buffer-name) 3))))
      (replace-regexp-in-string \"/\" \".\" relative-path))))


(defun abl-mode-get-test-function-path (file-path)
  (let ((function-name (abl-mode-determine-test-function-name)))
    (if (not (abl-mode-test-in-class))
	(concat file-path \":\" function-name)
      (let ((class-name (abl-mode-determine-test-class-name)))
	(concat file-path \":\" class-name \".\" function-name)))))


(defun abl-mode-run-test (test-path &optional branch-name)
  (if (abl-shell-busy)
      (message \"The shell is busy; please end the process before running a test\")
    (let* ((shell-command (format abl-mode-test-command test-path))
	   (real-branch-name (or branch-name abl-mode-branch)))
      (message (format \"Running test(s) %s on branch %s\" test-path real-branch-name))
      (abl-mode-exec-command shell-command)
      (setq abl-mode-last-test-run (cons test-path abl-mode-branch)))))

(defun abl-mode-test-for-code-file ()
  \"Look for a 'tests: ' header in a python code file. This
function is a bit convoluted because I prefer a longish function
to a mind-bending regular expression. Especially in elisp.\"
  (save-excursion
    (goto-char (point-min))
    (let ((tests-list-start nil)
	  (regexp-list abl-mode-code-file-tests-regexps))
      (while (and regexp-list (not tests-list-start))
	(setq tests-list-start (re-search-forward (car regexp-list) nil t))
	(setq regexp-list (cdr regexp-list)))
      (if (not tests-list-start)
	  nil
	(goto-char tests-list-start)
	(chomp (buffer-substring tests-list-start (line-end-position)))))))


(defun abl-mode-get-test-entity ()
  \"Which tests should be run? If this is a test file, depending
on where the cursor is, test whole file, class, or test
method. Otherwise, look for a header with 'tests:' and run
that. In the last case, return whatever follows 'tests: '. Error
if none of these is true.\"
  (let* ((file-path (abl-mode-get-test-file-path))
	 (is-test-file (string-match abl-mode-test-file-regexp
				     (buffer-file-name))))
    (if (not is-test-file)
	(let ((test-file-paths (abl-mode-test-for-code-file)))
	  (if test-file-paths
	      (abl-mode-join-string test-file-paths \" \")
	    (error \"You are not in a test file, and there are no tests in header.\")))
      (if (= (line-number-at-pos) 1)
	  file-path
	(let* ((test-func-pos
		(save-excursion
		  (re-search-backward \"^ *def test*\" nil t)))
	       (test-class-pos
		(save-excursion
		  (re-search-backward \"^class *\" nil t))))
	  (cond
	 ((not (or test-func-pos test-class-pos))
	  (error \"You are neither in a test class nor a test function.\"))
	 ((and test-func-pos
	       (and test-class-pos (< test-class-pos test-func-pos)))
	  (abl-mode-get-test-function-path file-path))
	 (test-class-pos (concat file-path \":\" (abl-mode-determine-test-class-name)))))))))


(defun abl-mode-run-test-at-point ()
  (interactive)
  (let* ((test-path (abl-mode-get-test-entity)))
    (abl-mode-run-test test-path)))

(defun abl-mode-rerun-last-test ()
  (interactive)
  (if (not abl-mode-last-test-run)
      (message \"You haven't run any tests yet.\")
    (abl-mode-run-test (car abl-mode-last-test-run) (cdr abl-mode-last-test-run))))

;the command: \"find . -name *.py -print | etags -\"
(defun abl-mode-create-etags-file ()
  (interactive)
  (let ((tag-file-path (abl-mode-concat-paths abl-mode-branch-base \"TAGS\")))
    (if (or (not (file-exists-p tag-file-path))
	    (if (y-or-n-p \"Tags file alread exists, recreate?\")
		(progn
		  (delete-file tag-file-path)
		  t)))
	(let ((etags-command (format abl-mode-etags-command-base
				     abl-mode-branch-base
				     abl-mode-branch-base)))
	  (shell-command-to-string etags-command)))))


(defun abl-mode-parse-python-path (python-path)
  (let* ((colon-index (string-match \":\" python-path))
	 (file-part (if colon-index
			(substring python-path 0 colon-index)
		      python-path))
	 (file-path (expand-file-name
		     (concat (abl-mode-join-string (split-string file-part \"\\\\.\") \"/\") \".py\")
		     abl-mode-branch-base))
	 (internal-part (if colon-index
			    (substring python-path (+ colon-index 1) (length python-path))
			  nil))
	 (internal-part-dot-index (if internal-part (string-match \"\\\\.\" internal-part) nil)))
    (let ((class-and-func-name
	   (cond (internal-part-dot-index
		  (cons (substring internal-part 0 internal-part-dot-index)
			(substring internal-part (+ internal-part-dot-index 1)
				   (length internal-part))))
		 ((and internal-part (not internal-part-dot-index) (abl-mode-starts-uppercase? internal-part))
		  (cons internal-part nil))
		 (t (cons nil internal-part)))))
      (list file-path (car class-and-func-name) (cdr class-and-func-name)))))


(defun abl-mode-open-python-path-at-point ()
  (interactive)
  (save-excursion
    (re-search-backward \"[^a-zA-Z0-9:_\\.]\" nil t)
    (forward-char)
    (let ((start (point))
	  (end (- (re-search-forward \"[^a-zA-Z0-9:_\\.]\" nil t) 1)))
      (let ((python-path-info (abl-mode-parse-python-path (buffer-substring-no-properties start end))))
	(let ((file-path (car python-path-info))
	      (class-name (cadr python-path-info))
	      (func-name (caddr python-path-info)))
	  (if (not (file-exists-p file-path))
	      (error (concat \"File coud not be found: \" file-path)))
	  (find-file file-path)
	  (goto-char (point-min))
	  (if class-name (search-forward (concat \"class \" class-name)))
	  (if func-name (search-forward (concat \"def \" func-name))))))))


(defun abl-mode-start-python ()
  (interactive)
  (ansi-term
   (expand-file-name \"python\"
		     (abl-mode-concat-paths
		      abl-mode-ve-base-dir
		      abl-mode-ve-name
		      \"bin\"))
   (concat \"Python \" abl-mode-ve-name)))

;; Sample custom command

(defun run-current-branch ()
  (interactive)
  (if (abl-shell-busy)
      (message \"The shell is busy; please end the process before running a test\")
    (progn
      (abl-mode-exec-command \"runit\")
      (message (format \"Started local server for branch %s\" abl-mode-branch)))))


(provide 'abl-mode)


;; <<------------  TODOS -------------->>

;; - import something from one of the open files (or repeat existing import)
;;      - when abl-mode is initialized on a file, find the imports, add to list if new
;;      - add command to insert an import
;; - C-c f looks for definition and not just import
;; - navigating to definitions of methods etc. should not be that difficult
;; - add option to return to code window if test runs, is great success,
;;   and window was swtiched from code window.
;; - maybe: parsing output? listing failed tests?

;;; abl-mode.el ends here
"]) (abc-mode . [(20130607 717) nil "Major mode for editing abc music files" single ";;; Commentary:
;;
;; A major mode for editing abc music files.  Includes some abc2midi
;; features.
;;

;; Written for Emacs version 21.  May or may not work with previous
;; versions.

;; See the Common Customizations section below.  Or run
;; `abc-customize'.

;; This package is stored at https://github.com/mkjunker/abc-mode.

"]) (4clojure . [(20131014 1507) ((json (1 2)) (request (0 2 0))) "Open and evaluate 4clojure.com questions" single ";;; Commentary:

;; To open a specific problem, use `4clojure-open-question':
;; e.g. \"M-x 4clojure-open-question RET 2\" opens question 2.

;; To check your answers, use `4clojure-check-answers':
;; e.g. `M-x 4clojure-check-answers`

;; To open the next question (or the first if you\342\200\231re not in a 4clojure
;; buffer), use `4clojure-next-question'. Similarly,
;; `4clojure-previous-question' opens the previous question.

"]))
